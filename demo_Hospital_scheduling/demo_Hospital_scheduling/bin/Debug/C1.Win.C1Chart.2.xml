<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.Win.C1Chart.2</name>
  </assembly>
  <members>
    <member name="M:C1.Win.C1ChartBase.baseChart.BeginUpdate">
      <summary>
            Starts batch update. After changes chart is not updated immediately.
            EndUpdate() method must be called to restore updating.
            </summary>
    </member>
    <member name="M:C1.Win.C1ChartBase.baseChart.EndUpdate">
      <summary>
            Finishes batch update. The method restores normal chart updating.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.Visible">
      <summary>
            Determines whether the control is visible or hidden.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.BackColor">
      <summary>
            The background color used to display text and graphics in the control.
            </summary>
      <remarks>
            Changing the BackColor also changes the BackColor of the chart’s style object, and visa versa.
            </remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.ForeColor">
      <summary>
            The foreground color used to display text and graphics in the control.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.BackgroundImage">
      <summary>
            The background image used for the control.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.Font">
      <summary>
            The font used to display text in the control.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseAntiAlias">
      <summary>
            Gets or sets a value indicating whether to use anti-aliasing when displaying the chart.
            This property is now obsolete.  Instead, use UseAntiAliasedText and
            UseAntiAliasedGraphics to manage text and graphics antialiasing independently.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseAntiAliasedText">
      <summary>
            Gets or sets a value indicating whether to use anti-aliasing while rendering chart text (only).
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseAntiAliasedGraphics">
      <summary>
            Gets or sets a value indicating whether to use anti-aliasing while rendering chart graphics (only).
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseGrayscale">
      <summary>
            Gets or sets a value indicating whether to render the chart with grayscale instead of color.
            <remarks>
            The use of Grayscale is intended as a preview for output to a black and white device.  It
            does not affect style brush or pen colors internally, only the rendering of the chart to the
            output device.  Using grayscale implies the use of double buffered output.
            </remarks></summary>
    </member>
    <member name="E:C1.Win.C1ChartBase.baseChart.LayoutLabels">
      <summary>
            Fires before rendering labels and allows repositioning labels
            relative to positions of other chart elements or using data mapping methods.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Location">
      <summary>
            Gets or sets the location of the element in chart control client coordinates.
            </summary>
      <remarks>
            The Location property always returns the actual location of the upper,
            left corner of the chart element it describes whether or not the element placement is manual or automatic.
            Modifying this value will change LocationDefault.
            </remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Size">
      <summary>
            Gets or sets the size of the element in chart control client coordinates.
            </summary>
      <remarks>
            The Size property always returns the actual size of the chart element it describes whether
            or not the element placement is manual or automatic. Modifying this value will change SizeDefault.
            </remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.LocationDefault">
      <summary>
            Gets or sets the default location of the element in chart control client coordinates.
            </summary>
      <remarks>
            The LocationDefault property specifies the location of the upper, left corner of the chart element it describes.
            Non-negative values indicate the explicit position in chart client coordinates to place the chart element.
            Negative values will allow auto-positioning.
            </remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.SizeDefault">
      <summary>
            Gets or sets the default size of the element.
            </summary>
      <remarks>
            The SizeDefault property specifies the size of the chart element it describes.
            Non-negative values indicate the explicit width and height in chart client coordinates to place the
            chart element.Negative values will allow auto-positioning.
            </remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Text">
      <summary>
            Gets or sets the element text.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Visible">
      <summary>
            Gets or sets the element visibility.
            </summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.AutoLabelArrangement.MaxIterations">
      <summary>
            Gets or sets the maximum number of iterations.
            </summary>
      <remarks>
            Only for AutoLabelArrangementMethodEnum.FindingOptimum. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.AutoLabelArrangement.Offset">
      <summary>
            Gets or sets the maximum offset distance in pixels from an associated point.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.LightShapeEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the Shape property in the VisualEffectsStyle.LightStyle class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightShapeEnum.Rectangle">
      <summary>
            Light gradient effects progress from one edge of the object to the
            opposite edge.  The Scale property of the LightStyle can be used to
            adjust the length of the gradient cycle within the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightShapeEnum.Ellipse">
      <summary>
            Light gradient effects progress the center of the object to
            the outer edges.  The Shift and Size properties of the LightStyle can
            be used to adjust the center and size of the ellipse.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightShapeEnum.Edge">
      <summary>
            Light effects are skewed near the edge of the object.
            The LightGradient is always elliptical with this shape.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.LightGradientEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the Gradient property in the VisualEffectsStyle.LightStyle class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightGradientEnum.Simple">
      <summary>
            Light gradient effects are linear through the object based on shape.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightGradientEnum.Triangle">
      <summary>
            Light gradient effects progress from color, to light, to color.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightGradientEnum.SigmeBell">
      <summary>
            Light gradient effects progress from color, to light, to color with a
            weighted light distribution.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffects">
      <summary>
            Defines the different visual effects that can be used on the chart
            elements such as scaling, light, and shadow effects.
            </summary>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.GetNumberOfPresets">
      <summary>
            Gets the number of built-in presets.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.LoadPreset(System.String,System.Int32)">
      <summary>
            Loads built-in preset into specified element.
            </summary>
      <param name="elementName">
      </param>
      <param name="nPreset">
      </param>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.LoadFromString(System.String)">
      <summary>
            Loads SmartPainter settings from the specified string.
            </summary>
      <param name="s">String which contains SmartPainter settings</param>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.SaveToString">
      <summary>
            Saves settings of SmartPainter to string,
            </summary>
      <returns>String which contains SmartPainter settings</returns>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.Reset(System.String)">
      <summary>
            Resets custom settings for the specified element.
            </summary>
      <param name="elementName">Element name</param>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffects.Styles">
      <summary>
            Gets the collection of the VisualEffectsStyle.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyleCollection">
      <summary>
            Stores VisualEffects.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle">
      <summary>
            Provides access to the effects parameters.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Name">
      <summary>
            Gets style name.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Enabled">
      <summary>
            Enables effects.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Scalable">
      <summary>
            Gets or sets a value indicating whether the size of elements depends on control size.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ScaleEffect">
      <summary>
            Gets or sets a scale factor which is used to scale elements when Scalable property is true.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.GroupElements">
      <summary>
            Gets or sets a value indicating whether the graphic elements can be grouped when rendering.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Angle">
      <summary>
            Gets or sets the angle which is used during rendering.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Shadow">
      <summary>
            Gets the shadow settings for the style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Light">
      <summary>
            Gets the light settings for the style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Edge">
      <summary>
            Gets the edge settings for the style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Colors">
      <summary>
            Gets color options for the style.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle">
      <summary>
            Represents shadow parameters.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle.Offset">
      <summary>
            Gets or sets the shadow offset.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle.Transparency">
      <summary>
            Gets or sets the shadow transparency.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle.Soft">
      <summary>
            Gets or sets a value indicating whether the shadow has soft shape.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.LightStyle">
      <summary>
            Represents light parameters.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Intensity">
      <summary>
            Gets or sets the light intensity.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Shape">
      <summary>
            Gets or sets the light shape.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Scale">
      <summary>
            Gets or sets the light scale. When scale is less than one the light pattern is
            repeated through the element.  Used only with LightShapeEnum.Rectangle.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Focus">
      <summary>
            Gets or sets the position of light focus.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Shift">
      <summary>
            Gets or sets the light shift.  Used only with LightShapeEnum.Ellipse.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Size">
      <summary>
            Gets or sets the size of light spot.  Used only with LightShapeEnum.Ellipse.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Gradient">
      <summary>
            Gets or sets the type of light gradient.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.EdgeStyle">
      <summary>
            Represents edge parameters.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.EdgeStyle.Width">
      <summary>
            Gets or sets the width of element edge. When Scalable property is true it is measured in relative units, otherwise - in pixels.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.EdgeStyle.Rounding">
      <summary>
            Gets or sets the radius rounding for rectangular elements. When Scalable property is true it is measured in relative units, otherwise - in pixels.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions">
      <summary>
            Represents color options.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions.Brightness">
      <summary>
            Gets or sets the brightness adjustment from -100 to 100.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions.Saturation">
      <summary>
            Gets or sets the saturation adjustment from -100 to 100.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions.HueShift">
      <summary>
            Gets or sets the color hue shift from 0 to 359.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartRegionEnum">
      <summary>
            Use the members of this enumeration as it is returned
            from the ChartRegionFromCoord method of the C1Chart. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.None">
      <summary>
            The coordinates are not located in the C1Chart.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Control">
      <summary>
            The coordinates are within the bounds of the control.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Header">
      <summary>
            The coordinates are located in the Header title.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Footer">
      <summary>
            The coordinates are located in the Header title.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Legend">
      <summary>
            The coordinates are located in the Legend object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.ChartArea">
      <summary>
            The coordinates are located in the ChartArea which is
            outside of the axes but within the bounds of the chart.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.XAxis">
      <summary>
            The coordinates are located in the X-Axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.YAxis">
      <summary>
            The coordinates are located in the Y-Axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Y2Axis">
      <summary>
            The coordinates are located in the Y2-Axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.PlotArea">
      <summary>
            The coordinates are located in the PlotArea which is located within the axes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.ChartLabel">
      <summary>
            The coordinates are located in a ChartLabel object which can be placed anywhere around the chart. 
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.LinePatternEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the Pattern property in the ChartGridStyle and ChartLineStyle classes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.Solid">
      <summary>
            A solid line.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.Dash">
      <summary>
            A dashed line.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.Dot">
      <summary>
            A dotted line.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.DashDot">
      <summary>
            A line with alternating dashes and dots.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.DashDotDot">
      <summary>
            A line with series consisting of a dash followed by two dots.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.None">
      <summary>
            No line is drawn.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DesignerDialogEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="M:C1.Win.C1Chart.C1Chart.ShowProperties" /> and
            <see cref="M:C1.Win.C1Chart.C1Chart.ShowWizard" /> methods in
            the <see cref="T:C1.Win.C1Chart.C1Chart" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DesignerDialogEnum.Default">
      <summary>
            Default dialogs
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DesignerDialogEnum.V1">
      <summary>
            Old dialogs (before 1.0.20042.14060)
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DesignerDialogEnum.V2">
      <summary>
            New dialogs (since 1.0.20042.14060)
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartLineStyle">
      <summary>
            Defines the style for the chart lines.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.Thickness">
      <summary>
            Gets or sets the thickness of the line in pixels.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.Color">
      <summary>
            Gets or sets the color of the line.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.Pattern">
      <summary>
            Gets or sets the pattern of the line.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.LineJoin">
      <summary>
            Gets or sets the joining style of the drawn line segments
            </summary>
      <remarks>
            For further details, see the discussion of the LineJoin property and LineJoin
            enumeration for the System.Drawing.Pen instance.  The default value is appropriate
            for most situations.  Lower MiterLimit values or LineJoin.Round might be appropriate
            for thick lines.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.MiterLimit">
      <summary>
            Gets or sets the miter limit of the joints of the drawn line.
            </summary>
      <remarks>
            For further details, see the discussion of the MiterLimit property for
            the System.Drawing.Pen instance.  The default value is appropriate for most
            situations.   Lower values might be appropriate for thick lines.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.ChartSymbolStyle">
      <summary>
            Defines the style for the chart symbols.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.Size">
      <summary>
            Gets or sets the size of the data point symbol.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.OutlineWidth">
      <summary>
            Gets or sets the outline width of the data point symbol.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.Color">
      <summary>
            Gets or sets the color of the data point symbol.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.OutlineColor">
      <summary>
            Gets or sets the outline color of the data point symbol.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.Shape">
      <summary>
            Gets or sets the shape of the data point symbol.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.C1Chart">
      <summary>
            Represents the class for the C1Chart control.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.Reset">
      <summary>
            Clears the chart of all data and settings.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draws the chart on the specified drawing surface.
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ChartRegionFromCoord(System.Int32,System.Int32)">
      <summary>
            Return the enumerated value indicating the topmost displayed region at the specified coordinates.
            </summary>
      <param name="XCoord">x coordinate</param>
      <param name="YCoord">y coordinate</param>
      <returns>Chart region</returns>
      <remarks>
            Each chart element drawn on the face of the control,
            including the Chart itself, the Header, the Footer,
            the Legend, the ChartArea and the PlotArea form a region
            which is identified by the enumerated value returned by
            this method. The region under the mouse cursor can be
            identified by passing the mouse coordinates to this method.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.Dispose">
      <summary>
            Readies the chart object for garbage collection.
            </summary>
      <remarks>
            The chart should not be referenced after calling the Dispose method.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage(System.Drawing.Size)">
      <summary>
            Obtains an image of the current chart display using the specified size.
            </summary>
      <param name="sz">
            Image size.
            </param>
      <returns>
            Image of the current chart display.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage">
      <summary>
            Obtains an image of the current chart display.
            </summary>
      <returns>
            Image created by an enhanced metafile of the chart.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage(System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>
            Obtains an image of the current chart display using the specified format and size.
            </summary>
      <param name="imgfmt">
            Image format.
            </param>
      <param name="sz">
            Image size.
            </param>
            /// <returns>
            Image of the current chart display.
            </returns></member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage(System.Drawing.Imaging.ImageFormat)">
      <summary>
            Obtains an image of the current chart display using the specified format.
            </summary>
      <param name="imgfmt">
            Image format.
            </param>
      <returns>Image of the current chart display.</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetMetafile(System.Drawing.Size,System.Drawing.Imaging.EmfType)">
      <summary>
            Obtains an metafile of the current chart display using the specified size and type.
            </summary>
      <param name="sz">
            Metafile image size.
            </param>
      <param name="emfType">
            Metafile type.
            </param>
      <returns>
            Metafile of the current chart display.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetMetafile(System.Drawing.Size)">
      <summary>
            Obtains an metafile of the current chart display using the specified size.
            </summary>
      <param name="sz">
            Metafile image size.
            </param>
      <returns>
            Metafile of the current chart display.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetMetafile">
      <summary>
            Obtains an metafile of the current chart display using the specified size.
            </summary>
      <returns>
            Metafile of the current chart display.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartToFile(System.String)">
      <summary>
            Saves the all of the contents of the control to the specified file, including data.
            </summary>
      <param name="Filename">File name</param>
      <remarks>
            This method saves the chart contents to the specified file in XML format.
            If an error occurs during the file creation and writing,
            an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartAndImagesToFile(System.String)">
      <summary>
            Saves the all of the contents of the control to the specified file, including data.
            </summary>
      <param name="Filename">File name</param>
      <remarks>
            This method saves the chart contents to the specified file in XML format.
            If an error occurs during the file creation and writing,
            an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartTemplateToFile(System.String)">
      <summary>
            Saves the all of the contents of the control to the specified file, excluding data.
            </summary>
      <param name="Filename">File name</param>
      <remarks>
            This method saves the chart contents to the specified file in XML format.
            If an error occurs during the file creation and writing,
            an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartTemplateToString">
      <summary>
            Saves the all of the contents of the control to a string, excluding data.
            </summary>
      <remarks>
            This method saves the chart contents to the returned string in XML format.
            If an error occurs during the string creation, an appropriate exception
            is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartTemplateToString(System.Boolean)">
      <summary>
            Saves the all of the contents of the control to a string, excluding data.
            </summary>
      <param name="formatting">Specifies whether the returned string is formatted and
            indented for readability.</param>
      <remarks>
            This method saves the chart contents to the returned string in XML format.
            If an error occurs during the string creation, an appropriate exception
            is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartFromFile(System.String)">
      <summary>
            Reads the chart property and data settings (chart description) from the specified file.
            </summary>
      <param name="Filename">File name</param>
      <remarks>
            This method loads the contents of the specified file in XML format into the chart.
            The file should contain the output of a call to SaveChartToFile.
            If an error occurs during the file open, reading or chart drawing,
            an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartTemplateFromFile(System.String)">
      <summary>
            Reads the chart property and settings (chart description) and images from the specified file.
            </summary>
      <param name="Filename">File name</param>
      <remarks>
            This method loads the contents of the specified file in XML format into the chart.
            The file should contain the output of a call to SaveChartTemplateToFile.
            If chart element images were present at the time the SaveChartTemplateToFile was called,
            the appropriate images are also reset to the saved values.
            If an error occurs during the file open, reading or chart drawing,
            an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartTemplateFromString(System.String)">
      <summary>
            Reads the chart property and settings (chart description) and images from the specified string.
            </summary>
      <param name="str">String containing chart template</param>
      <remarks>
            This method loads the contents of the specified string in XML format into the chart.
            The string should contain the output of a call to SaveChartTemplateToString.
            If chart element images were present at the time the SaveChartTemplateToString was called,
            the appropriate images are also reset to the saved values.
            If an error occurs during reading or chart drawing, an appropriate exception
            is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartAndImagesFromFile(System.String)">
      <summary>
            Reads the chart property and data settings (chart description) and images from the specified file.
            </summary>
      <param name="Filename">File name</param>
      <remarks>
            This method loads the contents of the specified file in XML format into the chart.
            The file should contain the output of a call to SaveChartToFile or SaveChartAndImagesToFile.
            If the latter method was used to create the load string, then any chart element images are also
            reset to the saved values.
            If an error occurs during the file open, reading or chart drawing,
            an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartToString">
      <summary>
            Saves the all of the contents of the control to the specified file, including data.
            </summary>
      <returns>
            The string which contains chart description.
            </returns>
      <remarks>
            This method saves the chart contents to the specified string in XML format.
            If an error occurs, an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartToString(System.Boolean)">
      <summary>
            Save all the chart information, including data to the returned string with optional formatting.
            </summary>
      <param name="formatting">Whether to use formatting in XML output.</param>
      <returns>The string which contains chart description.</returns>
      <remarks>
            This method saves the chart contents to the specified string in XML format.
            If an error occurs, an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartAndImagesToString(System.Boolean)">
      <summary>
            Save all the chart information, including data and images to the returned string with optional formatting.
            </summary>
      <param name="formatting">Whether to use formatting in XML output.</param>
      <returns>The string which contains chart description.</returns>
      <remarks>
            This method saves the chart contents to the specified string in XML format.
            If an error occurs, an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartFromString(System.String)">
      <summary>
            Reads the chart property and data settings (chart description) from the specified string.
            </summary>
      <param name="str">String which contains chart description.</param>
      <remarks>
            This method loads the contents of the specified string in XML format into the chart.
            The string should contain the output of a call to SaveChartToString.
            If an error occurs, an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartAndImagesFromString(System.String)">
      <summary>
            Reads the chart property and data settings (chart description) and images from the specified string.
            </summary>
      <param name="str">String which contains chart description.</param>
      <remarks>
            This method loads the contents of the specified string in XML format into the chart.
            The string should contain the output of a call to SaveChartToString or SaveChartAndImagesToString.
            If the latter method was used to create the load string, then any chart element images are also
            reset to the saved values.
            If an error occurs, an appropriate exception is thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.String,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>
            Saves an image of the chart to the specified file in the specified format of the specified size.
            </summary>
      <param name="Filename">Image file name.</param>
      <param name="ImgFmt">Image format.</param>
      <param name="sz">Image size.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves an image of the chart to the specified file in the specified format.
            </summary>
      <param name="Filename">Image file name.</param>
      <param name="ImgFmt">Image format</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>
            Saves an image of the chart to the specified stream in the specified format of the specified size.
            </summary>
      <param name="stream">Stream for image output.</param>
      <param name="ImgFmt">Image format.</param>
      <param name="sz">Image size</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves an image of the chart to the specified stream in the specified format.
            </summary>
      <param name="stream">Stream for image output.</param>
      <param name="ImgFmt">Image format.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Byte[]@,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>
            Saves an image of the chart in a Byte array in the specified format of the specified size.
            </summary>
      <param name="ByteArray">Byte array for image output.</param>
      <param name="ImgFmt">Image format.</param>
      <param name="sz">Image size.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Byte[]@,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves an image of the chart in a Byte array in the specified format.
            </summary>
      <param name="ByteArray">Byte array for image output.</param>
      <param name="ImgFmt">Image format.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>
            Saves an image of the chart to the clipboard using the specified size and the specified format.
            </summary>
      <param name="imgfmt">Image format.</param>
      <param name="sz">Image size.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves an image of the chart to the clipboard using display size.
            </summary>
      <param name="ImgFmt">Image format.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum,System.Drawing.Rectangle,System.Drawing.Printing.PageSettings)">
      <summary>
            Prints the control using the specified scaling and page settings to the specified rectangle.
            </summary>
      <param name="scaling">Chart scaling</param>
      <param name="r">Rectangle</param>
      <param name="ps">Page settings</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum,System.Drawing.Rectangle,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>
            Prints the control using the specified scaling and page settings to the specified rectangle.
            </summary>
      <param name="scaling">Chart scaling</param>
      <param name="r">Rectangle</param>
      <param name="ps">Page settings</param>
      <param name="bitmap">Print as bitmap</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum,System.Drawing.Rectangle)">
      <summary>
            Prints the control using the specified scaling to the specified rectangle.
            </summary>
      <param name="scaling">Chart scaling</param>
      <param name="r">Rectangle</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum)">
      <summary>
            Prints the control using the specified scaling within the margins of the printer page.
            </summary>
      <param name="scaling">Chart scaling.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart">
      <summary>
            Prints the control using default scaling within the margins of the printer page.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PageSetup">
      <summary>
            Raises the PageSetup dialog to manage the page settings.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintSetup">
      <summary>
            Raises the PrintSetup dialog to manage the printer settings.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowWizard">
      <summary>
            Raises the chart wizard dialog at runtime.
            </summary>
      <returns>DialogResult</returns>
      <remarks>
            The chart wizard displays the chart properties step by step,
            permitting the construction or modification of a chart in a progressive and logical manner.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties">
      <summary>
            Raises the chart properties dialog at runtime.
            </summary>
      <returns>DialogResult</returns>
      <remarks>
            The properties dialog allows modification of the chart properties,
            including data, at runtime. All available properties are displayed on multiple tabs.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(System.Drawing.Rectangle@)">
      <summary>
            Raises the chart properties dialog at runtime.
            </summary>
      <param name="rect">
        <para>Specifies a Rectangle reference that provides and returns the properties dialog location in screen coordinates.</para>
            Specifying an empty rectangle will center the properties dialog relative to the chart parent window.
            </param>
      <returns>DialogResult</returns>
      <remarks>
        <para>The properties dialog allows modification of the chart properties,
            including data, at runtime. All available properties are displayed on multiple tabs.</para>
        <para>The properties dialog will always be displayed with a minimum size.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(C1.Win.C1Chart.PropertyPageFlags)">
      <summary>
            Raises the customized chart properties dialog at runtime.
            </summary>
      <param name="ppf">
            Specifies PropertyPageFlags combinations that limit available properties.
            </param>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(C1.Win.C1Chart.PropertyPageFlags,System.Drawing.Rectangle@)">
      <summary>
            Raises the customized chart properties dialog at runtime.
            </summary>
      <param name="ppf">Specifies PropertyPageFlags combinations that limit available properties.</param>
      <param name="rect">
        <para>Specifies a Rectangle reference that provides and returns the properties dialog location in screen coordinates.</para>
            Specifying an empty rectangle will center the properties dialog relative to the chart parent window.
            </param>
      <remarks>
        <para>The properties dialog allows modification of the chart properties, including data, at runtime.
            All available properties are displayed on multiple tabs.</para>
        <para>The properties dialog will always be displayed with a minimum size.</para>
      </remarks>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowWizard(C1.Win.C1Chart.DesignerDialogEnum)">
      <summary>
            Raises the chart wizard at runtime using specified dialog version.
            </summary>
      <param name="version">Dialog version.</param>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(C1.Win.C1Chart.DesignerDialogEnum)">
      <summary>
            Raises the properties dialog at runtime using specified dialog version.
            </summary>
      <param name="version">Dialog version.</param>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowVisualEffectsEditor">
      <summary>
            Raises the VisualEffects Editor dialog at runtime.
            </summary>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowVisualEffectsEditor(System.Drawing.Rectangle@)">
      <summary>
            Raises the VisualEffects Editor dialog at runtime.
            </summary>
      <param name="rect">
        <para>Specifies a Rectangle reference that provides and returns the VisualEffects Editor location in screen coordinates.</para>
            Specifying an empty rectangle will place the editor on the edge of the chart it is editing.  Note that the editor is fixed in size.
            </param>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GenerateHistogramData(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double[]@)">
      <summary>
            Generates histogram data from an array of raw data and the specified interval
            boundaries.  Count normalization is performed by specifying an appropriate
            NormalizationWidth.
            <para>Although the chart has a Histogram chart type, it is sometimes preferable
            to generate charts similar to histograms, but with slightly different characteristics.
            This method is provided as a convenience for these occasions.</para></summary>
      <param name="RawData">Specifies a double array containing data values.</param>
      <param name="Boundaries">Specifies the interval boundaries.  The boundaries
            array is sorted internally, and duplication boundaries are eliminated.</param>
      <param name="NormalizationWidth">Specifies the interval width to be
            used for normalization.  If less than or equal to zero, normalization is
            not performed.</param>
      <param name="IntervalBounds">A reference to a double array which will receive
            the actual ordered and trimmed boundaries of the intervals making up the histogram.
            This array is generated internally from the input Boundaries array.</param>
      <param name="IntervalCounts">A reference to a double array which will receive
            the count of data points that fall into the interval specified by the
            IntervalBounds array.  The IntervalCounts array will necessarily have one less element
            than the IntervalBounds array.</param>
      <param name="BoundaryIntervals">A reference to a two element double array which will
            receive the count of data points that fall outside the specified Boundaries array.  Element
            zero (0) of the array receives the count of data points with values less than the lowest
            value in the Boundaries array.  Element one (1) of the array receives the count of data points
            with values greater than the highest value in the Boundaries array.</param>
      <returns>
            A boolean indicating success or failure.
            </returns>
      <remarks>
            Each pair of consecutive interval boundary values is used to specify an
            interval.  This results in one less interval than the number of boundary
            points.  For example, boundaries of 1,3,4,5,6 would result in 4 intervals
            of 1-3, 3-4, 4-5, and 5-6.  Note that each interval need not be the same
            width.  When varying widths are specified in the IntervalBounds array, the
            numeric counts are should be normalized by their area.  This means that an interval
            with twice the width of another interval, but with the same number of data
            points falling within it, will report half the returned count.
            </remarks>
      <exception cref="T:System.ArgumentNullException">Thrown when RawData or Boundaries are null.</exception>
      <exception cref="T:System.ArgumentException">Thrown when RawData or Boundaries arrays are too short.</exception>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GenerateHistogramData(System.Double[],System.Double,System.Double,System.Int32,System.Double,System.Double[]@,System.Double[]@,System.Double[]@)">
      <summary>
            Generates histogram data from raw data and a series of interval boundaries
            specified by a starting value, an interval width and the number of intervals.
            </summary>
      <param name="RawData">Specifies a double array containing data values.</param>
      <param name="Start">Specifies the starting boundary of the first interval.</param>
      <param name="IncrementalWidth">Specifies the width of each interval.</param>
      <param name="Count">Specifies the number of consecutive, uniform width intervals.</param>
      <param name="NormalizationWidth">Specifies the interval width to be
            used for normalization.  If less than or equal to zero, normalization is not performed.</param>
      <param name="IntervalBounds">A reference to a double array which will receive
            the actual ordered and trimmed boundaries of the intervals making up the histogram.
            This array is generated internally from the input Boundaries array.</param>
      <param name="IntervalCounts">A reference to a double array which will receive
            the count of data points that fall into the interval specified by the
            IntervalBounds array.  The IntervalCounts array will necessarily have one less element
            than the IntervalBounds array.</param>
      <param name="BoundaryIntervals">A reference to a two element double array which will
            receive the count of data points that fall outside the specified Boundaries array.  Element
            zero (0) of the array receives the count of data points with values less than the lowest
            value in the Boundaries array.  Element one (1) of the array receives the count of data points
            with values greater than the highest value in the Boundaries array.</param>
      <returns>
            A boolean indicating success or failure.
            </returns>
      <remarks>
            Each pair of consecutive interval boundary values is used to specify an
            interval.  This results in one less interval than the number of boundary
            points.  For example, if Start=1, IncrementalWidth=2 and Count=4, then
            intervals bounded by 1,3,5,7,9 are created, resulting in 4 intervals of
            1-3, 3-5, 5-7, and 7-9.
            <para>Since all intervals are of equal width, it is not necessary to perform
            interval count normalization when only a single set of data is used.  However, if
            multiple sets of data are used, and different interval widths are supplied,
            normalization provides a more consistent result.</para></remarks>
      <exception cref="T:System.ArgumentNullException">Thrown when RawData is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the RawData array is too short.</exception>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveLocalizations(System.String)">
      <summary>
            Writes all current localizations to the specified file.
            </summary>
      <param name="LocalizationFile">Specifies the file to which localizations are written.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveLocalizations(System.IO.Stream)">
      <summary>
            Writes all current localizations to the specified stream.
            </summary>
      <param name="stream">Specifies the Stream to which localizations are written.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveLocalizations(System.Byte[]@)">
      <summary>
            Writes all current localizations to the specified byte array.
            </summary>
      <param name="byteArray">Specifies the byte arrary to which localizations are written.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadLocalizations(System.String)">
      <summary>
            Reads all localizations from the specified file and uses them locally at runtime.
            </summary>
      <param name="LocalizationFile">Specifies the file to which localizations are written.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadLocalizations(System.IO.Stream)">
      <summary>
            Reads all localizations from the specified stream and uses them locally at runtime.
            </summary>
      <param name="stream">Specifies the Stream to which localizations are written.</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadLocalizations(System.Byte[])">
      <summary>
            Reads all localizations from the specified byte array and uses them locally at runtime.
            </summary>
      <param name="byteArray">Specifies the byte array to which localizations are written.</param>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.DataSourceChanged">
      <summary>
            Occurs when the DataSource property has changed.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Repaint">
      <summary>
            Determines whether the chart is repainted when its properties change.
            </summary>
      <remarks>
            When the Repaint property is false, chart repaints are minimized as
            chart properties are changed. This is useful when multiple chart
            properties will be changed in an event, and it is desired to reduce
            the flicker associated with repeated repaints.
            Note that it is very important to set Repaint to true when property
            changes have been completed. Failure to do so can result in a chart
             that never repaints.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Style">
      <summary>
            Gets or sets the chart style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Header">
      <summary>
            Gets the control header object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Footer">
      <summary>
            Gets the control footer object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ChartArea">
      <summary>
            Gets the control’s Chart Area Area object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ChartLabels">
      <summary>
            Gets the control ChartLabels object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ChartGroups">
      <summary>
            Gets the control ChartGroups object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Legend">
      <summary>
            Gets the control Legend object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.PrintDialogUsage">
      <summary>
            Gets or sets a value indicating whether the print dialog pops up
            when the PrintChart method is called.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.AssemblyFileVersionString">
      <summary>
            Gets the control’s assembly file version as a string.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.AssemblyVersionString">
      <summary>
            Gets the control’s assembly version as a string.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Interaction">
      <summary>
            Gets the control interaction object.
            </summary>
      <remarks>
            The Interaction object controls the automated interactive
            features of the chart, including mouse driven rotation,
            scaling, translating and zooming.
            </remarks>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.Transform">
      <summary>
            Fires when interactive action is about to occur.
            This event permits additional control over the parameters
            of user interactions. It possible to change axes limits or cancel transformation.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.DrawDataSeries">
      <summary>
            Fires when the data series is about to be drawn.
            This event allows changes to the brush that will be used for data series plotting,
            including the addition of hatching, gradients and textures.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.DrawLegendEntry">
      <summary>
            Fires when legend entry is drawn.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.PaintPlotArea">
      <summary>
            Occurs when plot area is drawing.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.AxisScroll">
      <summary>
            Occurs whenever the scroll position of the axis scrollbar changes.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.DataSource">
      <summary>
            Gets or sets the data source object that is bound to the chart.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ToolTip">
      <summary>
            Gets the chart tooltip object.
            </summary>
      <remarks>
            The ChartTooltip object controls the tooltip options.
            </remarks>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.ShowTooltip">
      <summary>
            Occurs when tooltip is shown.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.HighlightChanged">
      <summary>
            Occurs when highlighted data element has been changed.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.UseAntiAliasedText">
      <summary>
            Gets or sets a value indicating whether to use anti-aliasing while rendering chart text (only).
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.UseAntiAliasedGraphics">
      <summary>
            Gets or sets a value indicating whether to use anti-aliasing while rendering chart graphics (only).
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.UseGrayscale">
      <summary>
            Gets or sets a value indicating whether to render the chart with grayscale instead of color.
            <remarks>
            The use of Grayscale is intended as a preview for output to a black and white device.  It
            does not affect style brush or pen colors internally, only the rendering of the chart to the
            output devices and images.  Using grayscale implies the use of double buffered output.
            </remarks></summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ColorGeneration">
      <summary>
            Gets or sets a value specifying theme based automatic color generation.
            <remarks>
            The default value is ColorGeneration.Custom which specifies the standard color
            generation method used by C1Chart.  The remaining options mimic the color themes
            of Microsoft Office.
            <para>
            A special setting for this property is ColorGeneration.CopyToCustom.  When the
            ColorGeneration property is set to the CopyToCustom value, the current colors are
            copied to the Custom color generation, and the property is automatically set to
            ColorGeneration.Custom for further customization.  Please note that this operation
            is automatically performed whenever the chart data is loaded by string, file or
            by the designer.  Please also note that as color customizations are made to the
            LineStyle and SymbolStyle of each ChartDataSeries, these customizations affect
            both the current state and the Custom state values.
            </para></remarks></summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.VisualEffects">
      <summary>
            Gets the VisualEffects object.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlarmZoneShapeEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the Shape property of an AlarmZone object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle">
      <summary>
            A rectangle specified by the data coordinates of the AlarmZone extents.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlarmZoneShapeEnum.Ellipse">
      <summary>
            An ellipse bounded by the a rectangle specified by the data coordinates of the AlarmZone extents.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon">
      <summary>
            A polygon specified by XY and with limits of a rectangle specified by the data coordinates of the AlarmZone extents.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.PolygonSourceEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the PolygonSource property of a PolygonData object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PolygonSourceEnum.Arrays">
      <summary>
            Polygon data is specified through ChartCoordArray objects.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PolygonSourceEnum.DataSeries">
      <summary>
            Polygon data is specified by the specified data series associated
            the ChartGroup of the parent object.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlarmZone">
      <summary>
            Represents a series of bands or shapes that can be placed behind the
            plotted data, but in front of the chart background.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZone.IsInsideZone(System.Int32,System.Int32)">
      <summary>
            Returns true if the specified client coordinate lies within
            the shape of the AlarmZone.
            <remarks>
            AlarmZones may overlap, with one more AlarmZones on top of others.
            This method returns true as long as the coordinate is within the
            bounds of the AlarmZone, regardless of whether the AlarmZone is
            covered by another at the specified coordinate.
            </remarks></summary>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.Name">
      <summary>
            Gets or sets the name of the AlarmZone.
            </summary>
      <remarks>
            The name can be used for indexing or simple identification.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.BackColor">
      <summary>
            Gets or sets the background color of the AlarmZone.
            </summary>
      <remarks>
            Inherits from PlotArea. An AlarmZone always displays the BackColor when showing the zone.
            If a Pattern is used, the ForeColor is also used to draw the pattern lines.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.ForeColor">
      <summary>
            Gets or sets the foreground color of the AlarmZone.
            </summary>
      <remarks>
            Inherits from PlotArea. An AlarmZone always displays the BackColor when showing the zone.
            If a Pattern is used, the ForeColor is also used to draw the pattern lines.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.PatternVisible">
      <summary>
            Gets or sets whether the specified PatternStyle should
            be used to brush the background of the AlarmZone.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.PatternStyle">
      <summary>
            Gets or sets the pattern style to be used if PatternVisible is true.
            </summary>
      <remarks>
            The PatternStyle is penned in the AlarmZone ForeColor.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.Visible">
      <summary>
            Gets or sets the visibility of the AlarmZone.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.NearExtent">
      <summary>
            Gets or sets the near extent of the AlarmZone in X-axis data coordinates.
            </summary>
      <remarks>
            Typically, the NearExtent is the smaller X value in data coordinates
            that the AlarmZone extends. If the FarExtent and NearExtent are both zero,
            then both are assumed to be the Max and Min values of the X-axis, respectively.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.FarExtent">
      <summary>
            Gets or sets the far extent of the AlarmZone in X-axis data coordinates.
            </summary>
      <remarks>
            Typically, the FarExtent is the larger X value in data coordinates
            that the AlarmZone extends. If the FarExtent and NearExtent are both zero,
            then both are assumed to be the Max and Min values of the X-axis, respectively.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.LowerExtent">
      <summary>
            Gets or sets the lower extent of the AlarmZone in Y-axis data coordinates.
            </summary>
      <remarks>
            Typically, the LowerExtent is the smaller Y value in data coordinates
            that the AlarmZone extends. If the UpperExtent and LowerExtent are both zero,
            then both are assumed to be the Max and Min values of the Y-axis, respectively.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.UpperExtent">
      <summary>
            Gets or sets the upper extent of the AlarmZone in Y-axis data coordinates.
            </summary>
      <remarks>
            Typically, the UpperExtent is the larger Y value in data coordinates
            that the AlarmZone extends. If the UpperExtent and LowerExtent are both zero,
            then both are assumed to be the Max and Min values of the Y-axis, respectively.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.Shape">
      <summary>
            Gets or sets the shape of the AlarmZone.
            </summary>
      <remarks>
            An AlarmZone of rectangle shape is specified by the rectangle bounded by the
            the data coordinates specified by the extents of the AlarmZone.
            An AlarmZone of elliptical shape is specified by the rectangle bounded by the
            the data coordinates specified by the extents of the AlarmZone.
            An AlarmZone of polygon shape is specified by the data specified of the PolygonData
            and bounded by the data coordinates specified by the extents of the AlarmZone.
            Applicable only for Cartesian charts.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.GroupIndex">
      <summary>
            Gets or sets the index of the data group of the AlarmZone.
            </summary>
      <remarks>
            The group index indicates the ChartGroup for which the AlarmZone extents
            specify the data coordinates of the AlarmZone.  If the group index specifies
            a non-existent ChartGroup, the AlarmZone is not drawn.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.MinWidth">
      <summary>
            Gets or sets the AlarmZone minimum pixel width.
            </summary>
      <remarks>
            If the width of the AlarmZone is less than the specified value
            in pixels, the AlarmZone is drawn with the specified width.
            Applicable only for Cartesian charts and rectangular or elliptical
            shaped AlarmZones.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.MinHeight">
      <summary>
            Gets or sets the AlarmZone minimum pixel height.
            </summary>
      <remarks>
            If the height of the AlarmZone is less than the specified value
            in pixels, the AlarmZone is drawn with the specified height.
            Applicable only for Cartesian charts and rectangular or elliptical
            shaped AlarmZones.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.PolygonData">
      <summary>
            Gets the PolygonData object for the AlarmZone.
            </summary>
      <remarks>
            If the AlarmZone is polygon shaped, then this object is used to
            specify the polygon coordinates using arrays or data series specification.
            Applicable only for Cartesian charts and polygon shaped AlarmZones.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.PolygonData">
      <summary>
            Provides data for the polygon shaped objects in Cartesian charts
            and polygon shaped AlarmZones.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartCoordHolder">
      <summary>
            Manages the data for the ChartCoordArray objects.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordHolder.IsHole(System.Double)">
      <summary>
            Returns true whenever the passed value will be interpreted as a data hole.
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.Length">
      <summary>
            Gets the number of data points in the ChartCoordArray.
            </summary>
      <remarks>
            The Length property returns the actual number of data
            points in the array.
            The length is the maximum number of elements in each of the
            ChartCoordArray objects.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.PointData">
      <summary>
            Gets the ChartCoordArray object that manages point data (combined X and Y data).
            </summary>
      <remarks>
            The data managed by the ChartCoordArray object referenced by the PointData
            property is exactly the same data as that manage by the ChartCoordArray objects
            of the X and Y properties.  The property is provided as a convenience when working
            with data obtained as Point or PointF values. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.X">
      <summary>
            Gets the ChartCoordArray object that manages X data.
            </summary>
      <remarks>
            The X property allows manipulation of the series X data alone.
            The X data managed by the ChartCoordArray returned by the X property is the same data
            managed in the PointData property.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.Y">
      <summary>
            Gets the ChartCoordArray object that manages Y data.
            </summary>
      <remarks>
            The Y property allows manipulation of the series Y data alone.
            The Y data managed by the ChartCoordArray returned by the Y property is
            the same data managed in the PointData property.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.Hole">
      <summary>
            Gets the current value of the data hole as specified by the
            parent object.
            </summary>
      <remarks>
            This property can be used to specify a data
            hole with a double datatype.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.PolygonData.PolygonCoords">
      <summary>
            Gets the current PolygonData object.  This property is only intended for use in the property browsers.  It is not useful in code.
            </summary>
      <remarks>
        <para>
            As a convenience, all both X and Y coordinate arrays can be edited at
            the same time in a property browser by editing the PolygonCoords property.
            Editing is performed in the format appropriate for the DataType of each of
            the X and Y arrays.
            </para>
        <para>
            The PolygonCoords property is intended to be used only within property browsers,
            as it is merely a placeholder to allow invocation of the editor.
            The value returned is the object of which it is a part.
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.PolygonData.PolygonSource">
      <summary>
            Gets the or sets whether the source of the polygon data is from a ChartCoordArray
            object or from a specified data series.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.PolygonData.SeriesIndex">
      <summary>
            Gets the or sets the index of the ChartDataSeries from which to obtain data
            defining the polygon.
            </summary>
      <remarks>
            The ChartGroup to which the series belongs is specified by the parent object
            of which the PolygonData object is a part.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.AlarmZonesCollection">
      <summary>
            Stores bands or shapes for plotting.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.Add(C1.Win.C1Chart.AlarmZone)">
      <summary>
            Adds the specified AlarmZone to the collection.
            </summary>
      <param name="azone">
      </param>
      <returns>
            An integer indicating the index of the collection to which the AlarmZone was added.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.Insert(System.Int32,C1.Win.C1Chart.AlarmZone)">
      <summary>
            Inserts the specified AlarmZone at the specified index.
            </summary>
      <param name="index">
      </param>
      <param name="azone">
      </param>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.AddNewZone">
      <summary>
            Creates a new AlarmZone and appends it to the collection.
            </summary>
      <returns>
            A reference to the newly created AlarmZone. 
            </returns>
      <remarks>
            The new AlarmZone is returned.
            A name unique to the collection is given to the added AlarmZone. 
            An AlarmZone object can be set to the return value,
            making it very easy to initialize the newly added AlarmZone.
            For example:
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.InsertNewZone(System.Int32)">
      <summary>
            Creates a new AlarmZone and inserts it at the specified index of the collection. 
            </summary>
      <param name="index">
      </param>
      <returns>
            A reference to the newly created AlarmZone.
            </returns>
      <remarks>
            The new AlarmZone is returned.
            A name unique to the collection is given to the added AlarmZone.
            An AlarmZone object can be set to the return value,
            making it very easy to initialize the newly added AlarmZone.
             For example:
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.AlarmZoneAtCoord(System.Int32,System.Int32)">
      <summary>
            Retrieves a reference to the foremost AlarmZone that lies
            under the specified client coordinates.
            </summary>
      <param name="XCoord">The X client coordinate to test.</param>
      <param name="YCoord">The Y client coordinate to test.</param>
      <returns>
            A reference to the AlarmZone that is foremost at the
            specified client coordinate.
            </returns>
      <remarks>
            AlarmZones can overlap the same space in the plot area.
            If multiple AlarmZones lie under the specified point, this
            method returns a reference to the foremost AlarmZone
            (i.e. - on top).  To obtain a list of all AlarmZones that
            lie under the specified coordinate, enumerate all
            AlarmZones in the collection and test each one using the
            AlarmZone.IsInsideZone method.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZonesCollection.Item(System.Int32)">
      <summary>
            Gets the specified AlarmZone from the collection by numeric index.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZonesCollection.Item(System.String)">
      <summary>
            Gets the specified AlarmZone from the collection by name.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AnnotationMethodEnum">
      <summary>
            Use the members of this enumeration to set the state of the ValueLabels collection in the Axis class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AnnotationMethodEnum.Values">
      <summary>
            The axis will be annotated automatically by the chart.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AnnotationMethodEnum.ValueLabels">
      <summary>
            The axis will be annotated with values specified in the ValueLabelsCollection.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AnnotationMethodEnum.Mixed">
      <summary>
            Both automatic annotations and value labels will be visible.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisIdEnum">
      <summary>
            Use the members of this enumeration to refer to the X, Y, and Y2 axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisIdEnum.X">
      <summary>
            Refers to the X axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisIdEnum.Y">
      <summary>
            Refers to the Y axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisIdEnum.Y2">
      <summary>
            Refers to the Y2 axis.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.TickMarksEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the TickMajor and TickMinor properties in the Axis class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.None">
      <summary>
            No tick marks along axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.Inside">
      <summary>
            Tick marks located inside chart area on axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.Outside">
      <summary>
            Tick marks located outside chart area on axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.Cross">
      <summary>
            Tick marks cross over axis.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.TickLabelsEnum">
      <summary>
            Use the members of this enumeration to set the location of the axis annotations.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.None">
      <summary>
            No annotations along the axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.High">
      <summary>
            Annotations are drawn near the maximum value of the perpendicular axis, and inside the
            plot area.  For X axis annotations, if data is not available for Group0 and is available
            for Group1, the Y2 axis determines the location, otherwise the Y axis is used.
            Annotations which overlap the crossing axis are eliminated.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.Low">
      <summary>
            Annotations are drawn near the minimum value of the perpendicular axis, and inside the
            plot area.  For X axis annotations, if data is not available for Group0 and is available
            for Group1, the Y2 axis determines the location, otherwise the Y axis is used.
            Annotations which overlap the crossing axis are eliminated.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.NextToAxis">
      <summary>
            Annotations are drawn next to the axis.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.FormatEnum">
      <summary>
            Use the members of this enumeration to set the value of the AnnoFormat property in the Axis class.
            </summary>
      <remarks>
            See .Net date and time format strings and standard numeric format strings for more information.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericManual">
      <summary>
            Used in conjunction with the Axis AnnoFormatString property
            to specify a .Net custom numeric format.
            (See custom numeric format strings in the .Net documentation).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericCurrency">
      <summary>
            A currency amount format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericGeneral">
      <summary>
            A general number format. Formatted into the most compact decimal
            form using fixed or scientific notation.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericExponential">
      <summary>
            A scientific or exponential format in the form "-d.ddd…E+ddd" or "-d.ddd…e+ddd".		 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericPercentage">
      <summary>
            A percentage amount format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericRoundtrip">
      <summary>
            A format which guarantees that a numeric value after being
            converted will be returned as the same numeric value.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericHexadecimal">
      <summary>
            A hexadecimal format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateManual">
      <summary>
            Used in conjunction with the Axis AnnoFormatString property
            to specify a .Net custom date/datetime format.
            (See custom date and time format strings in the .Net documentation).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateShort">
      <summary>
            A short date format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateLong">
      <summary>
            A long date format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateFullShortTime">
      <summary>
            A long date and short time format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateFull">
      <summary>
            A full date format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateGeneralShortTime">
      <summary>
            A general date format with short time format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateGeneral">
      <summary>
            A general date format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateMonth">
      <summary>
            A month format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateRFC1123">
      <summary>
            A date format based on the IETF RFC 1123 specification.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateSortable">
      <summary>
            A sortable date format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateShortTime">
      <summary>
            A short time format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateLongTime">
      <summary>
            A long time format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateUniversalSortable">
      <summary>
            A universally sortable date format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateUniversal">
      <summary>
            A universal date format.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateYear">
      <summary>
            A year format.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGridStyle">
      <summary>
            Contains all properties that control the appearance for the gridlines in the chart.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Visible">
      <summary>
            Gets or sets the gridline visibility.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Spacing">
      <summary>
            Gets or sets gridline spacing in data coordinate units.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.AutoSpace">
      <summary>
            Gets or sets automatic gridline spacing calculation.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Color">
      <summary>
            Gets or sets the color of the line.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Pattern">
      <summary>
            Gets or sets the pattern of the line.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ValueLabelAppearanceEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the Appearance property in the ValueLabel class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.Label">
      <summary>
            Only text label.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.TriangleMarker">
      <summary>
            Label with triangle marker.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.ArrowMarker">
      <summary>
            Label with arrow marker.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.CustomMarker">
      <summary>
            Label with custom marker. Marker must be painted in DrawMarker event.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ValueLabel">
      <summary>
            Defines the type of chart label's annotation used for displaying text defined
            at a specific axis coordinate.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.ValueLabel.DrawMarker">
      <summary>
            Fires when value label marker is drawn.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.ValueLabel.ValueChanged">
      <summary>
            Fires when position of ValueLabel was changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.ValueLabel.ValueChanging">
      <summary>
            Fires when the position of a ValueLabel is changing due to dragging the marker.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Appearance">
      <summary>
            Gets or sets the appearance of ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MarkerSize">
      <summary>
            Gets or sets the marker size of ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Moveable">
      <summary>
            Gets or sets a value indicating whether a ValueLabel can be dragged by user.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.GridLine">
      <summary>
            Gets or sets a value indicating whether a grid line is drawn at the ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Rectangle">
      <summary>
            Get the rectangle occupied by the text of ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MarkerRectangle">
      <summary>
            Get the marker rectangle of ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.BackColor">
      <summary>
            Get or sets the background color of ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Color">
      <summary>
            Get or sets the color of ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Text">
      <summary>
            Gets or sets the displayed text value for the ValueLabel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.NumericValue">
      <summary>
            Gets or sets the axis value to be replaced by the ValueLabel
            by specifying a numeric value that can be implicitly converted to double.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.DateTimeValue">
      <summary>
            Gets or sets the axis value to be replaced by the ValueLabel using a DateTime value.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MovingNumericValue">
      <summary>
            Gets the new ValueLabel Numeric value of a moving ValueLabel during a drag operation.
            <remarks>
            This value differs from the NumericValue property only while the ValueLabel is being dragged by the
            mouse making it most useful in the ValueLabel.ValueChanging event.
            </remarks></summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MovingDateTimeValue">
      <summary>
            Gets the new ValueLabel DateTimeValue of a moving ValueLabel during a drag operation.
            <remarks>
            This value differs from the DateTimeValue property only while the ValueLabel is being dragged by
            the mouse making it is most useful in the ValueLabel.ValueChanging event.
            </remarks></summary>
    </member>
    <member name="T:C1.Win.C1Chart.ValueLabelsCollection">
      <summary>
            Represents a collection of ValueLabels objects used to define the appearance
            of the ValueLabels for the X, Y, and Y2 objects of the ChartArea.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ValueLabelsCollection.AddNewLabel">
      <summary>
            Adds a new empty label.
            </summary>
      <returns>
            The return value is the added ValueLabel for a successful addition.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.ValueLabelsCollection.Add(C1.Win.C1Chart.ValueLabel)">
      <summary>
            Adds specified label.
            </summary>
      <param name="label">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Chart.ValueLabelsCollection.Add(System.Object,System.String)">
      <summary>
            Adds new label and accepts initialization parameters.
            </summary>
      <param name="val">
            The val parameter specifies the value of the axis to be replaced.
            </param>
      <param name="text">
            The text parameter specifies the string that will replace the axis value annotation.
            </param>
      <returns>
            The index of new label.
            </returns>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Count">
      <summary>
            Gets the item count of the collection.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.Int32)">
      <summary>
            Gets the specified label from the collection by numeric index.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.Double)">
      <summary>
            Gets the specified label from the collection with the matching numeric value.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.DateTime)">
      <summary>
            Gets the specified value label with the matching DateTime value.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.String)">
      <summary>
            Gets the specified value label with the matching text.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxesCollection">
      <summary>
            Represents a collection of Axes objects.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxesCollection.Item(System.Int32)">
      <summary>
            Gets the specified Axis from the collection by numeric index. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxesCollection.Item(System.String)">
      <summary>
            Gets the specified Axis from the collection by name.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ScrollBarAppearanceEnum">
      <summary>
            The ScrollBarAppearanceEnum enumeration is used to select the style and appearance of axis scrollbars.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ScrollBarAppearanceEnum.Normal">
      <summary>
            A standard or normal system styled scrollbar is used.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ScrollBarAppearanceEnum.Flat">
      <summary>
            A flat styled scrollbar, with no 3D effects is used.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ScrollBarAppearanceEnum.XP">
      <summary>
            A styled scrollbar consistent with the current Windows theme.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisScrollEventArgs">
      <summary>
            Provides data for AxisScrollEvent which fires whenever the built in axis scrollbar changes value.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.OldValue">
      <summary>
            Gets the value of the axis scrollbar before the event.  The axis
            scrollbar value indicates the fraction between the minimum and maximum.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.AxisId">
      <summary>
            Gets a value identifying the axis that is scrolled.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.ScrollOrientation">
      <summary>
            Gets a value indicating the orientation of the axis scrollbar.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.ScrollEventType">
      <summary>
            Gets a value indicating the type of scroll event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.NewValue">
      <summary>
            Gets or sets the value of the axis scrollbar as it will be after event completion.
            The axis scrollbar value indicates the fraction between the minimum and maximum.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisScrollBar">
      <summary>
            Summary description for ScrollBar.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.AxisScrollBar.AxisScroll">
      <summary>
            Fires whenever the scroll position of the axis scrollbar changes.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Anchored">
      <summary>
            Gets or sets whether the scrollbar position remains fixed on the PlotArea boundary.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Buttons">
      <summary>
            Gets or sets buttons of the scroll bar.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Size">
      <summary>
            Gets or sets the size of the scroll bar.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Appearance">
      <summary>
            Gets or sets the appearance of the scroll bar.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Value">
      <summary>
            Gets or sets a value that represents the current relative position
            of the scroll box on the scroll bar.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Scale">
      <summary>
            Gets or sets the scale of the scroll bar.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Step">
      <summary>
            Gets or sets the step of the scroll bar position changing.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Min">
      <summary>
            Gets or sets the minimum value of the scroll bar position.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Max">
      <summary>
            Gets or sets the maximum value of the scroll bar position.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenu">
      <summary>
            Gets or sets the custom context menu that will be shown when user clicks on scale button.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItems">
      <summary>
            Gets the collection of scale menu items.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Alignment">
      <summary>
            Gets or sets the alignment of scroll bar relative to the plot area.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Visible">
      <summary>
            Gets or sets the scroll bar visibility.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScrollKeys">
      <summary>
            Gets or sets the keys that scroll bar responds to.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem">
      <summary>
            The AxisScrollBar.ScaleMenuItem describes the ScaleMenuItem of the AxisScrollBar.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem.Scale">
      <summary>
            Gets or sets the scale that corresponds to the menu item.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem.Text">
      <summary>
            Gets or sets the text of menu item.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem.Value">
      <summary>
            Gets or sets the value that corresponds to the menu item.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Chart2DLayoutEnum">
      <summary>
            Use the members of this enumeration to set the value of the Layout property in the ChartData class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DLayoutEnum.ArrayLayout">
      <summary>
            Array data layout.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DLayoutEnum.GeneralLayout">
      <summary>
            General data layout.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.FitTypeEnum">
      <summary>
            Use the members of this enumeration to set the value of the
            FitType property in the ChartDataSeries class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FitTypeEnum.Line">
      <summary>
            Straight lines connect data points.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FitTypeEnum.Spline">
      <summary>
            Line passes smoothly through each data point; there are no 
            sharp corners and no abrupt changes in the tightness of the curve.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FitTypeEnum.Beziers">
      <summary>
            Line does not pass through all data points, but the points act as magnets,
            pulling the curve in certain directions and influencing the way the curve bends.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.SeriesDisplayEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the Display property in the ChartDataSeries class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.Show">
      <summary>
            Displays series.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.Hide">
      <summary>
            Includes series in the data set, but is not drawn.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.Exclude">
      <summary>
            Excludes series from the data set.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.ExcludeHoles">
      <summary>
            Displays series, but disregards data holes.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.StatisticalData">
      <summary>
            This class provides statistics logic and reports the calculated
            values through its properties.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Confidence">
      <summary>
            Gets an object reporting the confidence interval for the associated data.
            </summary>
      <remarks>
            The returned ConfidenceInterval object allows specification of
            the desired probability level of the confidence interval as well as
            reporting the interval.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.DataStatus">
      <summary>
            Gets a string indicating whether data is available for statistical calculations.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.N">
      <summary>
            Gets the number of data elements used to compute the statistics.
            </summary>
      <remarks>
            Data holes are excluded from the calculations, so this property may be
            less than the actual number of data elements.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.PropertyGridEnabled">
      <summary>
            Gets or sets whether statistic calculations are reported in property grids and by reflection.
            </summary>
      <remarks>
            By default, this property is always false, and is not persisted.  It is provided
            to restrict unnecessary and unwanted time consuming calculations when browsing data
            properties.  This property has no effect on coded property access.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Mean">
      <summary>
            Gets the mean value of the associated data.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Median">
      <summary>
            Gets the median value of the associated data.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Rsq">
      <summary>
            Gets the R-Squared statistic of the associated XY data.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.StdDev">
      <summary>
            Gets the standard deviation of the associated data.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Variance">
      <summary>
            Gets the Variance of the associated data.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.StatisticalData.ConfidenceInterval">
      <summary>
            This class reports the confidence interval statistic for the
            specified confidence level.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.ConfidenceInterval.Probability">
      <summary>
            Gets or sets the desired percent confidence level used
            to calculate the confidence interval for the associated data.
            </summary>
      <remarks>
            The Probability property is intentionally not persisted.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.ConfidenceInterval.Interval">
      <summary>
            Gets the confidence interval for the associated data for the
            specified confidence level of probability.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataArray">
      <summary>
            Container object for data arrays.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.IsHole(System.Object)">
      <summary>
            Determines if the specified value is interpreted as a data hole.
            </summary>
      <param name="value">
      </param>
      <returns>
            A boolean value indicating whether the specified value is interpreted as a data hole.
            </returns>
      <remarks>
            The value is automatically converted to the internal data type based upon
            the data type of the value specified. The value is then compared to the stored
            data hole. Note that invalid floating point data values such as NaN are treated as hole values.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.CopyDataIn(System.Object)">
      <summary>
            Copies data into the ChartDataArray, replacing all existing data.
            </summary>
      <param name="o">
      </param>
      <returns>
            A Boolean value indicating whether the data was appropriately copied into the ChartDataArray.
            </returns>
      <remarks>
        <para>
            Although the passed DataArray is an object, the underlying data type must be
            an array of type Single, Double, Integer, Int16, Int64, Decimal or DateTime (VB)
            or float, double, int, Int16, Int64, decimal or DateTime (C#).
            An array of objects is not accepted.  When PointData is managed by the ChartDataArray,
            an array PointF objects may also be passed.
            </para>
        <para>
            Note that all values are stored as a Double(VB) or double(C#) data type internally.
            Data conversions are performed automatically and as appropriate for the inputted data type.
            For example, setting a data element to a DateTime value of January 1, 2002 will be stored
            internally as an Ole date, then converted to a Double/double with a result of 37257.
            </para>
        <para>
            Additionally, the length of the copied array defines the length of the ChartDataArray,
            and the Length property will report the new value.
            </para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.CopyDataOut">
      <summary>
            Copies data out of the ChartDataArray using the default data type.
            </summary>
      <returns>
            An object containing an array of the default type, appropriately converted
            from the internal Double(VB) or double(C#) values.
            </returns>
      <remarks>
        <para>
            Although the returned array is an object, the underlying data type will be an
            array of type Single, Double, Integer, Int16, Int64, Decimal or DateTime (VB)
            or float, double, int, Int16, Int64, decimal or DateTime (C#).
            When PointData is managed by the ChartDataArray, an array PointF objects may also be returned.
            </para>
            In Visual Basic, it is not necessary to explicitly cast the returned value.
            The strong typing of C# however, requires an explicit cast.
            <para>
            Note that all values are stored as a Double(VB) or double(C#) data type internally.
            Data conversions are performed automatically and as appropriate for the default data type.
            </para></remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.CopyDataOut(System.Type)">
      <summary>
            Copies data out of the ChartDataArray using the specified data type.
            </summary>
      <param name="t">type</param>
      <returns>
            An object containing an array of the specified type, appropriately converted
            from the internal Double(VB) or double(C#) values.
            </returns>
      <remarks>
        <para>
            Although the returned array is an object, the underlying data type will be an
            array of type Single, Double, Integer, Int16, Int64, Decimal or DateTime (VB)
            or float, double, int, Int16, Int64, decimal or DateTime (C#).
            When PointData is managed by the ChartDataArray, an array PointF objects may also be returned.
            </para>
            In Visual Basic, it is not necessary to explicitly cast the returned value.
            The strong typing of C# however, requires an explicit cast.
            <para>
            Note that all values are stored as a Double(VB) or double(C#) data type internally.
            Data conversions are performed automatically and as appropriate for the specified data type.
            </para></remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Add(System.Object)">
      <summary>
            Adds a new value to the end of the ChartArrayArray.
            </summary>
      <param name="value">
            New data value.
            </param>
      <returns>
            An integer indicating the index of the new value in the ChartDataArray.
            The new index is always the Length of the ChartDataArray prior to adding the new value.
            </returns>
      <remarks>
            The Add method extends the length of the ChartDataArray by one,
            then adds the new value to the newly created element.
            The value is automatically converted to the internal storage data type.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Clear">
      <summary>
            Removes all values from the ChartDataArray.
            </summary>
      <remarks>
            All elements of the ChartDataArray are removed and the Length is set to 0.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Contains(System.Object)">
      <summary>
            Determines whether a value is in the ChartDataArray.
            </summary>
      <param name="value">
      </param>
      <returns>
            A boolean indicating whether the specified value can be found
            in one of the elements of the ChartDataArray.
            </returns>
      <remarks>
            The value is automatically converted to the internal data type based upon
            the data type of the value specified. The value and the elements of
            the ChartDataArray are then compared using the converted result.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.IndexOf(System.Object)">
      <summary>
            Gets the current index of the specified value in the ChartDataArray.
            </summary>
      <param name="value">
      </param>
      <returns>
            Returns an integer indicating the element of the specified value
            within the ChartDataArray.
            If the value is not found the return value is –1.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Insert(System.Int32,System.Object)">
      <summary>
            Inserts a new value at the specified index of the ChartDataArray.
            </summary>
      <param name="index">
            Index of new value.
            </param>
      <param name="value">
            New data value.
            </param>
      <remarks>
            The value is inserted at the position specified and the length
            of the ChartDataArray is increased by 1.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Remove(System.Object)">
      <summary>
            Removes the first occurance of the specified value from the ChartDataArray.
            </summary>
      <param name="value">
            Value to remove.
            </param>
      <remarks>
            The value is automatically converted to the internal data type based upon
            the data type of the value specified. The value and the elements of
            the ChartDataArray are then compared using the converted result.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index from the ChartDataArray.
            </summary>
      <param name="index">
            Index of data value to remove
            </param>
      <remarks>
            The element of the ChartDataArray is removed, and the length
            of the ChartDataArray is decreased by 1.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.DataType">
      <summary>
            Gets or sets the default data type of the data.
            </summary>
      <remarks>
            Specifies the default data type that is used with the CopyDataOut method.
            If the default DataType property is not explicitly set, then the reported type
            is that of the last entered data through either the CopyDataIn method of the Item property.
            Acceptable input data types include Single, Double, Integer, Int16, Int64, Decimal and DateTime (VB)
            and float, double, int, Int16, Int64, decimal and DateTime (C#).
            When PointData is managed by the ChartDataArray, PointF objects may also be used.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Length">
      <summary>
            Gets or sets the length of the data array.
            </summary>
      <remarks>
            When extending the existing length of the array, the newly created
            elements are filled with data hole values.  When reducing the length
            of the array, truncated elements are thrown away.  Note that it may be
            necessary to increase the length of an array before setting its values
            with the Item property.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Hole">
      <summary>
            Returns an Object with the ChartData.Hole value converted to the data type specified
            by the ChartDataArray.DataType property.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Statistics">
      <summary>
            Gets the object that provides statistics for the data of this ChartDataArray.
            </summary>
      <remarks>
            The return StatisticalData object contains a number of readonly properties
            that report Mean, Median, Standard Deviation, Variance and Confidence intervals
            for the data.  PointData ChartDataArrays also include the R-Squared statistic
            for X-Y data.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Item(System.Int32)">
      <summary>
            Gets or sets the value of the data element by index.
            </summary>
      <remarks>
        <para>This property can be used to access a specific data entry by numerical index.
            In Visual Basic, no casting is required. In C#, it is necessary to cast the return
            value to the appropriate type.  Note that all values are stored as a Double(VB) or
            double(C#) data type internally.  Data conversions are performed automatically and
            as appropriate for the inputted data type.  For example, setting a data element to
            a DateTime value of January 1, 2002 will be stored internally as an Ole date,
            then converted to a Double/double with a result of 37257.
            </para>
        <para>
            Acceptable input data types include Single, Double, Integer, Int16, Int64, Decimal
            and DateTime (VB) and float, double, int, Int16, Int64, decimal and DateTime (C#).
            When PointData is managed by the ChartDataArray, PointF objects may also be used.
            </para>
        <para>
            Note that the index must be between 0 and the Length of the array inclusive.
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.DataField">
      <summary>
            Gets or sets the data field name that is bound to the ChartDataArray.
            </summary>
      <remarks>
            The data field name must exist in the DataSource.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.IntervalMethodEnum">
      <summary>
            Use the members of this enumeration to set the value of the
            IntervalCreationMethod property in the ChartHistogram class. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.IntervalMethodEnum.Automatic">
      <summary>
            Interval boundaries and width are calculated based on the data statistics.
            The number of intervals is an optional input.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.IntervalMethodEnum.SemiAutomatic">
      <summary>
            Starting interval, interval width, and the number of intervals specify interval boundaries. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.IntervalMethodEnum.XDataBoundaries">
      <summary>
            The X data inputs will be used for interval boundaries.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DisplayTypeEnum">
      <summary>
            Use the members of this enumeration to set the value of the DisplayType
            property in the ChartHistogram class. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DisplayTypeEnum.Histogram">
      <summary>
            Displays the intervals and counts as a histogram.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DisplayTypeEnum.FrequencyGraph">
      <summary>
            Displays the intervals and counts as a frequency graph.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DisplayTypeEnum.SteppedFrequencyGraph">
      <summary>
            Displays the intervals and counts as a stepped frequency graph.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartHistogram">
      <summary>
            The ChartHistogram class contains properties specific to Histogram charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.DisplayType">
      <summary>
            Gets or sets the method used to display the frequency data.
            </summary>
      <remarks>
            Frequency data can be displayed in a different manner on a per series
            basis, making it possible to mix display types in a single chart group.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalCreationMethod">
      <summary>
            Gets or sets the method used to specify the histogram intervals.
            </summary>
      <remarks>
            Interval boundaries can be established in a variety of ways.
            <para>When the Automatic method is used, the chart calculates
            the upper and lower limits of the intervals using the maximum and minimum
            data values, and restricting the intervals to lie within 3 standard deviations
            of the data mean.  The number of intervals is optional.  Interval boundaries
            are calculated uniformly.</para><para>When the SemiAutomatic method is used, the upper and lower limits
            of the intervals are specified together with the number of intervals.
            Interval boundaries are calculated uniformly.</para><para>When the XDataBoundaries method is used, the X values of the data
            data series are used to explicitly set each interval boundary.  The X values
            are sorted and duplicate values are eliminated.  Each ascending value of the
            result is used determine the next interval boundary.  Thus, the first and second
            resulting X values define the first interval and each successive X value specifies
            the end of the next interval.  Note that specification of N intervals requires
            N+1 unique X values.
            </para></remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalNumber">
      <summary>
            Gets or sets the number of intervals in the histogram.
            </summary>
      <remarks>
            The IntervalNumber property applies only to histograms created with
            Automatic and SemiAutomatic methods.  When the XDataBoundaries method
            is used, the number of intervals is defined as 1 less than the number
            of unique X values specified.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalStart">
      <summary>
            Gets or sets the numeric value of the beginning of the first interval.
            </summary>
      <remarks>Applies only to the SemiAutomatic creation method.</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalWidth">
      <summary>
            Gets or sets the numeric value of the width of the each interval.
            </summary>
      <remarks>Applies only to the SemiAutomatic creation method.</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.BelowIntervalCount">
      <summary>
            Gets the numeric count of values less than the first interval.
            </summary>
      <remarks>
            Sometimes a data distribution will contain values that do not fall into any
            of the specified intervals of a histogram.  The number of values numerically
            less than the starting value of the first interval are returned by the
            BelowIntervalCount property.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalBounds">
      <summary>
            Gets the boundary values of each interval used for the histogram.
            </summary>
      <remarks>
            The IntervalBounds property returns a double array containing the ascending values
            used for the boundaries of the histogram intervals, regardless of the
            IntervalCreationMethod used to generate the histogram.  The number of elements in
            the array is necessarily one more than the number of intervals.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalCounts">
      <summary>
            Gets the numeric count of values in each interval.
            </summary>
      <remarks>
            The IntervalCounts property returns a double array containing the count of values
            that fall within the specified intervals.  The number of elements in the
            array is necessarily one less than the number of interval boundaries.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.AboveIntervalCount">
      <summary>
            Gets the numeric count of values greater than the last interval.
            </summary>
      <remarks>
            Sometimes a data distribution will contain values that do not fall into any
            of the specified intervals of a histogram.  The number of values numerically
            greater than the ending value of the last interval are returned by the
            AfterIntervalCount property.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.PostDrawSeriesEventArgs">
      <summary>
            Provides data for the PostDrawSeries event of a ChartDataSeries class.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.PostDrawSeriesEventArgs.Graphics">
      <summary>
            Gets the Graphics object used to paint.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.PostDrawSeriesEventArgs.Series">
      <summary>
            Gets the ChartDataSeries object which fires the event.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DrawSeriesEventArgs">
      <summary>
            Provides data for the DrawSeries event of a ChartDataSeries class.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DrawSeriesEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the normal data series drawing should be canceled.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DrawSeriesEventHandler">
      <summary>
            Represents the method that will handle the DrawSeries event of a ChartDataSeries class.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.PostDrawSeriesEventHandler">
      <summary>
            Represents the method that will handle the PostDrawSeries event of a ChartDataSeries class.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.PlotFilterMethodEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.ChartDataSeries.PlotFilterMethod" /> property
            in the <see cref="T:C1.Win.C1Chart.ChartDataSeries" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotFilterMethodEnum.None">
      <summary>
            Data values are not filtered.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotFilterMethodEnum.Default">
      <summary>
            Default data filtering algorithm optimizes plotting of large data arrays.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotFilterMethodEnum.Alternative">
      <summary>
            Alternative data filtering algorithm optimizes plotting of large data arrays which
            are ordered along one direction(x or y).
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataSeries">
      <summary>
            The ChartDataSeries class contains the data to be charted,
            as well as the properties and style object used to describe the appearance of the charted data.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeries.IsHole(System.Double)">
      <summary>
            Returns true whenever the passed value will be interpreted as a data hole.
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
      <remarks>
            This method returns the identical value of the same method of the parent ChartData object.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeries.Clone">
      <summary>
            Creates a new series that is a copy of the current series without data.
            </summary>
      <returns>
            An object containing the new ChartDataSeries.
            </returns>
      <remarks>
            The new ChartDataSeries object is not automatically added to the chart.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.DataLabel">
      <summary>
            Gets the data label object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.PlotFilter">
      <summary>
            Gets or sets the plot filter value which optimizes plotting large data arrays.
            The plot filter value represents the minimal distance from the previous data point
            in pixels. If distance is less than PlotFilter the point is not plotted.
            Only for XY-plot.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.PlotFilterMethod">
      <summary>
            Gets or sets the plot filter method. This property specifies method of
            optimization when plotting large data arrays. 
            Only for XY-plot.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.FillStyle">
      <summary>
            Gets or sets the fill style of the data series.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.TooltipText">
      <summary>
            Gets or sets the tooltip text.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartDataSeries" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.TooltipTextLegend">
      <summary>
            Gets or sets the legend tooltip text.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartDataSeries" />
    </member>
    <member name="E:C1.Win.C1Chart.ChartDataSeries.Draw">
      <summary>
            Occurs when series is drawing.
            </summary>
    </member>
    <member name="E:C1.Win.C1Chart.ChartDataSeries.PostDraw">
      <summary>
            Occurs after the series was drawn.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Group">
      <summary>
            Gets the chart group.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Label">
      <summary>
            Gets or sets the series label.
            </summary>
      <remarks>
            The series label is displayed in the legend element of the chart,
            along with appropriate line and symbol styles used to display the series data. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Offset">
      <summary>
            Gets or sets the series offset for appropriate charts.
            </summary>
      <remarks>
            The meaning, if any, of the series offset can change from chart type to chart type. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Length">
      <summary>
            Gets the number of data points in the series.
            </summary>
      <remarks>
            The Length property returns the actual number of data points in the series.
            The length is the maximum number of elements in each of the relevant
            ChartDataArray objects in the series.  ChartDataArray objects of the series
            are considered relevant only if the object is used to display the current ChartType. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.SeriesData">
      <summary>
            Gets the current ChartDataSeries object.  This property is only intended for use in the property browsers.  It is not useful in code.
            </summary>
      <remarks>
        <para>
            As a convenience, all relevant ChartDataSeries data arrays can be edited at
            the same time in a property browser by editing the SeriesData property.
            Data arrays are considered relevant only if the array is used to display the current ChartType.
            </para>
        <para>
            For example, editing SeriesData for an XYPlot would invoke the data editor
            containing the X and Y data arrays.  Editing SeriesData for a Candle chart
            would invoke the data editor containing the X, Y, Y1, Y2 and Y3 data arrays.
            </para>
        <para>
            The SeriesData property is intended to be used only within property browsers,
            as it is merely a placeholder to allow invocation of the editor.
            The value returned is the object of which it is a part.
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.PointData">
      <summary>
            Gets the ChartDataArray object that manages point data (combined X and Y data).
            </summary>
      <remarks>
            The data managed by the ChartDataArray object referenced by the PointData
            property is exactly the same data as that manage by the ChartDataArray objects
            of the X and Y properties.  The property is provided as a convenience when working
            with data obtained as Point or PointF values. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.X">
      <summary>
            Gets the ChartDataArray object that manages X data.
            </summary>
      <remarks>
            The X property allows manipulation of the series X data alone.
            The X data managed by the ChartDataArray returned by the X property is the same data
            managed in the PointData and SeriesData properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y">
      <summary>
            Gets the ChartDataArray object that manages Y data.
            </summary>
      <remarks>
            The Y property allows manipulation of the series Y data alone.
            The Y data managed by the ChartDataArray returned by the Y property is
            the same data managed in the PointData and SeriesData properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y1">
      <summary>
            Gets the ChartDataArray object that manages Y1 data.
            </summary>
      <remarks>
        <para>
            Y1 data is used for Hi-Lo, Hi-Lo-Open-Close, Candle and Bubble charts. 
            </para>
        <para>
            The Y1 data managed by the ChartDataArray returned by the Y1 property is
            the same data managed by the SeriesData property.
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y2">
      <summary>
            Gets the ChartDataArray object that manages Y2 data.
            </summary>
      <remarks>
        <para>
            Y2 data is used for Hi-Lo-Open-Close and Candle charts. 
            </para>
        <para>
            The Y2 data managed by the ChartDataArray returned by the Y2 property is
            the same data managed by the SeriesData property.
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y3">
      <summary>
            Gets the ChartDataArray object that manages Y3 data.
            </summary>
      <remarks>
        <para>
            Y3 data is used for Hi-Lo-Open-Close and Candle charts.
            </para>
        <para>
            The Y3 data managed by the ChartDataArray returned by the Y3 property is the same data managed by the SeriesData property.
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MaxX">
      <summary>
            Returns the maximum X value of the series data.
            </summary>
      <remarks>
            This property searches the series for the maximum X value
            (excluding holes) each time it is called.
            If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MinX">
      <summary>
            Returns the minimum X value of the series point data array.
            </summary>
      <remarks>
            This property searches the series for the minimum X value (excluding holes)
            each time it is called.  If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MaxY">
      <summary>
            Returns the maximum Y value of the series data.
            </summary>
      <remarks>
        <para>
            This property searches the series for the maximum Y value (excluding holes)
            each time it is called.  If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable.
            </para>
        <para>
            Note that all Y data arrays are searched, including Y, Y1, Y2, Y3 data arrays. 
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MinY">
      <summary>
            Returns the minimum Y value of the series point data array.
            </summary>
      <remarks>
        <para>
            This property searches the series for the minimum Y value (excluding holes)
            each time it is called.  If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable.
            </para>
        <para>
            Note that all Y data arrays are searched, including Y, Y1, Y2, Y3 data arrays. 
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.LineStyle">
      <summary>
            Gets or sets the line style of the series, including color, thickness and pattern.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.SymbolStyle">
      <summary>
            Gets or sets the symbol style of the series, including color, size and shape.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.FitType">
      <summary>
            Gets or sets the curve fit type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Display">
      <summary>
            Gets or sets the display of the series.
            </summary>
      <remarks>
            This property is used to show, hide or exclude the charting of the data series.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.LegendEntry">
      <summary>
            Gets or sets whether the series label appears in the legend.
            </summary>
      <remarks>
            Occasionally, it is useful to chart a data series without including the series in the legend.
            Setting the LegendEntry property to false hides the series entry in the legend.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Tag">
      <summary>
            Gets or sets the Tag property which allows association of user data with the ChartDataSeries.
            </summary>
      <remarks>
            An Object that contains data about the ChartDataSeries. The default is a null reference 
            (nothing in Visual Basic). Any type derived from the Object class can be assigned to this property.
            If the Tag property is set through the Windows Forms designer, only text may be assigned.
            A common use for the Tag property is to store data that is closely associated with the series.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.AutoEnumerate">
      <summary>
            Gets or sets whether the X values of the series are automatically set to their index value.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataSeriesCollection">
      <summary>
            Summary description for C1Chart2DDataSeriesList.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.Remove(C1.Win.C1Chart.ChartDataSeries)">
      <summary>
            Removes the specified ChartDataSeries from the collection.
            </summary>
      <param name="s">
            Series to remove.
            </param>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.RemoveAll">
      <summary>
            Removes all series from the collection.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.Add(C1.Win.C1Chart.ChartDataSeries)">
      <summary>
            Adds the specified ChartDataSeries to the collection.
            </summary>
      <param name="Series">
            Series to add.
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.Insert(System.Int32,C1.Win.C1Chart.ChartDataSeries)">
      <summary>
            Inserts the specified ChartDataSeries in the collection at the specified index.
            </summary>
      <param name="index">
      </param>
      <param name="Series">
      </param>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.AddNewSeries">
      <summary>
            Creates a new ChartDataSeries and appends it to the collection.
            </summary>
      <returns>
      </returns>
      <remarks>
            A reference to the new ChartDataSeries is returned.
            This method is convenient for adding a new series to the ChartData object,
            as the returned value can be used to initialize the new series,
            especially in Visual Basic where it can be the object of a With-With End statement.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.InsertNewSeries(System.Int32)">
      <summary>
            Creates a new ChartDataSeries and inserts it into the collection at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
      <remarks>
            A reference to the new ChartDataSeries is returned. This method is convenient for inserting
            a new series to the ChartData object, as the returned value can be used to initialize the new series,
            especially in Visual Basic where it can be the object of a With-With End statement.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.OnInsert(System.Int32,System.Object)">
      <summary>
            Called whenever a series is added to the collection.
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
      <remarks>
            The value passed to this method is the inserted ChartDataSeries object.  The value can be modified.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeriesCollection.Item(System.Int32)">
      <summary>
            Gets the specified ChartDataSeries from the collection by numeric index.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataEventArgs">
      <summary>
            Summary description for C1Chart2DData.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartData">
      <summary>
            The ChartData object contains the numerical series to be charted and
            display information for each series.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.IsHole(System.Single)">
      <summary>
            Returns true whenever the value passed will be interpreted as a data hole.
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
      <remarks>
            The value is automatically converted to the internal data type based
            upon the data type of the value specified. The value is then compared
            to the stored data hole. Note that indeterminate floating point data values
            including Infinity or NaN are treated as hole values.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.IsHole(System.Double)">
      <summary>
            Returns true whenever the value passed will be interpreted as a data hole.
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
      <remarks>
            The value is automatically converted to the internal data type based
            upon the data type of the value specified. The value is then compared
            to the stored data hole. Note that indeterminate floating point data values
            including Infinity or NaN are treated as hole values.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.IsHole(System.Object)">
      <summary>
            Returns true whenever the value passed will be interpreted as a data hole.
            </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
      <remarks>
            The value is automatically converted to the internal data type based
            upon the data type of the value specified. The value is then compared
            to the stored data hole. Note that indeterminate floating point data values
            including Infinity or NaN are treated as hole values.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.SetHole(System.Object)">
      <summary>
            Sets the data hole value, performing appropriate conversions from the passed object to the internal double storage value.
            </summary>
      <param name="o">
      </param>
      <remarks>
            This method sets the hole value by passing any appropriate data type.
            The passed object is appropriately converted to the internal store value – a double.
            The hole property can also be used to set the hole value, but only accepts double values.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.SaveDataToFile(System.String)">
      <summary>
            Saves the contents of the current ChartData object to the specified file in XML format,
            including point data, holes and line and symbol style data.
            </summary>
      <param name="Filename">
      </param>
      <remarks>
            This method saves the ChartData object contents to the specified file in XML format.
            If an error occurs during the file creation or writing, an appropriate exception is
            thrown indicating the cause of error.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.LoadDataFromFile(System.String)">
      <summary>
            Loads the contents of the current ChartData object from the specified file in XML format,
            including point data, holes and line and symbol style data.
            </summary>
      <param name="Filename">
      </param>
      <remarks>
            This method loads the current ChartData object with the contents for the specified file
            in XML format.  The file specified should have been created with SaveDataToFile.
            If an error occurs during the file creation or writing, an appropriate exception is thrown
            indicating the cause of error.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.HighLight">
      <summary>
            Gets the DataHighlight object which controls data highlighting.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.TrendsList">
      <summary>
            Gets the TrendLinesCollection object associated with the current ChartData object.
            </summary>
      <remarks>
            This collection contains trend lines for this ChartData object.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.FunctionsList">
      <summary>
            Gets the FunctionsCollection object associated with the current ChartData object.
            </summary>
      <remarks>
            This collection contains functions that are plotted.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.PointStylesList">
      <summary>
            Gets the PointStylesCollection object associated with the current ChartData object.
            </summary>
      <remarks>
            This collection contains styles that can be applied to specific data point.
            </remarks>
    </member>
    <member name="E:C1.Win.C1Chart.ChartData.DataChanged">
      <summary>
            Called whenever an element of the data has changed.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.Hole">
      <summary>
            Gets or sets the data hole value.
            </summary>
      <remarks>
            Data holes are used as placeholders for data points that indicate data is normally present
            but not in this case. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.SeriesList">
      <summary>
            Gets the ChartDataSeriesCollection object associated with the current ChartData object.
            </summary>
      <remarks>
            The ChartDataSeries of this Collection object contains the data to be charted,
            along with Line and Symbols styles and other properties used to describe
            the appearance of the series data. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MaxX">
      <summary>
            Gets the maximum X value of all series.
            </summary>
      <remarks>
            This property searches all series for the maximum X value (excluding holes)
            each time it is called.  If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MinX">
      <summary>
            Gets the minimum X value of all series.
            </summary>
      <remarks>
            This property searches all series for the minimum X value (excluding holes)
            each time it is called.  If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MaxY">
      <summary>
            Gets the maximum Y value of all series.
            </summary>
      <remarks>
        <para>
            This property searches all series for the maximum Y value (excluding holes)
            each time it is called.  If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable.
            </para>
        <para>
            Note that all Y data arrays are searched, including Y, Y1, Y2, Y3 data arrays.
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MinY">
      <summary>
            Gets the minimum Y value of all series.
            </summary>
      <remarks>
        <para>
            This property searches all series for the minimum Y value (excluding holes)
            each time it is called.  If the value is to be used repeatedly within a loop,
            the value should be cached in a local variable.
            </para>
        <para>
            Note that all Y data arrays are searched, including Y, Y1, Y2, Y3 data arrays. 
            </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.SeriesWidth">
      <summary>
            Get or sets the percentage of the full width to be drawn of each series of 3D effect charts.
            Applies to 3D Area and 3D Line or Ribbon charts.  The value is limited from 10 to 100.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.Item(System.Int32)">
      <summary>
            Gets the specified ChartDataSeries by numeric index.
            </summary>
      <remarks>
            Although not a collection object, ChartData allows direct indexing of the elements of ChartDataSeriesCollection contained within the ChartData object.  This is for convenience when programming.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.Chart2DTypeEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.ChartGroup.ChartType" />
            property in the <see cref="T:C1.Win.C1Chart.ChartGroup" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.XYPlot">
      <summary>
            Plot chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Pie">
      <summary>
            Pie chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Bar">
      <summary>
            Bar chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Area">
      <summary>
            Area chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Polar">
      <summary>
            Polar chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Radar">
      <summary>
            Radar chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Bubble">
      <summary>		/// Bubble chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.HiLo">
      <summary>
            HiLo chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.HiLoOpenClose">
      <summary>
            HiLoOpenClose chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Candle">
      <summary>
            Candle chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Gantt">
      <summary>
            Gantt chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Step">
      <summary>
            Step chart type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Histogram">
      <summary>
            Histogram chart type.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.BubbleMethodEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.Bubble.EncodingMethod" />
            property in the <see cref="T:C1.Win.C1Chart.Bubble" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BubbleMethodEnum.Diameter">
      <summary>
            Sizes symbols according to diameter.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BubbleMethodEnum.Area">
      <summary>
            Sizes symbols according to area.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.c1SpecialData">
      <summary>
            Provides unique properties used for Bar, Bubble, Gantt, HiloData, Histogram, and Pie charts.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Pie">
      <summary>
            The Pie class contains properties specific to Pie charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Pie.Start">
      <summary>
            Gets or sets the starting angle of the first Pie slice.
            </summary>
      <remarks>
            The angle is measured in degrees, and represents the arc between the most clockwise edge of the first slice and the right horizontal radius of the pie, as measured in the counter-clockwise direction.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="P:C1.Win.C1Chart.Pie.OtherOffset">
      <summary>
            Gets or sets the offset value used to vary diameter of the pie within the charting area.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="P:C1.Win.C1Chart.Pie.InnerRadius">
      <summary>
            Gets or sets the inner radius used for doughnut charts.  A value greater than zero specifies
            the percentage of the full pie radius used for the doughnut hole.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="P:C1.Win.C1Chart.Pie.Clockwise">
      <summary>
            Gets or sets whether each series is drawn in the clockwise or counter-clockwise direction.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="T:C1.Win.C1Chart.Bar">
      <summary>
            The Bar class contains properties specific to Bar charts.
            </summary>
      <remarks>
            The Bar class and its properties are only used for bar charts.  It is returned by the Bar property of a ChartGroup.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.ClusterOverlap">
      <summary>
            Gets or sets the percentage that bar elements in the same cluster overlap.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Bar" />
    </member>
    <member name="P:C1.Win.C1Chart.Bar.ClusterWidth">
      <summary>
            Gets or sets the percentage that each bar cluster occupies.
            </summary>
      <remarks>
            The percentage applies to the closest clusters.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Bar" />
    </member>
    <member name="P:C1.Win.C1Chart.Bar.Appearance">
      <summary>
            Gets or sets the appearance of a bar chart.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.MultiRow">
      <summary>
            Gets or sets whether the 3D bar chart is plotted using multiple rows.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.BarLines">
      <summary>
            Gets or sets whether 2D stacked bar and column charts render lines from common
            series rectangles from one point to the next.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.BarLineColor">
      <summary>
            Gets or sets the Color used for rendering BarLines indicated by the BarLines property.
            </summary>
      <remarks>
            Only applies to stacked bar and column charts.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.BarLineThickness">
      <summary>
            Gets or sets the thickness in pixels for rendering BarLines indicated by the BarLines property.
            </summary>
      <remarks>
            Only applies to stacked bar and column charts.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.MixedStacking">
      <summary>
            Gets or sets whether bar charts with mixed positive and negative values display both stacks at each point.  Always True for 3D bars.
            </summary>
      <remarks>
            If True, postive values are stacked above the origin and negative values are stacked below the origin.
            If False, then the values are stacked by simple addition of values in series order.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.BarAppearanceEnum">
      <summary>
            Specifies appearance of bar chart.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Default">
      <summary>
            Specifies default(rectangular) appearance.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Cylinder">
      <summary>
            Specifies cylindrical appearance. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Cone">
      <summary>
            Specifies conical appearance. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Pyramid">
      <summary>
            Specifies pyramidal appearance. 
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisLabelsSourceEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.Gantt.AxisLabelsSource" />
            property in the <see cref="T:C1.Win.C1Chart.Gantt" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisLabelsSourceEnum.SeriesLabels">
      <summary>
            Series labels are used as axis labels.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisLabelsSourceEnum.XValues">
      <summary>
            X data values are used for axis annotation.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisLabelsSourceEnum.None">
      <summary>
            No axis labels.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Gantt">
      <summary>
            The Gantt class contains properties specific to Gantt charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Gantt.Width">
      <summary>
            Gets or sets the percentage that each bar occupies.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Gantt" />
    </member>
    <member name="P:C1.Win.C1Chart.Gantt.AxisLabelsSource">
      <summary>
            Gets or sets the source of x-axis labels for a Gantt chart.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Gantt" />
    </member>
    <member name="P:C1.Win.C1Chart.Gantt.ShowSymbols">
      <summary>
            Gets or sets whether the symbols are shown in a Gantt chart.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Gantt" />
    </member>
    <member name="T:C1.Win.C1Chart.HiLoData">
      <summary>
            The HiLo class contains properties specific to HiLo, HiLoOpenClose and Candle charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.ShowOpen">
      <summary>
            Gets or sets whether the opening value is shown in a Hi-Lo-Open-Close chart.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.ShowClose">
      <summary>
            Gets or sets whether the closing value is shown in a Hi-Lo-Open-Close chart.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.FullWidth">
      <summary>
            Gets or sets whether the opening and closing values of a Hi-Lo-Open-Close chart are represented by a horizontal line on both sides of the Hi-Lo bar.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.FillTransparent">
      <summary>
            Gets or sets whether open candles are transparent (true) or filled with the series symbol color (false).
            </summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.FillFalling">
      <summary>
            Gets or sets whether filled candles represent falling values (true) or rising values (false).
            </summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="T:C1.Win.C1Chart.Bubble">
      <summary>
            The Bubble class contains properties specific to Bubble charts.
            </summary>
      <remarks>
            The Bubble class and its properties are only used for bubble charts.  It is returned by the Bubble property of a ChartGroup.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bubble.EncodingMethod">
      <summary>
            Gets or sets the method used for calculating bubble size in a bubble chart.
            </summary>
      <remarks>
        <para>
            The maximum and minimum bubble sizes represent the percentage of the diameter
            or area of the plot area, depending upon the value of the EncodingMethod property.
            </para>
        <para>
            At this time the Bubble Method is always based on the diameter.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Bubble" />
    </member>
    <member name="P:C1.Win.C1Chart.Bubble.MinimumSize">
      <summary>
            Gets or sets the minimum bubble size in a bubble chart.
            </summary>
      <remarks>
            The minimum bubble size represents the percentage of the diameter (or area) of the plot area.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Bubble" />
    </member>
    <member name="P:C1.Win.C1Chart.Bubble.MaximumSize">
      <summary>
            Gets or sets the maximum bubble size in a bubble chart.
            </summary>
      <remarks>
            The maximum bubble size represents the percentage of the diameter (or area) of the plot area.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Bubble" />
    </member>
    <member name="T:C1.Win.C1Chart.Circular">
      <summary>
            Defines the circular settings for the Polar and Radar charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Circular.Start">
      <summary>
            Gets or sets the starting angle of Radar and Polar charts.
            </summary>
      <remarks>
            The angle is measured in degrees if the Degrees property is true, radians otherwise.
            The angle is measured in the counter-clockwise direction from the 12 o’clock position.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Circular.Degrees">
      <summary>
            Gets or sets whether the Start value reflects angles in degrees (true) or radians (false) for Polar and Radar charts.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Polar">
      <summary>
            The Polar class contains properties specific to Polar charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Polar.PiRatioAnnotations">
      <summary>
            Gets or sets whether polar charts measured in radians should be annotated with Pi rations.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Polar" />
    </member>
    <member name="T:C1.Win.C1Chart.Radar">
      <summary>
            The Radar class contains properties specific to Radar charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Radar.Filled">
      <summary>
            Gets or sets whether Radar charts should be filled.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Radar" />
    </member>
    <member name="P:C1.Win.C1Chart.Radar.FlatGridLines">
      <summary>
            Gets or sets whether Radar charts should use flat Y coordinate gridlines. By default, Y coordinate gridlines are circular.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Radar" />
    </member>
    <member name="T:C1.Win.C1Chart.NormalCurve">
      <summary>
            Contains all properties that help define the appearance of the
            normal curve for the Histogram chart.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.ForegroundDisplay">
      <summary>
            Gets or sets whether the Normal (Gaussian) curve is displayed on top of the chart data display.
            </summary>
      <remarks>
            By default, the Normal (Gaussian) curve is displayed behind all charted data.  Setting
            the ForegroundDisplay property to true specifies that the Normal curve should be drawn
            on top of the charted data.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.LineStyle">
      <summary>
            Gets of sets the ChartLineStyle object for the Normal curve.
            </summary>
      <remarks>
            The LineStyle property controls the appearance of the actual line drawn
            representing the Normal curve.  The FillStyle property controls the
            appearance of the area under the Normal curve.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.FillStyle">
      <summary>
            Gets of sets the FillStyle object for the Normal curve.
            </summary>
      <remarks>
            The FillStyle property controls the appearance of the area under the Normal
            curve.  The LineStyle property controls the appearance of the actual line
            drawn representing the Normal curve.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.UseAntiAlias">
      <summary>
            Gets or sets whether the Normal curve is drawn using anti-aliasing.
            </summary>
      <remarks>
            By default, the normal curve is drawn using anti-aliasing methods.  Setting
            the UseAntiAlias property to false overrides this behavior.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.Visible">
      <summary>
            Gets or sets whether the Normal curve is drawn.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Histogram">
      <summary>
            The ChartHistogram class contains properties specific to Histogram charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Histogram.Normalized">
      <summary>
            Gets or sets whether each histogram series interval is normalized.
            </summary>
      <remarks>
            When histograms with non-uniform intervals are generated, each interval
            is typically normalized such that each interval height represents the
            same frequency per unit width.  This preserves the most appropriate
            histogram shape.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Histogram.NormalizationInterval">
      <summary>
            Gets or sets the normalization interval width.
            </summary>
      <remarks>
            When histograms with non-uniform intervals are generated, each interval
            is typically normalized such that each interval height represents the
            same frequency per unit width.  This preserves the most appropriate
            histogram shape.  The normalization interval width is the width to which
            all other intervals are normalized.  Intervals with the same width as the
            normalization width, will have a height which directly indicates its value.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Histogram.NormalDisplay">
      <summary>
            Gets an object describing a Gaussian normal curve display.
            </summary>
      <remarks>
            Histograms and frequency graphs are used to show the distribution of
            data values.  Very often, the data distributions are compared to normal
            distributions.  The properties of the NormalCurve object control the
            appearance of a built in display of a Normal (Gaussian) curve for
            comparison.  The normal curve is unrelated to the data.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGroup">
      <summary>
            Defines the chart types associated with the ChartGroup.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToDataCoord(System.Int32,System.Int32,System.Single@,System.Single@)">
      <summary>
            Calculates the data coordinates of a point in the PlotArea given chart client coordinates.
            </summary>
      <param name="XCoord">X coordinate.</param>
      <param name="YCoord">Y coordinate.</param>
      <param name="XDataCoord">X data coordinate.</param>
      <param name="YDataCoord">Y data coordinate.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToDataCoord(System.Int32,System.Int32,System.Double@,System.Double@)">
      <summary>
            Calculates the data coordinates of a point in the PlotArea given chart client coordinates.
            </summary>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <param name="XDataCoord">X data coordinate.</param>
      <param name="YDataCoord">Y data coordinate.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataCoordToCoord(System.Double,System.Double,System.Int32@,System.Int32@)">
      <summary>
            Calculates the client coordinates of a point in the PlotArea given data coordinates.
            </summary>
      <param name="XDataCoord">X data coordinate.</param>
      <param name="YDataCoord">Y data coordinate.</param>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataCoordToCoord(System.Double,System.Double,System.Single@,System.Single@)">
      <summary>
            Calculates the client coordinates of a point in the PlotArea given data coordinates.
            </summary>
      <param name="XDataCoord">X data coordinate.</param>
      <param name="YDataCoord">Y data coordinate.</param>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToDataIndex(System.Int32,System.Int32,C1.Win.C1Chart.CoordinateFocusEnum,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Returns series and point indices and distance to the closest data point in the group given client coordinates.
            </summary>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <param name="focus">Focus parameter indicates which coordinate is used.</param>
      <param name="SeriesIndex">Data series index of the closest data point.</param>
      <param name="PointIndex">Data point index of the closest data point.</param>
      <param name="Distance">Distance to the closest data point.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataIndexToCoord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
            Returns the client coordinates of the specified data point.
            </summary>
      <param name="SeriesIndex">Series index of the data point.</param>
      <param name="PointIndex">Point index of the data point.</param>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataIndexToRect(System.Int32,System.Int32)">
      <summary>
            Returns the minimal Rectangle circumscribing the specified point.
            </summary>
      <param name="SeriesIndex">Series index of the data point.</param>
      <param name="PointIndex">Point index of the data point.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            The return value is the smallest Rectangle that circumscribes the symbol of the data point.
            Note that this method is not implemented for all chart types.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.ResetOutlineColor">
      <summary>
            Resets the outline color to the default value to allow
            the PlotArea ForeColor to be used.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToSeriesIndex(System.Int32,System.Int32,C1.Win.C1Chart.PlotElementEnum,System.Int32@,System.Int32@)">
      <summary>
            Returns series index and distance to the closest data element in the group given client coordinates.
            </summary>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <param name="element">Element parameter indicates which plot element is used.</param>
      <param name="SeriesIndex">Data series index.</param>
      <param name="Distance">Distance to the closest data point.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToPointIndex(System.Int32,System.Int32,C1.Win.C1Chart.PlotElementEnum,System.Int32,System.Int32@,System.Int32@)">
      <summary>
            Returns point index and distance to the closest data element of specified series in the group given client coordinates.
            </summary>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <param name="element">Element parameter indicates which plot element is used.</param>
      <param name="SeriesIndex">Data series index.</param>
      <param name="PointIndex">Data point index of the closest data point.</param>
      <param name="Distance">Distance to the closest data point.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <remarks>
            Mouse coordinates are given in client coordinates.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Name">
      <summary>
            Gets or sets the name of the ChartGroup.
            </summary>
      <remarks>
            Used for indexing and identification.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Stacked">
      <summary>
            Gets or sets whether the chart should stack the data (for appropriate chart types).
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Is100Percent">
      <summary>
            Gets or sets whether the stacked chart is 100% chart. Applies only for bar and area charts.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.ChartType">
      <summary>
            Gets or sets the type of chart to display.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Use3D">
      <summary>
            Gets or sets whether 3D effects are used for charting the data in the ChartGroup.
            </summary>
      <remarks>
            If View3D data contains non-zero values for Depth, Rotation and Elevation,
            3D effects are added to various charts, including Area, Bar, Pie and XYPlot charts.
            However, the Use3D property for a ChartGroup can override the use of 3D effects,
            allowing one group to be presented with 3D effects and the other group to be charted without 3D effects.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Visible">
      <summary>
            Gets or sets whether ChartGroup is visible.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.ChartData">
      <summary>
            Gets the ChartData object.
            </summary>
      <remarks>
            The ChartData object contains the numerical series to be charted and display information for each series.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Pie">
      <summary>
            Gets or sets the Pie object.
            </summary>
      <remarks>
            The Pie object contains properties specific to Pie charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Bar">
      <summary>
            Gets or sets the Bar object.
            </summary>
      <remarks>
            The Bar object contains properties specific to Bar charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Histogram">
      <summary>
            Get or sets the Histogram object.
            </summary>
      <remarks>
            The Histogram object contains properties specific to Histogram charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Gantt">
      <summary>
            Gets or sets the Gantt object.
            </summary>
      <remarks>
            The Gantt object contains properties specific to Gantt charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.HiLoData">
      <summary>
            Gets or sets the HiLoData object.
            </summary>
      <remarks>
            The HiLoData object contains properties specific to Hi-Lo chart types, including Hi-Lo, Hi-Lo-Open-Close and Candle charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Bubble">
      <summary>
            Gets or sets the Bubble object.
            </summary>
      <remarks>
            The Bubble object contains properties specific to Bubble charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Polar">
      <summary>
            Gets or sets the Polar object.
            </summary>
      <remarks>
            The Polar object contains properties specific to Polar charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Radar">
      <summary>
            Gets or sets the Radar object.
            </summary>
      <remarks>
            The Radar object contains properties specific to Radar charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.DrawingOrder">
      <summary>
            Gets or sets the drawing order of a ChartGroup.
            </summary>
      <remarks>
            The lower the drawing number, the later the group is drawn.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.ShowOutline">
      <summary>
            Gets or sets whether figures drawn should be outlined in the PlotArea ForeColor.
            </summary>
      <remarks>
            Such figures include Bars, Pies, Areas, etc.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.OutlineColor">
      <summary>
            Gets or sets a color override when figure outlines are drawn.
            By default, outlines are drawn in the PlotArea ForeColor.
            </summary>
      <remarks>
            Such figures include Bars, Pies, Areas, etc.  Set this property
            to the Empty color or call the ResetOutlineColor() method to use
            the default PlotArea ForeColor.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.LegendReversed">
      <summary>
            Determines the order in which the series entries of each ChartGroup appear in the legend.
            </summary>
      <remarks>
            The series of each ChartGroup normally appear in index order in the legend.
            If the LegendReversed property is true, then the series entries for the ChartGroup appear in reversed order.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="T:C1.Win.C1Chart.PlotElementEnum">
      <summary>
            The PlotElementEnum is used to indicate specific data elements of a chart.  The enum is used by
            various chart classes and methods best defined by the context.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotElementEnum.Points">
      <summary>
            Specifies that an individual data point is indicated.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotElementEnum.Series">
      <summary>
            Specifies that a data series is indicated.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGroups">
      <summary>
            Gets the ChartGroups object. Each ChartGroup contains information
            related to data values and appearance.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.ChartGroupsCollection">
      <summary>
            Gets the collection of ChartGroup objects.
            </summary>
      <remarks>
            The ChartGroupsCollection is provided to allow enumeration of all ChartGroups within a loop.
            It contains the same ChartGroups as referenced by the Group0 and Group1 properties.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Item(System.Int32)">
      <summary>
            Gets the specified ChartGroup by numeric index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Count">
      <summary>
            Gets the number of ChartGroups.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Group0">
      <summary>
            Gets the foreground ChartGroup from the contained collection.
            </summary>
      <remarks>
            Group0 or the default foreground ChartGroup is the first ChartGroup in the ChartGroupsCollection.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Group1">
      <summary>
            Gets the background ChartGroup from the contained collection.
            </summary>
      <remarks>
            Group1 or the default background ChartGroup is the last ChartGroup in the ChartGroupsCollection.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.ReversedDraw">
      <summary>
            Gets or sets whether the order in which the ChartGroups are normally drawn is reversed.
            </summary>
      <remarks>
            ChartGroups are normally drawn in descending order in which they appear in the ChartGroupsCollection.
            If ReversedDraw is true, then the ChartGroups are drawn in ascending order in which they appear in the
            ChartGroupsCollection.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGroupsCollection">
      <summary>
            Stores the ChartGroups.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroupsCollection.Item(System.Int32)">
      <summary>
            Gets the specified ChartGroup by numeric index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroupsCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.AxisFlagEnum">
      <summary>
            Use the members of this enumeration to set the value of the Axis property in the Action class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxisX">
      <summary>
            Use x-axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxisY">
      <summary>
            Use y-axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesXY">
      <summary>
            Use x-axis and y-axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxisY2">
      <summary>
            Use y2-axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesXY2">
      <summary>
            Use x-axis and y2-axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesYY2">
      <summary>
            Use y-axis and y2-axis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesAll">
      <summary>
            Use all axes( x-axis, y-axis and y2-axis).
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.InteractionAppearance">
      <summary>
            Use the members of this enumeration to set the value of the Appearance property
            of the Interaction class. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.InteractionAppearance.Default">
      <summary>
            Default appearance
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.InteractionAppearance.FillSelectionArea">
      <summary>
            PlotArea.BackColor2 is used as fill color, if it is empty
            the partially transparent color is selected.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Interaction">
      <summary>
            Contains all properties that control the automated interactive features of the chart,
            including mouse driven rotation, scaling, translating and zooming.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.Appearance">
      <summary>
            Gets or sets the interaction appearance.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.Actions">
      <summary>
            Gets the collection of available interactive actions.
            </summary>
      <remarks>
        <para>
            The following actions are available:
            <list type="bullet"><item><term>Rotate - rotate chart (only for chart with 3D effects),</term></item><item><term>Scale - change scale of chart,</term></item><item><term>Translate - scroll through chart,</term></item><item><term>Zoom - select rectangular area of chart for view.</term></item></list></para>
        <para>
            Scale, translate and zoom actions are available for charts with Cartesian axes. 
            All actions are invoked when user drags the mouse over plot area with
            the specified keyboard modifier(ALT, CONTROL, SHIFT).
            </para>
        <para>
            The default action map includes the following actions:
            <list type="bullet"><item><term>rotate - left mouse button,</term></item><item><term>scale - CONTROL + left mouse button,</term></item><item><term>translate - SHIFT + left mouse button,</term></item><item><term>zoom - ALT + left mouse button.</term></item></list></para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Interaction" />
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.Enabled">
      <summary>
            Gets or sets whether the chart interaction is enabled.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Interaction" />
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.IsDefault">
      <summary>
            Gets or sets whether the interaction settings are the same as the default interaction settings.
            </summary>
      <remarks>
        <para>
            If the interaction settings are set to their default values, then IsDefault returns true.
            If the interaction settings are not set to their default values, then IsDefault returns false.
            </para>
        <para>
            If IsDefault is explicitly set to true, then the interaction settings are reset to their default values.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Interaction" />
    </member>
    <member name="T:C1.Win.C1Chart.Action">
      <summary>
            Represents interactive action.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Action.Name">
      <summary>
            Gets the action name.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="P:C1.Win.C1Chart.Action.MouseButton">
      <summary>
            Gets or sets the mouse button that will be used to start the action.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="P:C1.Win.C1Chart.Action.Modifier">
      <summary>
            Gets or sets the key modifier that will be used to start the action.
            </summary>
      <remarks>
            This property allows bitwise combination of SHIFT, CONTROL, and ALT keys.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="P:C1.Win.C1Chart.Action.Axis">
      <summary>
            Gets or sets the axis or axes that will be used in the transformation action.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="T:C1.Win.C1Chart.ActionCollection">
      <summary>
            Represents the collection of action objects.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ActionCollection.Contains(C1.Win.C1Chart.Action)">
      <summary>
            Determines whether the specified Action exists in the collection.
            </summary>
      <param name="a">
      </param>
      <returns>A boolean indicating whether the specified action is contained in the collection.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.ActionCollection.CopyTo(C1.Win.C1Chart.Action[],System.Int32)">
      <summary>
            Copies the collection of Actions beginning with the specified index to the specified array of Action objects.
            </summary>
      <param name="array">
      </param>
      <param name="index">
      </param>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.ActionCollection.IndexOf(C1.Win.C1Chart.Action)">
      <summary>
            Gets the current index of the specified Action in the collection.
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
      <remarks>
            Returns an integer indicating the element of the specified Action within the collection.
            If the Action is not found the return value is –1.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.ActionCollection.Item(System.String)">
      <summary>
            Gets the specified Action from the collection by name.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.ActionCollection.Item(System.Int32)">
      <summary>
            Gets the specified Action from the collection by numeric index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.TransformEventArgs">
      <summary>
            Provides data for the Transform event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MinX">
      <summary>
            Gets or sets the new AxisX minimum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MinY">
      <summary>
            Gets or sets the new AxisY minimum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MinY2">
      <summary>
            Gets or sets the new AxisY2 minimum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MaxX">
      <summary>
            Gets or sets the new AxisX maximum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MaxY">
      <summary>
            Gets or sets the new AxisY maximum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MaxY2">
      <summary>
            Gets or sets the new AxisY2 maximum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.Cancel">
      <summary>
            Gets or sets whether the transformation should be cancelled.
            Canceling the transformation inhibits the rotation, scaling, translating or zooming action
            associated with the transformation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.TransformEventHandler">
      <summary>
            Represents the method that will handle the Transform event of a C1Chart class.
            </summary>
      <remarks>
            The sender object is the Interaction object of the chart.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.DrawDataSeriesEventArgs">
      <summary>
            Provides data for the DrawDataSeries event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.GroupIndex">
      <summary>
            Gets the index of the chart group.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.SeriesIndex">
      <summary>
            Gets the index of the data series about to be drawn.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.Brush">
      <summary>
            Gets or sets the brush that will be used for data plotting.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.DisposeBrush">
      <summary>
            Gets or sets whether the brush should be disposed by the chart after drawing the series.
            If DisposeBrush is false the brush is not disposed by the chart.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.Pen">
      <summary>
            Gets or sets the pen that will be used for data plotting.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.DisposePen">
      <summary>
            Gets or sets whether the pen should be disposed by the chart after drawing the series.
            If DisposePen is false the pen is not disposed by the chart.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.Bounds">
      <summary>
            Gets the rectangular area in which the data series will be plotted.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.IsLegend">
      <summary>
            Gets whether the current region about to be drawn is in the legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.DrawDataSeriesEventHandler">
      <summary>
            Represents the method that will handle the DrawDataSeries event of a C1Chart class.
            </summary>
      <remarks>
            The sender object is the ChartDataSeries object about to be drawn.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.AttachMethodEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.Label.AttachMethod" />
            property in the <see cref="T:C1.Win.C1Chart.Label" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.Coordinate">
      <summary>
            Label can be attached to anywhere on the chart. The number of pixels between
            the top-left corner of the chart to the ChartLabel can be specified.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.DataCoordinate">
      <summary>
            Label is attached to anywhere inside the PlotArea. The data coordinates can be specified.
            This method is not allowed on pie charts using PointLabels for the X-axis annotation.
            If any part of the ChartLabel falls outside of the ChartArea, it is clipped.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.DataIndex">
      <summary>
            Label is attached to a specific data point on the chart.
            The series and point indices and the ChartGroup can be specified.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.DataIndexY">
      <summary>
            Label is attached to a distance above or below a specific data point.
            The series and point indices, the ChartGroup, and the Y-coordinate can be specified. 
            This is most useful for bar and stacking bar charts.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.LabelCompassEnum">
      <summary>
            Use the members of this enumeration to set the value of the
            property in the <see cref="T:C1.Win.C1Chart.Label" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.North">
      <summary>
            Places label to the north or above the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.NorthEast">
      <summary>
            Places label to the NorthEast or above and right of the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.East">
      <summary>
            Places label to the East or to the right of the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.SouthEast">
      <summary>
            Places label to the SouthEast or below and right of the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.South">
      <summary>
            Places label to the South or below the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.SouthWest">
      <summary>
            Places label to the SouthWest or below and left of the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.West">
      <summary>
            Places label to the West or left of the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.NorthWest">
      <summary>
            Places label to the NorthWest or above and left of the data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.Radial">
      <summary>
            In a pie chart, places label directly away from the center of the chart.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.Orthogonal">
      <summary>
            Places label perpendicularly away from the plot line.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.Auto">
      <summary>
            Places label automatically. The parameters of auto-arrangement are specified in
            AutoArrangment property of ChartLabels class. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.RadialText">
      <summary>
            Places label perpendicularly away from the plot line and orients the text along that line.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AttachMethodData">
      <summary>
            The AttachMethodData Class is used by chart <see cref="T:C1.Win.C1Chart.Label" /> objects in conjunction with
            the Label object <see cref="P:C1.Win.C1Chart.Label.AttachMethod" /> property to identify how
            the <see cref="T:C1.Win.C1Chart.Label" /> is placed or attached to the chart. Each of
            the AttachMethodData object properties are meaning only in the context
            of the <see cref="P:C1.Win.C1Chart.Label.AttachMethod" /> value.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.GroupIndex">
      <summary>
            Gets or sets the group index of the data point to attach a label
            when the label AttachMethod property specifies DataIndex attachment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.SeriesIndex">
      <summary>
            Gets or sets the series index of the data point to attach a label
            when the label AttachMethod property specifies DataIndex attachment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.PointIndex">
      <summary>
            Gets or sets the point index of the data point to attach a label
            when the label AttachMethod property specifies DataIndex attachment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.X">
      <summary>
            Gets or sets the X coordinate (data or client) when the label AttachMethod property specifies Coordinate or DataCoordinate attachment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.Y">
      <summary>
            Gets or sets the Y coordinate (data or client) when the label AttachMethod property species Coordinate or DataCoordinate attachment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="T:C1.Win.C1Chart.Label">
      <summary>
            Contains all properties that help define and position the chart label.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.Label.Dispose">
      <summary>
            Readies the chart object for garbage collection.
            </summary>
      <remarks>
            Readies the Label object for garbage collection.
            The Label should not be referenced after calling the Dispose method.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ShouldSerializeStyle">
      <summary>
            Returns false if the Label Style property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ResetStyle">
      <summary>
            Resets Label style inheritance state.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ShouldSerializeSizeDefault">
      <summary>
            Returns false if the Label SizeDefault property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is SizeDefault.Width = -1, SizeDefault.Height = -1,
            which results in automatic sizing of the Label.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ResetSizeDefault">
      <summary>
            Resets Label size so it is calculated automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.AttachMethodData">
      <summary>
            Gets or sets the attachment data for the label.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.AttachMethod">
      <summary>
            Gets or sets the label attachment method.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Connected">
      <summary>
            Gets or sets whether a connecting line is drawn to an associated data point.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Offset">
      <summary>
            Gets or sets the offset distance in pixels from an associated data point.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.RotationOverride">
      <summary>
            Gets or sets the rotation angle in degrees of the label, overriding the
            Rotation value set in the style.  Applies only to label with Compass values
            other than Radial and RadialText.  Only non-zero values are applied.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Compass">
      <summary>
            Gets or sets the position of the label relative its specified location.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Style">
      <summary>
            Gets the Style object of the label.
            </summary>
      <remarks>
            Inherits from the ChartLabels.DefaultLabelStyle property.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Location">
      <summary>
            Gets the location of the label in chart control client coordinates.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Size">
      <summary>
            Gets or sets the size of the label in chart control client coordinates.
            </summary>
      <remarks>
            Modifying this value will change SizeDefault.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.SizeDefault">
      <summary>
            Gets or sets the default size of the label.
            </summary>
      <remarks>
            Negative values will allow autopositioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Text">
      <summary>
            Gets or sets the text of the label.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Name">
      <summary>
            Gets or sets the label name.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Visible">
      <summary>
            Gets or sets the label visibility.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.TooltipText">
      <summary>
            Gets or sets the tooltip text.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.LabelsCollection">
      <summary>
            Contains all of the chart labels defined for a particular chart.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.LabelsCollection.AddNewLabel">
      <summary>
            Creates a new label and appends it to the collection.
            </summary>
      <returns>
            The new label is returned.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.LabelsCollection.InsertNewLabel(System.Int32)">
      <summary>
            Creates a new label and inserts it into the collection at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
            The new label is returned.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.LabelsCollection.Remove(C1.Win.C1Chart.Label)">
      <summary>
            Removes the label specified.
            </summary>
      <param name="label">Label to remove.</param>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.LabelsCollection.Item(System.Int32)">
      <summary>
            Gets the specified label from the collection by numeric index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.LabelsCollection.Item(System.String)">
      <summary>
            Gets the specified label from the collection by name.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.ChartLabels">
      <summary>
            Gets the ChartLabels object.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartLabels.LabelFromCoord(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Used to obtain the LabelIndex at the specified coordinate.
            </summary>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <param name="LabelIndex">Label index.</param>
      <returns>Returns true if a label is present at the specified coordinates.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.DefaultLabelStyle">
      <summary>
            Gets the DefaultLabelStyle.
            </summary>
      <remarks>
            All labels inherit from this Style.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.LabelsCollection">
      <summary>
            Gets the LabelsCollection.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.Item(System.Int32)">
      <summary>
            Gets the specified label from the collection by numerical index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.Item(System.String)">
      <summary>
            Gets the specified label from the collection by name.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.AutoArrangement">
      <summary>
            Gets the AutoLabelArrangement object which controls label arrangement.
            </summary>
      <remarks>
            Auto arrangement applies only for the labels with LabelCompass = Auto.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.AutoLabelArrangementOptions">
      <summary>
            Use the members of this enumeration to set the value
            of the Options property of an AutoLabelArrangement object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Default">
      <summary>
            Allows any label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Top">
      <summary>
            Allows top label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Left">
      <summary>
            Allows left label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Bottom">
      <summary>
            Allows bottom label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Right">
      <summary>
            Allows right label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.TopRight">
      <summary>
            Allows top right label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.BottomRight">
      <summary>
            Allows bottom right label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.BottomLeft">
      <summary>
            Allows bottom left label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.TopLeft">
      <summary>
            Allows top left label position.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.UseDataPoints">
      <summary>
            Labels should not cover data points.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AutoLabelArrangementMethodEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the Method property of an AutoLabelArrangement object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementMethodEnum.Decimation">
      <summary>
            The method removes labels which can not be placed without overlapping.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementMethodEnum.FindingOptimum">
      <summary>
            This method tries to position labels avoiding its overlapping.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AutoLabelArrangement">
      <summary>
            Represents settings of label auto-arrangement
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.AutoLabelArrangement.Options">
      <summary>
            Gets or sets the options of label arrangement.
            </summary>
      <remarks>
            The options are a bitwise combination of AutoLabelArrangementOptions enum elements. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AutoLabelArrangement.Method">
      <summary>
            Gets or sets the method of label arrangement.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataLabel">
      <summary>
            Represents text label for data values.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.DataLabel.Dispose">
      <summary>
            Readies the chart object for garbage collection.
            </summary>
      <remarks>
            Readies the Label object for garbage collection.
            The Label should not be referenced after calling the Dispose method.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Connected">
      <summary>
            Gets or sets whether a connecting line is drawn to an associated data point.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Offset">
      <summary>
            Gets or sets the offset distance in pixels from an associated data point.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Compass">
      <summary>
            Gets or sets the position of the label relative its specified location.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Style">
      <summary>
            Gets the Style object of the label.
            </summary>
      <remarks>
            Inherits from the ChartLabels.DefaultLabelStyle property.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Text">
      <summary>
            Gets or sets the text of the label.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Visible">
      <summary>
            Gets or sets the label visibility.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Filter">
      <summary>
            Gets or sets the filter value of the data label.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DataLabel" />
      <remarks>
            If filter = 1 every data point is labeled, when filter = 2 every second data point is labeled.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.DrawLegendEntryEventArgs">
      <summary>
            Provides data for the DrawLegendEntry event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DrawLegendEntryEventArgs.Entry">
      <summary>
            Gets object which is the legend entry.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawLegendEntryEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawLegendEntryEventArgs.TextColor">
      <summary>
            Gets or sets a color of text for the legend entry.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.DrawLegendEntryEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.PointStyleSelectionEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.PointStyle.Selection" />
            property in the <see cref="T:C1.Win.C1Chart.PointStyle" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.Index">
      <summary>
            PointStyle applies to data point that is defined by PointIndex and SeriesIndex
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMaxX">
      <summary>
            PointStyle applies to data point with maximum x value among all data series of the ChartData.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMinX">
      <summary>
            PointStyle applies to data point with minimum x value among all data series of the ChartData.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMaxY">
      <summary>
            PointStyle applies to data point with maximum y value among all data series of the ChartData.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMinY">
      <summary>
            PointStyle applies to data point with minimum y value among all data series of the ChartData.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMaxX">
      <summary>
            PointStyle applies to data point with maximum x value of data series that is defined by SeriesIndex property of PointStyle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMinX">
      <summary>
            PointStyle applies to data point with minimum x value of data series that is defined by SeriesIndex property of PointStyle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMaxY">
      <summary>
            PointStyle applies to data point with maximum y value of data series that is defined by SeriesIndex property of PointStyle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMinY">
      <summary>
            PointStyle applies to data point with minimum y value of data series that is defined by SeriesIndex property of PointStyle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.Custom">
      <summary>
            PointStyle is selected in user-defined Select event handler.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.PointStyleSelectEventHandler">
      <summary>
            The Delegate for the PointStyle Select event.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyleSelectEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.PointStyleSelectEventArgs">
      <summary>
            The PointStyleSelectEventArgs class contains event arguments for PointStyleSelectEventHandler.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyleSelectEventArgs.SeriesIndex">
      <summary>
            Gets the series index of data point for which the event is providing customization.
            Used in conjunction with the SeriesIndex property value, the PointIndex property value
            indicates the specific data point to which the PointStyle customization applies.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyleSelectEventArgs.PointIndex">
      <summary>
            Gets the point index of data point for which the event is providing customization.
            Used in conjunction with the SeriesIndex property value, the PointIndex property value
            indicates the specific data point to which the PointStyle customization applies.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyleSelectEventArgs.Selected">
      <summary>
            Gets or set whether this point style should be applied to the data point
            defined by <see cref="P:C1.Win.C1Chart.PointStyleSelectEventArgs.SeriesIndex" />
            and <see cref="P:C1.Win.C1Chart.PointStyleSelectEventArgs.PointIndex" /> properties.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.PointStyle">
      <summary>
            PointStyle is used to describe a data point that has different appearance
            from other data points in the same data series.  When applied to a specific data point,
            the properties of a PointStyle object supersede those specified by the data series
            containing the data point.  To Understand the full meaning of these properties in
            the context of different chart types, please refer to the context of the style properties
            associated with each series.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.FillStyle">
      <summary>
            Gets or sets the fill style of the PointStyle.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="E:C1.Win.C1Chart.PointStyle.Select">
      <summary>
            Fires when the selection of a PointStyle is performed. Fires only when the PointStyle Selection
            property is set to <see cref="F:C1.Win.C1Chart.PointStyleSelectionEnum.Custom" />.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.SeriesIndex">
      <summary>
            Gets or sets the data series index of the PointStyle.
            Used in conjunction with the PointIndex property value,
            the SeriesIndex property value indicates the specific data point
            to which the PointStyle applies.
            </summary>
      <remarks>
            This property is not used when selection method specified by the Selection property
            includes all data series (e.g. - DataMaxX, DataMaxY, DataMinX, DataMinY).
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.PointIndex">
      <summary>
            Gets or sets the data point index of the PointStyle.
            Used in conjunction with the SeriesIndex property value, the PointIndex
            property value indicates the specific data point to which the PointStyle applies.
            </summary>
      <remarks>
            Useful only when Selection is <see cref="F:C1.Win.C1Chart.PointStyleSelectionEnum.Index" />.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.SymbolStyle">
      <summary>
            Gets or sets the symbol style of the PointStyle.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.LineStyle">
      <summary>
            Gets or sets the line style of the PointStyle.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.Offset">
      <summary>
            Gets or sets the offset of the PointStyle.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.Selection">
      <summary>
            Gets or sets the selection method of the PointStyle.
            For selection method options, see <see cref="T:C1.Win.C1Chart.PointStyleSelectionEnum" />.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.LegendEntry">
      <summary>
            Gets or sets whether the PointStyle will be shown in legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.Label">
      <summary>
            Gets or sets the PointStyle label.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="T:C1.Win.C1Chart.PointStylesCollection">
      <summary>
            Stores point styles.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Add(C1.Win.C1Chart.PointStyle)">
      <summary>
            Adds the specified PointStyle to the collection.
            </summary>
      <param name="ps">PointStyle</param>
      <returns>Index of the point style.</returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.AddNewPointStyle">
      <summary>
            Creates a new PointStyle and appends it to the collection.
            </summary>
      <returns>New PointStyle.</returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Insert(System.Int32,C1.Win.C1Chart.PointStyle)">
      <summary>
            Inserts the specified PointStyle in the collection at the specified index.
            </summary>
      <param name="index">Index.</param>
      <param name="ps">PointStyle.</param>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Remove(C1.Win.C1Chart.PointStyle)">
      <summary>
            Removes the specified PointStyle from the collection.
            </summary>
      <param name="ps">The PointStyle to remove from the PointStylesCollection.</param>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Contains(C1.Win.C1Chart.PointStyle)">
      <summary>
            Determines whether the specified PointStyle exists in the collection.
            </summary>
      <param name="ps">The PointStyle to locate in the PointStylesCollection.</param>
      <returns>
            A boolean indicating whether the specified PointStyle is contained in the collection.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.CopyTo(C1.Win.C1Chart.PointStyle[],System.Int32)">
      <summary>
            Copies the collection of PointStyles beginning with the specified index
            to the specified array of PointStylesCollection objects.
            </summary>
      <param name="array">The array that is the destination of the elements copied from the PointStylesCollection.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.IndexOf(C1.Win.C1Chart.PointStyle)">
      <summary>
            Gets the current index of the specified PointStyle in the collection.
            </summary>
      <param name="ps">The PointStyle to locate in the collection.</param>
      <returns>
            Returns an integer indicating the element of the specified PointStyle within the collection.
            If the PointStyle is not found the return value is –1.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStylesCollection.Item(System.Int32)">
      <summary>
            Gets the specified PointStyle from the collection by numeric index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.ShadingEnum">
      <summary>
            The type of shading used for color of 3D areas when chart with 3D-effects is rendered.
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.View3D.Shading" />
            property in the <see cref="T:C1.Win.C1Chart.View3D" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ShadingEnum.None">
      <summary>
            No special 3D color is applied.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ShadingEnum.ColorLight">
      <summary>
            3D color is lighter than front color.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ShadingEnum.ColorDark">
      <summary>
            3D color is darker than front color.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.View3D">
      <summary>
            The class View3D defines the three-dimensional features of a chart.
            These properties when used in conjunction with the ChartGroup Use3D
            property are used to produce 3D effects for Area, Bar, Pie and XYPlot charts.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Elevation">
      <summary>
            The apparent degree of inclination of the eye-point above the X-axis.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Rotation">
      <summary>
            The apparent degree of rotation of the eye-point to the right of the Y-axis.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Depth">
      <summary>
            The apparent chart depth as a percentage of chart width.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Shading">
      <summary>
            Specifies the type of shading applied to 3D areas of the chart.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="T:C1.Win.C1Chart.ChartCoordArray">
      <summary>
            Container object for data arrays.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.IsHole(System.Object)">
      <summary>
            Determines if the specified value is interpreted as a data hole.
            </summary>
      <param name="value">
      </param>
      <returns>
            A boolean value indicating whether the specified value is interpreted as a data hole.
            </returns>
      <remarks>
            The value is automatically converted to the internal data type based upon
            the data type of the value specified. The value is then compared to the stored
            data hole. Note that invalid floating point data values such as NaN are treated as hole values.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.CopyDataIn(System.Object)">
      <summary>
            Copies data into the ChartCoordArray, replacing all existing data.
            </summary>
      <param name="o">
      </param>
      <returns>
            A Boolean value indicating whether the data was appropriately copied into the ChartCoordArray.
            </returns>
      <remarks>
        <para>
            Although the passed data array is an object, the underlying data type must be
            an array of type Single, Double, Integer, Int16, Int64, Decimal or DateTime (VB)
            or float, double, int, Int16, Int64, decimal or DateTime (C#).
            An array of objects is not accepted.  When PointData is managed by the ChartCoordArray,
            an array PointF objects may also be passed.
            </para>
        <para>
            Note that all values are stored as a Double(VB) or double(C#) data type internally.
            Data conversions are performed automatically and as appropriate for the inputted data type.
            For example, setting a data element to a DateTime value of January 1, 2002 will be stored
            internally as an Ole date, then converted to a Double/double with a result of 37257.
            </para>
        <para>
            Additionally, the length of the copied array defines the length of the ChartCoordArray,
            and the Length property will report the new value.
            </para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.CopyDataOut">
      <summary>
            Copies data out of the ChartCoordArray using the default data type.
            </summary>
      <returns>
            An object containing an array of the default type, appropriately converted
            from the internal Double(VB) or double(C#) values.
            </returns>
      <remarks>
        <para>
            Although the returned array is an object, the underlying data type will be an
            array of type Single, Double, Integer, Int16, Int64, Decimal or DateTime (VB)
            or float, double, int, Int16, Int64, decimal or DateTime (C#).
            When PointData is managed by the ChartCoordArray, an array PointF objects may also be returned.
            </para>
            In Visual Basic, it is not necessary to explicitly cast the returned value.
            The strong typing of C# however, requires an explicit cast.
            <para>
            Note that all values are stored as a Double(VB) or double(C#) data type internally.
            Data conversions are performed automatically and as appropriate for the default data type.
            </para></remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.CopyDataOut(System.Type)">
      <summary>
            Copies data out of the ChartCoordArray using the specified data type.
            </summary>
      <param name="t">type</param>
      <returns>
            An object containing an array of the specified type, appropriately converted
            from the internal Double(VB) or double(C#) values.
            </returns>
      <remarks>
        <para>
            Although the returned array is an object, the underlying data type will be an
            array of type Single, Double, Integer, Int16, Int64, Decimal or DateTime (VB)
            or float, double, int, Int16, Int64, decimal or DateTime (C#).
            When PointData is managed by the ChartCoordArray, an array PointF objects may also be returned.
            </para>
            In Visual Basic, it is not necessary to explicitly cast the returned value.
            The strong typing of C# however, requires an explicit cast.
            <para>
            Note that all values are stored as a Double(VB) or double(C#) data type internally.
            Data conversions are performed automatically and as appropriate for the specified data type.
            </para></remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Add(System.Object)">
      <summary>
            Adds a new value to the end of the ChartCoordArray.
            </summary>
      <param name="value">
            New data value.
            </param>
      <returns>
            An integer indicating the index of the new value in the
            ChartCoordArray.
            The new index is always the Length of the ChartCoordArray prior to adding the new value.
            </returns>
      <remarks>
            The Add method extends the length of the ChartCoordArray by one,
            then adds the new value to the newly created element.
            The value is automatically converted to the internal storage data type.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Clear">
      <summary>
            Removes all values from the ChartCoordArray.
            </summary>
      <remarks>
            All elements of the ChartCoordArray are removed and the Length is set to 0.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Contains(System.Object)">
      <summary>
            Determines whether a value is in the ChartCoordArray.
            </summary>
      <param name="value">
      </param>
      <returns>
            A boolean indicating whether the specified value can be found
            in one of the elements of the ChartCoordArray.
            </returns>
      <remarks>
            The value is automatically converted to the internal data type based upon
            the data type of the value specified. The value and the elements of
            the ChartCoordArray are then compared using the converted result.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.IndexOf(System.Object)">
      <summary>
            Gets the current index of the specified value in the ChartCoordArray.
            </summary>
      <param name="value">
      </param>
      <returns>
            Returns an integer indicating the element of the specified value
            within the ChartCoordArray.
            If the value is not found the return value is –1.
            </returns>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Insert(System.Int32,System.Object)">
      <summary>
            Inserts a new value at the specified index of the ChartCoordArray.
            </summary>
      <param name="index">
            Index of new value.
            </param>
      <param name="value">
            New data value.
            </param>
      <remarks>
            The value is inserted at the position specified and the length
            of the ChartCoordArray is increased by 1.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Remove(System.Object)">
      <summary>
            Removes the first occurrence of the specified value from the ChartCoordArray.
            </summary>
      <param name="value">
            Value to remove.
            </param>
      <remarks>
            The value is automatically converted to the internal data type based upon
            the data type of the value specified. The value and the elements of
            the ChartCoordArray are then compared using the converted result.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index from the ChartCoordArray.
            </summary>
      <param name="index">
            Index of data value to remove
            </param>
      <remarks>
            The element of the ChartCoordArray is removed, and the length
            of the ChartCoordArray is decreased by 1.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.DataType">
      <summary>
            Gets or sets the default data type of the coord.
            </summary>
      <remarks>
            Specifies the default data type that is used with the CopyDataOut method.
            If the default DataType property is not explicitly set, then the reported type
            is that of the last entered data through either the CopyDataIn method of the Item property.
            Acceptable input data types include Single, Double, Integer, Int16, Int64, Decimal and DateTime (VB)
            and float, double, int, Int16, Int64, decimal and DateTime (C#).
            When PointData is managed by the ChartCoordArray, PointF objects may also be used.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.Length">
      <summary>
            Gets or sets the length of the coord array.
            </summary>
      <remarks>
            When extending the existing length of the array, the newly created
            elements are filled with data hole values.  When reducing the length
            of the array, truncated elements are thrown away.  Note that it may be
            necessary to increase the length of an array before setting its values
            with the Item property.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.Hole">
      <summary>
            Returns an Object with the current data hole value converted to the data type specified
            by the ChartCoordArray.DataType property.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.Item(System.Int32)">
      <summary>
            Gets or sets the value of the data element by index.
            </summary>
      <remarks>
        <para>This property can be used to access a specific data entry by numerical index.
            In Visual Basic, no casting is required. In C#, it is necessary to cast the return
            value to the appropriate type.  Note that all values are stored as a Double(VB) or
            double(C#) data type internally.  Data conversions are performed automatically and
            as appropriate for the inputted data type.  For example, setting a data element to
            a DateTime value of January 1, 2002 will be stored internally as an Ole date,
            then converted to a Double/double with a result of 37257.
            </para>
        <para>
            Acceptable input data types include Single, Double, Integer, Int16, Int64, Decimal
            and DateTime (VB) and float, double, int, Int16, Int64, decimal and DateTime (C#).
            When PointData is managed by the ChartCoordArray, PointF objects may also be used.
            </para>
        <para>
            Note that the index must be between 0 and the Length of the array inclusive.
            </para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.FillTypeEnum">
      <summary>
            The FillTypeEnum enumeration is used to specify how data shapes are filled.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.SolidColor">
      <summary>
            Solid color is used for filling using Color1.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.Gradient">
      <summary>
            A two color gradient is used to fill using Color1 and Color2 with a pattern enumerated by the <see cref="T:C1.Win.C1Chart.GradientStyleEnum" />.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.Hatch">
      <summary>
            A two color hatch pattern is used to fill using Color1 and Color2 with a pattern enumerated by the <see cref="T:C1.Win.C1Chart.HatchStyleEnum" />.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.Texture">
      <summary>
            A texture is created by tiling the specified Image of the FillStyle.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.FillStyle">
      <summary>
            The FillStyle class is used to describe the different fill styles
            available for various elements of the chart, including the chart
            itself, the ChartArea, the Legend, the Header, the Footer and Labels.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.FillStyle.ResetOutlineColor">
      <summary>
            Resets the outline color to the default value to allow
            the Group outline color to be used.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Color1">
      <summary>
            Gets or sets the fill color.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Color2">
      <summary>
            Gets or sets the second fill color.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.OutlineColor">
      <summary>
            Gets or sets the second fill color.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.OutlineThickness">
      <summary>
            Gets or sets the thickness of filled region outlines.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.FillType">
      <summary>
            Gets or sets the fill type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.GradientStyle">
      <summary>
            Gets or sets the fill gradient type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.HatchStyle">
      <summary>
            Gets or sets the fill hatch type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Image">
      <summary>
            Gets or sets the fill image.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Alpha">
      <summary>
            Gets or sets the fill alpha value (transparency).
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.SelectActionEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the SelectAction property of an ChartTooltip object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SelectActionEnum.MouseOver">
      <summary>
            Tooltip is shown when mouse is over the chart element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SelectActionEnum.Click">
      <summary>
            Tooltip is shown when user clicks on the chart element.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ShowTooltipEventArgs">
      <summary>
            Provides data for the ShowTooltip event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.TooltipText">
      <summary>
            Gets or sets the tooltip text.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.GroupIndex">
      <summary>
            Gets the chart group index.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.SeriesIndex">
      <summary>
            Gets the data series index.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.PointIndex">
      <summary>
            Gets the data point index.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ShowTooltipEventHandler">
      <summary>
            Represents the method that will handle the ShowTooltip event of a C1Chart class.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartToolTip">
      <summary>
            Controls tooltip appearance for chart elements.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.SelectAction">
      <summary>
            Gets or sets the action associated with tooltip.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.PlotElement">
      <summary>
            Gets or sets the plot element.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.Enabled">
      <summary>
            Gets or sets a value indicating whether the tooltip is enabled.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.AutomaticDelay">
      <summary>
            Gets or sets the automatic delay for the tooltip.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.AutoPopDelay">
      <summary>
            Gets or sets the period of time the tooltip remains visible if the mouse pointer is stationary within an area with specified tooltip text.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.InitialDelay">
      <summary>
            Gets or sets the time that passes before the tooltip appears.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.ReshowDelay">
      <summary>
            Gets or sets the length of time that must transpire before subsequent tooltip windows appear as the mouse pointer moves from one area to another.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataAppearanceEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the Appearance property of an DataHighlight object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.None">
      <summary>
            Appearance is not changed
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Symbol">
      <summary>
            Changes symbol style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Line">
      <summary>
            Changes line style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Fill">
      <summary>
            Changes fill style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolShape">
      <summary>
            Changes symbol shape.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolSize">
      <summary>
            Changes symbol size.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolColor">
      <summary>
            Changes symbol color.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineColor">
      <summary>
            Changes symbol outline color.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineWidth">
      <summary>
            Changes symbol outline width.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineColor">
      <summary>
            Changes line color.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LinePattern">
      <summary>
            Changes line pattern.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineThickness">
      <summary>
            Changes line thickness.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillAlpha">
      <summary>
            Changes fill alpha.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillColor1">
      <summary>
            Changes fill Color1.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillColor2">
      <summary>
            Changes fill Color2.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillType">
      <summary>
            Changes fill type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillGradientStyle">
      <summary>
            Changes fill gradient style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillHatchStyle">
      <summary>
            Changes fill hatch style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillImage">
      <summary>
            Changes fill image.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Offset">
      <summary>
            Changes data series offset(only for pie chart).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineMiterLimit">
      <summary>
            Changes line MiterLimit.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineLineJoin">
      <summary>
            Changes line LineJoin.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.HighlightActivationEnum">
      <summary>
            Use the members of this enumeration to set the value
            of the Activation property of an DataHighlight object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.Disabled">
      <summary>
            Highlight is disabled.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.Custom">
      <summary>
            User is responsible for setting active data series and point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.MouseOver">
      <summary>
            Highlight is activated when user moves mouse over the plotted data.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.Click">
      <summary>
            Highlight is activated when user click on the plotted data.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.HighlightChangedEventArgs">
      <summary>
            Provides data for the HighlightChanged event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.Group">
      <summary>
            Gets the chart group.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.Series">
      <summary>
            Gets the data series.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.SeriesIndex">
      <summary>
            Gets the data series index.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.PointIndex">
      <summary>
            Gets the data point index.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.HighlightChangedEventHandler">
      <summary>
            Represents the method that will handle the HighlightChanged event of a C1Chart class.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataHighlight">
      <summary>
            Controls data highlighting.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.Activation">
      <summary>
            Gets or sets the highlight activation method.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.Appearance">
      <summary>
            Gets or sets the highlight appearance. The appearance is a combination of visual attributes
            which will be applied to the highlighted data. The exact value of attributes is extracted
            from the corresponding DataHighlight object ( FillStyle, LineStyle, SymbolStyle).
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.SymbolStyle">
      <summary>
            Gets or sets the highlight symbol style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.LineStyle">
      <summary>
            Gets or sets the highlight line style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.FillStyle">
      <summary>
            Gets or sets the highlight fill style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.SeriesIndex">
      <summary>
            Gets or sets the index of highlighted data series.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.PointIndex">
      <summary>
            Gets or sets the index of highlighted data point.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.PlotElement">
      <summary>
            Gets or sets the plot element which will be used in highlighting.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlignImageEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Style.ImageAlignment" /> property
            in the <see cref="T:C1.Win.C1Chart.Style" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Hide">
      <summary>
            Image is hidden.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Left">
      <summary>
            Image is aligned to the left.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Right">
      <summary>
            Image is aligned to the right.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Top">
      <summary>
            Image is aligned to the Top.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Bottom">
      <summary>
            Image is aligned to the bottom.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Center">
      <summary>
            Image is center-aligned.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Scale">
      <summary>
            Image is scaled to fit the image area.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Stretch">
      <summary>
            Image is stretched to fit image area.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Tile">
      <summary>
            Image is tiled throughout the image area.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlignHorzEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Style.HorizontalAlignment" /> property
            in the <see cref="T:C1.Win.C1Chart.Style" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.General">
      <summary>
            Sets text to be left-aligned and numbers to be right-aligned.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Near">
      <summary>
            Aligns text to the near side (left side in left-to-right mode).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Center">
      <summary>
            Aligns text to the center.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Far">
      <summary>
            Aligns cell text to the far side (right side in left-to-right mode).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Justify">
      <summary>
            Spreads text throughout.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlignVertEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Style.VerticalAlignment" /> property
            in the <see cref="T:C1.Win.C1Chart.Style" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignVertEnum.Top">
      <summary>
            Aligns text to the top.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignVertEnum.Center">
      <summary>
            Aligns text to the center.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignVertEnum.Bottom">
      <summary>
            Aligns text to the bottom.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.RotationEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Axis.Rotation" /> property in
            the <see cref="T:C1.Win.C1Chart.Axis" /> and <see cref="T:C1.Win.C1Chart.Style" /> classes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate0">
      <summary>
            No rotation.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate90">
      <summary>
            Object is rotated 90 degrees.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate180">
      <summary>
            Object is rotated 180 degrees, or inverted.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate270">
      <summary>
            Object is rotated 270 degrees.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.BorderStyleEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Border.BorderStyle" /> property in
            the <see cref="T:C1.Win.C1Chart.Border" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.NotSet">
      <summary>
            Border style is not set and is inherited from C1Chart class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Empty">
      <summary>
            Empty Border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Solid">
      <summary>
            Solid line border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Raised">
      <summary>
            Raised 3D border, drawn using system colors.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Inset">
      <summary>
            Inset 3D border, drawn using system colors.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.RaisedBevel">
      <summary>
            Raised 3D border with bevel.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.InsetBevel">
      <summary>
            Inset 3D border with bevel.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Groove">
      <summary>
            Compound border (inset+raised).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Fillet">
      <summary>
            Compound border (raised+inset).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Double">
      <summary>
            Double solid line border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Dashed">
      <summary>
            Dashed line border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Opaque">
      <summary>
            Solid line border rendered without antialiasing.  Opaque borders ignore rounding
            and are most useful for antialiased charts to be rendered as transparent images.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.CompassEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Axis.Compass" /> property in
            the <see cref="T:C1.Win.C1Chart.Axis" />, <see cref="T:C1.Win.C1Chart.Label" />,
            and <see cref="T:C1.Win.C1Chart.Legend" /> classes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.North">
      <summary>
            Object is positioned north or above.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.South">
      <summary>
            Object is positioned south or below.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.East">
      <summary>
            Object is positioned east or to the right side.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.West">
      <summary>
            Object is positioned west or to the left side.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.SymbolShapeEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.ChartSymbolStyle.Shape" /> property in
            the <see cref="T:C1.Win.C1Chart.ChartSymbolStyle" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.None">
      <summary>
            No symbol represents data point.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Box">
      <summary>
            Data point represented by a solid square.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Dot">
      <summary>
            Data point represented by a solid circle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Tri">
      <summary>
            Data point represented by a solid triangle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Diamond">
      <summary>
            Data point represented by a solid diamond.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.InvertedTri">
      <summary>
            Data point represented by a solid inverted triangle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Star">
      <summary>
            Data point represented by a solid star.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.VerticalLine">
      <summary>
            Data point represented by a short vertical line.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.HorizontalLine">
      <summary>
            Data point represented by a short horizontal line.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Cross">
      <summary>
            Data point represented by crossed horizontal and vertical lines.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.DiagCross">
      <summary>
            Data point represented by diagonal crossed lines.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Circle">
      <summary>
            Data point represented by the outline of a circle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Square">
      <summary>
            Data point represented by the outline of a square.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.OpenTri">
      <summary>
            Data point represented by the outline of a triangle.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.OpenDiamond">
      <summary>
            Data point represented by the outline of a diamond.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.OpenInvertedTri">
      <summary>
            Data point represented by the outline of an inverted triangle.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.PrintScaleEnum">
      <summary>
            Use the members of this enumeration to set the value of the scaling property
            in the <see cref="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum,System.Drawing.Rectangle,System.Drawing.Printing.PageSettings)" /> method.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleNone">
      <summary>
            Same size as actual chart.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToFit">
      <summary>
            Scale to existing window (minimum of height and width), preserving aspect ratio.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToHeight">
      <summary>
            Scale to specified height, preserving aspect ratio.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToMax">
      <summary>
            Enlarge to size of page.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToWidth">
      <summary>
            Scale to specified width, preserving aspect ratio.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.GradientStyleEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Style.GradientStyle" /> property in
            the <see cref="T:C1.Win.C1Chart.Style" /> class and
            the <see cref="P:C1.Win.C1Chart.PlotArea.GradientStyle" /> property in
            the <see cref="T:C1.Win.C1Chart.PlotArea" /> class. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.None">
      <summary>
            No gradient filling.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Horizontal">
      <summary>
            From left (BackColor) to right (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.HorizontalCenter">
      <summary>
            From center (BackColor) to left and right (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Vertical">
      <summary>
            From top (BackColor) to bottom (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.VerticalCenter">
      <summary>
            From center (BackColor) to top and bottom (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Diagonal">
      <summary>
            From left-bottom (BackColor) to right-top (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.DiagonalCenter">
      <summary>
            From center (BackColor) to  left-bottom and right-top (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.DiagonalBack">
      <summary>
            From left-top (BackColor) to right-bottom (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.DiagonalBackCenter">
      <summary>
            From center (BackColor) to left-top and right-bottom (BackColor2).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Radial">
      <summary>
            From center (BackColor) to corners (BackColor2) in radial direction.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.FromCenter">
      <summary>
            From center (BackColor) to corners (BackColor2).
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.HatchStyleEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Style.HatchStyle" /> property in
            the <see cref="T:C1.Win.C1Chart.Style" /> class and
            the <see cref="P:C1.Win.C1Chart.PlotArea.HatchStyle" /> property in
            the <see cref="T:C1.Win.C1Chart.PlotArea" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.None">
      <summary>
            No pattern.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Horizontal">
      <summary>
            A pattern of horizontal lines.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Vertical">
      <summary>
            A pattern of vertical lines.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.ForwardDiagonal">
      <summary>
            A pattern of lines on a diagonal from upper left to lower right.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.BackwardDiagonal">
      <summary>
            A pattern of lines on a diagonal from upper right to lower left.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Cross">
      <summary>
            Specifies horizontal and vertical lines that cross.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DiagonalCross">
      <summary>
            Specifies forward diagonal and backward diagonal lines that cross. The lines are antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent05">
      <summary>
            Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent10">
      <summary>
            Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent20">
      <summary>
            Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent25">
      <summary>
            Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent30">
      <summary>
            Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent40">
      <summary>
            Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent50">
      <summary>
            Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent60">
      <summary>
            Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent70">
      <summary>
            Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent75">
      <summary>
            Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent80">
      <summary>
            Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent90">
      <summary>
            Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:100.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightDownwardDiagonal">
      <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points and
            are spaced 50 percent closer together than ForwardDiagonal, but they are not antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightUpwardDiagonal">
      <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points and
            are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkDownwardDiagonal">
      <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points,
            are spaced 50 percent closer together than, and are twice the width of ForwardDiagonal.
            This hatch pattern is not antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkUpwardDiagonal">
      <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points,
            are spaced 50 percent closer together than BackwardDiagonal, and are twice its width,
            but the lines are not antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.WideDownwardDiagonal">
      <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points,
            have the same spacing as hatch style ForwardDiagonal, and are triple its width, but are not antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.WideUpwardDiagonal">
      <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points,
            have the same spacing as hatch style BackwardDiagonal, and are triple its width, but are not antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightVertical">
      <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightHorizontal">
      <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.NarrowVertical">
      <summary>
            Specifies vertical lines that are spaced 75 percent closer together
            than hatch style Vertical (or 25 percent closer together than LightVertical).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.NarrowHorizontal">
      <summary>
            Specifies horizontal lines that are spaced 75 percent closer together
            than hatch style Horizontal (or 25 percent closer together than LightHorizontal).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkVertical">
      <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical and are twice its width.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkHorizontal">
      <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice its width.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedDownwardDiagonal">
      <summary>
            Specifies dashed diagonal lines that slant to the right from top points to bottom points.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedUpwardDiagonal">
      <summary>
            Specifies dashed diagonal lines that slant to the left from top points to bottom points.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedHorizontal">
      <summary>
            Specifies dashed horizontal lines.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedVertical">
      <summary>
            Specifies dashed vertical lines.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SmallConfetti">
      <summary>
            Specifies a hatch that has the appearance of confetti.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LargeConfetti">
      <summary>
            Specifies a hatch that has the appearance of confetti,
            and is composed of larger pieces than SmallConfetti.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.ZigZag">
      <summary>
            Specifies horizontal lines that are composed of zigzags.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Wave">
      <summary>
            Specifies horizontal lines that are composed of tildes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DiagonalBrick">
      <summary>
            Specifies a hatch that has the appearance of layered bricks that
            slant to the left from top points to bottom points.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.HorizontalBrick">
      <summary>
            Specifies a hatch that has the appearance of horizontally layered bricks.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Weave">
      <summary>
            Specifies a hatch that has the appearance of a woven material.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Plaid">
      <summary>
            Specifies a hatch that has the appearance of a plaid material.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Divot">
      <summary>
            Specifies a hatch that has the appearance of divots.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DottedGrid">
      <summary>
            Specifies horizontal and vertical lines, each of which is composed of dots that cross.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DottedDiamond">
      <summary>
            Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Shingle">
      <summary>
            Specifies a hatch that has the appearance of diagonally-layered shingles that slant
            to the right from top points to bottom points.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Trellis">
      <summary>
            Specifies a hatch that has the appearance of a trellis.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Sphere">
      <summary>
            Specifies a hatch that has the appearance of spheres laid adjacent to one another.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SmallGrid">
      <summary>
            Specifies horizontal and vertical lines that cross and are spaced 50 percent
            closer together than hatch style Cross.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SmallCheckerBoard">
      <summary>
            Specifies a hatch that has the appearance of a checkerboard.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LargeCheckerBoard">
      <summary>
            Specifies a hatch that has the appearance of a checkerboard with
            squares that are twice the size of SmallCheckerBoard.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.OutlinedDiamond">
      <summary>
            Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SolidDiamond">
      <summary>
            Specifies a hatch that has the appearance of a checkerboard placed diagonally.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.LegendOrientationEnum">
      <summary>
            Use the members of this enumeration to set the value of
            the <see cref="P:C1.Win.C1Chart.Legend.Orientation" /> in
            the <see cref="T:C1.Win.C1Chart.Legend" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.Auto">
      <summary>
            Horizontal for legends with north and south Compass values,
            and Vertical for legends with east and west Compass values.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.Vertical">
      <summary>
            Legend entries are added side by side as (horizontally) as legend width permits.
            If sufficient width is not available, additional legend rows are created.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.Horizontal">
      <summary>
            Legend entries are stacked vertically as legend height permits.
            If sufficient height is not available, additional legend columns are created.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.HorizontalVariableItemWidth">
      <summary>
            The same as Horizontal, but entries can have different widths according to its content.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.VerticalVariableItemHeight">
      <summary>
            The same as Vertical, but entries can have different heights according to its content.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Border">
      <summary>
            The Border class is used to describe the border appearance of various elements
            of the chart, including the chart itself, the ChartArea, the Legend, the Header, the Footer and Labels.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.Border.ShouldSerializeColor">
      <summary>
            Returns false if the Border Color property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to use Color.Transparent and use the BackColor
            of the parent Style as the basis for the border color.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.BorderStyle">
      <summary>
            Gets or sets the border style.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.Color">
      <summary>
            Gets or sets the border color.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.Thickness">
      <summary>
            Gets or sets the border thickness.
            </summary>
      <remarks>
            Some BorderStyles have a fixed thickness.  In these cases the Thickness property has no effect. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.Rounding">
      <summary>
            Gets the Rounding object that controls the rounding of corners.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="T:C1.Win.C1Chart.Rounding">
      <summary>
            Provides the properties set that describes the rounding of border corners.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.All">
      <summary>
            Gets or sets the radius of rounding for all corners of the rectangle.
            </summary>
      <remarks>
            Setting this property changes all of the corners by changing the values of the
            <see cref="P:C1.Win.C1Chart.Rounding.LeftTop" />, <see cref="P:C1.Win.C1Chart.Rounding.LeftBottom" />,
            <see cref="P:C1.Win.C1Chart.Rounding.RightTop" />, and <see cref="P:C1.Win.C1Chart.Rounding.RightBottom" />
            properties. If these properties are re-set after setting the All property,
            then each corner may have a different radius.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.LeftTop">
      <summary>
            Gets or sets the radius of rounding for the left top corner of the rectangle.
            </summary>
      <remarks>
            Setting this property will override the <see cref="P:C1.Win.C1Chart.Rounding.All" />
            property value for the LeftTop region of the border.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.LeftBottom">
      <summary>
            Gets or sets the radius of rounding for the left bottom corner of the rectangle.
            </summary>
      <remarks>
            Setting this property will override the <see cref="P:C1.Win.C1Chart.Rounding.All" />
            property value for the LeftBottom region of the border.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.RightTop">
      <summary>
            Gets or sets the radius of rounding for the right top corner of the rectangle.
            </summary>
      <remarks>
            Setting this property will override the <see cref="P:C1.Win.C1Chart.Rounding.All" />
            property value for the RightTop region of the border.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.RightBottom">
      <summary>
            Gets or sets the radius of rounding for the right bottom corner of the rectangle.
            </summary>
      <remarks>
            Setting this property will override the <see cref="P:C1.Win.C1Chart.Rounding.All" />
            property value for the RightBottom region of the border.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="T:C1.Win.C1Chart.Style">
      <summary>
            The Style class is used to describe the appearance of various elements of the chart,
            including the chart itself, the ChartArea, the Legend, the Header, the Footer and Labels.
            Typically, an object’s style and/or one or more of its properties are inherited the object’s
            parent style or its default style.  All Style properties have an associated Reset Method
            that restores the style property inheritance state.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeBackColor">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.BackColor" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the BackColor from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetBackColor">
      <summary>
            Resets the inheritance state of the element backcolor.
            </summary>
      <remarks>
            This method resets the inheritance state of the element backcolor.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeForeColor">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.ForeColor" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the ForeColor from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetForeColor">
      <summary>
            Resets the inheritance state of the element forecolor.
            </summary>
      <remarks>
            This method resets the inheritance state of the element forecolor.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeFont">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.Font" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Font from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetFont">
      <summary>
            Resets the inheritance state of the element font.
            </summary>
      <remarks>
            This method resets the inheritance state of the element font.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeOpaque">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.Opaque" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Opaque from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetOpaque">
      <summary>
            Resets the inheritance state of the element opaque.
            </summary>
      <remarks>
            This method resets the inheritance state of the element opaque.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeHorizontalAlignment">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.HorizontalAlignment" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the HorizontalAlignment from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetHorizontalAlignment">
      <summary>
            Resets the inheritance state of the element text horizontal alignment.
            </summary>
      <remarks>
            This method resets the inheritance state of the element text horizontal alignment.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeVerticalAlignment">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.VerticalAlignment" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the VerticalAlignment from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetVerticalAlignment">
      <summary>
            Resets the inheritance state of the element text vertical alignment.
            </summary>
      <remarks>
            This method resets the inheritance state of the element text vertical alignment.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeImageAlignment">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.ImageAlignment" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the ImageAlignment from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetImageAlignment">
      <summary>
            Resets the inheritance state of the element image alignment.
            </summary>
      <remarks>
            This method resets the inheritance state of the element image alignment.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeRotation">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.Rotation" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Rotation from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetRotation">
      <summary>
            Resets the inheritance state of the element text rotation.
            </summary>
      <remarks>
            This method resets the inheritance state of the element text rotation.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeBorder">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.Border" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Border from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetBorder">
      <summary>
            Resets the inheritance state of the element border.
            </summary>
      <remarks>
            This method resets the inheritance state of the element border.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeBackColor2">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.BackColor2" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the BackColor2 from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeAutowrap">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.Autowrap" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Autowrap from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetAutowrap">
      <summary>
            Resets the inheritance state of the style Autowrap.
            </summary>
      <remarks>
            This method resets the inheritance state of the style Autowrap.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeVerticalText">
      <summary>
            Returns false if the Style <see cref="P:C1.Win.C1Chart.Style.VerticalText" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the VerticalText from the style of the parent object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetVerticalText">
      <summary>
            Resets the inheritance state of the style VerticalText.
            </summary>
      <remarks>
            This method resets the inheritance state of the style VerticalText.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.BackColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.ForeColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Font">
      <summary>
            Gets or sets the font object.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Opaque">
      <summary>
            Gets or sets the opaqueness of the background.
            </summary>
      <remarks>
            If an object’s Opaque property is true, then the object’s background is brushed
            in the backcolor before the foreground is drawn.  If an object’s Opaque property is false,
            the background is not brushed and only the object’s foreground is drawn. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.HorizontalAlignment">
      <summary>
            Gets or sets the text horizontal alignment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.VerticalAlignment">
      <summary>
            Gets or sets the text vertical alignment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.ImageAlignment">
      <summary>
            Gets or sets the image alignment.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Rotation">
      <summary>
            Gets or sets the text orientation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Border">
      <summary>
            Gets the border object.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.BackColor2">
      <summary>
            Gets or sets the gradient or hatch background.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.GradientStyle">
      <summary>
            Defines the style of the background gradient filling.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.HatchStyle">
      <summary>
            Defines the style of the background hatch filling.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Autowrap">
      <summary>
            Gets or sets whether the text is automatically wrapped.
            </summary>
      <remarks>
            Most text containing objects within C1Chart can automatically wrap text within them,
            including header, footer, axes titles, labels and the legend (title only, not series names).
            However, all of these objects can be sized automatically.  Automatic sizing is always based
            upon a single line of text whenever possible.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.VerticalText">
      <summary>
            Gets or sets whether text is displayed vertically.
            </summary>
      <remarks>
            VerticalText allows some double byte characters to be
            rendered from top to bottom instead of left to right. For single byte
            characters VerticalText appears as rotated text, 90 degrees in the
            clockwise direction.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="T:C1.Win.C1Chart.Title">
      <summary>
            The Title class is used to describe the appearance of the Header and the Footer.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.Title.ShouldSerializeLocationDefault">
      <summary>
            Returns false if the Title <see cref="P:C1.Win.C1Chart.Title.LocationDefault" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is LocationDefault.Width = -1, LocationDefault.Height = -1,
            which results in automatic location of the Title based upon the Compass property.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ResetLocationDefault">
      <summary>
            Resets the Title location so it is calculated automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ShouldSerializeSizeDefault">
      <summary>
            Returns false if the Title <see cref="P:C1.Win.C1Chart.Title.SizeDefault" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is SizeDefault.Width = -1, SizeDefault.Height = -1,
            which results in automatic sizing of the Title.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ResetSizeDefault">
      <summary>
            Resets Title size so it is calculated automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ShouldSerializeStyle">
      <summary>
            Returns false if the Title <see cref="P:C1.Win.C1Chart.Title.Style" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Style from the C1Chart Style property.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ResetStyle">
      <summary>
            Resets Title style inheritance state.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Color)">
      <summary>
            Appends the specified text to the Rft string using the
            specified color and the object default font.  Transparent
            colors cannot be used by an Rtf rendering.
            </summary>
      <param name="Text">Text string to be appended to existing Rtf.</param>
      <param name="Color">ForeColor of the appended text.</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Font)">
      <summary>
            Appends the specified text to the Rft string using the
            object ForeColor and the specified font.  Transparent
            colors cannot be used for an Rtf rendering.
            </summary>
      <param name="Text">Text string to be appended to existing Rtf.</param>
      <param name="Font">Font of the appended text.</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Color,System.Drawing.Font)">
      <summary>
            Appends the specified text to the Rtf string using the
            specified color and font.  Transparent colors cannot
            be used for an Rtf rendering.
            </summary>
      <param name="Text">Text string to be appended to existing Rtf.</param>
      <param name="Color">ForeColor of the appended text.</param>
      <param name="Font">Font of the appended text.</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Color,System.Drawing.Font,System.Windows.Forms.HorizontalAlignment)">
      <summary>
            Appends the specified text to the Rtf string using the
            specified color, font and alignment.  Transparent colors cannot
            be used for an Rtf rendering.
            </summary>
      <param name="Text">Text string to be appended to existing Rtf.</param>
      <param name="Color">ForeColor of the appended text.</param>
      <param name="Font">Font of the appended text.</param>
      <param name="Align">Alignment of the appended text.</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Compass">
      <summary>
            Gets or sets the general positioning of the title.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Location">
      <summary>
            Gets or sets the location of the title in chart control client coordinates.
            </summary>
      <remarks>
            The Location property always returns the actual location of the upper,
            left corner of the chart element it describes whether or not the element
            placement is manual or automatic. Modifying this value will change LocationDefault.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Size">
      <summary>
            Gets or sets the size of the title in chart control client coordinates.
            </summary>
      <remarks>
            The Size property always returns the actual size of the chart element it describes
            whether or not the element placement is manual or automatic. Modifying this value will change SizeDefault.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.LocationDefault">
      <summary>
            Gets or sets the default location of the title.
            </summary>
      <remarks>
            The LocationDefault property specifies the location of the upper,
            left corner of the chart element it describes.  Non-negative values indicate
            the explicit position in chart client coordinates to place the chart element.
            Negative values will allow autopositioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.SizeDefault">
      <summary>
            Gets or sets the default size of the title.
            </summary>
      <remarks>
            The SizeDefault property specifies the size of the chart element it describes.
            Non-negative values indicate the explicit width and height in chart client coordinates
            to place the chart element. Negative values will allow autopositioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Text">
      <summary>
            Gets or set title text.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Style">
      <summary>
            Gets the title style. 
            </summary>
      <remarks>
            Inherits from the C1Chart style.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Visible">
      <summary>
            Gets or sets the title visibility.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.TooltipText">
      <summary>
            Gets or sets the tooltip text.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Title.Rtf">
      <summary>
            Gets or sets the formatted text.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.Title.Image">
      <summary>
            Gets or sets the image.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Legend">
      <summary>
            Provides access to the customization of the legend for the chart.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.Legend.SeriesFromCoord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
            Obtains the group and series indices of the legend entry nearest to the specified client coordinates. 
            Mouse coordinates are specified in client coordinates.
            </summary>
      <param name="XCoord">X client coordinate.</param>
      <param name="YCoord">Y client coordinate.</param>
      <param name="GroupIndex">Group index.</param>
      <param name="SeriesIndex">Series index.</param>
      <returns>
            The return value indicates successful calculation.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.RectFromSeries(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="GroupIndex">Group index.</param>
      <param name="SeriesIndex">Series index.</param>
      <returns>
            Returns the minimal Rectangle circumscribing the specified series entry in the legend.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ShouldSerializeLocationDefault">
      <summary>
            Returns false if the Legend LocationDefault property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is LocationDefault.Width = -1, LocationDefault.Height = -1,
            which results in automatic location of the Legend.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ResetLocationDefault">
      <summary>
            Resets the Legend location so it is calculated automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ShouldSerializeSizeDefault">
      <summary>
            Returns false if the Legend SizeDefault property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is SizeDefault.Width = -1, SizeDefault.Height = -1,
            which results in automatic sizing of the Legend.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ResetSizeDefault">
      <summary>
            Resets Legend size so it is calculated automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ShouldSerializeStyle">
      <summary>
            Returns false if the Legend <see cref="P:C1.Win.C1Chart.Legend.Style" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Style from the C1Chart <see cref="P:C1.Win.C1Chart.C1Chart.Style" /> property.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ResetStyle">
      <summary>
            Resets Legend style inheritance state.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Compass">
      <summary>
            Gets or sets the general positioning of the legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Location">
      <summary>
            Gets or sets the location of the legend in chart control client coordinates.
            </summary>
      <remarks>
            Modifying this value will change LocationDefault.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Size">
      <summary>
            Gets or sets the size of the legend in chart control client coordinates.
            </summary>
      <remarks>
            Modifying this value will change SizeDefault.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.LocationDefault">
      <summary>
            Gets or sets the default location of the legend.
            </summary>
      <remarks>
            Negative values will allow autopositioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.SizeDefault">
      <summary>
            Gets or sets the default size of the legend.
            </summary>
      <remarks>
            Negative values will allow autopositioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Text">
      <summary>
            Gets or sets the primary text of the legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Style">
      <summary>
            Gets the legend style.
            </summary>
      <remarks>
            The legend style inherits from the C1Chart style.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Visible">
      <summary>
            Gets or sets the legend visibility.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Orientation">
      <summary>
            Gets or sets the orientation of the legend entries.
            </summary>
      <remarks>
        <para>
            The legend entries can be oriented in a vertical or horizontal fashion.
            </para>
        <para>
            Vertical orientation indicates that legend entries will stack vertically
            as the legend height permits.  If the legend height cannot contain all of
            the entries and the legend is allowed to size itself, then additional columns
            of stacked entries will be added to the legend.
            </para>
        <para>
            Horizontal orientation indicates that legend entries will be created side by side
            as legend width permits.  If the legend width cannot contain all of the entries and
            the legend is allowed to size itself, then additional rows of entries will be added to the legend.
            </para>
        <para>
            Auto orientation automatically selects an appropriate orientation based upon
            the legend Compass property.  For east and west Compass values, Vertical orientation is used.
             For north and south Compass values, Horizontal orientation is used.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Reversed">
      <summary>
            Determines the order of the ChartGroups in the legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.TooltipText">
      <summary>
            Gets or sets the tooltip text.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="T:C1.Win.C1Chart.Axis">
      <summary>
            The Axis class describes the axis of the chart.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ShouldSerializeForeColor">
      <summary>
            Returns false if the Axis ForeColor property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the ForeColor from the ChartArea object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ResetForeColor">
      <summary>
            Resets the inheritance state of the axis forecolor.
            </summary>
      <remarks>
            This method resets the inheritance state of the axis forecolor.
            By default, the forecolor used for the axis is that specified by the ChartArea style.
            In the inherited state, any changes to the ChartArea style are reflected in the axis forecolor.
            However, if the forecolor for the axis is explicitly changed, changing the ChartArea style
            forecolor no longer affects the axis style. Calling ResetForecolor() restores the inherited state,
            so once again the forecolor used by the axis will be the same as that specified by the ChartArea style.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ShouldSerializeFont">
      <summary>
            Returns false if the Axis Font property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the font from the ChartArea object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ResetFont">
      <summary>
            Resets the inheritance state of the axis font.
            </summary>
      <remarks>
            This method resets the inheritance state of the axis font.
            By default, the font used for the axis is that specified by the ChartArea style.
            In the inherited state, any changes to the ChartArea style are reflected in the axis font.
            However, if the font for the axis is explicitly changed, changing the ChartArea style font
            no longer affects the axis style.  Calling ResetFont() restores the inherited state,
            so once again the font used by the axis will be the same as that specified by the ChartArea style.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.SetMinMax(System.Object,System.Object)">
      <summary>
            Sets one or both the values of the Axis Min and Axis Max properties at the same time.
            If the specified Min value is less than the specified Max value, the values are swapped.
            </summary>
      <param name="newMin">New axis minimum.</param>
      <param name="newMax">New axis maximum.</param>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMin">
      <summary>
            Gets the current value of the Axis Min property as an object.
            </summary>
      <returns>
            The current value of the Axis minimum.
            </returns>
      <remarks>
            This method retrieves the value as an object of the same type as
            the appropriate coordinate data for the first series.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMin(System.Type)">
      <summary>
            Gets the current value of the Axis Min property as an object.
            </summary>
      <param name="t">Type.</param>
      <returns>
      </returns>
      <remarks>
            This method retrieves the value as an object of the specified datatype.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMax">
      <summary>
            Gets the current value of the Axis Max property as an object.
            </summary>
      <returns>
            The current value of the Axis maximum.
            </returns>
      <remarks>
            This method retrieves the value as an object of the same type as
            the appropriate coordinate data for the first series.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMax(System.Type)">
      <summary>
            Gets the current value of the Axis Max property as an object.
            </summary>
      <param name="t">Type.</param>
      <returns>
            The current value of the Axis maximum.
            </returns>
      <remarks>
            This method retrieves the value as an object of the specified datatype.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.ForeColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
      <remarks>
        <para>
            Inherits from the <see cref="T:C1.Win.C1Chart.ChartArea" />.
            The ForeColor is used to set the color of the axis line and annotations.
            </para>
        <para>
            Associated with the ForeColor Property, is the ResetForeColor() method.
            This method restores the inheritance state for the axis forecolor.
            If a forecolor is explicitly set for an axis, it no longer inherits from the ChartArea,
            so changing the ChartArea forecolor no longer affects or changes the axis value.
            Calling ResetForecolor () restores the inherited state so changes to the ChartArea
            font will once again change the axis forecolor.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Font">
      <summary>
            Gets or sets the font object.
            </summary>
      <remarks>
        <para>
            Inherits from the <see cref="T:C1.Win.C1Chart.ChartArea" />.
            </para>
        <para>
            Associated with the Font Property, is the ResetFont() method.
            This method restores the inheritance state for the axis font.
            If a font is explicitly set for an axis, it no longer inherits from the ChartArea;
            so changing the ChartArea font no longer affects or changes the axis value.
            Calling ResetFont() restores the inherited state so changes to the ChartArea font
            will once again change the axis font.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Alignment">
      <summary>
            Gets or sets the text alignment within the axis display.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Rotation">
      <summary>
            Gets or sets the rotational orientation of the textual caption of the axis.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Text">
      <summary>
            Gets or sets the textual caption of the axis.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Max">
      <summary>
            Gets or sets the maximum value of the axis.
            </summary>
      <remarks>
            Setting the Max property automatically changes <see cref="P:C1.Win.C1Chart.Axis.AutoMax" /> to false.
            If the Max value is set to a new value, which is less than the current
            value of the <see cref="P:C1.Win.C1Chart.Axis.Min" /> property,
            then the <see cref="P:C1.Win.C1Chart.Axis.Min" /> property is also reset to a new value,
            which maintains the same difference between the current Max and Min values.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Min">
      <summary>
            Gets or sets the minimum value of the axis.
            </summary>
      <remarks>
            Setting the Min property automatically changes <see cref="P:C1.Win.C1Chart.Axis.AutoMin" /> to false.
            If the Min value is set to a new value, which is greater than the current value of
            the <see cref="P:C1.Win.C1Chart.Axis.Max" /> property, then the 
            <see cref="P:C1.Win.C1Chart.Axis.Max" /> property is also reset to a new value,
            which maintains the same difference between the current Max and Min values.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Name">
      <summary>
            Gets the axis name.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnotationRotation">
      <summary>
            Gets or sets the clockwise angle of rotation for the axis annotations.
            </summary>
      <remarks>
            The angle of rotation is always specified in degrees.  Rotations between +/- 30 to +/- 60 degrees
            are ideal for X-axis annotation when a large number of labels are desired. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoFormat">
      <summary>
            Gets or sets the annotation format for the axis.
            </summary>
      <remarks>
        <para>
            The AnnoFormat property allow specification of numeric and time formats using enumerated values.
            </para>
        <para>
            For numeric values, each of the enumerations specify formatting similar to that specified
            by the .Net <see cref="T:System.Globalization.NumberFormatInfo" />, including Currency, General, Exponential, Percentage,
            Roundtrip and Hexadecimal.  NumericManual is used in conjunction with the AnnoFormatString property
            to specify a custom format string.
            </para>
        <para>
            For date/time values, each of the enumerations specify formatting similar to that specified
            by the .Net <see cref="T:System.Globalization.DateTimeFormatInfo" /> class, including combinations of long
            and short dates and times, and universal time representations.  DateManual is used in conjunction
            with the AnnoFormatString property to specify a custom format string.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoFormatString">
      <summary>
            Gets or sets the annotation format string used with manual formats.
            </summary>
      <remarks>
        <para>
            Only used when <see cref="P:C1.Win.C1Chart.Axis.AnnoFormat" /> property is NumericManual or DateManual.
            The AnnoFormatString property specifies a custom string for formatting the annotations along the axis.
            </para>
        <para>
            When the AnnoFormat property is NumericManual, the AnnoFormatString property can be set to format
            strings as described by the .Net double.ToString(AnnoFormatString) method call.
            Custom numeric format strings are described in detail by the .Net documentation under
            “Custom Numeric Format Strings”.  If the AnnoFormatString property is empty, then “g” or General is used.
            </para>
        <para>
            When the AnnoFormat property is DateManual, the AnnoFormatString property can be set to format
            string as described by the .Net DateTime.ToString(AnnoFormatSTring) method call.
            Custom DateTime format strings are described in detail by the .Net documentation 
            under “Date and Time Format Strings”.  If the AnnoFormatString property is empty,
            then C1Chart selects a format string appropriate for the time span defined by the axis maximum and minimum values.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoVerticalText">
      <summary>
            Gets or sets whether annotation text is displayed vertically.
            </summary>
      <remarks>
            AnnoVerticalText allows some double byte characters to be
            rendered from top to bottom instead of left to right. For
            single byte characters AnnoVerticalText appears as rotated
            text, 90 degrees in the clockwise direction.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.VerticalText">
      <summary>
            Gets or sets whether the label text is displayed vertically.
            </summary>
      <remarks>
            VerticalText allows some double byte characters to be
            rendered from top to bottom instead of left to right. For
            single byte characters VerticalText appears as rotated
            text, 90 degrees in the clockwise direction.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Thickness">
      <summary>
            Gets or sets the line thickness of the axis in pixels.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Reversed">
      <summary>
            Gets or sets whether the axis is normal or reversed (ascending or descending).
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.UnitMajor">
      <summary>
            Gets or sets the units between major tick marks.
            </summary>
      <remarks>
            Setting this value automatically changes <see cref="P:C1.Win.C1Chart.Axis.AutoMajor" /> to false.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.UnitMinor">
      <summary>
            Gets or sets the units between minor tick marks.
            </summary>
      <remarks>
            Setting this value automatically changes <see cref="P:C1.Win.C1Chart.Axis.AutoMinor" /> to false.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMajor">
      <summary>
            Gets or sets whether major tick mark values are calculated automatically.
            </summary>
      <remarks>
            Setting the <see cref="P:C1.Win.C1Chart.Axis.UnitMajor" /> property automatically sets
            <see cref="P:C1.Win.C1Chart.Axis.AutoMajor" /> to false. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMinor">
      <summary>
            Gets or sets whether minor tick mark values are calculated automatically.
            </summary>
      <remarks>
            Setting the <see cref="P:C1.Win.C1Chart.Axis.UnitMinor" /> property automatically sets
            <see cref="P:C1.Win.C1Chart.Axis.AutoMinor" /> to false.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMax">
      <summary>
            Gets or sets whether the axis maximum value is calculated automatically.
            </summary>
      <remarks>
            Setting the <see cref="P:C1.Win.C1Chart.Axis.Max" /> property automatically sets
            <see cref="P:C1.Win.C1Chart.Axis.AutoMax" /> to false. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMin">
      <summary>
            Gets or sets whether the axis minimum value is calculated automatically.
            </summary>
      <remarks>
            Setting the <see cref="P:C1.Win.C1Chart.Axis.Min" /> property automatically sets
            <see cref="P:C1.Win.C1Chart.Axis.AutoMin" /> to false.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickMajor">
      <summary>
            Gets or sets the type of major tick mark.
            </summary>
      <remarks>
            Tick marks can be place on either side or both sides of the axis line.
            Note that if the TickMajor property is set to <see cref="F:C1.Win.C1Chart.TickMarksEnum.None" />
            then major tick marks are not drawn.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickMinor">
      <summary>
            Gets or sets the type of minor tick mark.
            </summary>
      <remarks>
            Tick marks can be placed on either side or both sides of the axis line.
            Note that if the TickMinor property is set to <see cref="F:C1.Win.C1Chart.TickMarksEnum.None" />,
            then minor tick marks are not drawn.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickFactorMajor">
      <summary>
            Gets or sets an integral factor for major tick mark length.
            </summary>
      <remarks>
            Tick marks are sized based on the thickness of the axis line as well as
            the tick factor. Doubling the tick factor doubles the length of the axis
            tick mark.  Values are limited to integers from 1 to 20.  Values outside
            of this range are ignored.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickFactorMinor">
      <summary>
            Gets or sets an integral factor for minor tick mark length.
            </summary>
      <remarks>
            Tick marks are sized based on the thickness of the axis line as well as
            the tick factor. Doubling the tick factor doubles the length of the axis
            tick mark.  Values are limited to integers from 1 to 20.  Values outside
            of this range are ignored.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickGauge">
      <summary>
            Gets or sets the approximate number of intervals delineated by gauge marks
            between major tick marks.
            </summary>
      <remarks>
            Gauge marks are oversized minor tick marks used to subdivide minor ticks
            for easy reading.  Use 0 for none (default), 1 for automatic and &gt; 1
            for approximate number of sections of minor tick marks delimited by gauge marks
            between each set of major tick marks.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Axis.NoAnnoOverlap">
      <summary>
            Gets or sets whether axis annotations are permitted to overlap.
            </summary>
      <remarks>
            Setting NoAnnoOverlap suppresses the drawing of any axis annotation that would
            overlap a previously drawn annotation regardless of the reason for the overlap.
            This property does not change scaling or generation of major and minor tick marks.
            The property is not normally required for applications with AutoMajor set to true.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickLabels">
      <summary>
            Gets or sets the placement of the annotation labels relative the axis.
            </summary>
      <remarks>
            Axis annotations can be placed on the chart in several positions or not at all.
            See the <see cref="T:C1.Win.C1Chart.TickLabelsEnum" /> Enumeration for details.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.GridMajor">
      <summary>
            Gets or sets the major grid lines object.
            </summary>
      <remarks>
            Major grids are placed coincident with major tick marks at <see cref="P:C1.Win.C1Chart.Axis.UnitMajor" /> intervals.
            The GridMajor property is used to set the grid line appearance. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.GridMinor">
      <summary>
            Gets or sets the minor grid lines object.
            </summary>
      <remarks>
            Minor grids are placed coincident with minor tick marks at <see cref="P:C1.Win.C1Chart.Axis.UnitMinor" /> intervals.
            The GridMinor property is used to set the grid line appearance. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoMethod">
      <summary>
            Gets or sets the annotation method used.
            </summary>
      <remarks>
            AnnotationMethodEnum has two possible values, ValueLabels or Values.
            Values annotation can be used with any chart type in any instance.
            ValueLablels annotation cannot be used on the X-axis and the Y-axis for Pie charts.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.ValueLabels">
      <summary>
            Gets the <see cref="T:C1.Win.C1Chart.ValueLabelsCollection" /> object.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.OnTop">
      <summary>
            Gets or sets whether axis and gridlines appear on top of the chart image.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Compass">
      <summary>
            Gets or sets the general positioning of the axis.
            </summary>
      <remarks>
            X may be set to North/South, Y and Y2 may be set to East/West.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Visible">
      <summary>
            Gets or sets the axis visibility.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.IsLogarithmic">
      <summary>
            Gets or sets when the axis is scaled logarithmically.
            </summary>
      <remarks>
            Logarithmic scaling does not make mathematical sense when values are less than or equal to zero.
            Therefore, negative and zero values are not plotted against axes that have the IsLogarithmic property set to true. 
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Origin">
      <summary>
            Gets or sets the axis origin, the value on axis where the perpendicular axis is rendered.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoOrigin">
      <summary>
            Gets or sets whether the axis origin is selected automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.LogarithmicBase">
      <summary>
            Gets or sets the base of the logarithmic scale used.
            </summary>
      <remarks>
            Less than or equal to 1 specifies natural logs.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.ScrollBar">
      <summary>
            Gets the axis scroll bar.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="T:C1.Win.C1Chart.PlotArea">
      <summary>
            The PlotArea class describes the plot area of the chart.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeBackColor">
      <summary>
            Returns false if the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.BackColor" />
            property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the BackColor from the ChartArea object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ResetBackColor">
      <summary>
            Resets the inheritance state of the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.BackColor" />.
            </summary>
      <remarks>
            This method resets the inheritance state of the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.BackColor" />.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeForeColor">
      <summary>
            Returns false if the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.ForeColor" />
            property is in the default state.
            </summary>
      <returns>Boolean.</returns>
      <remarks>
            The default state is to inherit the ForeColor from the ChartArea object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ResetForeColor">
      <summary>
            Resets the inheritance state of the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.ForeColor" />.
            </summary>
      <remarks>
            This method resets the inheritance state of the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.ForeColor" />.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeOpaque">
      <summary>
            Returns false if the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.Opaque" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the Opaque from the ChartArea object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ResetOpaque">
      <summary>
            Resets the inheritance state of the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.Opaque" />.
            </summary>
      <remarks>
            This method resets the inheritance state of the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.Opaque" />.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeBackColor2">
      <summary>
            Returns false if the PlotArea <see cref="P:C1.Win.C1Chart.PlotArea.BackColor2" /> property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the BackColor2 from the ChartArea object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Location">
      <summary>
            Gets the location of the PlotArea in chart control client coordinates.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Size">
      <summary>
            Gets the size of the PlotArea in chart control client coordinates.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.LocationDefault">
      <summary>
            Gets or sets the default location of the PlotArea.
            </summary>
      <remarks>
            The LocationDefault property specifies the location of the upper, left corner of the chart element it describes.
            Non-negative values indicate the explicit position in chart client coordinates to place the chart element.
            Negative values will allow auto-positioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.SizeDefault">
      <summary>
            Gets or sets the default size of the PlotArea.
            </summary>
      <remarks>
            The SizeDefault property specifies the size of the chart element it describes.
            Non-negative values indicate the explicit width and height in chart client coordinates
            to place the chart element. Negative values will allow auto-positioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.BackColor">
      <summary>
            Gets or sets the backcolor of the PlotArea.
            </summary>
      <remarks>
            Inherits from the ChartArea.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.ForeColor">
      <summary>
            Gets or sets the forecolor of the PlotArea.
            </summary>
      <remarks>
            Inherits from the ChartArea.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Opaque">
      <summary>
            Gets or sets the whether the PlotArea background is opaque.
            </summary>
      <remarks>
            Inherits from the ChartArea.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Boxed">
      <summary>
            Gets or sets the whether the PlotArea is enclosed in a box (solid border).
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Visible">
      <summary>
            Gets or sets the PlotArea visibility.
            </summary>
      <remarks>
            If the PlotArea is not visible, the data is not charted.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.AlarmZones">
      <summary>
            Gets the AlarmZonesCollection.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.BackColor2">
      <summary>
            Gets or sets the gradient or hatch background.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.GradientStyle">
      <summary>
            Defines the style of the background gradient filling.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.View3D">
      <summary>
            Gets the View3D object of the PlotArea.
            </summary>
      <remarks>
            The returned View3D object has properties which are used to set 3D aspects
            of the PlotArea for charts with 3D effects.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.HatchStyle">
      <summary>
            Defines the style of the background hatch filling.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.UseAntiAlias">
      <summary>
            Gets or sets a value indicating whether to use anti-aliasing while rendering chart data.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Margin">
      <summary>
            Specifies the margins of the chart element.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.Margin.SetMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets all of the Margin properties at once.
            </summary>
      <param name="left">Left margin.</param>
      <param name="top">Top margin.</param>
      <param name="right">Right margin.</param>
      <param name="bottom">Bottom margin.</param>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Top">
      <summary>
            Gets or sets the number of pixels between the top edge of the ChartArea and the ChartArea contents.
            </summary>
      <remarks>
            Setting the Top property of the Margin to –1 will result in an automatic calculation for the Top value.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Left">
      <summary>
            Gets or sets the number of pixels between the left edge of the ChartArea and the ChartArea contents.
            </summary>
      <remarks>
            Setting the Left property of the Margin to –1 will result in an automatic calculation for the Left value.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Bottom">
      <summary>
            Gets or sets the number of pixels between the bottom edge of the ChartArea and the ChartArea contents.
            </summary>
      <remarks>
            Setting the Bottom property of the Margin to –1 will result in an automatic calculation for the Bottom value.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Right">
      <summary>
            Gets or sets the number of pixels between the right edge of the ChartArea and the ChartArea contents.
            </summary>
      <remarks>
            Setting the Right property of the Margin to –1 will result in an automatic calculation for the Right value.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="T:C1.Win.C1Chart.Area">
      <summary>
            The Area class describes the ChartArea of the chart.
            </summary>
      <remarks>
            This area includes all axes and the charted data.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeMargins">
      <summary>
            Returns false if the ChartArea margins are set to their default values.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default for all margins is -1(auto-positioning).
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeLocationDefault">
      <summary>
            Returns false if the ChartArea LocationDefault property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is LocationDefault.X = -1, LocationDefault.Y = -1,
            which results in automatic placement of the ChartArea.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ResetLocationDefault">
      <summary>
            Resets the Area location so it is calculated automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeSizeDefault">
      <summary>
            Returns false if the ChartArea SizeDefault property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is SizeDefault.Width = -1, SizeDefault.Height = -1,
            which results in automatic sizing of the ChartArea.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ResetSizeDefault">
      <summary>
            Resets Area size so it is calculated automatically.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeStyle">
      <summary>
            Returns false if the ChartArea style property is in the default state.
            </summary>
      <returns>
            Boolean.
            </returns>
      <remarks>
            The default state is to inherit the style from the parent <see cref="T:C1.Win.C1Chart.C1Chart" /> object.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ResetStyle">
      <summary>
            Resets Area style inheritance state.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.PlotArea">
      <summary>
            Gets the ChartPlot object that describes the region where data is charted.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.AxisX">
      <summary>
            Gets the primary X-axis object.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.AxisY">
      <summary>
            Gets the primary Y-axis object.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.AxisY2">
      <summary>
            Gets the primary Y2 axis object.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Axes">
      <summary>
            Gets the axes collection.
            </summary>
      <remarks>
            This collection contains the X, Y and Y2 axes. The Axes collection is provided to allow
            the convenience of iterating on each axis in the collection while setting properties.
            The elements of the collection are the same objects as exposed by the Area AxisX, AxisY
            and AxisY2 properties.  The number of elements in the Axes collection cannot be changed.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Location">
      <summary>
            Gets or sets the location of the ChartArea in chart control client coordinates.
            </summary>
      <remarks>
        <para>
            The Location property always returns the actual location of the upper, left corner of
            the chart element it describes whether or not the element placement is manual or automatic.
            </para>
        <para>
            Modifying this value will change <see cref="P:C1.Win.C1Chart.Area.LocationDefault" />.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Size">
      <summary>
            Gets or sets the size of the ChartArea in chart control client coordinates.
            </summary>
      <remarks>
        <para>
            The Size property always returns the actual size of the chart element
            it describes whether or not the element placement is manual or automatic.
            </para>
        <para>
            Modifying this value will change <see cref="P:C1.Win.C1Chart.Area.SizeDefault" />.
            </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Margins">
      <summary>
            Gets or sets the size of the Chart Area margins.
            </summary>
      <remarks>
            The four margin values (Bottom, Top, Left, and Right) are each C1Chart Margin objects.
            Each object takes an integer value, and setting its value to –1 will allow for margin auto-positioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.LocationDefault">
      <summary>
            Gets or sets the default location of the ChartArea.
            </summary>
      <remarks>
            The LocationDefault property specifies the location of the upper, left corner of the chart element it describes.
            Non-negative values indicate the explicit position in chart client coordinates to place the chart element.
            Negative values will allow auto-positioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.SizeDefault">
      <summary>
            Gets or sets the default size of the ChartArea.
            </summary>
      <remarks>
            The SizeDefault property specifies the size of the chart element it describes.
            Non-negative values indicate the explicit width and height in chart client coordinates
            to place the chart element. Negative values will allow auto-positioning.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Style">
      <summary>
            Gets the ChartArea style.
            </summary>
      <remarks>
            Inherits from the C1Chart style. The chart elements included within the ChartArea area,
            including Axes and PlotArea inherit their styles from the ChartArea style.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Visible">
      <summary>
            Gets or sets the ChartArea visibility.
            </summary>
      <remarks>
            If this property is false, the ChartArea and all objects included in the ChartArea,
            include Axes and PlotArea are not visible.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Inverted">
      <summary>
            Gets or sets whether the chart area is inverted.
            </summary>
      <remarks>
            This property is necessary for Inverted Bar Charts.
            Setting Inverted to True will invert the Axes, to reverse the Minimum and Maximum values of the Axis,
            use the <see cref="P:C1.Win.C1Chart.Axis.Reversed" /> property.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="T:C1.Win.C1Chart.ColorGeneration">
      <summary>
            This enumeration specifies color themes used to
            generate colors for data series.  Named color themes,
            other than Custom are similar to those in Microsoft Office.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.CopyCurrentToCustom">
      <summary>
            Copies the currently specified color group into the custom group.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Custom">
      <summary>
            Custom color generation.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Standard">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Office">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.GrayScale">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Apex">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Aspect">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Civic">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Concourse">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Equity">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Flow">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Foundry">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Median">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Metro">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Module">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Opulent">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Oriel">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Origin">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Paper">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Solstice">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Technic">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Trek">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Urban">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Verve">
      <summary>
            Uses similar colors as the Office 2007 theme of the same name.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataBinding.DataBindingForm">
      <summary>
            Summary description for DataBindingForm.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.DataBinding.DataBindingForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.Designer.DesignerUI">
      <summary>
            Summary description for DesignerUI.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.FunctionCodeLanguageEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.FunctionBase.CodeLanguage" />
            property in the <see cref="T:C1.Win.C1Chart.FunctionBase" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeLanguageEnum.CSharp">
      <summary>
            C#
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeLanguageEnum.VB">
      <summary>
            VB.Net
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.FunctionCodeTypeEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.FunctionBase.CodeType" />
            property in the <see cref="T:C1.Win.C1Chart.FunctionBase" />.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeTypeEnum.Formula">
      <summary>
            Code text represents expression
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeTypeEnum.Method">
      <summary>
            Code text represents body of method
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeTypeEnum.Unit">
      <summary>
            Code text represents code unit
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ISimpleFunction">
      <summary>
            Provides an interface for defining a simple one-variable function of the form y(x) = f(x).
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ISimpleFunction.Calculate(System.Double)">
      <summary>
            Calculates the value of the function at the specified parameter value.
            </summary>
      <param name="x">Parameter.</param>
      <returns>Double.</returns>
      <seealso cref="T:C1.Win.C1Chart.ISimpleFunction" />
    </member>
    <member name="T:C1.Win.C1Chart.CalculateFunctionEventHandler">
      <summary>
            Delegate for function calculation events.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.CalculateFunctionEventArgs">
      <summary>
            Stores event arguments for CalculateFunctionEventHandler.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.CalculateFunctionEventArgs.Parameter">
      <summary>
            Gets the value of parameter of function at which the function value must be calculated.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.CalculateFunctionEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.CalculateFunctionEventArgs.Result">
      <summary>
            Gets the result of function calculation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.CalculateFunctionEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.PlotLinesMethodEnum">
      <summary>
            Use the members of this enumeration to set the value of the
            <see cref="P:C1.Win.C1Chart.FunctionBase.PlotLinesMethod" /> property in the
            <see cref="T:C1.Win.C1Chart.FunctionBase" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotLinesMethodEnum.Lines">
      <summary>
            The points are connected with straight lines
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotLinesMethodEnum.Splines">
      <summary>
            The points are connected with spline curves
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.FunctionBase">
      <summary>
            Abstract base class for all functions.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeValid">
      <summary>
            Gets whether the function compiles correctly.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeErrors">
      <summary>
            Gets the string descriptions of any compiler errors.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeType">
      <summary>
            Gets or sets whether the code will be compiled as formula, a method or as full compile unit.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeLanguage">
      <summary>
            Gets or sets the programming language used for compiling (C# or VB).
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.LineStyle">
      <summary>
            Gets or sets the line style used for plotting the function.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.PlotLinesMethod">
      <summary>
            Gets or sets the method used for plotting the function.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.PlotNumPoints">
      <summary>
            Gets or sets the number of points used when plotting the function.
            </summary>
      <remarks>
            This property controls the quality of function plotting. Increase PlotNumPoints
            if function is not smooth or is not shown in detail.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.Visible">
      <summary>
            Gets or sets whether the function plot is visible.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.LegendEntry">
      <summary>
            Gets or sets whether the function will be shown in legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.Label">
      <summary>
            Gets or sets the label of the function.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.PlotOverData">
      <summary>
            Gets or sets whether the function is plotted over or behind data series plots.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="T:C1.Win.C1Chart.YFunction">
      <summary>
            The Yfunction class  is used to describe simple functions defined  explicitly by equations of the form y(x) = f(x).
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Chart.YFunction" /> class.
            This constructor is equivalent to YFunction(true).
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Chart.YFunction" /> class.
            <param name="Disposable">
            Specifies whether the YFunction object should be created in a way that allows the
            compiled functions (in-memory assemblies) be unloaded.
            </param><remarks>
            When the Disposable parameter is true, an in-memory assembly is created
            another AppDomain which is unloaded from the application when the YFunction
            object goes out of scope.  If the Disposable parameter is false, then the in-memory
            created assemblies cannot be unloaded until the application is terminated. Note
            that an AppDomain is used only if the current permission set allows.  Web applications
            always create function assemblies in the current AppDomain.
            </remarks></summary>
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.GetY(System.Double)">
      <summary>
            Calculates the value of the function at specified X value.
            </summary>
      <param name="x">Parameter.</param>
      <returns>Double.</returns>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.GetYValues(System.Double[])">
      <summary>
            Calculates the values of the function at specified X values.
            </summary>
      <param name="x">Parameter.</param>
      <returns>Double[].</returns>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.AutoMax">
      <summary>
            Gets or sets whether the maximum X value is calculated automatically.
            </summary>
      <remarks>
            When AutoMax is true the AxisX.Max is used.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.AutoMin">
      <summary>
            Gets or sets whether the minimum X value is calculated automatically.
            </summary>
      <remarks>
            When AutoMin is true the AxisX.Min is used as minimum x.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.CodeText">
      <summary>
            Gets or sets the function code.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.CustomFunction">
      <summary>
            Gets or sets a user-defined custom function object.
            </summary>
      <remarks>
            To obtain complete control of the Yfunction calculation, a class inheriting from
            <see cref="T:C1.Win.C1Chart.ISimpleFunction" /> can be implemented and instantiated.
            After the CustomFunction property is set to an instance of such a class object,
            the chart will plot the user-defined <see cref="T:C1.Win.C1Chart.YFunction" /> with the appropriate styles and legend entry.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.MaxX">
      <summary>
            Gets or sets the maximum X value of the plotted function.
            </summary>
      <remarks>
            Setting MaxX changes the <see cref="P:C1.Win.C1Chart.YFunction.AutoMax" /> to false.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.MinX">
      <summary>
            Gets or sets the minimum X value of the plotted function.
            </summary>
      <remarks>
            Setting MinX changes the <see cref="P:C1.Win.C1Chart.YFunction.AutoMin" /> to false.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="E:C1.Win.C1Chart.YFunction.CalculateY">
      <summary>
            Fires whenever the function value is calculated.
            </summary>
      <remarks>
            The event handler receives an argument of type <see cref="T:C1.Win.C1Chart.CalculateFunctionEventArgs" />
            containing data related to this event.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="T:C1.Win.C1Chart.ParametricFunction">
      <summary>
            Represents a function defined by  a pair of equations, x(t) = f1(t) and y(t) = f2(t),
            where t is an independent variable.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Chart.ParametricFunction" /> class.
            This constructor is equivalent to ParametricFunction(true).
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Chart.ParametricFunction" /> class.
            <param name="Disposable">
            Specifies whether the ParametricFunction object should be created in a way that allows the
            compiled functions (in-memory assemblies) be unloaded.
            </param><remarks>
            When the Disposable parameter is true, an in-memory assembly is created
            another AppDomain which is unloaded from the application when the ParametricFunction
            object goes out of scope.  If the Disposable parameter is false, then the in-memory
            created assemblies cannot be unloaded until the application is terminated. Note
            that an AppDomain is used only if the current permission set allows.  Web applications
            always create function assemblies in the current AppDomain.
            </remarks></summary>
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetX(System.Double)">
      <summary>
            Calculates the x value of function at specified parameter t.
            </summary>
      <param name="t">Parameter.</param>
      <returns>Double.</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetXValues(System.Double[])">
      <summary>
            Calculates the x values of the function at specified t values.
            </summary>
      <param name="t">Parameter.</param>
      <returns>Double[].</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetY(System.Double)">
      <summary>
            Calculates the y value of function at specified parameter t.
            </summary>
      <param name="t">Parameter.</param>
      <returns>Double.</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetYValues(System.Double[])">
      <summary>
            Calculates the y values of the function at specified t values.
            </summary>
      <param name="t">Parameter.</param>
      <returns>Double[].</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeTextX">
      <summary>
            Gets or sets the function code for the x value calculation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeTextY">
      <summary>
            Gets or sets the function code for the y value calculation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeLinesX">
      <summary>
            Gets or sets the multi-line presentation of the function code for the x value calculation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeLinesY">
      <summary>
            Gets or sets the multi-line presentation of the function code for the y value calculation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CustomFunctionX">
      <summary>
            Gets or sets a custom function object for the x value calculation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.MaxT">
      <summary>
            Gets or sets the maximum parameter value when plotting the function.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.MinT">
      <summary>
            Gets or sets the minimum parameter value when plotting the function.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CustomFunctionY">
      <summary>
            Gets or sets the custom function object for the y value calculation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="E:C1.Win.C1Chart.ParametricFunction.CalculateX">
      <summary>
            Fires when the x value is calculated.
            </summary>
      <remarks>
            The event handler receives an argument of type <see cref="T:C1.Win.C1Chart.CalculateFunctionEventArgs" />
            containing data related to this event.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="E:C1.Win.C1Chart.ParametricFunction.CalculateY">
      <summary>
            Fires when the y value is calculated.
            </summary>
      <remarks>
            The event handler receives an argument of type <see cref="T:C1.Win.C1Chart.CalculateFunctionEventArgs" />
            containing data related to this event.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="T:C1.Win.C1Chart.FunctionsCollection">
      <summary>
            Stores functions for plotting.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Add(C1.Win.C1Chart.FunctionBase)">
      <summary>
            Adds the specified function to the collection.
            </summary>
      <param name="f">Function.</param>
      <returns>Integer index.</returns>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Insert(System.Int32,C1.Win.C1Chart.FunctionBase)">
      <summary>
            Inserts the specified function in the collection at the specified index.
            </summary>
      <param name="index">Index.</param>
      <param name="f">Function.</param>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Remove(C1.Win.C1Chart.FunctionBase)">
      <summary>
            Removes the specified function from the collection.
            </summary>
      <param name="f">Function to remove.</param>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Contains(C1.Win.C1Chart.FunctionBase)">
      <summary>
            Determines whether a value is in the FunctionsCollection.
            </summary>
      <param name="f">Function.</param>
      <returns>Boolean.</returns>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.CopyTo(C1.Win.C1Chart.FunctionBase[],System.Int32)">
      <summary>
            Copies data values to the specified array beginning at the specified index from the FunctionsCollection.
            </summary>
      <param name="array">Array.</param>
      <param name="index">Index.</param>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.IndexOf(C1.Win.C1Chart.FunctionBase)">
      <summary>
            Gets the index of the first specified value in the FunctionsCollection.
            </summary>
      <param name="f">Function.</param>
      <returns>Integer index</returns>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionsCollection.Item(System.Int32)">
      <summary>
            Gets the specified function from the collection by numeric index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.RegressionStatistics">
      <summary>
            Contains statistical information about regression trend line.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Ssr">
      <summary>
            Gets the sum of squares due to regression.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Sse">
      <summary>
            Gets the sum of squares due to error.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Sey">
      <summary>
            Gets the standard error for the y estimate.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Coeffs">
      <summary>
            Gets the calculated coefficients of regression equation.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.DF">
      <summary>
            Gets the degrees of freedom. 
            </summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Rsq">
      <summary>
            Gets the coefficient of determination (R-squared).
            </summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.F">
      <summary>
            Gets the F-observed(F-statistic) value.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="T:C1.Win.C1Chart.TrendLineTypeEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.TrendLine.TrendLineType" />
            property in the <see cref="T:C1.Win.C1Chart.TrendLine" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Polynom">
      <summary>
            Regression fit to the equation Y(x) = C0 + C1*x + C2*x2 + … + Cn-1*xn-1, where n – number of terms.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Exponent">
      <summary>
            Regression fit to the equation Y(x) = C0 * exp( C1*x).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Logarithmic">
      <summary>
            Regression fit to the equation Y(x) = C0 * ln(C1*x).
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Power">
      <summary>
            Regression fit to the equation Y(x) = C0 * x C1.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Fourier">
      <summary>
            Regression fit to the equation Y(x) = C0 + C1 * cos(x) + C2 * sin(x) + C3 * cos(2*x) + C4 * sin(2*x) + …
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.MovingAverage">
      <summary>
            Moving average of y data values Yi = ( yi + yi-1 + yi-2 + … + yi-p+1 ) / p, where p – period.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Average">
      <summary>
            Average of y data values.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Minimum">
      <summary>
            Minimum of y data values.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Maximum">
      <summary>
            Maximum of y data values.
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataArrayEnum">
      <summary>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Chart.TrendLine.DataArray" />
            property in the <see cref="T:C1.Win.C1Chart.TrendLine" /> class.
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y">
      <summary>
            Specifies ChartDataSeries.Y array
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y1">
      <summary>
            Specifies ChartDataSeries.Y1 array
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y2">
      <summary>
            Specifies ChartDataSeries.Y2 array
            </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y3">
      <summary>
            Specifies ChartDataSeries.Y3 array
            </summary>
    </member>
    <member name="T:C1.Win.C1Chart.ICustomTrendLine">
      <summary>
            Provides interface for implementing a user-defined TrendLine.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.Calculate(C1.Win.C1Chart.TrendLine,System.Double[],System.Double[])">
      <summary>
            Calculates the points of the TrendLine to be plotted, the X values and Y values must be returned by
            <see cref="M:C1.Win.C1Chart.ICustomTrendLine.GetXValues" /> and 
            <see cref="M:C1.Win.C1Chart.ICustomTrendLine.GetYValues" /> methods.
            </summary>
      <param name="tl">TrendLine.</param>
      <param name="x">X value,</param>
      <param name="y">Y value.</param>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.GetXValues">
      <summary>
            Returns an array that contains the X values of the TrendLine.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.GetYValues">
      <summary>
            Returns an array that contains the Y values of the TrendLine.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.GetY(System.Double)">
      <summary>
            Calculates the value of the TrendLine at specified X value.
            </summary>
      <param name="x">Parameter.</param>
      <returns>Double.</returns>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.ICustomTrendLine.Text">
      <summary>
            Gets the text associated with the TrendLine shown in legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="T:C1.Win.C1Chart.TrendLine">
      <summary>
            The TrendLine class is used to perform a regression analysis or the specified data series,
            provide statistics about the regression, and chart the result.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.TrendLine.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Chart.TrendLine" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.TrendLine.GetCoefficients">
      <summary>
            Returns the calculatedCalculated the coefficients of the TrendLine. 
            </summary>
      <returns>
            Array of coefficients that describes equation of trendlines.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLine.GetY(System.Double)">
      <summary>
            Calculates the value of the TrendLine at the specified value of X. 
            </summary>
      <param name="x">X value</param>
      <returns>Calculated y value.</returns>
      <remarks>
            This method only applies to TrendLines types that perform regressions.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.CustomTrendLine">
      <summary>
            Gets or sets the object that provides a user-defined calculation of the TrendLine.
            </summary>
      <remarks>
            To obtain complete control of the TrendLine calculations, a class inheriting from
            <see cref="T:C1.Win.C1Chart.ICustomTrendLine" /> can be implemented and instantiated.
            After the CustomTrendLine property is set to an instance of such an object,
            the chart will plot the user-defined <see cref="T:C1.Win.C1Chart.TrendLine" />
            with the appropriate styles and legend entry.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.TrendLineType">
      <summary>
            Gets or sets the type of TrendLine.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.Period">
      <summary>
            Gets or sets the period of the TrendLine calculation.
            </summary>
      <remarks>
            This property is useful only for calculating a moving average TrendLine.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.LineStyle">
      <summary>
            Gets or sets the line style used  to plot the TrendLine.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.ForecastBackward">
      <summary>
            Gets or sets the value that specifies how long the trend line extends in x axis
            direction relative to the appropriate data minimum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.ForecastForward">
      <summary>
            Gets or sets the value that specifies how long the trend line extends in x axis direction
             relative to the appropriate data maximum.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.PlotOverData">
      <summary>
            Gets or sets whether the TrendLine is plotted over or behind the data.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.LegendEntry">
      <summary>
            Gets or sets whether the TrendLine will be shown in legend.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.Text">
      <summary>
            Gets or sets the text associated with the TrendLine shown in legend.
            </summary>
      <remarks>
            Text property can contains keywords that are replaced with appropriate value when rendering legend.
            The keyword must be in brackets.
            <list type="table"><listheader><term>Keyword</term><description>Value</description></listheader><item><term>#DSLABEL</term><description>Label of appropriate data series</description></item><item><term>#TRENDTYPE</term><description>Type of trend line</description></item><item><term>#SHORTTRENDTYPE</term><description>Short type of trend line</description></item><item><term>#NTERMS</term><description>Number of terms for regression trend line</description></item><item><term>#PERIOD</term><description>Period for moving average trend line</description></item><item><term>#FORMULA</term><description>Formula of regression equation</description></item></list></remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.DataArray">
      <summary>
            Gets or sets the array index of y values that is used for TrendLine.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.PlotNumPoints">
      <summary>
            Gets or sets the number of points used to plot the TrendLine.
            </summary>
      <remarks>
            This property controls the quality of trend line plotting. Increase PlotNumPoints
            if trend line is not smooth or is not shown in detail.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.PlotLinesMethod">
      <summary>
            Gets or sets the method used to plot a TrendLine.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.Visible">
      <summary>
            Gets or sets whether the TrendLine is visible.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.SeriesIndex">
      <summary>
            Gets or sets the index of the data series that is used to calculate the TrendLine.
            </summary>
      <remarks>
            If the SeriesIndex value does not address a specific data series, then the TrendLine is not shown.  
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.SeriesLabel">
      <summary>
            Gets the label of the data series that is used to calculate the TrendLine.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.RegressionStatistics">
      <summary>
            Gets the statistical information about calculated regression.
            </summary>
      <remarks>
            This property is meaningful only for TrendLines that use a specific regression model,
            including Polynomial, Log, Power. Exponential, or Fourier. For TrendLines that do not
            use one of these regression models,   Nothing (VB) or null (C#) is returned.
            If data can not be fit to the specified regression model also returns Nothing.(VB) or null (C#).
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.RegressionOptions">
      <summary>
            Gets the options for calculation of the regression.
            </summary>
      <remarks>
            Only for trend lines that use regression model Polynomial, Log, Power. Exponential, Fourier.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="T:C1.Win.C1Chart.TrendLinesCollection">
      <summary>
            The TrendLinesCollection class contains TrendLines associated with
            the <see cref="T:C1.Win.C1Chart.ChartData" /> object.
            </summary>
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.AddNewTrendLine">
      <summary>
            Creates a new TrendLine and appends it to the collection.
            </summary>
      <returns>New TrendLine.</returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Add(C1.Win.C1Chart.TrendLine)">
      <summary>
            Adds the specified TrendLine to the collection.
            </summary>
      <param name="tl">TrendLine.</param>
      <returns>Integer index.</returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Insert(System.Int32,C1.Win.C1Chart.TrendLine)">
      <summary>
            Inserts the specified TrendLine in the collection at the specified index.
            </summary>
      <param name="index">Index.</param>
      <param name="tl">TrendLine.</param>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Remove(C1.Win.C1Chart.TrendLine)">
      <summary>
            Removes the specified TrendLine from the collection.
            </summary>
      <param name="tl">TrendLine to remove.</param>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Contains(C1.Win.C1Chart.TrendLine)">
      <summary>
            Determines whether the specified TrendLine exists in the collection.
            </summary>
      <param name="tl">TrendLine.</param>
      <returns>
            A boolean indicating whether the specified TrendLine is contained in the collection.
            </returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.CopyTo(C1.Win.C1Chart.TrendLine[],System.Int32)">
      <summary>
            Copies the collection of TrendLines beginning with the specified index to
            the specified array of TrendLinesCollection objects.
            </summary>
      <param name="array">Array.</param>
      <param name="index">Index.</param>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.IndexOf(C1.Win.C1Chart.TrendLine)">
      <summary>
            Gets the current index of the specified TrendLines in the collection.
            </summary>
      <param name="tl">TrendLine to locate.</param>
      <returns>Index.</returns>
      <remarks>
            Returns an integer indicating the element of the specified TrendLine within the collection.
            If the TrendLine is not found the return value is –1.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLinesCollection.Item(System.Int32)">
      <summary>
            Gets the specified TrendLine from the collection by numeric index.
            </summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.RegressionOptions">
      <summary>
            Contains options of the regression model.
            </summary>
    </member>
    <member name="P:C1.Win.C1Chart.RegressionOptions.NumTerms">
      <summary>
            Gets or sets the number of terms in regression equation.  For polynomial regressions,
            the number of terms indicates the order of the polynomial, i.e. NumTerms = order + 1.
            Therefore, a linear regression would have NumTerms = 2.
            </summary>
      <remarks>
            Only for polynomial and Fourier trend lines.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.RegressionOptions" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionOptions.UseYIntercept">
      <summary>
            Gets or sets whether the trend line uses YIntercept property. 
            </summary>
      <remarks>
            Only for polynomial trend lines.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.RegressionOptions" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionOptions.YIntercept">
      <summary>
            Gets or sets the y value of the trend line when X = 0.
            </summary>
      <remarks>
            Only for polynomial trend lines.
            </remarks>
      <seealso cref="T:C1.Win.C1Chart.RegressionOptions" />
    </member>
  </members>
</doc>