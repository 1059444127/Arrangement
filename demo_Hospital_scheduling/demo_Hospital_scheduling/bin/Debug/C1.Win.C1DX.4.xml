<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1DX.4</name>
    </assembly>
    <members>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerAsmName">
            <summary>
            For .NET 4.0 version only, used for designer assembly names.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Bool">
            <summary>
            A boolean value stored on 4 bytes (instead of 1 in .NET).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Bool.False">
            <summary>
            The boolean False value.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Bool.True">
            <summary>
            The boolean True value.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Bool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Bool"/> class.
            </summary>
            <param name="boolValue">if set to <c>true</c> [bool value].</param>
        </member>
        <member name="M:C1.Util.DX.Bool.Equals(C1.Util.DX.Bool)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Bool.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Bool.op_Equality(C1.Util.DX.Bool,C1.Util.DX.Bool)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Bool.op_Inequality(C1.Util.DX.Bool,C1.Util.DX.Bool)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Bool.op_Implicit(C1.Util.DX.Bool)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Bool"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Bool.op_Implicit(System.Boolean)~C1.Util.DX.Bool">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:C1.Util.DX.Bool"/>.
            </summary>
            <param name="boolValue">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Bool.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Bool.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Bool.Value">
            <summary>
            Gets or sets the boolean value.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ColorF">
            <summary>
            Represents a color in the form of rgba.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.R">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.G">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.B">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="argb">A packed unsigned integer containing all four color components in ARGB order.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(System.UInt32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="rgb">A packed unsigned integer containing three color components in RGB order.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(C1.Util.DX.ColorF,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="value">The source ColorF.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="color">The System.Drawing.Color value.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(C1.Util.DX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(C1.Util.DX.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ColorF"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, blue, and alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:C1.Util.DX.ColorF.FromArgb(System.Int32)">
            <summary>
            Converts the color from an ARGB integer.
            </summary>
            <param name="argb">A packed integer containing all four color components in ARGB order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a ColorF structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly fully opaque.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a ColorF structure from the four ARGB component (alpha, red, green, and blue) values.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToArgb">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToColor">
            <summary>
            Converts the color into a System.Drawing.Color.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.Lerp(C1.Util.DX.ColorF@,C1.Util.DX.ColorF@,System.Single,C1.Util.DX.ColorF@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:C1.Util.DX.ColorF.Lerp(C1.Util.DX.ColorF,C1.Util.DX.ColorF,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:C1.Util.DX.ColorF.SmoothStep(C1.Util.DX.ColorF@,C1.Util.DX.ColorF@,System.Single,C1.Util.DX.ColorF@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.SmoothStep(C1.Util.DX.ColorF,C1.Util.DX.ColorF,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.AdjustContrast(C1.Util.DX.ColorF@,System.Single,C1.Util.DX.ColorF@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.AdjustContrast(C1.Util.DX.ColorF,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.AdjustSaturation(C1.Util.DX.ColorF@,System.Single,C1.Util.DX.ColorF@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:C1.Util.DX.ColorF.AdjustSaturation(C1.Util.DX.ColorF,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Equality(C1.Util.DX.ColorF,C1.Util.DX.ColorF)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Inequality(C1.Util.DX.ColorF,C1.Util.DX.ColorF)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Explicit(C1.Util.DX.ColorF)~System.Drawing.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.ColorF"/> to <see cref="T:System.Drawing.Color"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Explicit(C1.Util.DX.ColorF)~C1.Util.DX.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.ColorF"/> to <see cref="T:C1.Util.DX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Implicit(C1.Util.DX.ColorF)~C1.Util.DX.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.ColorF"/> to <see cref="T:C1.Util.DX.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Explicit(System.Drawing.Color)~C1.Util.DX.ColorF">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.Color"/> to <see cref="T:C1.Util.DX.ColorF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Explicit(C1.Util.DX.Vector3)~C1.Util.DX.ColorF">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector3"/> to <see cref="T:C1.Util.DX.ColorF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.op_Explicit(C1.Util.DX.Vector4)~C1.Util.DX.ColorF">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector4"/> to <see cref="T:C1.Util.DX.ColorF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.ColorF.Equals(C1.Util.DX.ColorF)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.ColorF"/> is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ColorF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Empty">
            <summary>
            Empty color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.AliceBlue">
            <summary>
            AliceBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.AntiqueWhite">
            <summary>
            AntiqueWhite color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.BlanchedAlmond">
            <summary>
            BlanchedAlmond color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.BlueViolet">
            <summary>
            BlueViolet color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.BurlyWood">
            <summary>
            BurlyWood color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.CadetBlue">
            <summary>
            CadetBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.CornflowerBlue">
            <summary>
            CornflowerBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkBlue">
            <summary>
            DarkBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkCyan">
            <summary>
            DarkCyan color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkGoldenrod">
            <summary>
            DarkGoldenrod color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkGray">
            <summary>
            DarkGray color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkGreen">
            <summary>
            DarkGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkKhaki">
            <summary>
            DarkKhaki color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkMagenta">
            <summary>
            DarkMagenta color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkOliveGreen">
            <summary>
            DarkOliveGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkOrange">
            <summary>
            DarkOrange color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkOrchid">
            <summary>
            DarkOrchid color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkRed">
            <summary>
            DarkRed color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkSalmon">
            <summary>
            DarkSalmon color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkSeaGreen">
            <summary>
            DarkSeaGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkSlateBlue">
            <summary>
            DarkSlateBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkSlateGray">
            <summary>
            DarkSlateGray color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkTurquoise">
            <summary>
            DarkTurquoise color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DarkViolet">
            <summary>
            DarkViolet color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DeepPink">
            <summary>
            DeepPink color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DeepSkyBlue">
            <summary>
            DeepSkyBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DimGray">
            <summary>
            DimGray color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.DodgerBlue">
            <summary>
            DodgerBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.FloralWhite">
            <summary>
            FloralWhite color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.ForestGreen">
            <summary>
            ForestGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.GhostWhite">
            <summary>
            GhostWhite color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.GreenYellow">
            <summary>
            GreenYellow color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.HotPink">
            <summary>
            HotPink color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.IndianRed">
            <summary>
            IndianRed color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LavenderBlush">
            <summary>
            LavenderBlush color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LawnGreen">
            <summary>
            LawnGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LemonChiffon">
            <summary>
            LemonChiffon color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightBlue">
            <summary>
            LightBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightCoral">
            <summary>
            LightCoral color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightCyan">
            <summary>
            LightCyan color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightGray">
            <summary>
            LightGray color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightGreen">
            <summary>
            LightGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightPink">
            <summary>
            LightPink color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightSalmon">
            <summary>
            LightSalmon color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightSeaGreen">
            <summary>
            LightSeaGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightSkyBlue">
            <summary>
            LightSkyBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightSlateGray">
            <summary>
            LightSlateGray color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightSteelBlue">
            <summary>
            LightSteelBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LightYellow">
            <summary>
            LightYellow color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.LimeGreen">
            <summary>
            LimeGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumAquamarine">
            <summary>
            MediumAquamarine color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumBlue">
            <summary>
            MediumBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumOrchid">
            <summary>
            MediumOrchid color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumPurple">
            <summary>
            MediumPurple color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumSeaGreen">
            <summary>
            MediumSeaGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumSlateBlue">
            <summary>
            MediumSlateBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumSpringGreen">
            <summary>
            MediumSpringGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumTurquoise">
            <summary>
            MediumTurquoise color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MediumVioletRed">
            <summary>
            MediumVioletRed color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MidnightBlue">
            <summary>
            MidnightBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MintCream">
            <summary>
            MintCream color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.MistyRose">
            <summary>
            MistyRose color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Moccasin">
            <summary>
            Moccasin color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.NavajoWhite">
            <summary>
            NavajoWhite color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Navy">
            <summary>
            Navy color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.OldLace">
            <summary>
            OldLace color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Olive">
            <summary>
            Olive color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.OliveDrab">
            <summary>
            OliveDrab color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Orange">
            <summary>
            Orange color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.OrangeRed">
            <summary>
            OrangeRed color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Orchid">
            <summary>
            Orchid color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.PaleGoldenrod">
            <summary>
            PaleGoldenrod color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.PaleGreen">
            <summary>
            PaleGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.PaleTurquoise">
            <summary>
            PaleTurquoise color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.PaleVioletRed">
            <summary>
            PaleVioletRed color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.PapayaWhip">
            <summary>
            PapayaWhip color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.PeachPuff">
            <summary>
            PeachPuff color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.PowderBlue">
            <summary>
            PowderBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.RosyBrown">
            <summary>
            RosyBrown color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.RoyalBlue">
            <summary>
            RoyalBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SaddleBrown">
            <summary>
            SaddleBrown color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SandyBrown">
            <summary>
            SandyBrown color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SeaGreen">
            <summary>
            SeaGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SeaShell">
            <summary>
            SeaShell color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SkyBlue">
            <summary>
            SkyBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SlateBlue">
            <summary>
            SlateBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SlateGray">
            <summary>
            SlateGray color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SpringGreen">
            <summary>
            SpringGreen color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.SteelBlue">
            <summary>
            SteelBlue color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.WhiteSmoke">
            <summary>
            WhiteSmoke color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.Yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ColorF.YellowGreen">
            <summary>
            YellowGreen color.
            </summary>
        </member>
        <member name="P:C1.Util.DX.ColorF.IsEmpty">
            <summary>
            Gets whether this ColorF structure is uninitialized.
            </summary>
        </member>
        <member name="P:C1.Util.DX.ColorF.IsTransparent">
            <summary>
            Gets a value indicating if we can skip drawing with this color.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Matrix3x2">
            <summary>
            Direct2D Matrix3x2 3x2. Use <see cref="T:C1.Util.DX.Matrix3x2"/> and implicit cast to <see cref="T:C1.Util.DX.Matrix3x2"/>.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix3x2.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
        <member name="F:C1.Util.DX.Matrix3x2.M11">
            <summary>
            Element (1,1)
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix3x2.M12">
            <summary>
            Element (1,2)
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix3x2.M21">
            <summary>
            Element (2,1)
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix3x2.M22">
            <summary>
            Element (2,2)
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix3x2.M31">
            <summary>
            Element (3,1)
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix3x2.M32">
            <summary>
            Element (3,2)
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix3x2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix3x2"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix3x2"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Determinant">
            <summary>
            Calculates the determinant of this matrix.
            </summary>
            <returns>Result of the determinant.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Add(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Add(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Add(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Subtract(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Subtract(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Subtract(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Multiply(C1.Util.DX.Matrix3x2@,System.Single,C1.Util.DX.Matrix3x2@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Multiply(C1.Util.DX.Matrix3x2@,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Multiply(C1.Util.DX.Matrix3x2,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Multiply(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Multiply(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Multiply(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Divide(C1.Util.DX.Matrix3x2@,System.Single,C1.Util.DX.Matrix3x2@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Divide(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Negate(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Negate(C1.Util.DX.Matrix3x2)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(C1.Util.DX.Size2F@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(C1.Util.DX.Size2F)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(System.Single,System.Single,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(System.Single,System.Single)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(System.Single,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(System.Single)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(C1.Util.DX.Size2F,C1.Util.DX.Point2F)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(C1.Util.DX.Size2F,C1.Util.DX.Point2F,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(System.Single,System.Single,C1.Util.DX.Point2F)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Scale(System.Single,System.Single,C1.Util.DX.Point2F,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a scale transformation matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Rotation(System.Single,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a matrix that rotates.
            </summary>
            <param name="angle">Angle of rotation in degrees. Angles are measured clockwise when looking along the rotation axis.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Rotation(System.Single)">
            <summary>
            Creates a matrix that rotates.
            </summary>
            <param name="angle">Angle of rotation in degrees. Angles are measured clockwise when looking along the rotation axis.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Rotation(System.Single,C1.Util.DX.Point2F,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a matrix that rotates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Rotation(System.Single,C1.Util.DX.Point2F)">
            <summary>
            Creates a matrix that rotates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Skew(System.Single,System.Single,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Skew(System.Single,System.Single)">
            <summary>
            Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Skew(System.Single,System.Single,C1.Util.DX.Point2F,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Skew(System.Single,System.Single,C1.Util.DX.Point2F)">
            <summary>
            Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Translation(C1.Util.DX.Size2F@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Translation(C1.Util.DX.Size2F)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Translation(System.Single,System.Single,C1.Util.DX.Matrix3x2@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Translation(System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.TransformPoint(C1.Util.DX.Matrix3x2,C1.Util.DX.Point2F)">
            <summary>
            Transforms a vector by this matrix.
            </summary>
            <param name="matrix">The matrix to use as a tranformation matrix.</param>
            <param name="point">The original vector to apply the transformation.</param>
            <returns>The result of the transformation for the input vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.TransformPoint(C1.Util.DX.Matrix3x2@,C1.Util.DX.Point2F@,C1.Util.DX.Point2F@)">
            <summary>
            Transforms a vector by this matrix.
            </summary>
            <param name="matrix">The matrix to use as a tranformation matrix.</param>
            <param name="point">The original vector to apply the transformation.</param>
            <param name="result">The result of the transformation for the input vector.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Invert">
            <summary>
            Calculates the inverse of this matrix instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Invert(C1.Util.DX.Matrix3x2)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>the inverse of the specified matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Invert(C1.Util.DX.Matrix3x2@,C1.Util.DX.Matrix3x2@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Addition(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_UnaryPlus(C1.Util.DX.Matrix3x2)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchange).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Subtraction(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_UnaryNegation(C1.Util.DX.Matrix3x2)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Multiply(System.Single,C1.Util.DX.Matrix3x2)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Multiply(C1.Util.DX.Matrix3x2,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Multiply(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Multiplies two matricies.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Division(C1.Util.DX.Matrix3x2,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Division(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Divides two matricies.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Equality(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Inequality(C1.Util.DX.Matrix3x2,C1.Util.DX.Matrix3x2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Equals(C1.Util.DX.Matrix3x2)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Matrix3x2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.Matrix3x2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:C1.Util.DX.Matrix3x2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix3x2.op_Implicit(C1.Util.DX.Matrix4x4)~C1.Util.DX.Matrix3x2">
            <summary>
            Performs an implicit conversion from <see cref="T:C1.Util.DX.Matrix3x2"/> to <see cref="T:C1.Util.DX.Matrix3x2"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, and M32.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M31, M32.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 5].</exception>
        </member>
        <member name="P:C1.Util.DX.Matrix3x2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="T:C1.Util.DX.Matrix4x4">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.SizeInBytes">
            <summary>
            The size of the <see cref="T:C1.Util.DX.Matrix4x4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.Zero">
            <summary>
            A <see cref="T:C1.Util.DX.Matrix4x4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.Identity">
            <summary>
            The identity <see cref="T:C1.Util.DX.Matrix4x4"/>.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix4x4.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix4x4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix4x4"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="M14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="M24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="M33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="M34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="M41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="M42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="M43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="M44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix4x4"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the matrix.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Add(C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Add(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Subtract(C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Subtract(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Multiply(C1.Util.DX.Matrix4x4@,System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Multiply(C1.Util.DX.Matrix4x4,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Multiply(C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Multiply(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Divide(C1.Util.DX.Matrix4x4@,System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Divide(C1.Util.DX.Matrix4x4,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Divide(C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Divide(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Negate(C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Negate(C1.Util.DX.Matrix4x4)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Transpose(C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Transpose(C1.Util.DX.Matrix4x4)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Invert(C1.Util.DX.Matrix4x4@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Invert(C1.Util.DX.Matrix4x4)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Scaling(C1.Util.DX.Vector3@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Scaling(C1.Util.DX.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Scaling(System.Single,System.Single,System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Scaling(System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationX(System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationY(System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationZ(System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationAxis(C1.Util.DX.Vector3@,System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.RotationAxis(C1.Util.DX.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Translation(C1.Util.DX.Vector3@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Translation(C1.Util.DX.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Translation(System.Single,System.Single,System.Single,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Skew(System.Single,C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creats a skew/shear matrix by means of a translation vector, a rotation vector, and a rotation angle.
            shearing is performed in the direction of translation vector, where translation vector and rotation vector define the shearing plane.
            The effect is such that the skewed rotation vector has the specified angle with rotation itself.
            </summary>
            <param name="angle">The rotation angle.</param>
            <param name="rotationVec">The rotation vector</param>
            <param name="transVec">The translation vector</param>
            <param name="matrix">Contains the created skew/shear matrix. </param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.AffineTransformation2D(System.Single,System.Single,C1.Util.DX.Vector2@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.AffineTransformation2D(System.Single,System.Single,C1.Util.DX.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.AffineTransformation2D(System.Single,C1.Util.DX.Vector2@,System.Single,C1.Util.DX.Vector2@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.AffineTransformation2D(System.Single,C1.Util.DX.Vector2,System.Single,C1.Util.DX.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Transformation2D(C1.Util.DX.Vector2@,System.Single,C1.Util.DX.Vector2@,C1.Util.DX.Vector2@,System.Single,C1.Util.DX.Vector2@,C1.Util.DX.Matrix4x4@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Transformation2D(C1.Util.DX.Vector2,System.Single,C1.Util.DX.Vector2,C1.Util.DX.Vector2,System.Single,C1.Util.DX.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Addition(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_UnaryPlus(C1.Util.DX.Matrix4x4)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchange).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Subtraction(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_UnaryNegation(C1.Util.DX.Matrix4x4)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Multiply(System.Single,C1.Util.DX.Matrix4x4)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Multiply(C1.Util.DX.Matrix4x4,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Multiply(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Multiplies two matricies.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Division(C1.Util.DX.Matrix4x4,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Division(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Divides two matricies.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Equality(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.op_Inequality(C1.Util.DX.Matrix4x4,C1.Util.DX.Matrix4x4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Equals(C1.Util.DX.Matrix4x4)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Matrix4x4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.Matrix4x4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:C1.Util.DX.Matrix4x4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix4x4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Up">
            <summary>
            Gets or sets the up <see cref="T:C1.Util.DX.Vector3"/> of the matrix; that is M21, M22, and M23.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Down">
            <summary>
            Gets or sets the down <see cref="T:C1.Util.DX.Vector3"/> of the matrix; that is -M21, -M22, and -M23.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Right">
            <summary>
            Gets or sets the right <see cref="T:C1.Util.DX.Vector3"/> of the matrix; that is M11, M12, and M13.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Left">
            <summary>
            Gets or sets the left <see cref="T:C1.Util.DX.Vector3"/> of the matrix; that is -M11, -M12, and -M13.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Forward">
            <summary>
            Gets or sets the forward <see cref="T:C1.Util.DX.Vector3"/> of the matrix; that is -M31, -M32, and -M33.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Backward">
            <summary>
            Gets or sets the backward <see cref="T:C1.Util.DX.Vector3"/> of the matrix; that is M31, M32, and M33.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:C1.Util.DX.Matrix4x4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="T:C1.Util.DX.Matrix5x4">
            <summary>
            Represents a 4x4 mathematical Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.SizeInBytes">
            <summary>
            The size of the <see cref="T:C1.Util.DX.Matrix5x4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.Zero">
            <summary>
            A <see cref="T:C1.Util.DX.Matrix5x4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.Identity">
            <summary>
            The identity <see cref="T:C1.Util.DX.Matrix5x4"/>.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M11">
            <summary>
            Value at row 1 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M12">
            <summary>
            Value at row 1 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M13">
            <summary>
            Value at row 1 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M14">
            <summary>
            Value at row 1 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M21">
            <summary>
            Value at row 2 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M22">
            <summary>
            Value at row 2 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M23">
            <summary>
            Value at row 2 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M24">
            <summary>
            Value at row 2 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M31">
            <summary>
            Value at row 3 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M32">
            <summary>
            Value at row 3 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M33">
            <summary>
            Value at row 3 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M34">
            <summary>
            Value at row 3 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M41">
            <summary>
            Value at row 4 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M42">
            <summary>
            Value at row 4 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M43">
            <summary>
            Value at row 4 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M44">
            <summary>
            Value at row 4 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M51">
            <summary>
            Value at row 5 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M52">
            <summary>
            Value at row 5 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M53">
            <summary>
            Value at row 5 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Matrix5x4.M54">
            <summary>
            Value at row 5 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix5x4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix5x4"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the Matrix5x4.</param>
            <param name="M12">The value to assign at row 1 column 2 of the Matrix5x4.</param>
            <param name="M13">The value to assign at row 1 column 3 of the Matrix5x4.</param>
            <param name="M14">The value to assign at row 1 column 4 of the Matrix5x4.</param>
            <param name="M21">The value to assign at row 2 column 1 of the Matrix5x4.</param>
            <param name="M22">The value to assign at row 2 column 2 of the Matrix5x4.</param>
            <param name="M23">The value to assign at row 2 column 3 of the Matrix5x4.</param>
            <param name="M24">The value to assign at row 2 column 4 of the Matrix5x4.</param>
            <param name="M31">The value to assign at row 3 column 1 of the Matrix5x4.</param>
            <param name="M32">The value to assign at row 3 column 2 of the Matrix5x4.</param>
            <param name="M33">The value to assign at row 3 column 3 of the Matrix5x4.</param>
            <param name="M34">The value to assign at row 3 column 4 of the Matrix5x4.</param>
            <param name="M41">The value to assign at row 4 column 1 of the Matrix5x4.</param>
            <param name="M42">The value to assign at row 4 column 2 of the Matrix5x4.</param>
            <param name="M43">The value to assign at row 4 column 3 of the Matrix5x4.</param>
            <param name="M44">The value to assign at row 4 column 4 of the Matrix5x4.</param>
            <param name="M51">The value to assign at row 5 column 1 of the Matrix5x4.</param>
            <param name="M52">The value to assign at row 5 column 2 of the Matrix5x4.</param>
            <param name="M53">The value to assign at row 5 column 3 of the Matrix5x4.</param>
            <param name="M54">The value to assign at row 5 column 4 of the Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Matrix5x4"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix5x4. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Add(C1.Util.DX.Matrix5x4@,C1.Util.DX.Matrix5x4@,C1.Util.DX.Matrix5x4@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to add.</param>
            <param name="right">The second Matrix5x4 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Add(C1.Util.DX.Matrix5x4,C1.Util.DX.Matrix5x4)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to add.</param>
            <param name="right">The second Matrix5x4 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Subtract(C1.Util.DX.Matrix5x4@,C1.Util.DX.Matrix5x4@,C1.Util.DX.Matrix5x4@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to subtract.</param>
            <param name="right">The second Matrix5x4 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Subtract(C1.Util.DX.Matrix5x4,C1.Util.DX.Matrix5x4)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to subtract.</param>
            <param name="right">The second Matrix5x4 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Multiply(C1.Util.DX.Matrix5x4@,System.Single,C1.Util.DX.Matrix5x4@)">
            <summary>
            Scales a Matrix5x4 by the given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Divide(C1.Util.DX.Matrix5x4@,System.Single,C1.Util.DX.Matrix5x4@)">
            <summary>
            Scales a Matrix5x4 by the given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Negate(C1.Util.DX.Matrix5x4@,C1.Util.DX.Matrix5x4@)">
            <summary>
            Negates a Matrix5x4.
            </summary>
            <param name="value">The Matrix5x4 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Negate(C1.Util.DX.Matrix5x4)">
            <summary>
            Negates a Matrix5x4.
            </summary>
            <param name="value">The Matrix5x4 to be negated.</param>
            <returns>The negated Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Scaling(C1.Util.DX.Vector4@,C1.Util.DX.Matrix5x4@)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, y-axis and w-axis
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Scaling(C1.Util.DX.Vector4)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Scaling(System.Single,System.Single,System.Single,System.Single,C1.Util.DX.Matrix5x4@)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, z-axis and w-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="w">Scaling factor that is applied along the w-axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Scaling(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, z-axis and w-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="w">Scaling factor that is applied along the w-axis.</param>
            <returns>The created scaling Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Scaling(System.Single,C1.Util.DX.Matrix5x4@)">
            <summary>
            Creates a Matrix5x4 that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Scaling(System.Single)">
            <summary>
            Creates a Matrix5x4 that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Translation(C1.Util.DX.Vector4@,C1.Util.DX.Matrix5x4@)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Translation(C1.Util.DX.Vector4)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Translation(System.Single,System.Single,System.Single,System.Single,C1.Util.DX.Matrix5x4@)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="w">W-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation Matrix5x4.</param>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Translation(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="w">W-coordinate offset.</param>
            <returns>The created translation Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_Addition(C1.Util.DX.Matrix5x4,C1.Util.DX.Matrix5x4)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="left">The first Matrix5x4 to add.</param>
            <param name="right">The second Matrix5x4 to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_UnaryPlus(C1.Util.DX.Matrix5x4)">
            <summary>
            Assert a Matrix5x4 (return it unchanged).
            </summary>
            <param name="value">The Matrix5x4 to assert (unchange).</param>
            <returns>The asserted (unchanged) Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_Subtraction(C1.Util.DX.Matrix5x4,C1.Util.DX.Matrix5x4)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="left">The first Matrix5x4 to subtract.</param>
            <param name="right">The second Matrix5x4 to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_UnaryNegation(C1.Util.DX.Matrix5x4)">
            <summary>
            Negates a Matrix5x4.
            </summary>
            <param name="value">The Matrix5x4 to negate.</param>
            <returns>The negated Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_Multiply(System.Single,C1.Util.DX.Matrix5x4)">
            <summary>
            Scales a Matrix5x4 by a given value.
            </summary>
            <param name="right">The Matrix5x4 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_Multiply(C1.Util.DX.Matrix5x4,System.Single)">
            <summary>
            Scales a Matrix5x4 by a given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_Division(C1.Util.DX.Matrix5x4,System.Single)">
            <summary>
            Scales a Matrix5x4 by a given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix5x4.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_Equality(C1.Util.DX.Matrix5x4,C1.Util.DX.Matrix5x4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.op_Inequality(C1.Util.DX.Matrix5x4,C1.Util.DX.Matrix5x4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Equals(C1.Util.DX.Matrix5x4)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Matrix5x4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.Matrix5x4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:C1.Util.DX.Matrix5x4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Matrix5x4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.Row1">
            <summary>
            Gets or sets the first row in the Matrix5x4; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.Row2">
            <summary>
            Gets or sets the second row in the Matrix5x4; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.Row3">
            <summary>
            Gets or sets the third row in the Matrix5x4; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.Row4">
            <summary>
            Gets or sets the fourth row in the Matrix5x4; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.Row5">
            <summary>
            Gets or sets the fifth row in the Matrix5x4; that is M51, M52, M53, and M54.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.TranslationVector">
            <summary>
            Gets or sets the translation of the Matrix5x4; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix5x4; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix5x4.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix5x4; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix5x4 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:C1.Util.DX.Matrix5x4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix5x4 component, depending on the index.</value>
            <param name="row">The row of the Matrix5x4 to access.</param>
            <param name="column">The column of the Matrix5x4 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="T:C1.Util.DX.Point2F">
            <summary>
            Structure specifing a point with float X and Y coordinates.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2F.X">
            <summary>
            The X coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2F.Y">
            <summary>
            The Y coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2F.Empty">
            <summary>
            An empty point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.ToPointF">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2F"/> to <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.#ctor(C1.Win.Interop.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.ToPoint">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2F"/> to <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.#ctor(C1.Util.DX.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.ToPoint2D">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2F"/> to <see cref="T:C1.Util.DX.Point2D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Truncate">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Point2L"/> with truncated X and Y coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Round">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Point2L"/> with rounded X and Y coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Offset(System.Single,System.Single)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Offset(C1.Util.DX.Size2F)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Offset(C1.Util.DX.Point2F,C1.Util.DX.Size2F)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Addition(C1.Util.DX.Point2F,C1.Util.DX.Vector2)">
            <summary>
            Returns the result of addition of the given offset to the specified point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Subtraction(C1.Util.DX.Point2F,C1.Util.DX.Point2F)">
            <summary>
            Returns the result of substruction of point2 from point1.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Subtraction(C1.Util.DX.Point2F,C1.Util.DX.Vector2)">
            <summary>
            Returns the result of substruction of the given vector from point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Equals(C1.Util.DX.Point2F)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Equality(C1.Util.DX.Point2F,C1.Util.DX.Point2F)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Inequality(C1.Util.DX.Point2F,C1.Util.DX.Point2F)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Explicit(C1.Util.DX.Point2F)~System.Drawing.PointF">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Point2F"/> to <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Explicit(System.Drawing.PointF)~C1.Util.DX.Point2F">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.PointF"/> to <see cref="T:C1.Util.DX.Point2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Explicit(C1.Util.DX.Point2F)~C1.Win.Interop.Point">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Point2F"/> to <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Explicit(C1.Win.Interop.Point)~C1.Util.DX.Point2F">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Win.Interop.Point"/> to <see cref="T:C1.Util.DX.Point2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Explicit(C1.Util.DX.Point2F)~C1.Util.DX.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Point2F"/> to <see cref="T:C1.Util.DX.Vector2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.op_Explicit(C1.Util.DX.Vector2)~C1.Util.DX.Point2F">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector2"/> to <see cref="T:C1.Util.DX.Point2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Scale(C1.Util.DX.Point2F,System.Single)">
            <summary>
            Scales X and Y coordinates of a point by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.Scale(System.Single)">
            <summary>
            Scales X and Y coordinates of a point by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.ToDips(C1.Util.DX.Point2F,System.Single,System.Single)">
            <summary>
            Converts a point from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.ToDips(System.Single,System.Single)">
            <summary>
            Converts a point from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.FromDips(C1.Util.DX.Point2F,System.Single,System.Single)">
            <summary>
            Converts a point from DIPs to pixels.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.FromDips(System.Single,System.Single)">
            <summary>
            Converts a point from DIPs to pixels.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2F.DistanceSqr(C1.Util.DX.Point2F)">
            <summary>
            Gets the square of the distance to the given point.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Point2F.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.Point2F"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Point2D">
            <summary>
            Structure specifing a point with double X and Y coordinates.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2D.X">
            <summary>
            The X coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2D.Y">
            <summary>
            The Y coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2D.Empty">
            <summary>
            An empty point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.ToPointF">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2D"/> to <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.#ctor(C1.Win.Interop.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.ToPoint">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2D"/> to <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.#ctor(C1.Util.DX.Point2F)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.ToPoint2F">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2D"/> to <see cref="T:C1.Util.DX.Point2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Truncate">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Point2L"/> with truncated X and Y coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Round">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Point2L"/> with rounded X and Y coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Offset(System.Double,System.Double)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Offset(C1.Util.DX.Size2D)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Offset(C1.Util.DX.Point2D,C1.Util.DX.Size2D)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Equals(C1.Util.DX.Point2D)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.op_Equality(C1.Util.DX.Point2D,C1.Util.DX.Point2D)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.op_Inequality(C1.Util.DX.Point2D,C1.Util.DX.Point2D)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.op_Explicit(C1.Util.DX.Point2D)~C1.Win.Interop.Point">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Point2D"/> to <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.op_Explicit(C1.Win.Interop.Point)~C1.Util.DX.Point2D">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Win.Interop.Point"/> to <see cref="T:C1.Util.DX.Point2D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Scale(C1.Util.DX.Point2D,System.Double)">
            <summary>
            Scales X and Y coordinates of a point by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.Scale(System.Double)">
            <summary>
            Scales X and Y coordinates of a point by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.ToDips(C1.Util.DX.Point2D,System.Single,System.Single)">
            <summary>
            Converts a point from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.ToDips(System.Single,System.Single)">
            <summary>
            Converts a point from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.FromDips(C1.Util.DX.Point2D,System.Single,System.Single)">
            <summary>
            Converts a point from DIPs to pixels.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.FromDips(System.Single,System.Single)">
            <summary>
            Converts a point from DIPs to pixels.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2D.DistanceSqr(C1.Util.DX.Point2D)">
            <summary>
            Gets the square of the distance to the given point.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Point2D.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.Point2D"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Point2L">
            <summary>
            Structure specifing a point with integer X and Y coordinates.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2L.X">
            <summary>
            The X coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2L.Y">
            <summary>
            The Y coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Point2L.Empty">
            <summary>
            An empty point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2L"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Point2L"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.ToPoint">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2L"/> to <see cref="T:System.Drawing.Point"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.ToPoint2F">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2L"/> to <see cref="T:C1.Util.DX.Point2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.ToPoint2D">
            <summary>
            Converts <see cref="T:C1.Util.DX.Point2L"/> to <see cref="T:C1.Util.DX.Point2D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.Offset(C1.Util.DX.Size2L)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.Offset(C1.Util.DX.Point2L,C1.Util.DX.Size2L)">
            <summary>
            Offsets the point by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.Equals(C1.Util.DX.Point2L)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.op_Equality(C1.Util.DX.Point2L,C1.Util.DX.Point2L)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.op_Inequality(C1.Util.DX.Point2L,C1.Util.DX.Point2L)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.op_Explicit(C1.Util.DX.Point2L)~System.Drawing.Point">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Point2L"/> to <see cref="T:System.Drawing.Point"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Point2L.op_Explicit(System.Drawing.Point)~C1.Util.DX.Point2L">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.Point"/> to <see cref="T:C1.Util.DX.Point2L"/>.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Point2L.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.Point2L"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.RectF">
            <summary>
            Defines a RectF. This structure is slightly different from System.Drawing.RectangleF as  
            it is internally storing Left, Top, Right, Bottom instead of Left, Top, Width, Height.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectF.Left">
            <summary>
            The x-coordinate of the left edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectF.Top">
            <summary>
            The y-coordinate of the top edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectF.Right">
            <summary>
            The x-coordinate of the right edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectF.Bottom">
            <summary>
            The y-coordinate of the bottom edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectF.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectF.Infinite">
            <summary>
            A rectangle that has its upper-left corner set to (negative infinity, negative infinity) and its lower-right corner set to (infinity, infinity).
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectF"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectF"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:C1.Util.DX.RectF"/> struct from (left, top, right, bottom) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectF"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.ToRectangleF">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectF"/> to <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.#ctor(C1.Win.Interop.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectF"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.ToRect">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectF"/> to <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.#ctor(C1.Util.DX.RectD)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectF"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.ToRectD">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectF"/> to <see cref="T:C1.Util.DX.RectD"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Truncate">
            <summary>
            Returns a <see cref="T:C1.Util.DX.RectL"/> with truncated coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Circumscribe">
            <summary>
            Returns a <see cref="T:C1.Util.DX.RectL"/> with circumscribed coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Round">
            <summary>
            Returns a <see cref="T:C1.Util.DX.RectL"/> with rounded coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Offset(System.Single,System.Single)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Offset(C1.Util.DX.RectF,System.Single,System.Single)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Offset(C1.Util.DX.RectF,C1.Util.DX.Size2F)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Inflate(System.Single,System.Single)">
            <summary>
            Inflates the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Inflate(C1.Util.DX.RectF,System.Single,System.Single)">
            <summary>
            Inflates the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within this rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Contains(C1.Util.DX.RectF)">
            <summary>
            Determines if the specified rectangle is fully contained within this rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.IntersectsWith(C1.Util.DX.RectF)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.IntersectFast(C1.Util.DX.RectF@)">
            <summary>
            Quickly updates a rectangle to represent the intersection with another rectangle.
            </summary>
            <remarks>
            The resulting rectangle may be invalid. Use the <see cref="P:C1.Util.DX.RectF.HasSpace"/> property to check.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.RectF.Intersect(C1.Util.DX.RectF,C1.Util.DX.RectF)">
            <summary>
            Returns a rectangle that represents the intersection of two rectangles.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Union(C1.Util.DX.RectF,C1.Util.DX.RectF)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Equals(C1.Util.DX.RectF)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Equality(C1.Util.DX.RectF,C1.Util.DX.RectF)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Inequality(C1.Util.DX.RectF,C1.Util.DX.RectF)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Explicit(C1.Util.DX.RectF)~System.Drawing.RectangleF">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.RectF"/> to <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Explicit(System.Drawing.RectangleF)~C1.Util.DX.RectF">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.RectangleF"/> to <see cref="T:C1.Util.DX.RectF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Explicit(C1.Util.DX.RectF)~C1.Win.Interop.Rect">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.RectF"/> to <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Explicit(C1.Win.Interop.Rect)~C1.Util.DX.RectF">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Win.Interop.Rect"/> to <see cref="T:C1.Util.DX.RectF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Explicit(C1.Util.DX.RectF)~C1.Util.DX.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.RectF"/> to <see cref="T:C1.Util.DX.Vector4"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.op_Explicit(C1.Util.DX.Vector4)~C1.Util.DX.RectF">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector4"/> to <see cref="T:C1.Util.DX.RectF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.MakeXYWH">
            <summary>
            Converts the rectangle from (Left, Top, Right, Bottom) to (X, Y, Width, Height) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.MakeLTRB">
            <summary>
            Converts the rectangle from (X, Y, Width, Height) to (Left, Top, Right, Bottom) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Scale(C1.Util.DX.RectF,System.Single)">
            <summary>
            Scales all coordinates of a rectangle by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.Scale(System.Single)">
            <summary>
            Scales all coordinates of a rectangle by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.ToDips(C1.Util.DX.RectF,System.Single,System.Single)">
            <summary>
            Converts a rectangle from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.ToDips(System.Single,System.Single)">
            <summary>
            Converts a rectangle from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.FromDips(C1.Util.DX.RectF,System.Single,System.Single)">
            <summary>
            Converts a rectangle from DIPs to pixels.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectF.FromDips(System.Single,System.Single)">
            <summary>
            Converts a rectangle from DIPs to pixels.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.X">
            <summary>
            Gets or sets the X coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.Y">
            <summary>
            Gets or sets the Y coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.Location">
            <summary>
            Gets the point with coordinates of the left top corner of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.Center">
            <summary>
            Gets the point with coordinates of the rectangle center.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.HasSpace">
            <summary>
            Determines if there is some space within the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectF.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.RectF"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.RectD">
            <summary>
            Structure specifing a rectangle with double Left, Top, Right, Bottom coordinates.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectD.Left">
            <summary>
            The x-coordinate of the left edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectD.Top">
            <summary>
            The y-coordinate of the top edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectD.Right">
            <summary>
            The x-coordinate of the right edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectD.Bottom">
            <summary>
            The y-coordinate of the bottom edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectD.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectD.Infinite">
            <summary>
            A rectangle that has its upper-left corner set to (negative infinity, negative infinity) and its lower-right corner set to (infinity, infinity).
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectD"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectD"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:C1.Util.DX.RectD"/> struct from (left, top, right, bottom) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectD"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.ToRectangleF">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectD"/> to <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.#ctor(C1.Win.Interop.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectD"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.ToRect">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectD"/> to <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.#ctor(C1.Util.DX.RectF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectD"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.ToRectF">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectD"/> to <see cref="T:C1.Util.DX.RectF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Truncate">
            <summary>
            Returns a <see cref="T:C1.Util.DX.RectL"/> with truncated coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Circumscribe">
            <summary>
            Returns a <see cref="T:C1.Util.DX.RectL"/> with circumscribed coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Round">
            <summary>
            Returns a <see cref="T:C1.Util.DX.RectL"/> with rounded coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Offset(System.Double,System.Double)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Offset(C1.Util.DX.RectD,System.Double,System.Double)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Offset(C1.Util.DX.RectD,C1.Util.DX.Size2D)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Inflate(C1.Util.DX.RectD,System.Double,System.Double)">
            <summary>
            Inflates the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Contains(C1.Util.DX.RectD)">
            <summary>
            Determines if the specified rectangle is fully contained within this rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.IntersectsWith(C1.Util.DX.RectD)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.IntersectFast(C1.Util.DX.RectD@)">
            <summary>
            Quickly updates a rectangle to represent the intersection with another rectangle.
            </summary>
            <remarks>
            The resulting rectangle may be invalid. Use the <see cref="P:C1.Util.DX.RectD.HasSpace"/> property to check.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.RectD.Intersect(C1.Util.DX.RectD,C1.Util.DX.RectD)">
            <summary>
            Returns a rectangle that represents the intersection of two rectangles.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Union(C1.Util.DX.RectD,C1.Util.DX.RectD)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Equals(C1.Util.DX.RectD)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.op_Equality(C1.Util.DX.RectD,C1.Util.DX.RectD)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.op_Inequality(C1.Util.DX.RectD,C1.Util.DX.RectD)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.op_Explicit(C1.Util.DX.RectD)~C1.Win.Interop.Rect">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.RectD"/> to <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.op_Explicit(C1.Win.Interop.Rect)~C1.Util.DX.RectD">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Win.Interop.Rect"/> to <see cref="T:C1.Util.DX.RectD"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.MakeXYWH">
            <summary>
            Converts the rectangle from (Left, Top, Right, Bottom) to (X, Y, Width, Height) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.MakeLTRB">
            <summary>
            Converts the rectangle from (X, Y, Width, Height) to (Left, Top, Right, Bottom) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Scale(C1.Util.DX.RectD,System.Double)">
            <summary>
            Scales all coordinates of a rectangle by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.Scale(System.Double)">
            <summary>
            Scales all coordinates of a rectangle by the specified scaleFactor.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.ToDips(C1.Util.DX.RectD,System.Single,System.Single)">
            <summary>
            Converts a rectangle from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.ToDips(System.Single,System.Single)">
            <summary>
            Converts a rectangle from pixels to DIPs.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.FromDips(C1.Util.DX.RectD,System.Single,System.Single)">
            <summary>
            Converts a rectangle from DIPs to pixels.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectD.FromDips(System.Single,System.Single)">
            <summary>
            Converts a rectangle from DIPs to pixels.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.X">
            <summary>
            Gets or sets the X coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.Y">
            <summary>
            Gets or sets the Y coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.Location">
            <summary>
            Gets the point with coordinates of the left top corner of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.Center">
            <summary>
            Gets the point with coordinates of the rectangle center.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.HasSpace">
            <summary>
            Determines if there is some space within the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectD.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.RectD"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.RectL">
            <summary>
            Defines a RectL. This structure is slightly different from System.Drawing.Rectangle as  
            it is internally storing Left, Top, Right, Bottom instead of Left, Top, Width, Height.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectL.Left">
            <summary>
            The x-coordinate of the left edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectL.Top">
            <summary>
            The y-coordinate of the top edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectL.Right">
            <summary>
            The x-coordinate of the right edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectL.Bottom">
            <summary>
            The y-coordinate of the bottom edge.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectL.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="F:C1.Util.DX.RectL.Infinite">
            <summary>
            An infinite rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectL"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectL"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:C1.Util.DX.RectL"/> struct from (left, top, right, bottom) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.RectL"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.ToRectangle">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectL"/> to <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.ToRectF">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectL"/> to <see cref="T:C1.Util.DX.RectF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.ToRectD">
            <summary>
            Converts <see cref="T:C1.Util.DX.RectL"/> to <see cref="T:C1.Util.DX.RectD"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Offset(C1.Util.DX.RectL,System.Int32,System.Int32)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Offset(C1.Util.DX.RectL,C1.Util.DX.Size2L)">
            <summary>
            Offsets the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Inflate(C1.Util.DX.RectL,System.Int32,System.Int32)">
            <summary>
            Inflates the rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified point is contained within this rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Contains(C1.Util.DX.RectL)">
            <summary>
            Determines if the specified rectangle is fully contained within this rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.IntersectsWith(C1.Util.DX.RectL)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.IntersectFast(C1.Util.DX.RectL@)">
            <summary>
            Quickly updates a rectangle to represent the intersection with another rectangle.
            </summary>
            <remarks>
            The resulting rectangle may be invalid. Use the <see cref="P:C1.Util.DX.RectL.HasSpace"/> property to check.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.RectL.Intersect(C1.Util.DX.RectL,C1.Util.DX.RectL)">
            <summary>
            Returns a rectangle that represents the intersection of two rectangles.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Union(C1.Util.DX.RectL,C1.Util.DX.RectL)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.Equals(C1.Util.DX.RectL)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.op_Equality(C1.Util.DX.RectL,C1.Util.DX.RectL)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.op_Inequality(C1.Util.DX.RectL,C1.Util.DX.RectL)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.op_Explicit(C1.Util.DX.RectL)~System.Drawing.Rectangle">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.RectL"/> to <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.op_Explicit(System.Drawing.Rectangle)~C1.Util.DX.RectL">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:C1.Util.DX.RectL"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.MakeXYWH">
            <summary>
            Converts the rectangle from (Left, Top, Right, Bottom) to (X, Y, Width, Height) coordinates.
            </summary>
        </member>
        <member name="M:C1.Util.DX.RectL.MakeLTRB">
            <summary>
            Converts the rectangle from (X, Y, Width, Height) to (Left, Top, Right, Bottom) coordinates.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.X">
            <summary>
            Gets or sets the X coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.Y">
            <summary>
            Gets or sets the Y coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.Location">
            <summary>
            Gets the point with coordinates of the left top corner of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.HasSpace">
            <summary>
            Determines if there is some space within the rectangle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.RectL.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.RectL"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Size2F">
            <summary>
            Structure specifing a size with float Width and Height.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2F.Width">
            <summary>
            The horizontal component of this <see cref="T:C1.Util.DX.Size2F"/> structure.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2F.Height">
            <summary>
            The vertical component of this <see cref="T:C1.Util.DX.Size2F"/> structure.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2F.Empty">
            <summary>
            An empty size.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2F.Infinite">
            <summary>
            A size with infinite Width and Height.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.ToSizeF">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2F"/> to <see cref="T:System.Drawing.SizeF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.#ctor(C1.Win.Interop.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.ToSize">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2F"/> to <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.#ctor(C1.Util.DX.Size2D)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2F"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.ToSize2D">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2F"/> to <see cref="T:C1.Util.DX.Size2D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Truncate">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Size2L"/> with truncated width and height.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Round">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Size2L"/> with rounded width and height.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Add(C1.Util.DX.Size2F,C1.Util.DX.Size2F)">
            <summary>
            Adds the width and height of one Size2F structure to the width and height of another Size2F structure.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Subtract(C1.Util.DX.Size2F,C1.Util.DX.Size2F)">
            <summary>
            Subtracts the width and height of one Size2F structure from the width and height of another Size2F structure.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Scale(C1.Util.DX.Size2F,System.Single)">
            <summary>
            Scales the width and height by the specified scaleFactor. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Scale(System.Single)">
            <summary>
            Scales the width and height by the specified scaleFactor. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Equals(C1.Util.DX.Size2F)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.op_Equality(C1.Util.DX.Size2F,C1.Util.DX.Size2F)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.op_Inequality(C1.Util.DX.Size2F,C1.Util.DX.Size2F)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.op_Explicit(C1.Util.DX.Size2F)~System.Drawing.SizeF">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Size2F"/> to <see cref="T:System.Drawing.SizeF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.op_Explicit(System.Drawing.SizeF)~C1.Util.DX.Size2F">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.SizeF"/> to <see cref="T:C1.Util.DX.Size2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.op_Explicit(C1.Util.DX.Size2F)~C1.Win.Interop.Size">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Size2F"/> to <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2F.op_Explicit(C1.Win.Interop.Size)~C1.Util.DX.Size2F">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Win.Interop.Size"/> to <see cref="T:C1.Util.DX.Size2F"/>.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Size2F.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.Size2F"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Size2D">
            <summary>
            Structure specifing a size with double Width and Height.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2D.Width">
            <summary>
            The horizontal component of this <see cref="T:C1.Util.DX.Size2D"/> structure.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2D.Height">
            <summary>
            The vertical component of this <see cref="T:C1.Util.DX.Size2D"/> structure.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2D.Empty">
            <summary>
            An empty size.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2D.Infinite">
            <summary>
            A size with infinite Width and Height.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.ToSizeF">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2D"/> to <see cref="T:System.Drawing.SizeF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.#ctor(C1.Win.Interop.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.ToSize">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2D"/> to <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.#ctor(C1.Util.DX.Size2F)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2D"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.ToSize2F">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2D"/> to <see cref="T:C1.Util.DX.Size2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Truncate">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Size2L"/> with truncated width and height.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Round">
            <summary>
            Returns a <see cref="T:C1.Util.DX.Size2L"/> with rounded width and height.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Add(C1.Util.DX.Size2D,C1.Util.DX.Size2D)">
            <summary>
            Adds the width and height of one Size2D structure to the width and height of another Size2D structure.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Subtract(C1.Util.DX.Size2D,C1.Util.DX.Size2D)">
            <summary>
            Subtracts the width and height of one Size2D structure from the width and height of another Size2D structure.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Scale(C1.Util.DX.Size2D,System.Double)">
            <summary>
            Scales the width and height by the specified scaleFactor. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Scale(System.Double)">
            <summary>
            Scales the width and height by the specified scaleFactor. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Equals(C1.Util.DX.Size2D)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.op_Equality(C1.Util.DX.Size2D,C1.Util.DX.Size2D)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.op_Inequality(C1.Util.DX.Size2D,C1.Util.DX.Size2D)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.op_Explicit(C1.Util.DX.Size2D)~C1.Win.Interop.Size">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Size2D"/> to <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2D.op_Explicit(C1.Win.Interop.Size)~C1.Util.DX.Size2D">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Win.Interop.Size"/> to <see cref="T:C1.Util.DX.Size2D"/>.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Size2D.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.Size2D"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Size2L">
            <summary>
            Structure specifing a size with integer Width and Height.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2L.Width">
            <summary>
            The horizontal component of this <see cref="T:C1.Util.DX.Size2L"/> structure.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2L.Height">
            <summary>
            The vertical component of this <see cref="T:C1.Util.DX.Size2L"/> structure.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2L.Empty">
            <summary>
            An empty size.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Size2L.Infinite">
            <summary>
            An infinite size.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2L"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Size2L"/> struct.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.ToSize">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2L"/> to <see cref="T:System.Drawing.Size"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.ToSize2F">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2L"/> to <see cref="T:C1.Util.DX.Size2F"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.ToSize2D">
            <summary>
            Converts <see cref="T:C1.Util.DX.Size2L"/> to <see cref="T:C1.Util.DX.Size2D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.Add(C1.Util.DX.Size2L,C1.Util.DX.Size2L)">
            <summary>
            Adds the width and height of one Size2L structure to the width and height of another Size2L structure.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.Subtract(C1.Util.DX.Size2L,C1.Util.DX.Size2L)">
            <summary>
            Subtracts the width and height of one Size2L structure from the width and height of another Size2L structure.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.Equals(C1.Util.DX.Size2L)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.op_Equality(C1.Util.DX.Size2L,C1.Util.DX.Size2L)">
            <summary>
            Determines if the specified Size2L objects are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.op_Inequality(C1.Util.DX.Size2L,C1.Util.DX.Size2L)">
            <summary>
            Determines if the specified Size2L objects are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.ToString">
            <summary>
            Returns a string that represents the current Size2L object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.op_Explicit(C1.Util.DX.Size2L)~System.Drawing.Size">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Size2L"/> to <see cref="T:System.Drawing.Size"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Size2L.op_Explicit(System.Drawing.Size)~C1.Util.DX.Size2L">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.Size"/> to <see cref="T:C1.Util.DX.Size2L"/>.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Size2L.IsEmpty">
            <summary>
            Determines if all components of <see cref="T:C1.Util.DX.Size2L"/> are equal to zero.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector2.SizeInBytes">
            <summary>
            The size of the <see cref="T:C1.Util.DX.Vector2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector2.Zero">
            <summary>
            A <see cref="T:C1.Util.DX.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:C1.Util.DX.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:C1.Util.DX.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector2.One">
            <summary>
            A <see cref="T:C1.Util.DX.Vector2"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="M:C1.Util.DX.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.AngleBetween(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Calculates an angle between two vectors, in radians.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector2.Add(C1.Util.DX.Vector2@,C1.Util.DX.Vector2@,C1.Util.DX.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Add(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Subtract(C1.Util.DX.Vector2@,C1.Util.DX.Vector2@,C1.Util.DX.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Subtract(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Multiply(C1.Util.DX.Vector2@,System.Single,C1.Util.DX.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Multiply(C1.Util.DX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Modulate(C1.Util.DX.Vector2@,C1.Util.DX.Vector2@,C1.Util.DX.Vector2@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Modulate(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Divide(C1.Util.DX.Vector2@,System.Single,C1.Util.DX.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Divide(C1.Util.DX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Negate(C1.Util.DX.Vector2@,C1.Util.DX.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Negate(C1.Util.DX.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Dot(C1.Util.DX.Vector2@,C1.Util.DX.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Dot(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Normalize(C1.Util.DX.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Max(C1.Util.DX.Vector2@,C1.Util.DX.Vector2@,C1.Util.DX.Vector2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Max(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Min(C1.Util.DX.Vector2@,C1.Util.DX.Vector2@,C1.Util.DX.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector2.Min(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Addition(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Addition(C1.Util.DX.Vector2,C1.Util.DX.Point2F)">
            <summary>
            Adds the vector to the point.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Multiply(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Multiplies two vectors.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Subtraction(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_UnaryNegation(C1.Util.DX.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Multiply(System.Single,C1.Util.DX.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Multiply(C1.Util.DX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Division(C1.Util.DX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Division(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Equality(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Inequality(C1.Util.DX.Vector2,C1.Util.DX.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Explicit(C1.Util.DX.Vector2)~C1.Util.DX.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector2"/> to <see cref="T:C1.Util.DX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.op_Explicit(C1.Util.DX.Vector2)~C1.Util.DX.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector2"/> to <see cref="T:C1.Util.DX.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Equals(C1.Util.DX.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Vector2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.Vector2"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:C1.Util.DX.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:C1.Util.DX.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="P:C1.Util.DX.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:C1.Util.DX.Vector2.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This property may be preferred to <see cref="P:C1.Util.DX.Vector2.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="T:C1.Util.DX.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.SizeInBytes">
            <summary>
            The size of the <see cref="T:C1.Util.DX.Vector3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.Zero">
            <summary>
            A <see cref="T:C1.Util.DX.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:C1.Util.DX.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:C1.Util.DX.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:C1.Util.DX.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.One">
            <summary>
            A <see cref="T:C1.Util.DX.Vector3"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.#ctor(C1.Util.DX.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector3"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector3"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than three elements.</exception>
        </member>
        <member name="M:C1.Util.DX.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:C1.Util.DX.Vector3.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:C1.Util.DX.Vector3.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Add(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Add(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Subtract(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Subtract(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Multiply(C1.Util.DX.Vector3@,System.Single,C1.Util.DX.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Multiply(C1.Util.DX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Modulate(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Modulate(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Divide(C1.Util.DX.Vector3@,System.Single,C1.Util.DX.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Divide(C1.Util.DX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Negate(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Negate(C1.Util.DX.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Dot(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Dot(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Normalize(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Normalize(C1.Util.DX.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Max(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Max(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Min(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector3.Min(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Addition(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Multiply(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication equivalent to <see cref="M:C1.Util.DX.Vector3.Modulate(C1.Util.DX.Vector3@,C1.Util.DX.Vector3@,C1.Util.DX.Vector3@)"/>.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Subtraction(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_UnaryNegation(C1.Util.DX.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Multiply(System.Single,C1.Util.DX.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Multiply(C1.Util.DX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Division(C1.Util.DX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Division(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Equality(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Inequality(C1.Util.DX.Vector3,C1.Util.DX.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Explicit(C1.Util.DX.Vector3)~C1.Util.DX.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector3"/> to <see cref="T:C1.Util.DX.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.op_Explicit(C1.Util.DX.Vector3)~C1.Util.DX.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector3"/> to <see cref="T:C1.Util.DX.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Equals(C1.Util.DX.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.Vector3"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:C1.Util.DX.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:C1.Util.DX.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="T:C1.Util.DX.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.SizeInBytes">
            <summary>
            The size of the <see cref="T:C1.Util.DX.Vector4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.Zero">
            <summary>
            A <see cref="T:C1.Util.DX.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:C1.Util.DX.Vector4"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:C1.Util.DX.Vector4"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:C1.Util.DX.Vector4"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:C1.Util.DX.Vector4"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.One">
            <summary>
            A <see cref="T:C1.Util.DX.Vector4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.#ctor(C1.Util.DX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.#ctor(C1.Util.DX.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Vector4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:C1.Util.DX.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:C1.Util.DX.Vector4.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:C1.Util.DX.Vector4.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Add(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Add(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Subtract(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Subtract(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Multiply(C1.Util.DX.Vector4@,System.Single,C1.Util.DX.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Multiply(C1.Util.DX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Modulate(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Modulate(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Divide(C1.Util.DX.Vector4@,System.Single,C1.Util.DX.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Divide(C1.Util.DX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Negate(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Negate(C1.Util.DX.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Dot(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Dot(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Normalize(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Normalize(C1.Util.DX.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Max(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Max(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Min(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:C1.Util.DX.Vector4.Min(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Addition(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Multiply(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication equivalent to <see cref="M:C1.Util.DX.Vector4.Modulate(C1.Util.DX.Vector4@,C1.Util.DX.Vector4@,C1.Util.DX.Vector4@)"/>.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Subtraction(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_UnaryNegation(C1.Util.DX.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Multiply(System.Single,C1.Util.DX.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Multiply(C1.Util.DX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Division(C1.Util.DX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Division(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Equality(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Inequality(C1.Util.DX.Vector4,C1.Util.DX.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Explicit(C1.Util.DX.Vector4)~C1.Util.DX.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector4"/> to <see cref="T:C1.Util.DX.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.op_Explicit(C1.Util.DX.Vector4)~C1.Util.DX.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.Vector4"/> to <see cref="T:C1.Util.DX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Equals(C1.Util.DX.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Vector4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:C1.Util.DX.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:C1.Util.DX.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:C1.Util.DX.ViewportF">
            <summary>
            Defines the viewport dimensions using float coordinates for (X, Y, Width, Height, MinDepth, MaxDepth).
            </summary>
        </member>
        <member name="F:C1.Util.DX.ViewportF.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ViewportF.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ViewportF.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ViewportF.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ViewportF.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ViewportF.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:C1.Util.DX.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:C1.Util.DX.ViewportF.#ctor(C1.Util.DX.RectF)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ViewportF"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="M:C1.Util.DX.ViewportF.Equals(C1.Util.DX.ViewportF)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.ViewportF"/> is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ViewportF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ViewportF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ViewportF.op_Equality(C1.Util.DX.ViewportF,C1.Util.DX.ViewportF)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ViewportF.op_Inequality(C1.Util.DX.ViewportF,C1.Util.DX.ViewportF)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ViewportF.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
        </member>
        <member name="P:C1.Util.DX.ViewportF.Bounds">
            <summary>
            Gets the size of this resource.
            </summary>
        </member>
        <member name="T:C1.Util.DX.GetValueFastDelegate`1">
            <summary>
            A Delegate to get a property value from an object.
            </summary>
            <typeparam name="T">Type of the getter.</typeparam>
            <param name="obj">The obj to get the property from.</param>
            <param name="value">The value to get.</param>
        </member>
        <member name="T:C1.Util.DX.SetValueFastDelegate`1">
            <summary>
            A Delegate to set a property value to an object.
            </summary>
            <typeparam name="T">Type of the setter.</typeparam>
            <param name="obj">The obj to set the property from.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:C1.Util.DX.DXUtil">
            <summary>
            Utility class.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXUtil.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXUtil.NearEqual(System.Single,System.Single)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers. See Remarks.
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
            <remarks>
            The code is using the technique described by Bruce Dawson in 
            <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">Comparing Floating point numbers 2012 edition</a>. 
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DXUtil.IsZero(System.Single)">
            <summary>
            Determines whether the specified value is close to zero (0.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to zero (0.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.IsOne(System.Single)">
            <summary>
            Determines whether the specified value is close to one (1.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to one (1.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.WithinEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.FreeDisposedShadowPointers">
            <summary>
            Releases native pointers to already disposed shadow objects.
            </summary>
            <remarks>
            Call this method when all unmanaged objects using shadows are destroyed.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DXUtil.CopyMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Native memcpy.
            </summary>
            <param name="dest">The destination memory location.</param>
            <param name="src">The source memory location.</param>
            <param name="sizeInBytesToCopy">The byte count.</param>
        </member>
        <member name="M:C1.Util.DX.DXUtil.CompareMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Compares two block of memory.
            </summary>
            <param name="from">The pointer to compare from.</param>
            <param name="against">The pointer to compare against.</param>
            <param name="sizeToCompare">The size in bytes to compare.</param>
            <returns><c>true</c> if the buffers are equivalent; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.ClearMemory(System.IntPtr,System.Byte,System.Int32)">
            <summary>
            Clears the memory.
            </summary>
            <param name="dest">The dest.</param>
            <param name="value">The value.</param>
            <param name="sizeInBytesToClear">The size in bytes to clear.</param>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Array``1(``0,System.Int32)">
            <summary>
            Creates an Array of count elements with the given value.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXUtil.SizeOf``1">
            <summary>
            Return the sizeof a struct from a CLR. Equivalent to sizeof operator but works on generics too.
            </summary>
            <typeparam name="T">A struct to evaluate.</typeparam>
            <returns>Size of this struct.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.SizeOf``1(``0[])">
            <summary>
            Return the sizeof an array of struct. Equivalent to sizeof operator but works on generics too.
            </summary>
            <typeparam name="T">A struct.</typeparam>
            <param name="array">The array of struct to evaluate.</param>
            <returns>Size in bytes of this array of struct.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Pin``1(``0@,System.Action{System.IntPtr})">
            <summary>
            Pins the specified source and call an action with the pinned pointer.
            </summary>
            <typeparam name="T">The type of the structure to pin.</typeparam>
            <param name="source">The source.</param>
            <param name="pinAction">The pin action to perform on the pinned pointer.</param>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Pin``1(``0[],System.Action{System.IntPtr})">
            <summary>
            Pins the specified source and call an action with the pinned pointer.
            </summary>
            <typeparam name="T">The type of the structure to pin.</typeparam>
            <param name="source">The source array.</param>
            <param name="pinAction">The pin action to perform on the pinned pointer.</param>
        </member>
        <member name="M:C1.Util.DX.DXUtil.ToByteArray``1(``0[])">
            <summary>
            Converts a structured array to an equivalent byte array.
            </summary>
            <typeparam name="T">The type of source array.</typeparam>
            <param name="source">The source array.</param>
            <returns>Converted byte array.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Read``1(System.IntPtr)">
            <summary>
            Reads the specified T data from a memory location.
            </summary>
            <typeparam name="T">Type of a data to read.</typeparam>
            <param name="source">Memory location to read from.</param>
            <returns>The data read from the memory location.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Read``1(System.IntPtr,``0@)">
            <summary>
            Reads the specified T data from a memory location.
            </summary>
            <typeparam name="T">Type of a data to read.</typeparam>
            <param name="source">Memory location to read from.</param>
            <param name="data">The data write to.</param>
            <returns>source pointer + sizeof(T).</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.ReadOut``1(System.IntPtr,``0@)">
            <summary>
            Reads the specified T data from a memory location.
            </summary>
            <typeparam name="T">Type of a data to read.</typeparam>
            <param name="source">Memory location to read from.</param>
            <param name="data">The data write to.</param>
            <returns>source pointer + sizeof(T).</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.ReadAndPosition``1(System.IntPtr,``0@)">
            <summary>
            Reads the specified T data from a memory location.
            </summary>
            <typeparam name="T">Type of a data to read.</typeparam>
            <param name="source">Memory location to read from.</param>
            <param name="data">The data write to.</param>
            <returns>source pointer + sizeof(T).</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Read``1(System.IntPtr,``0[],System.Int32,System.Int32)">
            <summary>
            Reads the specified array T[] data from a memory location.
            </summary>
            <typeparam name="T">Type of a data to read.</typeparam>
            <param name="source">Memory location to read from.</param>
            <param name="data">The data write to.</param>
            <param name="offset">The offset in the array to write to.</param>
            <param name="count">The number of T element to read from the memory location.</param>
            <returns>source pointer + sizeof(T) * count.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Write``1(System.IntPtr,``0@)">
            <summary>
            Writes the specified T data to a memory location.
            </summary>
            <typeparam name="T">Type of a data to write.</typeparam>
            <param name="destination">Memory location to write to.</param>
            <param name="data">The data to write.</param>
            <returns>destination pointer + sizeof(T).</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.WriteAndPosition``1(System.IntPtr,``0@)">
            <summary>
            Writes the specified T data to a memory location.
            </summary>
            <typeparam name="T">Type of a data to write.</typeparam>
            <param name="destination">Memory location to write to.</param>
            <param name="data">The data to write.</param>
            <returns>destination pointer + sizeof(T).</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Write``1(System.IntPtr,``0[],System.Int32,System.Int32)">
            <summary>
            Writes the specified array T[] data to a memory location.
            </summary>
            <typeparam name="T">Type of a data to write.</typeparam>
            <param name="destination">Memory location to write to.</param>
            <param name="data">The array of T data to write.</param>
            <param name="offset">The offset in the array to read from.</param>
            <param name="count">The number of T element to write to the memory location.</param>
            <returns>destination pointer + sizeof(T) * count.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.ConvertToBoolArray(C1.Util.DX.Bool[])">
            <summary>
            Converts <see cref="T:C1.Util.DX.Bool"/> array to bool array.
            </summary>
            <param name="array">The array.</param>
            <returns>Converted array of bool.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.GetGuidFromType(System.Type)">
            <summary>
            Gets the <see cref="T:System.Guid"/> from a type.
            </summary>
            <param name="type">The type.</param>
            <returns>The guid associated with this type.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.AllocateMemory(System.Int32,System.Int32)">
            <summary>
            Allocate an aligned memory buffer.
            </summary>
            <param name="sizeInBytes">Size of the buffer to allocate.</param>
            <param name="align">Alignment, 16 bytes by default.</param>
            <returns>A pointer to a buffer aligned.</returns>
            <remarks>
            To free this buffer, call <see cref="M:C1.Util.DX.DXUtil.FreeMemory(System.IntPtr)"/>.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DXUtil.AllocateClearedMemory(System.Int32,System.Byte,System.Int32)">
            <summary>
            Allocate an aligned memory buffer and clear it with a specified value (0 by default).
            </summary>
            <param name="sizeInBytes">Size of the buffer to allocate.</param>
            <param name="clearValue">Default value used to clear the buffer.</param>
            <param name="align">Alignment, 16 bytes by default.</param>
            <returns>A pointer to a buffer aligned.</returns>
            <remarks>
            To free this buffer, call <see cref="M:C1.Util.DX.DXUtil.FreeMemory(System.IntPtr)"/>.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DXUtil.FreeMemory(System.IntPtr)">
            <summary>
            Allocate an aligned memory buffer.
            </summary>
            <returns>A pointer to a buffer aligned.</returns>
            <remarks>
            The buffer must have been allocated with <see cref="M:C1.Util.DX.DXUtil.AllocateMemory(System.Int32,System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DXUtil.PtrToStringUni(System.IntPtr,System.Int32)">
            <summary>
            Converts a pointer to a null-terminating string up to maxLength characters to a .Net string.
            </summary>
            <param name="pointer">The pointer to an Unicode null string.</param>
            <param name="maxLength">Maximum length of the string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.StringToHGlobalAnsi(System.String)">
            <summary>
            Copies the contents of a managed String into unmanaged memory, converting into ANSI format as it copies.
            </summary>
            <param name="s">A managed string to be copied.</param> 
            <returns>The address, in unmanaged memory, to where s was copied, or IntPtr.Zero if s is null.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.StringToHGlobalUni(System.String)">
            <summary>
            Copies the contents of a managed String into unmanaged memory.
            </summary>
            <param name="s">A managed string to be copied.</param> 
            <returns>The address, in unmanaged memory, to where s was copied, or IntPtr.Zero if s is null.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Join(System.String,System.Collections.IEnumerator)">
            <summary>
            String helper join method to display an enumrable of object as a single string.
            </summary>
            <param name="separator">The separator.</param>
            <param name="elements">The enumerable.</param>
            <returns>A string with array elements serparated by the seperator.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.ReadStream(System.IO.Stream,System.Int32@)">
            <summary>
            Read stream to a byte[] buffer.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="readLength">Length to read.</param>
            <returns>A byte[] buffer.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Compare(System.Collections.IEnumerator,System.Collections.IEnumerator)">
            <summary>
            Compares two collection, element by elements.
            </summary>
            <param name="leftIt">A "from" enumerator.</param>
            <param name="rightIt">A "to" enumerator.</param>
            <returns><c>true</c> if lists are identical; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T">Type of the custom attribute.</typeparam>
            <param name="memberInfo">The member info.</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns>The custom attribute or null if not found.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T">Type of the custom attribute.</typeparam>
            <param name="memberInfo">The member info.</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns>The custom attribute or null if not found.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether fromType can be assigned to toType.
            </summary>
            <param name="toType">To type.</param>
            <param name="fromType">From type.</param>
            <returns>
            <c>true</c> if [is assignable from] [the specified to type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type to test is an enum.
            </summary>
            <param name="typeToTest">The type to test.</param>
            <returns>
            <c>true</c> if the specified type to test is an enum; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.IsValueType(System.Type)">
            <summary>
            Determines whether the specified type to test is a value type.
            </summary>
            <param name="typeToTest">The type to test.</param>
            <returns>
            <c>true</c> if the specified type to test is a value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.BuildPropertyGetter``1(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Builds a fast property getter from a type and a property info.
            </summary>
            <typeparam name="T">Type of the getter.</typeparam>
            <param name="customEffectType">Type of the custom effect.</param>
            <param name="propertyInfo">The property info to get the value from.</param>
            <returns>A compiled delegate.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.BuildPropertySetter``1(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Builds a fast property setter from a type and a property info.
            </summary>
            <typeparam name="T">Type of the setter.</typeparam>
            <param name="customEffectType">Type of the custom effect.</param>
            <param name="propertyInfo">The property info to set the value to.</param>
            <returns>A compiled delegate.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Sleep(System.TimeSpan)">
            <summary>
            Suspends the current thread.
            </summary>
            <param name="sleepTimeInMillis">The duration to sleep in milliseconds.</param>
        </member>
        <member name="M:C1.Util.DX.DXUtil.FindExplicitConverstion(System.Type,System.Type)">
            <summary>
            Finds an explicit converstion between a source type and a target type.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns>The method to perform the conversion. null if not found.</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Dispose``1(``0@)">
            <summary>
            Safely dispose a referencem if not null, and set it to null after dispose.
            </summary>
            <typeparam name="T">The type of COM interface to dispose.</typeparam>
            <param name="comObject">Object to dispose.</param>
            <remarks>
            The reference will be set to null after dispose.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DXUtil.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Transforms an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to an array of T.
            </summary>
            <typeparam name="T">Type of the element</typeparam>
            <param name="source">The enumerable source.</param>
            <returns>an array of T</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Test if there is an element in this enumeration.
            </summary>
            <typeparam name="T">Type of the element</typeparam>
            <param name="source">The enumerable source.</param>
            <returns><c>true</c> if there is an element in this enumeration, <c>false</c> otherwise</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Select elements from an enumeration.
            </summary>
            <typeparam name="TSource">The type of the T source.</typeparam>
            <typeparam name="TResult">The type of the T result.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns>A enumeration of selected values</returns>
        </member>
        <member name="M:C1.Util.DX.DXUtil.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Selects distinct elements from an enumeration.
            </summary>
            <typeparam name="TSource">The type of the T source.</typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <returns>A enumeration of selected values</returns>
        </member>
        <member name="T:C1.Util.DX.Configuration">
            <summary>
            Global configuration.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Configuration.EnableObjectTracking">
            <summary>
            Enables or disables object tracking. Default is disabled (false).
            </summary>
            <remarks>
            Object Tracking is used to track COM object lifecycle creation/dispose. When this option is enabled
            objects can be tracked using <see cref="T:C1.Util.DX.ObjectTracker"/>. Using Object tracking has a significant
            impact on performance and should be used only while debugging.
            </remarks>
        </member>
        <member name="F:C1.Util.DX.Configuration.EnableReleaseOnFinalizer">
            <summary>
            Enables or disables release of ComObject on finalizer. Default is disabled (false).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Configuration.EnableTrackingReleaseOnFinalizer">
            <summary>
            Enables or disables writing a warning via System.Diagnostics.Trace if a ComObject was disposed in the finalizer. Default is enabled (true).
            </summary>
        </member>
        <member name="F:C1.Util.DX.Configuration.UseThreadStaticObjectTracking">
            <summary>
            By default all objects in the process are tracked.
            Use this property to track objects per thread.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ObjectReference">
            <summary>
            Contains information about a tracked COM object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ObjectReference.#ctor(System.DateTime,C1.Util.DX.ComObject,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ObjectReference"/> class.
            </summary>
            <param name="creationTime">The creation time.</param>
            <param name="comObject">The com object to track.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="M:C1.Util.DX.ObjectReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:C1.Util.DX.ObjectReference.CreationTime">
            <summary>
            Gets the time the object was created.
            </summary>
            <value>The creation time.</value>
        </member>
        <member name="P:C1.Util.DX.ObjectReference.Object">
            <summary>
            Gets a weak reference to the tracked object.
            </summary>
            <value>The weak reference to the tracked object.</value>
        </member>
        <member name="P:C1.Util.DX.ObjectReference.StackTrace">
            <summary>
            Gets the stack trace when the track object was created.
            </summary>
            <value>The stack trace.</value>
        </member>
        <member name="P:C1.Util.DX.ObjectReference.IsAlive">
            <summary>
            Gets a value indicating whether the tracked object is alive.
            </summary>
            <value><c>true</c> if tracked object is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.Util.DX.ComObjectEventArgs">
            <summary>
            Event args for <see cref="T:C1.Util.DX.ComObject"/> used by <see cref="T:C1.Util.DX.ObjectTracker"/>.
            </summary>
        </member>
        <member name="F:C1.Util.DX.ComObjectEventArgs.Object">
            <summary>
            The object being tracked/untracked.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ComObjectEventArgs.#ctor(C1.Util.DX.ComObject)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComObjectEventArgs"/> class.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="T:C1.Util.DX.EqualityComparer">
            <summary>
            Provides <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for default value types.
            </summary>
        </member>
        <member name="F:C1.Util.DX.EqualityComparer.DefaultIntPtr">
            <summary>
            A default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ObjectTracker">
            <summary>
            Track all allocated objects.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.#cctor">
            <summary>
            Initializes the <see cref="T:C1.Util.DX.ObjectTracker"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.OnProcessExit(System.Object,System.EventArgs)">
            <summary>
            Called when [process exit].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.Track(C1.Util.DX.ComObject)">
            <summary>
            Tracks the specified COM object.
            </summary>
            <param name="comObject">The COM object.</param>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.Find(System.IntPtr)">
            <summary>
            Finds a list of object reference from a specified COM object pointer.
            </summary>
            <param name="comObjectPtr">The COM object pointer.</param>
            <returns>A list of object reference</returns>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.Find(C1.Util.DX.ComObject)">
            <summary>
            Finds the object reference for a specific COM object.
            </summary>
            <param name="comObject">The COM object.</param>
            <returns>An object reference</returns>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.UnTrack(C1.Util.DX.ComObject)">
            <summary>
            Untracks the specified COM object.
            </summary>
            <param name="comObject">The COM object.</param>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.FindActiveObjects">
            <summary>
            Reports all COM object that are active and not yet disposed.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ObjectTracker.ReportActiveObjects">
            <summary>
            Reports all COM object that are active and not yet disposed.
            </summary>
        </member>
        <member name="E:C1.Util.DX.ObjectTracker.Tracked">
            <summary>
            Occurs when a ComObject is tracked.
            </summary>
        </member>
        <member name="E:C1.Util.DX.ObjectTracker.UnTracked">
            <summary>
            Occurs when a ComObject is untracked.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DataBox">
            <summary>
            Provides access to data organized in 3D.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataBox.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataBox"/> struct.
            </summary>
            <param name="datapointer">The datapointer.</param>
            <param name="rowPitch">The row pitch.</param>
            <param name="slicePitch">The slice pitch.</param>
        </member>
        <member name="M:C1.Util.DX.DataBox.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataBox"/> struct.
            </summary>
            <param name="dataPointer">The data pointer.</param>
        </member>
        <member name="F:C1.Util.DX.DataBox.DataPointer">
            <summary>
            Pointer to the data.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DataBox.RowPitch">
            <summary>
            Gets the number of bytes per row.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DataBox.SlicePitch">
            <summary>
            Gets the number of bytes per slice (for a 3D texture, a slice is a 2D image)
            </summary>
        </member>
        <member name="P:C1.Util.DX.DataBox.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.Util.DX.DataPointer">
            <summary>
            Pointer to a native buffer with a specific size.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DataPointer.Zero">
            <summary>
            Gets an Empty Data Pointer.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataPointer.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataPointer"/> struct.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:C1.Util.DX.DataPointer.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataPointer"/> struct.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="size">The size.</param>
        </member>
        <member name="F:C1.Util.DX.DataPointer.Pointer">
            <summary>
            Pointer to the buffer.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DataPointer.Size">
            <summary>
            Size in bytes of the buffer.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataPointer.Equals(C1.Util.DX.DataPointer)">
            <summary>
            Determines whether the specified DataPointer is equal to the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataPointer.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataPointer.GetHashCode">
            <summary>
            Serves as the default hash function. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataPointer.ToDataStream">
            <summary>
            Converts this DataPointer to a <see cref="T:C1.Util.DX.DataStream"/>.
            </summary>
            <returns>An instance of a <see cref="T:C1.Util.DX.DataStream"/>.</returns>
        </member>
        <member name="M:C1.Util.DX.DataPointer.ToArray">
            <summary>
            Converts this instance to a read only byte buffer.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataPointer.ToArray``1">
            <summary>
            Converts this instance to a read only typed buffer.
            </summary>
            <typeparam name="T">Type of a buffer element</typeparam>
            <returns>A readonly typed buffer.</returns>
            <exception cref="T:System.InvalidOperationException">DataPointer is Zero</exception>
        </member>
        <member name="M:C1.Util.DX.DataPointer.CopyTo``1(``0[],System.Int32,System.Int32)">
            <summary>
            Reads the content of the unmanaged memory location of this instance to the specified buffer.
            </summary>
            <typeparam name="T">Type of a buffer element</typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset in the array to write to.</param>
            <param name="count">The number of T element to read from the memory location.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.InvalidOperationException">DataPointer is Zero</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">buffer;Total buffer size cannot be larger than size of this data pointer</exception>
        </member>
        <member name="M:C1.Util.DX.DataPointer.CopyFrom``1(``0[])">
            <summary>
            Writes the content of the specified buffer to the unmanaged memory location of this instance.
            </summary>
            <typeparam name="T">Type of a buffer element</typeparam>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.InvalidOperationException">DataPointer is Zero</exception>
        </member>
        <member name="M:C1.Util.DX.DataPointer.CopyFrom``1(``0[],System.Int32,System.Int32)">
            <summary>
            Writes the content of the specified buffer to the unmanaged memory location of this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The offset in the array to read from.</param>
            <param name="count">The number of T element to write to the memory location.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.InvalidOperationException">DataPointer is Zero</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">buffer;Total buffer size cannot be larger than size of this data pointer</exception>
        </member>
        <member name="M:C1.Util.DX.DataPointer.op_Equality(C1.Util.DX.DataPointer,C1.Util.DX.DataPointer)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:C1.Util.DX.DataPointer.op_Inequality(C1.Util.DX.DataPointer,C1.Util.DX.DataPointer)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:C1.Util.DX.DataPointer.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty (zeroed).
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.Util.DX.DataRectangle">
            <summary>
            Provides access to data organized in 2D.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataRectangle.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataRectangle"/> class.
            </summary>
            <param name="dataPointer">The data pointer.</param>
            <param name="pitch">The pitch.</param>
        </member>
        <member name="F:C1.Util.DX.DataRectangle.DataPointer">
            <summary>
            Pointer to the data.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DataRectangle.Pitch">
            <summary>
            Gets the number of bytes per row.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DataStream">
            <summary>
            Provides a stream interface to a buffer located in unmanaged memory.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DataStream.#ctor(C1.Util.DX.Direct3D11.Blob)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataStream"/> class from a Blob buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Create``1(``0[],System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataStream"/> class, using a managed buffer as a backing store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userBuffer">A managed array to be used as a backing store.</param>
            <param name="canRead"><c>true</c> if reading from the buffer should be allowed; otherwise, <c>false</c>.</param>
            <param name="canWrite"><c>true</c> if writing to the buffer should be allowed; otherwise, <c>false</c>.</param>
            <param name="index">Index inside the buffer in terms of element count (not size in bytes).</param>
            <param name="pinBuffer">True to keep the managed buffer and pin it, false will allocate unmanaged memory and make a copy of it. Default is true.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Util.DX.DataStream"/> class, and allocates a new buffer to use as a backing store.
            </summary>
            <param name="sizeInBytes">The size of the buffer to be allocated, in bytes.</param>
            <param name="canRead">
              <c>true</c> if reading from the buffer should be allowed; otherwise, <c>false</c>.</param>
            <param name="canWrite">
              <c>true</c> if writing to the buffer should be allowed; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.#ctor(C1.Util.DX.DataPointer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DataStream"/> class.
            </summary>
            <param name="dataPointer">The data pointer.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.#ctor(System.IntPtr,System.Int64,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Util.DX.DataStream"/> class, using an unmanaged buffer as a backing store.
            </summary>
            <param name="userBuffer">A pointer to the buffer to be used as a backing store.</param>
            <param name="sizeInBytes">The size of the buffer provided, in bytes.</param>
            <param name="canRead">
              <c>true</c> if reading from the buffer should be allowed; otherwise, <c>false</c>.</param>
            <param name="canWrite">
              <c>true</c> if writing to the buffer should be allowed; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Flush">
            <summary>
              Not supported.
            </summary>
            <exception cref = "T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.Read``1">
            <summary>
              Reads a single value from the current stream and advances the current
              position within this stream by the number of bytes read.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the value to be read from the stream.</typeparam>
            <returns>The value that was read.</returns>
            <exception cref = "T:System.NotSupportedException">This stream does not support reading.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadFloat">
            <summary>
            Reads a float.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>a float from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadInt">
            <summary>
            Reads a int.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an int from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadShort">
            <summary>
            Reads a short.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an short from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadBoolean">
            <summary>
            Reads a bool.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an bool from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadVector2">
            <summary>
            Reads a Vector2.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Vector2 from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadVector3">
            <summary>
            Reads a Vector3.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Vector3 from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadVector4">
            <summary>
            Reads a Vector4.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Vector4 from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadColorF">
            <summary>
            Reads a ColorF.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Color4 from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadMatrix4x4">
            <summary>
            Reads a Matrix.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>a Matrix from the stream</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of bytes from the current stream and advances the position
              within the stream by the number of bytes read.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "buffer">An array of values to be read from the stream.</param>
            <param name = "offset">The zero-based byte offset in buffer at which to begin storing
              the data read from the current stream.</param>
            <param name = "count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref = "T:System.NotSupportedException">This stream does not support reading.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.Read(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadRange``1(System.Int32)">
            <summary>
              Reads an array of values from the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the values to be read from the stream.</typeparam>
            <returns>An array of values that was read from the current stream.</returns>
        </member>
        <member name="M:C1.Util.DX.DataStream.ReadRange``1(``0[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of elements from the current stream into a target buffer and
              advances the position within the stream by the number of bytes read.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "buffer">An array of values to be read from the stream.</param>
            <param name = "offset">The zero-based byte offset in buffer at which to begin storing
              the data read from the current stream.</param>
            <param name = "count">The number of values to be read from the current stream.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref = "T:System.NotSupportedException">This stream does not support reading.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Sets the position within the current stream.
            </summary>
            <exception cref = "T:System.InvalidOperationException">Attempted to seek outside of the bounds of the stream.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.SetLength(System.Int64)">
            <summary>
              Not supported.
            </summary>
            <param name = "value">Always ignored.</param>
            <exception cref = "T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write``1(``0)">
            <summary>
              Writes a single value to the stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the value to be written to the stream.</typeparam>
            <param name = "value">The value to write to the stream.</param>
            <exception cref = "T:System.NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(System.Single)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(System.Int32)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(System.Int16)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(System.Boolean)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(C1.Util.DX.Vector2)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(C1.Util.DX.Vector3)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(C1.Util.DX.Vector4)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(C1.Util.DX.ColorF)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(C1.Util.DX.Matrix4x4)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Writes a sequence of bytes to the current stream and advances the current
              position within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name = "offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name = "count">The number of bytes to be written to the current stream.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.Write(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:C1.Util.DX.DataStream.WriteRange``1(``0[])">
            <summary>
              Writes an array of values to the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "data">An array of values to be written to the current stream.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.WriteRange(System.IntPtr,System.Int64)">
            <summary>
              Writes a range of bytes to the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "source">A pointer to the location to start copying from.</param>
            <param name = "count">The number of bytes to copy from source to the current stream.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.WriteRange``1(``0[],System.Int32,System.Int32)">
            <summary>
              Writes an array of values to the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the values to be written to the stream.</typeparam>
            <param name = "data">An array of values to be written to the stream.</param>
            <param name = "offset">The zero-based offset in data at which to begin copying values to the current stream.</param>
            <param name = "count">The number of values to be written to the current stream. If this is zero,
              all of the contents <paramref name = "data" /> will be written.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="M:C1.Util.DX.DataStream.op_Implicit(C1.Util.DX.DataStream)~C1.Util.DX.DataPointer">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.DataStream"/> to <see cref="T:C1.Util.DX.DataPointer"/>.
            </summary>
            <param name="from">The from value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:C1.Util.DX.DataStream.CanRead">
            <summary>
              Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>
              <c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Util.DX.DataStream.CanSeek">
            <summary>
              Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:C1.Util.DX.DataStream.CanWrite">
            <summary>
              Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>
              <c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Util.DX.DataStream.DataPointer">
            <summary>
              Gets the internal pointer to the current stream's backing store.
            </summary>
            <value>An IntPtr to the buffer being used as a backing store.</value>
        </member>
        <member name="P:C1.Util.DX.DataStream.Length">
            <summary>
              Gets the length in bytes of the stream.
            </summary>
            <value>A long value representing the length of the stream in bytes.</value>
        </member>
        <member name="P:C1.Util.DX.DataStream.Position">
            <summary>
              Gets or sets the position within the current stream.
            </summary>
            <value>The current position within the stream.</value>
            <seealso cref = "T:System.IO.Stream">Stream Class</seealso>
        </member>
        <member name="P:C1.Util.DX.DataStream.PositionPointer">
            <summary>
            Gets the position pointer.
            </summary>
            <value>The position pointer.</value>
        </member>
        <member name="P:C1.Util.DX.DataStream.RemainingLength">
            <summary>
            Gets the length of the remaining.
            </summary>
            <value>The length of the remaining.</value>
        </member>
        <member name="T:C1.Util.DX.FunctionCallback">
            <summary>
            Represents a function callback.
            </summary>
        </member>
        <member name="F:C1.Util.DX.FunctionCallback.Pointer">
            <summary>
            The pointer to the function.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.FunctionCallback"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.FunctionCallback"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.op_Explicit(C1.Util.DX.FunctionCallback)~System.IntPtr">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.FunctionCallback"/> to <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.op_Implicit(System.IntPtr)~C1.Util.DX.FunctionCallback">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.FunctionCallback"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.op_Implicit(C1.Util.DX.FunctionCallback)~System.Void*">
            <summary>
            Performs an implicit conversion from <see cref="T:C1.Util.DX.FunctionCallback"/> to (void*).
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.op_Explicit(System.Void*)~C1.Util.DX.FunctionCallback">
            <summary>
            Performs an implicit conversion from (void*) to <see cref="T:C1.Util.DX.FunctionCallback"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.Equals(C1.Util.DX.FunctionCallback)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.FunctionCallback"/> is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.FunctionCallback.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
        </member>
        <member name="T:C1.Util.DX.PointerSize">
            <summary>
            The maximum number of bytes to which a pointer can point. Use for a count that must span the full range of a pointer.
            Equivalent to Windows type SIZE_T.
            </summary>
        </member>
        <member name="F:C1.Util.DX.PointerSize.Zero">
            <summary>
            An empty pointer size initialized to zero.
            </summary>
        </member>
        <member name="M:C1.Util.DX.PointerSize.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.PointerSize"/> struct.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:C1.Util.DX.PointerSize.#ctor(System.Void*)">
            <summary>
              Default constructor.
            </summary>
            <param name = "size">value to set</param>
        </member>
        <member name="M:C1.Util.DX.PointerSize.#ctor(System.Int32)">
            <summary>
              Default constructor.
            </summary>
            <param name = "size">value to set</param>
        </member>
        <member name="M:C1.Util.DX.PointerSize.#ctor(System.Int64)">
            <summary>
              Default constructor.
            </summary>
            <param name = "size">value to set</param>
        </member>
        <member name="M:C1.Util.DX.PointerSize.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.ToString(System.String)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.Equals(C1.Util.DX.PointerSize)">
            <summary>
              Determines whether the specified <see cref="T:C1.Util.DX.PointerSize"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.PointerSize"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:C1.Util.DX.PointerSize"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Addition(C1.Util.DX.PointerSize,C1.Util.DX.PointerSize)">
            <summary>
              Adds two sizes.
            </summary>
            <param name = "left">The first size to add.</param>
            <param name = "right">The second size to add.</param>
            <returns>The sum of the two sizes.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_UnaryPlus(C1.Util.DX.PointerSize)">
            <summary>
              Assert a size (return it unchanged).
            </summary>
            <param name = "value">The size to assert (unchange).</param>
            <returns>The asserted (unchanged) size.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Subtraction(C1.Util.DX.PointerSize,C1.Util.DX.PointerSize)">
            <summary>
              Subtracts two sizes.
            </summary>
            <param name = "left">The first size to subtract.</param>
            <param name = "right">The second size to subtract.</param>
            <returns>The difference of the two sizes.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_UnaryNegation(C1.Util.DX.PointerSize)">
            <summary>
              Reverses the direction of a given size.
            </summary>
            <param name = "value">The size to negate.</param>
            <returns>A size facing in the opposite direction.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Multiply(System.Int32,C1.Util.DX.PointerSize)">
            <summary>
              Scales a size by the given value.
            </summary>
            <param name = "value">The size to scale.</param>
            <param name = "scale">The amount by which to scale the size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Multiply(C1.Util.DX.PointerSize,System.Int32)">
            <summary>
              Scales a size by the given value.
            </summary>
            <param name = "value">The size to scale.</param>
            <param name = "scale">The amount by which to scale the size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Division(C1.Util.DX.PointerSize,System.Int32)">
            <summary>
              Scales a size by the given value.
            </summary>
            <param name = "value">The size to scale.</param>
            <param name = "scale">The amount by which to scale the size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Equality(C1.Util.DX.PointerSize,C1.Util.DX.PointerSize)">
            <summary>
              Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Inequality(C1.Util.DX.PointerSize,C1.Util.DX.PointerSize)">
            <summary>
              Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(C1.Util.DX.PointerSize)~System.Int32">
            <summary>
              Performs an implicit conversion from <see cref="T:C1.Util.DX.PointerSize"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(C1.Util.DX.PointerSize)~System.Int64">
            <summary>
              Performs an implicit conversion from <see cref="T:C1.Util.DX.PointerSize"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(System.Int32)~C1.Util.DX.PointerSize">
            <summary>
              Performs an implicit conversion from <see cref="T:C1.Util.DX.PointerSize"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(System.Int64)~C1.Util.DX.PointerSize">
            <summary>
              Performs an implicit conversion from <see cref="T:C1.Util.DX.PointerSize"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(System.IntPtr)~C1.Util.DX.PointerSize">
            <summary>
            Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.PointerSize"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(C1.Util.DX.PointerSize)~System.IntPtr">
            <summary>
              Performs an implicit conversion from <see cref="T:C1.Util.DX.PointerSize"/> to <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(System.Void*)~C1.Util.DX.PointerSize">
            <summary>
              Performs an implicit conversion from void* to <see cref="T:C1.Util.DX.PointerSize"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.PointerSize.op_Implicit(C1.Util.DX.PointerSize)~System.Void*">
            <summary>
              Performs an implicit conversion from <see cref="T:C1.Util.DX.PointerSize"/> to void*.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:C1.Util.DX.CallbackBase">
            <summary>
            Callback base implementation of <see cref="T:C1.Util.DX.ICallbackable"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DisposeBase">
            <summary>
            Base class for a <see cref="T:System.IDisposable"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DisposeBase.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:C1.Util.DX.DisposeBase"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DisposeBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DisposeBase.CheckAndDispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DisposeBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="E:C1.Util.DX.DisposeBase.Disposing">
            <summary>
            Occurs when this instance is starting to be disposed.
            </summary>
        </member>
        <member name="E:C1.Util.DX.DisposeBase.Disposed">
            <summary>
            Occurs when this instance is fully disposed.
            </summary>
        </member>
        <member name="P:C1.Util.DX.DisposeBase.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:C1.Util.DX.ICallbackable">
            <summary>
            Use this interface to tag a class that is called by an unmanaged
            object. A <see cref="T:C1.Util.DX.ICallbackable"/> class must dispose the <see cref="P:C1.Util.DX.ICallbackable.Shadow"/>
            on dispose.
            </summary>
        </member>
        <member name="P:C1.Util.DX.ICallbackable.Shadow">
            <summary>
            Gets or sets the unmanaged shadow callback.
            </summary>
            <remarks>
            This property is set whenever this instance has an unmanaged shadow callback
            registered. This callback must be disposed when disposing this instance. 
            </remarks>
        </member>
        <member name="M:C1.Util.DX.CallbackBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ComArrayBase">
            <summary>
            A fast method to pass array of <see cref="T:C1.Util.DX.ComObject"/> to C1.Win.DX methods.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ComArrayBase.#ctor(C1.Util.DX.ComObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComArrayBase"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:C1.Util.DX.ComArrayBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComArrayBase"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:C1.Util.DX.ComArrayBase.Get(System.Int32)">
            <summary>
            Gets an object at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>A <see cref="T:C1.Util.DX.ComObject"/></returns>
        </member>
        <member name="M:C1.Util.DX.ComArrayBase.Set(System.Int32,C1.Util.DX.ComObject)">
            <summary>
            Sets an object at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.ComArrayBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ComArrayBase.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:C1.Util.DX.ComArrayBase.NativePointer">
            <summary>
            Gets the pointer to the native array associated to this instance.
            </summary>
        </member>
        <member name="P:C1.Util.DX.ComArrayBase.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ComArray`1">
            <summary>
            A typed version of <see cref="T:C1.Util.DX.ComArrayBase"/>
            </summary>
            <typeparam name="T">Type of the <see cref="T:C1.Util.DX.ComObject"/></typeparam>
        </member>
        <member name="M:C1.Util.DX.ComArray`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComArray`1"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:C1.Util.DX.ComArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComArray`1"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="P:C1.Util.DX.ComArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the T with the specified i.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ComObject">
            <summary>
            Root IUnknown class to interop with COM object
            </summary>
        </member>
        <member name="T:C1.Util.DX.CppObject">
            <summary>
            Root class for all Cpp interop object.
            </summary>
        </member>
        <member name="F:C1.Util.DX.CppObject._nativePointer">
            <summary>
            The native pointer
            </summary>
        </member>
        <member name="M:C1.Util.DX.CppObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.CppObject"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.CppObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.CppObject"/> class.
            </summary>
            <param name="pointer">Pointer to Cpp Object</param>
        </member>
        <member name="M:C1.Util.DX.CppObject.op_Explicit(C1.Util.DX.CppObject)~System.IntPtr">
            <summary>
            Performs an explicit conversion from <see cref="T:C1.Util.DX.CppObject"/> to <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="cppObject">The CPP object.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:C1.Util.DX.CppObject.FromTemp(C1.Util.DX.CppObject)">
            <summary>
            Initializes this instance with a pointer from a temporary object and set the pointer of the temporary  
            object to IntPtr.Zero.
            </summary>
            <param name="temp">The instance to get the NativePointer.</param>
        </member>
        <member name="M:C1.Util.DX.CppObject.FromTemp(System.IntPtr)">
            <summary>
            Initializes this instance with a pointer from a temporary object and set the pointer of the temporary  
            object to IntPtr.Zero.
            </summary>
            <param name="temp">The instance to get the NativePointer.</param>
        </member>
        <member name="M:C1.Util.DX.CppObject.NativePointerUpdating">
            <summary>
            Method called when <see cref="P:C1.Util.DX.CppObject.NativePointer"/> is going to be update.
            </summary>
        </member>
        <member name="M:C1.Util.DX.CppObject.NativePointerUpdated(System.IntPtr)">
            <summary>
            Method called when the <see cref="P:C1.Util.DX.CppObject.NativePointer"/> is updated.
            </summary>
        </member>
        <member name="M:C1.Util.DX.CppObject.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.CppObject.FromPointer``1(System.IntPtr)">
            <summary>
            Instantiate a ComObject from a native pointer.
            </summary>
            <typeparam name="T">The ComObject class that will be returned</typeparam>
            <param name="comObjectPtr">The native pointer to a com object.</param>
            <returns>An instance of T binded to the native pointer</returns>
        </member>
        <member name="M:C1.Util.DX.CppObject.ToCallbackPtr``1(C1.Util.DX.ICallbackable)">
            <summary>
            Return the unmanaged C++ pointer from a <see cref="T:C1.Util.DX.ICallbackable"/> instance.
            </summary>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <param name="callback">The callback.</param>
            <returns>A pointer to the unmanaged C++ object of the callback</returns>
        </member>
        <member name="P:C1.Util.DX.CppObject.Tag">
            <summary>
            Gets or sets a custom user tag object to associate with this instance..
            </summary>
            <value>The tag object.</value>
        </member>
        <member name="P:C1.Util.DX.CppObject.NativePointer">
            <summary>
            Get a pointer to the underlying Cpp Object
            </summary>
        </member>
        <member name="T:C1.Util.DX.IUnknown">
            <summary>
            Base interface for Component Object Model (COM).
            </summary>
        </member>
        <member name="M:C1.Util.DX.IUnknown.QueryInterface(System.Guid@,System.IntPtr@)">
            <summary>
            Queries the supported COM interface on this instance.
            </summary>
            <param name="guid">The guid of the interface.</param>
            <param name="comObject">The output COM object reference.</param>
            <returns>If successfull, <see cref="F:C1.Util.DX.HResult.Ok"/> </returns>
        </member>
        <member name="M:C1.Util.DX.IUnknown.AddReference">
            <summary>
            Increments the reference count for an interface on this instance.
            </summary>
            <returns>The method returns the new reference count.</returns>
        </member>
        <member name="M:C1.Util.DX.IUnknown.Release">
            <summary>
            Decrements the reference count for an interface on this instance.
            </summary>
            <returns>The method returns the new reference count.</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComObject"/> class.
            </summary>
            <param name="pointer">Pointer to Cpp Object</param>
        </member>
        <member name="M:C1.Util.DX.ComObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComObject"/> class from a IUnknown object.
            </summary>
            <param name="iunknownObject">Reference to a IUnknown object</param>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterface(System.Guid,System.IntPtr@)">
            <summary>
            Query this instance for a particular COM GUID/interface support.
            </summary>
            <param name = "guid">GUID query interface</param>
            <param name = "outPtr">output object associated with this GUID, IntPtr.Zero in interface is not supported</param>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterfaceOrNull(System.Guid)">
            <summary>
            Query instance for a particular COM GUID/interface support.
            </summary>
            <param name = "guid">GUID query interface</param>
        </member>
        <member name="M:C1.Util.DX.ComObject.EqualsComObject``1(``0,``0)">
            <summary>
            Compares 2 COM objects and return true if the native pointer is the same.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><c>true</c> if the native pointer is the same, <c>false</c> otherwise</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterface``1">
            <summary>
             Query this instance for a particular COM interface support.
            </summary>
            <typeparam name="T">The type of the COM interface to query</typeparam>
            <returns>An instance of the queried interface</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterfaceUnsafe``1">
            <summary>
             Query this instance for a particular COM interface support.
            </summary>
            <typeparam name="T">The type of the COM interface to query</typeparam>
            <returns>An instance of the queried interface</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.As``1(System.Object)">
             <summary>
             Queries a managed object for a particular COM interface support (This method is a shortcut to <see cref="M:C1.Util.DX.ComObject.QueryInterface(System.Guid,System.IntPtr@)"/>)
             </summary>
            <typeparam name="T">The type of the COM interface to query</typeparam>
             <param name="comObject">The managed COM object.</param>
            <returns>An instance of the queried interface</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.As``1(System.IntPtr)">
             <summary>
             Queries a managed object for a particular COM interface support (This method is a shortcut to <see cref="M:C1.Util.DX.ComObject.QueryInterface(System.Guid,System.IntPtr@)"/>)
             </summary>
            <typeparam name="T">The type of the COM interface to query</typeparam>
             <param name="iunknownPtr">The managed COM object.</param>
            <returns>An instance of the queried interface</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterface``1(System.Object)">
             <summary>
             Queries a managed object for a particular COM interface support.
             </summary>
            <typeparam name="T">The type of the COM interface to query</typeparam>
             <param name="comObject">The managed COM object.</param>
            <returns>An instance of the queried interface</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterfaceOrNull``1(System.IntPtr)">
             <summary>
             Queries a managed object for a particular COM interface support.
             </summary>
            <typeparam name="T">The type of the COM interface to query</typeparam>
             <param name="comPointer">A pointer to a COM object.</param>
            <returns>An instance of the queried interface</returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterfaceOrNull``1">
            <summary>
             Query Interface for a particular interface support.
            </summary>
            <returns>An instance of the queried interface or null if it is not supported</returns>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.op_Explicit(System.IntPtr)~C1.Util.DX.ComObject">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.ComObject"/>.
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.QueryInterfaceFrom``1(``0)">
            <summary>
             Query Interface for a particular interface support and attach to the given instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.ComObject.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ComObject.NativePointerUpdating">
            <summary>
            Method called when <see cref="P:C1.Util.DX.CppObject.NativePointer"/> is going to be update.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ComObject.NativePointerUpdated(System.IntPtr)">
            <summary>
            Method called when the <see cref="P:C1.Util.DX.CppObject.NativePointer"/> is updated.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ComObjectCallback">
            <summary>
            Base class for unmanaged callabackable Com object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ComObjectCallback.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.ComObject"/> class.
            </summary>
            <param name="pointer">Pointer to Cpp Object</param>
        </member>
        <member name="P:C1.Util.DX.ComObjectCallback.Shadow">
            <summary>
            Implements <see cref="T:C1.Util.DX.ICallbackable"/> but it cannot not be set. 
            This is only used to support for interop with unmanaged callback.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ComObjectShadow">
            <summary>
            A COM Interface Callback
            </summary>
        </member>
        <member name="T:C1.Util.DX.CppObjectShadow">
            <summary>
            An Interface shadow callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.CppObjectShadow.Initialize(C1.Util.DX.ICallbackable)">
            <summary>
            Initializes the specified shadow instance from a vtbl and a callback.
            </summary>
            <param name="callbackInstance">The callback.</param>
        </member>
        <member name="M:C1.Util.DX.CppObjectShadow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:C1.Util.DX.CppObjectShadow.Callback">
            <summary>
            Gets the callback.
            </summary>
        </member>
        <member name="P:C1.Util.DX.CppObjectShadow.GetVtbl">
            <summary>
            Gets the VTBL associated with this shadow instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.CppObjectVtbl.#ctor(System.Int32)">
            <summary>
            Default Constructor.
            </summary>
            <param name="numberOfCallbackMethods">number of methods to allocate in the VTBL</param>
        </member>
        <member name="M:C1.Util.DX.CppObjectVtbl.AddMethod(System.Delegate)">
            <summary>
            Add a method supported by this interface. This method is typically called from inherited constructor.
            </summary>
            <param name="method">the managed delegate method</param>
        </member>
        <member name="P:C1.Util.DX.CppObjectVtbl.Pointer">
            <summary>
            Gets the pointer to the vtbl.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ShadowAttribute">
            <summary>
            Shadow attribute used to associate a COM callbackable interface to its Shadow implementation.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ShadowAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.ShadowAttribute"/> class.
            </summary>
            <param name="typeOfTheAssociatedShadow">Type of the associated shadow</param>
        </member>
        <member name="M:C1.Util.DX.ShadowAttribute.Get(System.Type)">
            <summary>
            Get ShadowAttribute from type.
            </summary>
            <param name="type">Type to get shadow attribute</param>
            <returns>The associated shadow attribute or null if no shadow attribute were found</returns>
        </member>
        <member name="P:C1.Util.DX.ShadowAttribute.Type">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:C1.Util.DX.ShadowContainer">
            <summary>
            The ShadowContainer is the main container used internally to keep references to all native COM/C++ callbacks.
            It is stored in the property <see cref="P:C1.Util.DX.ICallbackable.Shadow"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.ShadowContainer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.TagAttribute">
            <summary>
            A general purpose tag attribute.
            </summary>
        </member>
        <member name="M:C1.Util.DX.TagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.TagAttribute"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:C1.Util.DX.TagAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:C1.Util.DX.HResult">
            <summary>
            Result structure for COM methods.
            </summary>
        </member>
        <member name="M:C1.Util.DX.HResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.HResult"/> struct.
            </summary>
            <param name="code">The HRESULT error code.</param>
        </member>
        <member name="M:C1.Util.DX.HResult.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.HResult"/> struct.
            </summary>
            <param name="code">The HRESULT error code.</param>
        </member>
        <member name="M:C1.Util.DX.HResult.op_Explicit(C1.Util.DX.HResult)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:C1.Util.DX.HResult"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="result">The result.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.HResult.op_Explicit(C1.Util.DX.HResult)~System.UInt32">
            <summary>
            Performs an implicit conversion from <see cref="T:C1.Util.DX.HResult"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="result">The result.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.HResult.op_Implicit(System.Int32)~C1.Util.DX.HResult">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:C1.Util.DX.HResult"/>.
            </summary>
            <param name="result">The result.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.HResult.op_Implicit(System.UInt32)~C1.Util.DX.HResult">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:C1.Util.DX.HResult"/>.
            </summary>
            <param name="result">The result.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:C1.Util.DX.HResult.Equals(C1.Util.DX.HResult)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.HResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.HResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Util.DX.HResult.op_Equality(C1.Util.DX.HResult,C1.Util.DX.HResult)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:C1.Util.DX.HResult.op_Inequality(C1.Util.DX.HResult,C1.Util.DX.HResult)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:C1.Util.DX.HResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Util.DX.HResult.CheckError">
            <summary>
            Checks the error.
            </summary>
        </member>
        <member name="M:C1.Util.DX.HResult.GetResultFromException(System.Exception)">
            <summary>
            Gets a <see cref="T:C1.Util.DX.HResult"/> from an <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex">The exception</param>
            <returns>The associated result code</returns>
        </member>
        <member name="M:C1.Util.DX.HResult.GetResultFromWin32Error(System.Int32)">
            <summary>
            Gets the result from win32 error.
            </summary>
            <param name="win32Error">The win32Error.</param>
            <returns>A HRESULT.</returns>
        </member>
        <member name="F:C1.Util.DX.HResult.Ok">
            <summary>
            Result code Ok.
            </summary>
            <unmanaged>S_OK</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.False">
            <summary>
            Result code False.
            </summary>
            <unmanaged>S_FALSE</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.Fail">
            <summary>
            Result code Fail.
            </summary>
            <unmanaged>E_FAIL</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.Abort">
            <summary>
            Result code Abort.
            </summary>
            <unmanaged>E_ABORT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.AccessDenied">
            <summary>
            Result code AccessDenied.
            </summary>
            <unmanaged>E_ACCESSDENIED</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.Handle">
            <summary>
            Result code Handle.
            </summary>
            <unmanaged>E_HANDLE</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.InvalidArg">
            <summary>
            Result code invalid argument.
            </summary>
            <unmanaged>E_INVALIDARG</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.NoInterface">
            <summary>
            Result code no interface.
            </summary>
            <unmanaged>E_NOINTERFACE</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.NotImplemented">
            <summary>
            Result code not implemented.
            </summary>
            <unmanaged>E_NOTIMPL</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.OutOfMemory">
            <summary>
            Result code out of memory.
            </summary>
            <unmanaged>E_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.InvalidPointer">
            <summary>
            Result code Invalid pointer.
            </summary>
            <unmanaged>E_POINTER</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.UnexpectedFailure">
            <summary>
            Unexpected failure.
            </summary>
            <unmanaged>E_UNEXPECTED</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.InsufficientBuffer">
            <summary>
            The data area passed to a system call is too small.
            </summary>
            <unmanaged>ERROR_INSUFFICIENT_BUFFER</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.WaitAbandoned">
            <summary>
            Result of a wait abandonned.
            </summary>
            <unmanaged>WAIT_ABANDONED</unmanaged>
        </member>
        <member name="F:C1.Util.DX.HResult.WaitTimeout">
            <summary>
            Result of a wait timeout.
            </summary>
            <unmanaged>WAIT_TIMEOUT</unmanaged>
        </member>
        <member name="P:C1.Util.DX.HResult.Code">
            <summary>
            Gets the HRESULT error code.
            </summary>
            <value>The HRESULT error code.</value>
        </member>
        <member name="P:C1.Util.DX.HResult.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Util.DX.HResult"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Util.DX.HResult.Failure">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Util.DX.HResult"/> is failure.
            </summary>
            <value><c>true</c> if failure; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.Util.DX.HResultDescriptor">
            <summary>
            Descriptor used to provide detailed message for a particular <see cref="P:C1.Util.DX.HResultDescriptor.Result"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.#ctor(C1.Util.DX.HResult,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.HResultDescriptor"/> class.
            </summary>
            <param name="code">The HRESULT error code.</param>
            <param name="module">The module (ex: C1.Win.DX.Direct2D).</param>
            <param name="nativeApiCode">The native API code.</param>
            <param name="apiCode">The API code (ex: D2D1_ERR_...).</param>
            <param name="description">The description of the result code if any.</param>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.Equals(C1.Util.DX.HResultDescriptor)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.HResultDescriptor"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:C1.Util.DX.HResultDescriptor"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:C1.Util.DX.HResultDescriptor"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.op_Implicit(C1.Util.DX.HResultDescriptor)~C1.Util.DX.HResult">
            <summary>
            Performs an implicit conversion from <see cref="T:C1.Util.DX.HResultDescriptor"/> to <see cref="T:C1.Util.DX.HResult"/>.
            </summary>
            <param name="result">The result.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.op_Equality(C1.Util.DX.HResultDescriptor,C1.Util.DX.HResult)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.op_Inequality(C1.Util.DX.HResultDescriptor,C1.Util.DX.HResult)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.RegisterProvider(System.Type)">
            <summary>
            Registers a <see cref="T:C1.Util.DX.HResultDescriptor"/> provider.
            </summary>
            <param name="descriptorsProviderType">Type of the descriptors provider.</param>
            <remarks>
            Providers are usually registered at module init when C1.Win.DX assemblies are loaded.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.HResultDescriptor.Find(C1.Util.DX.HResult)">
            <summary>
            Finds the specified result descriptor.
            </summary>
            <param name="result">The result code.</param>
            <returns>A descriptor for the specified result</returns>
        </member>
        <member name="P:C1.Util.DX.HResultDescriptor.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:C1.Util.DX.HResultDescriptor.Module">
            <summary>
            Gets the module (ex: C1.Win.DX.Direct2D)
            </summary>
        </member>
        <member name="P:C1.Util.DX.HResultDescriptor.NativeApiCode">
            <summary>
            Gets the native API code (ex: D2D1_ERR_ ...)
            </summary>
        </member>
        <member name="P:C1.Util.DX.HResultDescriptor.ApiCode">
            <summary>
            Gets the API code (ex: DemiceRemoved ...)
            </summary>
        </member>
        <member name="P:C1.Util.DX.HResultDescriptor.Description">
            <summary>
            Gets the description of the result code if any.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Interop">
            <summary>
            The implementation of this class is filled by InteropBuilder post-building-event.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Interop.Fixed``1(``0@)">
            <summary>
            Provides a fixed statement working with generics.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns>A fixed pointer to the referenced structure</returns>
            <remarks>
            This is the only function in this class that is inlined in order to inline the fixed statement correctly.
            </remarks>
        </member>
        <member name="T:C1.Util.DX.Animation.LoopIterationChangeHandler2">
            <summary>
            Internal LoopIterationChangeHandler2 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.LoopIterationChangeHandler2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Manager2">
            <summary>	
            IUIAnimationManager2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.Create">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.Animation.Manager2"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetManagerEventHandler(C1.Util.DX.Animation.Manager2.ManagerEventDelegate,System.Boolean)">
            <summary>	
            Specifies a handler for animation manager status updates.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetCancelPriorityComparison(C1.Util.DX.Animation.Manager2.PriorityComparisonDelegate)">
            <summary>
            Sets the cancel priority comparison.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetTrimPriorityComparison(C1.Util.DX.Animation.Manager2.PriorityComparisonDelegate)">
            <summary>
            Sets the trim priority comparison.
            </summary>
            <value>
            The trim priority comparison.
            </value>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetCompressPriorityComparison(C1.Util.DX.Animation.Manager2.PriorityComparisonDelegate)">
            <summary>
            Sets the compress priority comparison.
            </summary>
            <value>
            The compress priority comparison.
            </value>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetConcludePriorityComparison(C1.Util.DX.Animation.Manager2.PriorityComparisonDelegate)">
            <summary>
            Sets the conclude priority comparison.
            </summary>
            <value>
            The conclude priority comparison.
            </value>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.GetVariableFromTag(System.Int32,System.Object)">
            <summary>
            Gets the variable from tag.
            </summary>
            <param name="id">The id.</param>
            <param name="tagObject">The tag object. This parameter can be null.</param>
            <returns>A variable associated with this tag.</returns>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.GetStoryboardFromTag(System.Int32,System.Object)">
            <summary>
            Gets the storyboard from tag.
            </summary>
            <param name="id">The id.</param>
            <param name="tagObject">The tag object. This parameter can be null.</param>
            <returns>A storyboard associated with this tag.</returns>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Manager2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.Manager2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.Manager2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.CreateAnimationVectorVariable2(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationManager2::CreateAnimationVectorVariable([In, Buffer] const double* initialValue,[In] unsigned int cDimension,[Out] IUIAnimationVariable2** variable)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.CreateAnimationVariable2(System.Double)">
            <summary>	
            HRESULT IUIAnimationManager2::CreateAnimationVariable([In] double initialValue,[Out] IUIAnimationVariable2** variable)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.ScheduleTransition(C1.Util.DX.Animation.Variable2,C1.Util.DX.Animation.Transition2,System.Double)">
            <summary>	
            HRESULT IUIAnimationManager2::ScheduleTransition([In] IUIAnimationVariable2* variable,[In] IUIAnimationTransition2* transition,[In] double timeNow)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.CreateStoryboard2">
            <summary>	
            HRESULT IUIAnimationManager2::CreateStoryboard([Out] IUIAnimationStoryboard2** storyboard)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.FinishAllStoryboards(System.Double)">
            <summary>	
            HRESULT IUIAnimationManager2::FinishAllStoryboards([In] double completionDeadline)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.AbandonAllStoryboards">
            <summary>	
            HRESULT IUIAnimationManager2::AbandonAllStoryboards()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.Update(System.Double)">
            <summary>	
            HRESULT IUIAnimationManager2::Update([In] double timeNow,[Out, Optional] UI_ANIMATION_UPDATE_RESULT* updateResult)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.GetVariableFromTag(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IUIAnimationManager2::GetVariableFromTag([In, Optional] IUnknown* object,[In] unsigned int id,[Out] IUIAnimationVariable2** variable)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.GetStoryboardFromTag(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IUIAnimationManager2::GetStoryboardFromTag([In, Optional] IUnknown* object,[In] unsigned int id,[Out] IUIAnimationStoryboard2** storyboard)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.EstimateNextEventTime">
            <summary>	
            HRESULT IUIAnimationManager2::EstimateNextEventTime([Out] double* seconds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.GetStatus">
            <summary>	
            HRESULT IUIAnimationManager2::GetStatus([Out] UI_ANIMATION_MANAGER_STATUS* status)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetAnimationMode(C1.Util.DX.Animation.Mode)">
            <summary>	
            HRESULT IUIAnimationManager2::SetAnimationMode([In] UI_ANIMATION_MODE mode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.Pause">
            <summary>	
            HRESULT IUIAnimationManager2::Pause()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.Resume">
            <summary>	
            HRESULT IUIAnimationManager2::Resume()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetManagerEventHandler_(System.IntPtr,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IUIAnimationManager2::SetManagerEventHandler([In, Optional] IUIAnimationManagerEventHandler2* handler,[In] BOOL fRegisterForNextAnimationEvent)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetCancelPriorityComparison_(System.IntPtr)">
            <summary>	
            HRESULT IUIAnimationManager2::SetCancelPriorityComparison([In, Optional] IUIAnimationPriorityComparison2* comparison)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetTrimPriorityComparison_(System.IntPtr)">
            <summary>	
            HRESULT IUIAnimationManager2::SetTrimPriorityComparison([In, Optional] IUIAnimationPriorityComparison2* comparison)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetCompressPriorityComparison_(System.IntPtr)">
            <summary>	
            HRESULT IUIAnimationManager2::SetCompressPriorityComparison([In, Optional] IUIAnimationPriorityComparison2* comparison)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetConcludePriorityComparison_(System.IntPtr)">
            <summary>	
            HRESULT IUIAnimationManager2::SetConcludePriorityComparison([In, Optional] IUIAnimationPriorityComparison2* comparison)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.SetDefaultLongestAcceptableDelay(System.Double)">
            <summary>	
            HRESULT IUIAnimationManager2::SetDefaultLongestAcceptableDelay([In] double delay)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Manager2.Shutdown">
            <summary>	
            HRESULT IUIAnimationManager2::Shutdown()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.Manager2.ManagerEventDelegate">
            <summary>
            A delegate to receive status changed events from the manager.
            </summary>
            <param name="newStatus">The new status.</param>
            <param name="previousStatus">The previous status.</param>
        </member>
        <member name="T:C1.Util.DX.Animation.Manager2.PriorityComparisonDelegate">
            <summary>
            A delegate used to resolve scheduling conflicts.
            </summary>
            <param name="scheduledStoryboard">The scheduled storyboard.</param>
            <param name="newStoryboard">The new storyboard.</param>
            <param name="priorityEffect">The priority effect.</param>
            <returns><c>true</c> if newStoryboard has priority. <c>false</c> if scheduledStoryboard has priority</returns>
        </member>
        <member name="T:C1.Util.DX.Animation.ManagerEventHandler2">
            <summary>
            Internal ManagerEventHandler2 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.ManagerEventHandler2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.PriorityComparison2">
            <summary>
            Internal PriorityComparison2 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.PriorityComparison2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Storyboard2">
            <summary>	
            IUIAnimationStoryboard2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.Create(C1.Util.DX.Animation.Manager2)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Storyboard2"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.SetStoryboardEventHandler(C1.Util.DX.Animation.Storyboard2.StoryboardStatusChangedDelegate,C1.Util.DX.Animation.Storyboard2.StoryboardUpdatedDelegate,System.Boolean,System.Boolean)">
            <summary>
            Specifies a handler for storyboard events.
            </summary>
            <param name="statusChangedHandler">A delegate that handles storyboard status change events.</param>
            <param name="updatedHandler">A delegate that handles storyboard update events.</param>
            <param name="fRegisterStatusChangeForNextAnimationEvent">If TRUE, registers the OnStoryboardStatusChanged event and includes those events in IUIAnimationManager2::EstimateNextEventTime, which estimates the time interval until the next animation event.</param>
            <param name="fRegisterUpdateForNextAnimationEvent">If TRUE, registers the OnStoryboardUpdated event and includes those events in IUIAnimationManager2::EstimateNextEventTime, which estimates the time interval until the next animation event.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.RepeatBetweenKeyframes(C1.Util.DX.Animation.KeyFrame,C1.Util.DX.Animation.KeyFrame,System.Double,C1.Util.DX.Animation.RepeatMode,C1.Util.DX.Animation.Storyboard2.LoopIterationChangedDelegate,System.IntPtr,System.Boolean)">
            <summary>
            Creates a loop between two keyframes.
            </summary>
            <param name="startKeyframe">The keyframe at which the loop is to begin.</param>
            <param name="endKeyframe">The keyframe at which the loop is to end. endKeyframe must not occur earlier in the storyboard than startKeyframe.</param>
            <param name="cRepetition">The number of times the loop is to be repeated; the last iteration of a loop can terminate fractionally between keyframes.</param>
            <param name="repeatMode">The pattern for the loop iteration.</param>
            <param name="iterationChangedHandler">The handler for each loop iteration event.</param>
            <param name="id">The loop ID to pass to iterationChangeHandler.</param>
            <param name="fRegisterForNextAnimationEvent">If true, specifies that iterationChangeHandler will be incorporated into the estimate of the time interval until the next animation event that is returned by the IUIAnimationManager2::EstimateNextEventTime method.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.SetTag(System.Object,System.Int32)">
            <summary>
            Sets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.GetTag(System.Object@,System.Int32@)">
            <summary>
            Gets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Storyboard2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.Storyboard2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.Storyboard2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.AddTransition(C1.Util.DX.Animation.Variable2,C1.Util.DX.Animation.Transition2)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::AddTransition([In] IUIAnimationVariable2* variable,[In] IUIAnimationTransition2* transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.AddKeyframeAtOffset(C1.Util.DX.Animation.KeyFrame,System.Double,C1.Util.DX.Animation.KeyFrame@)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::AddKeyframeAtOffset([In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* existingKeyframe,[In] double offset,[Out] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003** keyframe)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.AddKeyframeAfterTransition(C1.Util.DX.Animation.Transition2,C1.Util.DX.Animation.KeyFrame@)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::AddKeyframeAfterTransition([In] IUIAnimationTransition2* transition,[Out] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003** keyframe)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.AddTransitionAtKeyframe(C1.Util.DX.Animation.Variable2,C1.Util.DX.Animation.Transition2,C1.Util.DX.Animation.KeyFrame)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::AddTransitionAtKeyframe([In] IUIAnimationVariable2* variable,[In] IUIAnimationTransition2* transition,[In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* startKeyframe)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.AddTransitionBetweenKeyframes(C1.Util.DX.Animation.Variable2,C1.Util.DX.Animation.Transition2,C1.Util.DX.Animation.KeyFrame,C1.Util.DX.Animation.KeyFrame)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::AddTransitionBetweenKeyframes([In] IUIAnimationVariable2* variable,[In] IUIAnimationTransition2* transition,[In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* startKeyframe,[In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* endKeyframe)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.RepeatBetweenKeyframes_(C1.Util.DX.Animation.KeyFrame,C1.Util.DX.Animation.KeyFrame,System.Double,C1.Util.DX.Animation.RepeatMode,System.IntPtr,System.IntPtr,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::RepeatBetweenKeyframes([In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* startKeyframe,[In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* endKeyframe,[In] double cRepetition,[In] UI_ANIMATION_REPEAT_MODE repeatMode,[In, Optional] IUIAnimationLoopIterationChangeHandler2* pIterationChangeHandler,[In] UINT_PTR id,[In] BOOL fRegisterForNextAnimationEvent)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.HoldVariable(C1.Util.DX.Animation.Variable2)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::HoldVariable([In] IUIAnimationVariable2* variable)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.SetLongestAcceptableDelay(System.Double)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::SetLongestAcceptableDelay([In] double delay)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.SetSkipDuration(System.Double)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::SetSkipDuration([In] double secondsDuration)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.Schedule(System.Double)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::Schedule([In] double timeNow,[Out, Optional] UI_ANIMATION_SCHEDULING_RESULT* schedulingResult)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.Conclude">
            <summary>	
            HRESULT IUIAnimationStoryboard2::Conclude()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.Finish(System.Double)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::Finish([In] double completionDeadline)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.Abandon">
            <summary>	
            HRESULT IUIAnimationStoryboard2::Abandon()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.SetTag(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::SetTag([In, Optional] IUnknown* object,[In] unsigned int id)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.GetTag(System.IntPtr@,System.Int32@)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::GetTag([Out, Optional] IUnknown** object,[Out, Optional] unsigned int* id)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.GetStatus">
            <summary>	
            HRESULT IUIAnimationStoryboard2::GetStatus([Out] UI_ANIMATION_STORYBOARD_STATUS* status)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.GetElapsedTime">
            <summary>	
            HRESULT IUIAnimationStoryboard2::GetElapsedTime([Out] double* elapsedTime)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Storyboard2.SetStoryboardEventHandler_(System.IntPtr,C1.Util.DX.Bool,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IUIAnimationStoryboard2::SetStoryboardEventHandler([In, Optional] IUIAnimationStoryboardEventHandler2* handler,[In] BOOL fRegisterStatusChangeForNextAnimationEvent,[In] BOOL fRegisterUpdateForNextAnimationEvent)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.Storyboard2.StoryboardStatusChangedDelegate">
            <summary>
            A delegate that handles storyboard status change events.
            </summary>
            <param name="storyboard">The storyboard for which the status has changed.</param>
            <param name="newStatus">The new status.</param>
            <param name="previousStatus">The previous status.</param>
        </member>
        <member name="T:C1.Util.DX.Animation.Storyboard2.StoryboardUpdatedDelegate">
            <summary>
            A delegate that handles storyboard update events.
            </summary>
            <param name="storyboard">The storyboard that has been updated.</param>
        </member>
        <member name="T:C1.Util.DX.Animation.Storyboard2.LoopIterationChangedDelegate">
            <summary>
            A delegate for handling storyboard loop iteration events, which occur when a loop within a storyboard begins a new iteration.
            </summary>
            <param name="storyboard">The storyboard to which the loop belongs.</param>
            <param name="id">The loop ID.</param>
            <param name="newIterationCount">The iteration count for the latest IUIAnimationManager2::Update.</param>
            <param name="oldIterationCount">The iteration count for the previous IUIAnimationManager2::Update.</param>
        </member>
        <member name="T:C1.Util.DX.Animation.StoryboardEventHandler2">
            <summary>
            Internal StoryboardEventHandler2 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.StoryboardEventHandler2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Timer">
            <summary>	
            IUIAnimationTimer	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.Create">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Timer"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.SetTimerUpdateHandler(C1.Util.DX.Animation.Manager2,C1.Util.DX.Animation.IdleBehavior)">
            <summary>
            Specifies a timer update handler.
            </summary>
            <param name="manager">The animation manager.</param>
            <param name="idleBehavior">Specifies the behavior of the timer when it is idle.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.SetTimerEventHandler(C1.Util.DX.Animation.Timer.UpdateDelegate,C1.Util.DX.Animation.Timer.UpdateDelegate,C1.Util.DX.Animation.Timer.RenderingTooSlowDelegate)">
            <summary>
            Specifies a timer event handler.
            </summary>
            <param name="preUpdateHandler">A delegate that handles events that occur before an animation update begins.</param>
            <param name="postUpdateHandler">A delegate that handles events that occur after an animation update is finished.</param>
            <param name="renderingTooSlowHandler">A delegate that handles events that occur when the rendering frame rate for an animation falls below a minimum desirable frame rate.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Timer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.Timer">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.Timer"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.SetTimerUpdateHandler_(System.IntPtr,C1.Util.DX.Animation.IdleBehavior)">
            <summary>	
            HRESULT IUIAnimationTimer::SetTimerUpdateHandler([In, Optional] IUIAnimationTimerUpdateHandler* updateHandler,[In] UI_ANIMATION_IDLE_BEHAVIOR idleBehavior)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.SetTimerEventHandler_(System.IntPtr)">
            <summary>	
            HRESULT IUIAnimationTimer::SetTimerEventHandler([In, Optional] IUIAnimationTimerEventHandler* handler)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.Enable">
            <summary>	
            HRESULT IUIAnimationTimer::Enable()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.Disable">
            <summary>	
            HRESULT IUIAnimationTimer::Disable()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.IsEnabled_">
            <summary>	
            HRESULT IUIAnimationTimer::IsEnabled()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.GetTime">
            <summary>	
            HRESULT IUIAnimationTimer::GetTime([Out] double* seconds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Timer.SetFrameRateThreshold(System.Int32)">
            <summary>	
            HRESULT IUIAnimationTimer::SetFrameRateThreshold([In] unsigned int framesPerSecond)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.Timer.UpdateDelegate">
            <summary>
            A delegate that handles the animation timer updates.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Timer.RenderingTooSlowDelegate">
            <summary>
            A delegate that handles events that occur when the rendering frame rate for an animation falls below a minimum desirable frame rate.
            </summary>
            <param name="framesPerSecond">The current frame rate, in frames per second.</param>
        </member>
        <member name="T:C1.Util.DX.Animation.TimerEventHandler">
            <summary>
            Internal TimerEventHandlerShadow Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.TimerEventHandler.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Transition2">
            <summary>	
            IUIAnimationTransition2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.Create(C1.Util.DX.Animation.TransitionFactory2,C1.Util.DX.Animation.Interpolator2)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Transition2"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="interpolator">The interpolator.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Transition2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.Transition2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.Transition2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.GetDimension">
            <summary>	
            HRESULT IUIAnimationTransition2::GetDimension([Out] unsigned int* dimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.SetInitialValue(System.Double)">
            <summary>	
            HRESULT IUIAnimationTransition2::SetInitialValue([In] double value)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.SetInitialVectorValue(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationTransition2::SetInitialVectorValue([In, Buffer] const double* value,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.SetInitialVelocity(System.Double)">
            <summary>	
            HRESULT IUIAnimationTransition2::SetInitialVelocity([In] double velocity)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.SetInitialVectorVelocity(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationTransition2::SetInitialVectorVelocity([In, Buffer] const double* velocity,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.IsDurationKnown">
            <summary>	
            HRESULT IUIAnimationTransition2::IsDurationKnown()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Transition2.GetDuration">
            <summary>	
            HRESULT IUIAnimationTransition2::GetDuration([Out] double* duration)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.TransitionFactory2">
            <summary>	
            IUIAnimationTransitionFactory2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionFactory2.Create">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.TransitionFactory2"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionFactory2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.TransitionFactory2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionFactory2.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.TransitionFactory2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.TransitionFactory2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionFactory2.CreateTransition2(C1.Util.DX.Animation.Interpolator2)">
            <summary>	
            HRESULT IUIAnimationTransitionFactory2::CreateTransition([In] IUIAnimationInterpolator2* interpolator,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.TransitionLibrary2">
            <summary>	
            IUIAnimationTransitionLibrary2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.Create">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.TransitionLibrary2"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.TransitionLibrary2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.TransitionLibrary2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.TransitionLibrary2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateInstantaneousTransition2(System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateInstantaneousTransition([In] double finalValue,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateInstantaneousVectorTransition2(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateInstantaneousVectorTransition([In, Buffer] const double* finalValue,[In] unsigned int cDimension,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateConstantTransition2(System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateConstantTransition([In] double duration,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateDiscreteTransition2(System.Double,System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateDiscreteTransition([In] double delay,[In] double finalValue,[In] double hold,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateDiscreteVectorTransition2(System.Double,System.Double[],System.Int32,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateDiscreteVectorTransition([In] double delay,[In, Buffer] const double* finalValue,[In] unsigned int cDimension,[In] double hold,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateLinearTransition2(System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateLinearTransition([In] double duration,[In] double finalValue,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateLinearVectorTransition2(System.Double,System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateLinearVectorTransition([In] double duration,[In, Buffer] const double* finalValue,[In] unsigned int cDimension,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateLinearTransition2FromSpeed(System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateLinearTransitionFromSpeed([In] double speed,[In] double finalValue,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateLinearVectorTransition2FromSpeed(System.Double,System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateLinearVectorTransitionFromSpeed([In] double speed,[In, Buffer] const double* finalValue,[In] unsigned int cDimension,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateSinusoidalTransition2FromVelocity(System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateSinusoidalTransitionFromVelocity([In] double duration,[In] double period,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateSinusoidalTransition2FromRange(System.Double,System.Double,System.Double,System.Double,C1.Util.DX.Animation.Slope)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateSinusoidalTransitionFromRange([In] double duration,[In] double minimumValue,[In] double maximumValue,[In] double period,[In] UI_ANIMATION_SLOPE slope,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateAccelerateDecelerateTransition2(System.Double,System.Double,System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateAccelerateDecelerateTransition([In] double duration,[In] double finalValue,[In] double accelerationRatio,[In] double decelerationRatio,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateReversalTransition2(System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateReversalTransition([In] double duration,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateCubicTransition2(System.Double,System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateCubicTransition([In] double duration,[In] double finalValue,[In] double finalVelocity,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateCubicVectorTransition2(System.Double,System.Double[],System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateCubicVectorTransition([In] double duration,[In, Buffer] const double* finalValue,[In, Buffer] const double* finalVelocity,[In] unsigned int cDimension,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateSmoothStopTransition2(System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateSmoothStopTransition([In] double maximumDuration,[In] double finalValue,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateParabolicTransition2FromAcceleration(System.Double,System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateParabolicTransitionFromAcceleration([In] double finalValue,[In] double finalVelocity,[In] double acceleration,[Out] IUIAnimationTransition2** transition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateCubicBezierLinearTransition2(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateCubicBezierLinearTransition([In] double duration,[In] double finalValue,[In] double x1,[In] double y1,[In] double x2,[In] double y2,[Out] IUIAnimationTransition2** ppTransition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.TransitionLibrary2.CreateCubicBezierLinearVectorTransition2(System.Double,System.Double[],System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>	
            HRESULT IUIAnimationTransitionLibrary2::CreateCubicBezierLinearVectorTransition([In] double duration,[In, Buffer] const double* finalValue,[In] unsigned int cDimension,[In] double x1,[In] double y1,[In] double x2,[In] double y2,[Out] IUIAnimationTransition2** ppTransition)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.Variable2">
            <summary>	
            IUIAnimationVariable2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.Create(C1.Util.DX.Animation.Manager2,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Variable2"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.Create(C1.Util.DX.Animation.Manager2,System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Variable2"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetVariableChangeHandler(C1.Util.DX.Animation.Variable2.ValueChangedDelegate,System.Boolean)">
            <summary>
            Specifies a handler for changes to the value of the animation variable.
            </summary>
            <param name="valueChangedHandler">The handler for changes to the value of the animation variable.</param>
            <param name="fRegisterForNextAnimationEvent">If TRUE, specifies that the EstimateNextEventTime method will incorporate handler into its estimate of the time interval until the next animation event.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.Set1_VariableChangeHandler(C1.Util.DX.Animation.Variable2.Value1ChangedDelegate,System.Boolean)">
            <summary>
            Specifies a handler for changes to the value of the animation variable.
            </summary>
            <param name="valueChangedHandler">The handler for changes to the value of the animation variable.</param>
            <param name="fRegisterForNextAnimationEvent">If TRUE, specifies that the EstimateNextEventTime method will incorporate handler into its estimate of the time interval until the next animation event.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.Set2_VariableChangeHandler(C1.Util.DX.Animation.Variable2.Value2ChangedDelegate,System.Boolean)">
            <summary>
            Specifies a handler for changes to the value of the animation variable.
            </summary>
            <param name="valueChangedHandler">The handler for changes to the value of the animation variable.</param>
            <param name="fRegisterForNextAnimationEvent">If TRUE, specifies that the EstimateNextEventTime method will incorporate handler into its estimate of the time interval until the next animation event.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetVariableIntegerChangeHandler(C1.Util.DX.Animation.Variable2.IntegerValueChangedDelegate,System.Boolean)">
            <summary>
            Specifies a handler for changes to the integer value of the animation variable.
            </summary>
            <param name="valueChangedHandler">The handler for changes to the integer value of the animation variable.</param>
            <param name="fRegisterForNextAnimationEvent">If TRUE, specifies that the EstimateNextEventTime method will incorporate handler into its estimate of the time interval until the next animation event.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.Set1_VariableIntegerChangeHandler(C1.Util.DX.Animation.Variable2.IntegerValue1ChangedDelegate,System.Boolean)">
            <summary>
            Specifies a handler for changes to the integer value of the animation variable.
            </summary>
            <param name="valueChangedHandler">The handler for changes to the integer value of the animation variable.</param>
            <param name="fRegisterForNextAnimationEvent">If TRUE, specifies that the EstimateNextEventTime method will incorporate handler into its estimate of the time interval until the next animation event.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.Set2_VariableIntegerChangeHandler(C1.Util.DX.Animation.Variable2.IntegerValue2ChangedDelegate,System.Boolean)">
            <summary>
            Specifies a handler for changes to the integer value of the animation variable.
            </summary>
            <param name="valueChangedHandler">The handler for changes to the integer value of the animation variable.</param>
            <param name="fRegisterForNextAnimationEvent">If TRUE, specifies that the EstimateNextEventTime method will incorporate handler into its estimate of the time interval until the next animation event.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetTag(System.Object,System.Int32)">
            <summary>
            Sets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetTag(System.Object@,System.Int32@)">
            <summary>
            Gets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Variable2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.Variable2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.Variable2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetDimension">
            <summary>	
            HRESULT IUIAnimationVariable2::GetDimension([Out] unsigned int* dimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetValue">
            <summary>	
            HRESULT IUIAnimationVariable2::GetValue([Out] double* value)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetVectorValue(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetVectorValue([Out, Buffer] double* value,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetCurve(C1.Util.DX.ComObject)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetCurve([In] IUnknown* animation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetVectorCurve(C1.Util.DX.ComObject[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetVectorCurve([In, Buffer] IUnknown** animation,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetVectorCurve(C1.Util.DX.ComArray{C1.Util.DX.ComObject},System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetVectorCurve([In, Buffer] IUnknown** animation,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetFinalValue">
            <summary>	
            HRESULT IUIAnimationVariable2::GetFinalValue([Out] double* finalValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetFinalVectorValue(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetFinalVectorValue([Out, Buffer] double* finalValue,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetPreviousValue">
            <summary>	
            HRESULT IUIAnimationVariable2::GetPreviousValue([Out] double* previousValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetPreviousVectorValue(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetPreviousVectorValue([Out, Buffer] double* previousValue,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetIntegerValue">
            <summary>	
            HRESULT IUIAnimationVariable2::GetIntegerValue([Out] int* value)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetIntegerVectorValue(System.Int32[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetIntegerVectorValue([Out, Buffer] int* value,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetFinalIntegerValue">
            <summary>	
            HRESULT IUIAnimationVariable2::GetFinalIntegerValue([Out] int* finalValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetFinalIntegerVectorValue(System.Int32[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetFinalIntegerVectorValue([Out, Buffer] int* finalValue,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetPreviousIntegerValue">
            <summary>	
            HRESULT IUIAnimationVariable2::GetPreviousIntegerValue([Out] int* previousValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetPreviousIntegerVectorValue(System.Int32[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetPreviousIntegerVectorValue([Out, Buffer] int* previousValue,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetCurrentStoryboard">
            <summary>	
            HRESULT IUIAnimationVariable2::GetCurrentStoryboard([Out] IUIAnimationStoryboard2** storyboard)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetLowerBound(System.Double)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetLowerBound([In] double bound)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetLowerBoundVector(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetLowerBoundVector([In, Buffer] const double* bound,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetUpperBound(System.Double)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetUpperBound([In] double bound)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetUpperBoundVector(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetUpperBoundVector([In, Buffer] const double* bound,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetRoundingMode(C1.Util.DX.Animation.RoundingMode)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetRoundingMode([In] UI_ANIMATION_ROUNDING_MODE mode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetTag(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetTag([In, Optional] IUnknown* object,[In] unsigned int id)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.GetTag(System.IntPtr@,System.Int32@)">
            <summary>	
            HRESULT IUIAnimationVariable2::GetTag([Out, Optional] IUnknown** object,[Out, Optional] unsigned int* id)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetVariableChangeHandler_(System.IntPtr,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetVariableChangeHandler([In, Optional] IUIAnimationVariableChangeHandler2* handler,[In] BOOL fRegisterForNextAnimationEvent)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetVariableIntegerChangeHandler_(System.IntPtr,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetVariableIntegerChangeHandler([In, Optional] IUIAnimationVariableIntegerChangeHandler2* handler,[In] BOOL fRegisterForNextAnimationEvent)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Variable2.SetVariableCurveChangeHandler_(System.IntPtr)">
            <summary>	
            HRESULT IUIAnimationVariable2::SetVariableCurveChangeHandler([In, Optional] IUIAnimationVariableCurveChangeHandler2* handler)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.Variable2.ValueChangedDelegate">
            <summary>
            A delegate that handles events that occur when the value of an animation variable changes in the specified dimension.
            </summary>
            <param name="storyboard">The storyboard that is animating the animation variable specified by the variable parameter.</param>
            <param name="variable">The animation variable that has been updated.</param>
            <param name="newValue">The new value of the animation variable.</param>
            <param name="previousValue">The previous value of the animation variable.</param>
            <param name="cDimension">The dimension in which the value of the animation variable changed.</param>
        </member>
        <member name="T:C1.Util.DX.Animation.Variable2.Value1ChangedDelegate">
            <summary>
            A delegate that handles events that occur when the value of an animation variable changes.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Variable2.Value2ChangedDelegate">
            <summary>
            A delegate that handles events that occur when the value of an animation variable changes.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Variable2.IntegerValueChangedDelegate">
            <summary>
            A delegate that handles events that occur when the integer value of an animation variable changes in the specified dimension.
            </summary>
            <param name="storyboard">The storyboard that is animating the animation variable specified by the variable parameter.</param>
            <param name="variable">The animation variable that has been updated.</param>
            <param name="newValue">The new integer value of the animation variable.</param>
            <param name="previousValue">The previous integer value of the animation variable.</param>
            <param name="cDimension">The dimension in which the integer value of the animation variable changed.</param>
        </member>
        <member name="T:C1.Util.DX.Animation.Variable2.IntegerValue1ChangedDelegate">
            <summary>
            A delegate that handles events that occur when the integer value of an animation variable changes.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Variable2.IntegerValue2ChangedDelegate">
            <summary>
            A delegate that handles events that occur when the integer value of an animation variable changes.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.VariableChangeHandler2">
            <summary>
            Internal VariableChangeHandler2 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.VariableChangeHandler2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.VariableIntegerChangeHandler2">
            <summary>
            Internal VariableIntegerChangeHandler2 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.VariableIntegerChangeHandler2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Dependencies">
            <summary>	
            UI_ANIMATION_DEPENDENCIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Dependencies.None">
            <summary>	
            UI_ANIMATION_DEPENDENCY_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Dependencies.IntermediateValues">
            <summary>	
            UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Dependencies.FinalValue">
            <summary>	
            UI_ANIMATION_DEPENDENCY_FINAL_VALUE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Dependencies.FinalVelocity">
            <summary>	
            UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Dependencies.Duration">
            <summary>	
            UI_ANIMATION_DEPENDENCY_DURATION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.IdleBehavior">
            <summary>	
            UI_ANIMATION_IDLE_BEHAVIOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.IdleBehavior.Continue">
            <summary>	
            UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.IdleBehavior.Disable">
            <summary>	
            UI_ANIMATION_IDLE_BEHAVIOR_DISABLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.ManagerStatus">
            <summary>	
            UI_ANIMATION_MANAGER_STATUS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.ManagerStatus.Idle">
            <summary>	
            UI_ANIMATION_MANAGER_IDLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.ManagerStatus.Busy">
            <summary>	
            UI_ANIMATION_MANAGER_BUSY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.Mode">
            <summary>	
            UI_ANIMATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Mode.Disabled">
            <summary>	
            UI_ANIMATION_MODE_DISABLED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Mode.SystemDefault">
            <summary>	
            UI_ANIMATION_MODE_SYSTEM_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Mode.Enabled">
            <summary>	
            UI_ANIMATION_MODE_ENABLED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.PriorityEffect">
            <summary>	
            UI_ANIMATION_PRIORITY_EFFECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.PriorityEffect.Failure">
            <summary>	
            UI_ANIMATION_PRIORITY_EFFECT_FAILURE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.PriorityEffect.Delay">
            <summary>	
            UI_ANIMATION_PRIORITY_EFFECT_DELAY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.RepeatMode">
            <summary>	
            UI_ANIMATION_REPEAT_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.RepeatMode.RepeatModeNormal">
            <summary>	
            UI_ANIMATION_REPEAT_MODE_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.RepeatMode.RepeatModeAlternate">
            <summary>	
            UI_ANIMATION_REPEAT_MODE_ALTERNATE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.RoundingMode">
            <summary>	
            UI_ANIMATION_ROUNDING_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.RoundingMode.RoundingNearest">
            <summary>	
            UI_ANIMATION_ROUNDING_NEAREST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.RoundingMode.RoundingFloor">
            <summary>	
            UI_ANIMATION_ROUNDING_FLOOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.RoundingMode.RoundingCeiling">
            <summary>	
            UI_ANIMATION_ROUNDING_CEILING	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.SchedulingResult">
            <summary>	
            UI_ANIMATION_SCHEDULING_RESULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.SchedulingResult.UnexpectedFailure">
            <summary>	
            UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.SchedulingResult.InsufficientPriority">
            <summary>	
            UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.SchedulingResult.AlreadyScheduled">
            <summary>	
            UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.SchedulingResult.Succeeded">
            <summary>	
            UI_ANIMATION_SCHEDULING_SUCCEEDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.SchedulingResult.Deferred">
            <summary>	
            UI_ANIMATION_SCHEDULING_DEFERRED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.Slope">
            <summary>	
            UI_ANIMATION_SLOPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Slope.Increasing">
            <summary>	
            UI_ANIMATION_SLOPE_INCREASING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.Slope.Decreasing">
            <summary>	
            UI_ANIMATION_SLOPE_DECREASING	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.StoryboardStatus">
            <summary>	
            UI_ANIMATION_STORYBOARD_STATUS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.Building">
            <summary>	
            UI_ANIMATION_STORYBOARD_BUILDING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.Scheduled">
            <summary>	
            UI_ANIMATION_STORYBOARD_SCHEDULED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.Cancelled">
            <summary>	
            UI_ANIMATION_STORYBOARD_CANCELLED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.Playing">
            <summary>	
            UI_ANIMATION_STORYBOARD_PLAYING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.Truncated">
            <summary>	
            UI_ANIMATION_STORYBOARD_TRUNCATED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.Finished">
            <summary>	
            UI_ANIMATION_STORYBOARD_FINISHED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.Ready">
            <summary>	
            UI_ANIMATION_STORYBOARD_READY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.StoryboardStatus.InsufficientPriority">
            <summary>	
            UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.TimerClientStatus">
            <summary>	
            UI_ANIMATION_TIMER_CLIENT_STATUS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.TimerClientStatus.Idle">
            <summary>	
            UI_ANIMATION_TIMER_CLIENT_IDLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.TimerClientStatus.Busy">
            <summary>	
            UI_ANIMATION_TIMER_CLIENT_BUSY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.UpdateResult">
            <summary>	
            UI_ANIMATION_UPDATE_RESULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.UpdateResult.NoChange">
            <summary>	
            UI_ANIMATION_UPDATE_NO_CHANGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.UpdateResult.VariablesChanged">
            <summary>	
            UI_ANIMATION_UPDATE_VARIABLES_CHANGED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.ResultCode">
            <summary>	
            WAM result codes.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.CreateFailed">
            <summary>
            UI_E_CREATE_FAILED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.ShutdownCalled">
            <summary>
            UI_E_SHUTDOWN_CALLED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.IllegalReentrancy">
            <summary>
            UI_E_ILLEGAL_REENTRANCY
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.ObjectSealed">
            <summary>
            UI_E_OBJECT_SEALED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.ValueNotSet">
            <summary>
            UI_E_VALUE_NOT_SET
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.ValueNotDetermined">
            <summary>
            UI_E_VALUE_NOT_DETERMINED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.InvalidOutput">
            <summary>
            UI_E_INVALID_OUTPUT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.BooleanExpected">
            <summary>
            UI_E_BOOLEAN_EXPECTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.DifferentOwner">
            <summary>
            UI_E_DIFFERENT_OWNER
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.AmbiguousMatch">
            <summary>
            UI_E_AMBIGUOUS_MATCH
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.FPOverflow">
            <summary>
            UI_E_FP_OVERFLOW
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.WrongThread">
            <summary>
            UI_E_WRONG_THREAD
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.StoryboardActive">
            <summary>
            UI_E_STORYBOARD_ACTIVE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.StoryboardNotPlaying">
            <summary>
            UI_E_STORYBOARD_NOT_PLAYING
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.StartKeyframeAfterEnd">
            <summary>
            UI_E_START_KEYFRAME_AFTER_END
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.EndKeyframeNotDetermined">
            <summary>
            UI_E_END_KEYFRAME_NOT_DETERMINED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.LoopsOverlap">
            <summary>
            UI_E_LOOPS_OVERLAP
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.TransitionAlreadyUsed">
            <summary>
            UI_E_TRANSITION_ALREADY_USED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.TransitionNotInStoryboard">
            <summary>
            UI_E_TRANSITION_NOT_IN_STORYBOARD
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.TransitionEclipsed">
            <summary>
            UI_E_TRANSITION_ECLIPSED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.TimeBeforeLastUpdate">
            <summary>
            UI_E_TIME_BEFORE_LAST_UPDATE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.TimerClientAlreadyConnected">
            <summary>
            UI_E_TIMER_CLIENT_ALREADY_CONNECTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.InvalidDimension">
            <summary>
            UI_E_INVALID_DIMENSION
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.PrimitiveOutOfBounds">
            <summary>
            UI_E_PRIMITIVE_OUT_OF_BOUNDS
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.ResultCode.WindowClosed">
            <summary>
            UI_E_WINDOW_CLOSED
            </summary>
        </member>
        <member name="T:C1.Util.DX.Animation.Interpolator2">
            <summary>	
            IUIAnimationInterpolator2
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.Interpolator2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.Interpolator2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.Interpolator2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.GetDimension">
            <summary>	
            HRESULT IUIAnimationInterpolator2::GetDimension([Out] unsigned int* dimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.SetInitialValueAndVelocity(System.Double[],System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationInterpolator2::SetInitialValueAndVelocity([In, Buffer] double* initialValue,[In, Buffer] double* initialVelocity,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.SetDuration(System.Double)">
            <summary>	
            HRESULT IUIAnimationInterpolator2::SetDuration([In] double duration)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.GetDuration">
            <summary>	
            HRESULT IUIAnimationInterpolator2::GetDuration([Out] double* duration)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.GetFinalValue(System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationInterpolator2::GetFinalValue([Out, Buffer] double* value,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.InterpolateValue(System.Double,System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationInterpolator2::InterpolateValue([In] double offset,[Out, Buffer] double* value,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.InterpolateVelocity(System.Double,System.Double[],System.Int32)">
            <summary>	
            HRESULT IUIAnimationInterpolator2::InterpolateVelocity([In] double offset,[Out, Buffer] double* velocity,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.GetPrimitiveInterpolation(C1.Util.DX.Animation.PrimitiveInterpolation,System.Int32)">
            <summary>	
            HRESULT IUIAnimationInterpolator2::GetPrimitiveInterpolation([In] IUIAnimationPrimitiveInterpolation* interpolation,[In] unsigned int cDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.Interpolator2.GetDependencies(C1.Util.DX.Animation.Dependencies@,C1.Util.DX.Animation.Dependencies@,C1.Util.DX.Animation.Dependencies@)">
            <summary>	
            HRESULT IUIAnimationInterpolator2::GetDependencies([Out] UI_ANIMATION_DEPENDENCIES* initialValueDependencies,[Out] UI_ANIMATION_DEPENDENCIES* initialVelocityDependencies,[Out] UI_ANIMATION_DEPENDENCIES* durationDependencies)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.PrimitiveInterpolation">
            <summary>	
            IUIAnimationPrimitiveInterpolation	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.PrimitiveInterpolation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.PrimitiveInterpolation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Animation.PrimitiveInterpolation.op_Explicit(System.IntPtr)~C1.Util.DX.Animation.PrimitiveInterpolation">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Animation.PrimitiveInterpolation"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.PrimitiveInterpolation.AddCubic(System.Int32,System.Double,System.Single,System.Single,System.Single,System.Single)">
            <summary>	
            HRESULT IUIAnimationPrimitiveInterpolation::AddCubic([In] unsigned int dimension,[In] double beginOffset,[In] float constantCoefficient,[In] float linearCoefficient,[In] float quadraticCoefficient,[In] float cubicCoefficient)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Animation.PrimitiveInterpolation.AddSinusoidal(System.Int32,System.Double,System.Single,System.Single,System.Single,System.Single)">
            <summary>	
            HRESULT IUIAnimationPrimitiveInterpolation::AddSinusoidal([In] unsigned int dimension,[In] double beginOffset,[In] float bias,[In] float amplitude,[In] float frequency,[In] float phase)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.TimerClientEventHandler">
            <summary>	
            IUIAnimationTimerClientEventHandler	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.TimerUpdateHandler">
            <summary>	
            IUIAnimationTimerUpdateHandler	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.VariableCurveChangeHandler2">
            <summary>	
            IUIAnimationVariableCurveChangeHandler2	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Animation.KeyFrame">
            <summary>	
            UI_ANIMATION_KEYFRAME
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Animation.KeyFrame.ID">
            <summary>
            Gets or sets the keyframe ID.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Animation.KeyFrame.Start">
            <summary>
            Represents the implicit keyframe at the start of every storyboard.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Animation.KeyFrame.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Animation.KeyFrame"/> struct.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="T:C1.Util.DX.Design.BaseConverter">
            <summary>
            Provides a base class for mathematical type converters.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.BaseConverter.ConvertFromValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,``0[])">
            <summary>
            Converts values to a string.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="values">The values.</param>
            <returns>A string representing the values</returns>
        </member>
        <member name="M:C1.Util.DX.Design.BaseConverter.ConvertToValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to values.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="strValue">The string value.</param>
            <returns>An array of value or null if strValue is not a string.</returns>
        </member>
        <member name="M:C1.Util.DX.Design.BaseConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Design.BaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Design.BaseConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Design.BaseConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Design.BaseConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="P:C1.Util.DX.Design.BaseConverter.Properties">
            <summary>
            Gets or sets the collection of exposed properties.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Design.ColorFConverter">
            <summary>
            Defines a type converter for <see cref="T:C1.Util.DX.ColorF"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.ColorFConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Design.ColorFConverter"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.ColorFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.ColorFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.ColorFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:C1.Util.DX.Design.Matrix4x4Converter">
            <summary>
            Defines a type converter for <see cref="T:C1.Util.DX.Matrix4x4"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Matrix4x4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Design.Matrix4x4Converter"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Matrix4x4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Matrix4x4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Matrix4x4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:C1.Util.DX.Design.Vector2Converter">
            <summary>
            Defines a type converter for <see cref="T:C1.Util.DX.Vector2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Vector2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Design.Vector2Converter"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Vector2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:C1.Util.DX.Design.Vector3Converter">
            <summary>
            Defines a type converter for <see cref="T:C1.Util.DX.Vector3"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Vector3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Design.Vector3Converter"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Vector3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:C1.Util.DX.Design.Vector4Converter">
            <summary>
            Defines a type converter for <see cref="T:C1.Util.DX.Vector4"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Vector4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Design.Vector4Converter"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Design.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:C1.Util.DX.Design.Vector4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.AnalysisTransform">
            <summary>	
            ID2D1AnalysisTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.AnalysisTransform.ProcessAnalysisResults(C1.Util.DX.DataStream)">
            <summary>	
            Supplies the analysis data to an analysis transform.
            </summary>	
            <param name="analysisData"><para>The data that the transform will analyze.</para></param>	
            <remarks>	
            The output of the transform will be copied to CPU-accessible memory by the imaging effects system before being passed to the implementation.If this call fails, the corresponding <see cref="T:C1.Util.DX.Direct2D.Effect"/> instance is placed into an error state and fails to draw.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.AnalysisTransform.ProcessAnalysisResults``1(``0)">
            <summary>	
            Supplies the analysis data to an analysis transform.
            </summary>	
            <param name="analysisData"><para>The data that the transform will analyze.</para></param>	
            <remarks>	
            The output of the transform will be copied to CPU-accessible memory by the imaging effects system before being passed to the implementation.If this call fails, the corresponding <see cref="T:C1.Util.DX.Direct2D.Effect"/> instance is placed into an error state and fails to draw.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.AnalysisTransform.ProcessAnalysisResults``1(``0[])">
            <summary>	
            Supplies the analysis data to an analysis transform.
            </summary>	
            <param name="analysisData"><para>The data that the transform will analyze.</para></param>	
            <remarks>	
            The output of the transform will be copied to CPU-accessible memory by the imaging effects system before being passed to the implementation.If this call fails, the corresponding <see cref="T:C1.Util.DX.Direct2D.Effect"/> instance is placed into an error state and fails to draw.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.AnalysisTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.AnalysisTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.AnalysisTransform.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.AnalysisTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.AnalysisTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.AnalysisTransform.ProcessAnalysisResults(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1AnalysisTransform::ProcessAnalysisResults([In, Buffer] const void* analysisData,[In] unsigned int analysisDataCount)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Bitmap">
            <summary>	
            ID2D1Bitmap	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Image">
            <summary>	
            ID2D1Image	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Resource">
            <summary>	
            ID2D1Resource	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Resource.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Resource">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Resource"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Resource.GetFactory">
            <summary>	
            void ID2D1Resource::GetFactory([Out] ID2D1Factory** factory)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Image.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Image"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Image.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Image">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Image"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Size2L)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Size2L,C1.Util.DX.Direct2D.BitmapProperties)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Size2L,C1.Util.DX.DataPointer,System.Int32)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataPointer">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Size2L,C1.Util.DX.DataPointer,System.Int32,C1.Util.DX.Direct2D.BitmapProperties)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataPointer">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.Bitmap)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="bitmap">An <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.Direct2D.BitmapProperties})">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="bitmap">An <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:C1.Util.DX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:C1.Util.DX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.DXGI.Surface)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="surface">An <see cref="T:C1.Util.DX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.DXGI.Surface,System.Nullable{C1.Util.DX.Direct2D.BitmapProperties})">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="surface">An <see cref="T:C1.Util.DX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:C1.Util.DX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:C1.Util.DX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.WIC.BitmapLock,System.Nullable{C1.Util.DX.Direct2D.BitmapProperties})">
            <summary>
            Creates an <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> that points to the bitmap data already stored in the <see cref="T:C1.Util.DX.WIC.BitmapLock"/>. 
            </summary>
            <param name="renderTarget">An instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/>.</param>
            <param name="bitmapLock">An <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/> that contains the data to share with the new <see cref="T:C1.Util.DX.Direct2D.Bitmap"/>.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:C1.Util.DX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:C1.Util.DX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.New``1(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Size2L,``0[],C1.Util.DX.Direct2D.BitmapProperties)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="pixelDatas">A pointer to an array of pixel data. The size of the array must be equal to sizeof(pixel) * Size.Width * Height.</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.WIC.BitmapSource)">
            <summary>
            Creates a Bitmap from a wic bitmap.
            </summary>
            <param name="renderTarget">The render target.</param>
            <param name="wicBitmapSource">A reference to a <see cref="T:C1.Util.DX.WIC.BitmapSource"/> wic bitmap.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.WIC.BitmapSource,C1.Util.DX.Direct2D.BitmapProperties)">
            <summary>
            Creates a Bitmap from a wic bitmap.
            </summary>
            <param name="renderTarget">The render target.</param>
            <param name="wicBitmap">The wic bitmap.</param>
            <param name="bitmapProperties">The bitmap properties.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromMemory(System.IntPtr,System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="pointer">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromMemory(System.Byte[],System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromMemory``1(``0[],System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromMemory(System.IntPtr,System.Int32,C1.Util.DX.RectL)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="pointer">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromMemory(System.Byte[],System.Int32,C1.Util.DX.RectL)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromMemory``1(``0[],System.Int32,C1.Util.DX.RectL)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromRenderTarget(C1.Util.DX.Direct2D.RenderTarget)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromRenderTarget(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Point2L)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromRenderTarget(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Point2L,C1.Util.DX.RectL)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <param name="sourceArea">The area of renderTarget to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromStream(System.IO.Stream,System.Int32,System.Int32)">
            <summary>	
            Copies the specified region from a stream into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="stream">The stream to copy the data from. </param>
            <param name="length">Length in bytes of the data to copy from the stream.</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromStream(System.IO.Stream,System.Int32,System.Int32,C1.Util.DX.RectL)">
            <summary>	
            Copies the specified region from a stream into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="stream">The stream to copy the data from. </param>
            <param name="length">Length in bytes of the data to copy from the stream.</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Bitmap">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Bitmap"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.GetSize">
            <summary>	
            D2D_SIZE_F ID2D1Bitmap::GetSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.GetPixelSize">
            <summary>	
            D2D_SIZE_U ID2D1Bitmap::GetPixelSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.GetPixelFormat">
            <summary>	
            D2D1_PIXEL_FORMAT ID2D1Bitmap::GetPixelFormat()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.GetDpi(System.Single@,System.Single@)">
            <summary>	
            void ID2D1Bitmap::GetDpi([Out] float* dpiX,[Out] float* dpiY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromBitmap(C1.Util.DX.Direct2D.Bitmap)">
            <summary>	
            HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_U* srcRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromBitmap(C1.Util.DX.Point2L,C1.Util.DX.Direct2D.Bitmap)">
            <summary>	
            HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_U* srcRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromBitmap(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.RectL)">
            <summary>	
            HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_U* srcRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromBitmap(C1.Util.DX.Point2L,C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.RectL)">
            <summary>	
            HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_U* srcRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromRenderTarget(System.Nullable{C1.Util.DX.Point2L},C1.Util.DX.Direct2D.RenderTarget,System.Nullable{C1.Util.DX.RectL})">
            <summary>	
            HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D_RECT_U* srcRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap.CopyFromMemory(System.Nullable{C1.Util.DX.RectL},System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D_RECT_U* dstRect,[In] const void* srcData,[In] unsigned int pitch)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.Bitmap.DotsPerInch">
            <summary>	
            Return the dots per inch (DPI) of the bitmap.	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Bitmap1">
            <summary>	
            ID2D1Bitmap1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Size2L)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Size2L,C1.Util.DX.Direct2D.BitmapProperties1)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Size2L,C1.Util.DX.DataStream,System.Int32)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataStream">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Size2L,C1.Util.DX.DataStream,System.Int32,C1.Util.DX.Direct2D.BitmapProperties1)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataStream">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.DXGI.Surface)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="surface">An <see cref="T:C1.Util.DX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.DXGI.Surface,C1.Util.DX.Direct2D.BitmapProperties1)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="surface">An <see cref="T:C1.Util.DX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:C1.Util.DX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:C1.Util.DX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.WIC.BitmapSource)">
            <summary>
            Creates a Bitmap from a wic bitmap.
            </summary>
            <param name="deviceContext">The render target.</param>
            <param name="wicBitmapSource">A reference to a <see cref="T:C1.Util.DX.WIC.BitmapSource"/> wic bitmap.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.WIC.BitmapSource,C1.Util.DX.Direct2D.BitmapProperties1)">
            <summary>
            Creates a Bitmap from a wic bitmap.
            </summary>
            <param name="deviceContext">The render target.</param>
            <param name="wicBitmap">The wic bitmap.</param>
            <param name="bitmapProperties">The bitmap properties.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Map(C1.Util.DX.Direct2D.MapOptions)">
            <summary>
            Maps the given bitmap into memory.
            </summary>
            <param name="options"><para>The options used in mapping the bitmap into memory.</para></param>	
            <returns>a reference to the rectangle that is mapped into memory</returns>	
            <remarks>	
            The bitmap must have been created with the <see cref="F:C1.Util.DX.Direct2D.MapOptions.Read"/> flag specified. The caller should try to unmap the memory as quickly as is feasable to release occupied DMA aperture memory.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Bitmap1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Bitmap1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Bitmap1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.GetColorContext">
            <summary>	
            void ID2D1Bitmap1::GetColorContext([Out, Optional] ID2D1ColorContext** colorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.GetOptions">
            <summary>	
            D2D1_BITMAP_OPTIONS ID2D1Bitmap1::GetOptions()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.GetSurface">
            <summary>	
            HRESULT ID2D1Bitmap1::GetSurface([Out, Optional] IDXGISurface** dxgiSurface)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Map(C1.Util.DX.Direct2D.MapOptions,C1.Util.DX.Direct2D.MappedRectangle@)">
            <summary>	
            HRESULT ID2D1Bitmap1::Map([In] D2D1_MAP_OPTIONS options,[Out] D2D1_MAPPED_RECT* mappedRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Bitmap1.Unmap">
            <summary>	
            HRESULT ID2D1Bitmap1::Unmap()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapBrush">
            <summary>	
            ID2D1BitmapBrush	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Brush">
            <summary>	
            ID2D1Brush	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Brush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Brush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Brush.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Brush">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Brush"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Brush.SetOpacity(System.Single)">
            <summary>	
            void ID2D1Brush::SetOpacity([In] float opacity)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Brush.SetTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            void ID2D1Brush::SetTransform([In] const D2D_MATRIX_3X2_F* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Brush.GetOpacity">
            <summary>	
            float ID2D1Brush::GetOpacity()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Brush.GetTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            void ID2D1Brush::GetTransform([Out] D2D_MATRIX_3X2_F* transform)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.Brush.Transform">
            <summary>	
            GetTransform / SetTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.Bitmap)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.BitmapBrushProperties)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:C1.Util.DX.Direct2D.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:C1.Util.DX.Direct2D.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.BrushProperties)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.Direct2D.BitmapBrushProperties},System.Nullable{C1.Util.DX.Direct2D.BrushProperties})">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:C1.Util.DX.Direct2D.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:C1.Util.DX.Direct2D.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.BitmapBrush">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.SetExtendModeX(C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            void ID2D1BitmapBrush::SetExtendModeX([In] D2D1_EXTEND_MODE extendModeX)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.SetExtendModeY(C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            void ID2D1BitmapBrush::SetExtendModeY([In] D2D1_EXTEND_MODE extendModeY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.SetInterpolationMode(C1.Util.DX.Direct2D.BitmapInterpolationMode)">
            <summary>	
            void ID2D1BitmapBrush::SetInterpolationMode([In] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.SetBitmap(C1.Util.DX.Direct2D.Bitmap)">
            <summary>	
            void ID2D1BitmapBrush::SetBitmap([In, Optional] ID2D1Bitmap* bitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.GetExtendModeX">
            <summary>	
            D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeX()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.GetExtendModeY">
            <summary>	
            D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeY()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.GetInterpolationMode">
            <summary>	
            D2D1_BITMAP_INTERPOLATION_MODE ID2D1BitmapBrush::GetInterpolationMode()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush.GetBitmap">
            <summary>	
            void ID2D1BitmapBrush::GetBitmap([Out] ID2D1Bitmap** bitmap)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapBrush1">
            <summary>	
            ID2D1BitmapBrush1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Direct2D.Bitmap1)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Direct2D.Bitmap1,C1.Util.DX.Direct2D.BitmapBrushProperties1)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:C1.Util.DX.Direct2D.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:C1.Util.DX.Direct2D.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Direct2D.Bitmap1,C1.Util.DX.Direct2D.BrushProperties)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Direct2D.Bitmap1,System.Nullable{C1.Util.DX.Direct2D.BitmapBrushProperties1},System.Nullable{C1.Util.DX.Direct2D.BrushProperties})">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="deviceContext">an instance of <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:C1.Util.DX.Direct2D.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:C1.Util.DX.Direct2D.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapBrush1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.BitmapBrush1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.BitmapBrush1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.SetInterpolationMode1(C1.Util.DX.Direct2D.InterpolationMode)">
            <summary>	
            void ID2D1BitmapBrush1::SetInterpolationMode1([In] D2D1_INTERPOLATION_MODE interpolationMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapBrush1.GetInterpolationMode1">
            <summary>	
            D2D1_INTERPOLATION_MODE ID2D1BitmapBrush1::GetInterpolationMode1()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapProperties1">
            <summary>	
            D2D1_BITMAP_PROPERTIES1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapProperties1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapProperties1"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapProperties1.#ctor(C1.Util.DX.Direct2D.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapProperties1.#ctor(C1.Util.DX.Direct2D.PixelFormat,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapProperties1.#ctor(C1.Util.DX.Direct2D.PixelFormat,System.Single,System.Single,C1.Util.DX.Direct2D.BitmapOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapProperties1"/> class.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
            <param name="bitmapOptions">The bitmap options.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapProperties1.#ctor(C1.Util.DX.Direct2D.PixelFormat,System.Single,System.Single,C1.Util.DX.Direct2D.BitmapOptions,C1.Util.DX.Direct2D.ColorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapProperties1"/> class.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
            <param name="bitmapOptions">The bitmap options.</param>
            <param name="colorContext">The color context.</param>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties1.PixelFormat">
            <summary>	
            D2D1_PIXEL_FORMAT pixelFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties1.DpiX">
            <summary>	
            float dpiX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties1.DpiY">
            <summary>	
            float dpiY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties1.BitmapOptions">
            <summary>	
            D2D1_BITMAP_OPTIONS bitmapOptions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties1.ColorContextPointer">
            <summary>	
            ID2D1ColorContext* colorContext	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.BitmapProperties1.ColorContext">
            <summary>
            Gets or sets the color context.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapRenderTarget">
            <summary>	
            ID2D1BitmapRenderTarget	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RenderTarget">
            <summary>	
            ID2D1RenderTarget	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTarget.DefaultStrokeWidth">
            <summary>
            Default stroke width used for all methods that are not explicitly using it. Default is set to 1.0f.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.QueryGdiInterop">
            <summary>
            Returns an instance of GdiInteropRenderTarget for the current RenderTarget.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.DXGI.Surface,C1.Util.DX.Direct2D.RenderTargetProperties@)">
            <summary>	
            Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="dxgiSurface">The dxgi surface to bind this render target to</param>
            <param name="properties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Single,C1.Util.DX.Direct2D.BitmapInterpolationMode)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:C1.Win.DX.Direct2D.BitmapInterpolationMode.Linear" />.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.RectF,System.Single,C1.Util.DX.Direct2D.BitmapInterpolationMode)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="destinationRectangle">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn; NULL to draw the selected portion of the bitmap at the origin of the render target.  If the rectangle is specified but not well-ordered, nothing is drawn, but the render target does not enter an error state. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:C1.Util.DX.Direct2D.BitmapInterpolationMode.Linear"/>.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Single,C1.Util.DX.Direct2D.BitmapInterpolationMode,C1.Util.DX.RectF)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:C1.Win.DX.Direct2D.BitmapInterpolationMode.Linear" />.  </param>
            <param name="sourceRectangle">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to be drawn; NULL to draw the entire bitmap.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            Draws the outline of the specified geometry. 	
            </summary>	
            <param name="geometry">The geometry to draw. </param>
            <param name="brush">The brush used to paint the geometry's stroke. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawLine(C1.Util.DX.Point2F,C1.Util.DX.Point2F,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            Draws a line between the specified points. 	
            </summary>	
            <param name="point0">The start point of the line, in device-independent pixels. </param>
            <param name="point1">The end point of the line, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the line's stroke. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawText(System.String,C1.Util.DX.DirectWrite.TextFormat,C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:C1.Win.DX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawText(System.String,C1.Util.DX.DirectWrite.TextFormat,C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.DrawTextOptions)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:C1.Win.DX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:C1.Win.DX.Direct2D.DrawTextOptions.None" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawText(System.String,C1.Util.DX.DirectWrite.TextFormat,C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.DrawTextOptions,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:C1.Win.DX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:C1.Win.DX.Direct2D.DrawTextOptions.None" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is DWRITE_MEASURING_MODE_NATURAL.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawTextLayout(C1.Util.DX.Point2F,C1.Util.DX.DirectWrite.TextLayout,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            Draws the formatted text described by the specified <see cref="T:C1.Win.DX.DirectWrite.TextLayout" /> object.	
            </summary>	
            <param name="origin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn. </param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from <see cref="T:C1.Win.DX.Direct2D.Resource" /> are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.  </param>
            <param name="defaultForegroundBrush">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the <see cref="M:C1.Win.DX.DirectWrite.TextLayout.SetDrawingEffect(C1.Win.DX.ComObject,C1.Win.DX.DirectWrite.TextRange)" /> method).  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            Paints the interior of the specified geometry. 	
            </summary>	
            <param name="geometry">The geometry to paint.</param>
            <param name="brush">The brush used to paint the geometry's interior.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillOpacityMask(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.OpacityMaskContent)">
            <summary>	
            Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.    	
            </summary>	
            <param name="opacityMask">The opacity mask to apply to the brush. The alpha value of each pixel in the  region specified by sourceRectangle is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by destinationRectangle. </param>
            <param name="brush">The brush used to paint the region of the render target specified by destinationRectangle. </param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.RenderTarget">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateBitmap(C1.Util.DX.Size2L,System.IntPtr,System.Int32,C1.Util.DX.Direct2D.BitmapProperties)">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateBitmap([In] D2D_SIZE_U size,[In, Optional] const void* srcData,[In] unsigned int pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out, Fast] ID2D1Bitmap** bitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateBitmapFromWicBitmap(C1.Util.DX.WIC.BitmapSource,System.Nullable{C1.Util.DX.Direct2D.BitmapProperties})">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateBitmapFromWicBitmap([In] IWICBitmapSource* wicBitmapSource,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateSharedBitmap(System.Guid,System.IntPtr,System.Nullable{C1.Util.DX.Direct2D.BitmapProperties})">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateSharedBitmap([In] const GUID&amp; riid,[In] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out, Fast] ID2D1Bitmap** bitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateBitmapBrush(C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.Direct2D.BitmapBrushProperties},System.Nullable{C1.Util.DX.Direct2D.BrushProperties})">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateBitmapBrush([In, Optional] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1BitmapBrush** bitmapBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateSolidColorBrush(C1.Util.DX.ColorF,System.Nullable{C1.Util.DX.Direct2D.BrushProperties})">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateSolidColorBrush([In] const D2D_COLOR_F* color,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1SolidColorBrush** solidColorBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateGradientStopCollection(C1.Util.DX.Direct2D.GradientStop[],System.Int32,C1.Util.DX.Direct2D.Gamma,C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[In] unsigned int gradientStopsCount,[In] D2D1_GAMMA colorInterpolationGamma,[In] D2D1_EXTEND_MODE extendMode,[Out, Fast] ID2D1GradientStopCollection** gradientStopCollection)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateLinearGradientBrush(C1.Util.DX.Direct2D.LinearGradientBrushProperties,System.Nullable{C1.Util.DX.Direct2D.BrushProperties},C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out, Fast] ID2D1LinearGradientBrush** linearGradientBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateRadialGradientBrush(C1.Util.DX.Direct2D.RadialGradientBrushProperties@,System.Nullable{C1.Util.DX.Direct2D.BrushProperties},C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out, Fast] ID2D1RadialGradientBrush** radialGradientBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateCompatibleRenderTarget(System.Nullable{C1.Util.DX.Size2F},System.Nullable{C1.Util.DX.Size2L},System.Nullable{C1.Util.DX.Direct2D.PixelFormat},C1.Util.DX.Direct2D.CompatibleRenderTargetOptions)">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateCompatibleRenderTarget([In, Optional] const D2D_SIZE_F* desiredSize,[In, Optional] const D2D_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[In] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out, Fast] ID2D1BitmapRenderTarget** bitmapRenderTarget)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateLayer(System.Nullable{C1.Util.DX.Size2F})">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateLayer([In, Optional] const D2D_SIZE_F* size,[Out, Fast] ID2D1Layer** layer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.CreateMesh">
            <summary>	
            HRESULT ID2D1RenderTarget::CreateMesh([Out, Fast] ID2D1Mesh** mesh)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawLine(C1.Util.DX.Point2F,C1.Util.DX.Point2F,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            void ID2D1RenderTarget::DrawLine([In] D2D_POINT_2F point0,[In] D2D_POINT_2F point1,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawRectangle(C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            void ID2D1RenderTarget::DrawRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawRectangle(C1.Util.DX.RectF@,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            void ID2D1RenderTarget::DrawRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillRectangle(C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            void ID2D1RenderTarget::FillRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawRoundedRectangle(C1.Util.DX.Direct2D.RoundedRectangle@,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillRoundedRectangle(C1.Util.DX.Direct2D.RoundedRectangle@,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            void ID2D1RenderTarget::FillRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawEllipse(C1.Util.DX.Direct2D.Ellipse,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawEllipse(C1.Util.DX.Direct2D.Ellipse@,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillEllipse(C1.Util.DX.Direct2D.Ellipse,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            void ID2D1RenderTarget::FillEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillEllipse(C1.Util.DX.Direct2D.Ellipse@,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            void ID2D1RenderTarget::FillEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            void ID2D1RenderTarget::FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillMesh(C1.Util.DX.Direct2D.Mesh,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            void ID2D1RenderTarget::FillMesh([In] ID2D1Mesh* mesh,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.FillOpacityMask(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.OpacityMaskContent,System.Nullable{C1.Util.DX.RectF},System.Nullable{C1.Util.DX.RectF})">
            <summary>	
            void ID2D1RenderTarget::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[In] D2D1_OPACITY_MASK_CONTENT content,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.RectF},System.Single,C1.Util.DX.Direct2D.BitmapInterpolationMode,System.Nullable{C1.Util.DX.RectF})">
            <summary>	
            void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_F* destinationRectangle,[In] float opacity,[In] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D_RECT_F* sourceRectangle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawText(System.String,System.Int32,C1.Util.DX.DirectWrite.TextFormat,C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.DrawTextOptions,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            void ID2D1RenderTarget::DrawText([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[In] D2D1_DRAW_TEXT_OPTIONS options,[In] DWRITE_MEASURING_MODE measuringMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawTextLayout(C1.Util.DX.Point2F,C1.Util.DX.DirectWrite.TextLayout,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.DrawTextOptions)">
            <summary>	
            void ID2D1RenderTarget::DrawTextLayout([In] D2D_POINT_2F origin,[In] IDWriteTextLayout* textLayout,[In] ID2D1Brush* defaultForegroundBrush,[In] D2D1_DRAW_TEXT_OPTIONS options)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawGlyphRun(C1.Util.DX.Point2F,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.Direct2D.Brush,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            void ID2D1RenderTarget::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.DrawGlyphRun(C1.Util.DX.Point2F,System.IntPtr,C1.Util.DX.Direct2D.Brush,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            void ID2D1RenderTarget::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.SetTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            void ID2D1RenderTarget::SetTransform([In] const D2D_MATRIX_3X2_F* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            void ID2D1RenderTarget::GetTransform([Out] D2D_MATRIX_3X2_F* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.SetAntialiasMode(C1.Util.DX.Direct2D.AntialiasMode)">
            <summary>	
            void ID2D1RenderTarget::SetAntialiasMode([In] D2D1_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetAntialiasMode">
            <summary>	
            D2D1_ANTIALIAS_MODE ID2D1RenderTarget::GetAntialiasMode()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.SetTextAntialiasMode(C1.Util.DX.Direct2D.TextAntialiasMode)">
            <summary>	
            void ID2D1RenderTarget::SetTextAntialiasMode([In] D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetTextAntialiasMode">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE ID2D1RenderTarget::GetTextAntialiasMode()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.SetTextRenderingParams(C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            void ID2D1RenderTarget::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetTextRenderingParams">
            <summary>	
            void ID2D1RenderTarget::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.SetTags(System.Int64,System.Int64)">
            <summary>	
            void ID2D1RenderTarget::SetTags([In] unsigned longlong tag1,[In] unsigned longlong tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetTags(System.Int64@,System.Int64@)">
            <summary>	
            void ID2D1RenderTarget::GetTags([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.PushLayer(C1.Util.DX.Direct2D.LayerParameters@,C1.Util.DX.Direct2D.Layer)">
            <summary>	
            void ID2D1RenderTarget::PushLayer([In] const D2D1_LAYER_PARAMETERS* layerParameters,[In, Optional] ID2D1Layer* layer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.PopLayer">
            <summary>	
            void ID2D1RenderTarget::PopLayer()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.Flush">
            <summary>	
            HRESULT ID2D1RenderTarget::Flush([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.Flush(System.Int64@,System.Int64@)">
            <summary>	
            HRESULT ID2D1RenderTarget::Flush([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.SaveDrawingState(C1.Util.DX.Direct2D.DrawingStateBlock)">
            <summary>	
            void ID2D1RenderTarget::SaveDrawingState([InOut] ID2D1DrawingStateBlock* drawingStateBlock)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.RestoreDrawingState(C1.Util.DX.Direct2D.DrawingStateBlock)">
            <summary>	
            void ID2D1RenderTarget::RestoreDrawingState([In] ID2D1DrawingStateBlock* drawingStateBlock)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.PushAxisAlignedClip(C1.Util.DX.RectF,C1.Util.DX.Direct2D.AntialiasMode)">
            <summary>	
            void ID2D1RenderTarget::PushAxisAlignedClip([In] const D2D_RECT_F* clipRect,[In] D2D1_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.PushAxisAlignedClip(C1.Util.DX.RectF@,C1.Util.DX.Direct2D.AntialiasMode)">
            <summary>	
            void ID2D1RenderTarget::PushAxisAlignedClip([In] const D2D_RECT_F* clipRect,[In] D2D1_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.PopAxisAlignedClip">
            <summary>	
            void ID2D1RenderTarget::PopAxisAlignedClip()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.Clear(System.Nullable{C1.Util.DX.ColorF})">
            <summary>	
            void ID2D1RenderTarget::Clear([In, Optional] const D2D_COLOR_F* clearColor)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.BeginDraw">
            <summary>	
            void ID2D1RenderTarget::BeginDraw()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.EndDraw(System.Int64@,System.Int64@)">
            <summary>	
            HRESULT ID2D1RenderTarget::EndDraw([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.EndDrawHR">
            <summary>	
            HRESULT ID2D1RenderTarget::EndDraw([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.EndDraw(System.Boolean)">
            <summary>	
            HRESULT ID2D1RenderTarget::EndDraw([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetPixelFormat">
            <summary>	
            D2D1_PIXEL_FORMAT ID2D1RenderTarget::GetPixelFormat()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.SetDpi(System.Single,System.Single)">
            <summary>	
            void ID2D1RenderTarget::SetDpi([In] float dpiX,[In] float dpiY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetDpi(System.Single@,System.Single@)">
            <summary>	
            void ID2D1RenderTarget::GetDpi([Out] float* dpiX,[Out] float* dpiY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetSize">
            <summary>	
            D2D_SIZE_F ID2D1RenderTarget::GetSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetPixelSize">
            <summary>	
            D2D_SIZE_U ID2D1RenderTarget::GetPixelSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.GetMaximumBitmapSize">
            <summary>	
            unsigned int ID2D1RenderTarget::GetMaximumBitmapSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTarget.IsSupported(C1.Util.DX.Direct2D.RenderTargetProperties@)">
            <summary>	
            BOOL ID2D1RenderTarget::IsSupported([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.RenderTarget.StrokeWidth">
            <summary>
            Get or set the default stroke width used for all methods that are not explicitly using it. Default is set to 1.0f.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.RenderTarget.DotsPerInch">
            <summary>	
            Get or sets the dots per inch (DPI) of the render target. 	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.RenderTarget.Transform">
            <summary>	
            GetTransform / SetTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapRenderTarget.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.CompatibleRenderTargetOptions)">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render targe with same size, pixel size and pixel format.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapRenderTarget.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.CompatibleRenderTargetOptions,C1.Util.DX.Size2F)">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target with same pixel size and pixel format.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <param name="desiredSize">The desired size of the new render target in device-independent pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapRenderTarget.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.CompatibleRenderTargetOptions,System.Nullable{C1.Util.DX.Direct2D.PixelFormat})">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target with same size and pixel size.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="F:C1.Util.DX.Direct2D.AlphaMode.Unknown"/>, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapRenderTarget.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.CompatibleRenderTargetOptions,System.Nullable{C1.Util.DX.Size2F},System.Nullable{C1.Util.DX.Size2L},System.Nullable{C1.Util.DX.Direct2D.PixelFormat})">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.	
            </summary>	
            <remarks>	
            The pixel size and DPI of the new render target can be altered by specifying values for desiredSize or desiredPixelSize:  If desiredSize is specified but desiredPixelSize is not, the pixel size is computed from the desired size using the parent target DPI. If the desiredSize maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target.  If desiredSize maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (desiredSize.width, desiredSize.height) maps to the lower-right corner of the compatible render target.If the desiredPixelSize is specified and desiredSize is not, the DPI of the new render target is the same as the original render target.If both desiredSize and desiredPixelSize are specified, the DPI of the new render target is computed to account for the difference in scale.If neither desiredSize nor desiredPixelSize is specified, the new render target size and DPI match the original render target. 	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="desiredSize">The desired size of the new render target in device-independent pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="F:C1.Util.DX.Direct2D.AlphaMode.Unknown"/>, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapRenderTarget.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.BitmapRenderTarget">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.BitmapRenderTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapRenderTarget.GetBitmap">
            <summary>	
            HRESULT ID2D1BitmapRenderTarget::GetBitmap([Out] ID2D1Bitmap** bitmap)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BlendTransform">
            <summary>	
            ID2D1BlendTransform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ConcreteTransform">
            <summary>	
            ID2D1ConcreteTransform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TransformNodeNative">
            <summary>	
            ID2D1TransformNode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TransformNode">
            <summary>	
            ID2D1TransformNode	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNode.GetInputCount">
            <summary>
            Gets the number of inputs to the transform node.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNodeNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.TransformNodeNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNodeNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.TransformNodeNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.TransformNodeNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNodeNative.GetInputCount">
            <summary>	
            unsigned int ID2D1TransformNode::GetInputCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ConcreteTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ConcreteTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ConcreteTransform.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.ConcreteTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.ConcreteTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ConcreteTransform.SetOutputBuffer(C1.Util.DX.Direct2D.BufferPrecision,C1.Util.DX.Direct2D.ChannelDepth)">
            <summary>	
            HRESULT ID2D1ConcreteTransform::SetOutputBuffer([In] D2D1_BUFFER_PRECISION bufferPrecision,[In] D2D1_CHANNEL_DEPTH channelDepth)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ConcreteTransform.SetCached(C1.Util.DX.Bool)">
            <summary>	
            void ID2D1ConcreteTransform::SetCached([In] BOOL isCached)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BlendTransform.Create(C1.Util.DX.Direct2D.EffectContext,System.Int32,C1.Util.DX.Direct2D.BlendDescription)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.BlendTransform"/> class
            </summary>
            <param name="context">The effect context</param>
            <param name="numInputs">The number of inputs.</param>
            <param name="blendDescription">The blend description</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BlendTransform.Create(C1.Util.DX.Direct2D.EffectContext,System.Int32,C1.Util.DX.Direct2D.BlendDescription@)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.BlendTransform"/> class
            </summary>
            <param name="context">The effect context</param>
            <param name="numInputs">The number of inputs.</param>
            <param name="blendDescription">The blend description</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BlendTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BlendTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BlendTransform.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.BlendTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.BlendTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BlendTransform.SetDescription(C1.Util.DX.Direct2D.BlendDescription@)">
            <summary>	
            void ID2D1BlendTransform::SetDescription([In] const D2D1_BLEND_DESCRIPTION* description)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BlendTransform.GetDescription(C1.Util.DX.Direct2D.BlendDescription@)">
            <summary>	
            void ID2D1BlendTransform::GetDescription([Out] D2D1_BLEND_DESCRIPTION* description)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.BlendTransform.Description">
            <summary>	
            GetDescription / SetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BorderTransform">
            <summary>	
            ID2D1BorderTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BorderTransform.Create(C1.Util.DX.Direct2D.EffectContext,C1.Util.DX.Direct2D.ExtendMode,C1.Util.DX.Direct2D.ExtendMode)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.BorderTransform"/> class
            </summary>
            <param name="context">The effect context</param>
            <param name="extendModeX">The extend mode for X coordinates</param>
            <param name="extendModeY">The extend mode for Y coordinates</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BorderTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BorderTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BorderTransform.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.BorderTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.BorderTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BorderTransform.SetExtendModeX(C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            void ID2D1BorderTransform::SetExtendModeX([In] D2D1_EXTEND_MODE extendMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BorderTransform.SetExtendModeY(C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            void ID2D1BorderTransform::SetExtendModeY([In] D2D1_EXTEND_MODE extendMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BorderTransform.GetExtendModeX">
            <summary>	
            D2D1_EXTEND_MODE ID2D1BorderTransform::GetExtendModeX()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BorderTransform.GetExtendModeY">
            <summary>	
            D2D1_EXTEND_MODE ID2D1BorderTransform::GetExtendModeY()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BoundsAdjustmentTransform">
            <summary>	
            ID2D1BoundsAdjustmentTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BoundsAdjustmentTransform.Create(C1.Util.DX.Direct2D.EffectContext,C1.Util.DX.RectL)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.BoundsAdjustmentTransform"/> class
            </summary>
            <param name="context">The effect context</param>
            <param name="outputRectangle">The output rectangle region used for this transformation</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BoundsAdjustmentTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BoundsAdjustmentTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BoundsAdjustmentTransform.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.BoundsAdjustmentTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.BoundsAdjustmentTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BoundsAdjustmentTransform.SetOutputBounds(C1.Util.DX.RectL)">
            <summary>	
            void ID2D1BoundsAdjustmentTransform::SetOutputBounds([In] const RECT* outputBounds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BoundsAdjustmentTransform.GetOutputBounds(C1.Util.DX.RectL@)">
            <summary>	
            void ID2D1BoundsAdjustmentTransform::GetOutputBounds([Out] RECT* outputBounds)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorContext">
            <summary>	
            ID2D1ColorContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.Create(C1.Util.DX.Direct2D.EffectContext,C1.Util.DX.Direct2D.ColorSpace,System.Byte[])">
            <summary>	
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.ColorContext"/> class from a color profile.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.Create(C1.Util.DX.Direct2D.EffectContext,System.String)">
            <summary>	
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.ColorContext"/> class from a filename.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.Create(C1.Util.DX.Direct2D.EffectContext,C1.Util.DX.WIC.ColorContext)">
            <summary>	
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.ColorContext"/> class from WIC color context.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ColorContext"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.ColorContext">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.ColorContext"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.GetColorSpace">
            <summary>	
            D2D1_COLOR_SPACE ID2D1ColorContext::GetColorSpace()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.GetProfileSize">
            <summary>	
            unsigned int ID2D1ColorContext::GetProfileSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ColorContext.GetProfile(System.Byte[],System.Int32)">
            <summary>	
            HRESULT ID2D1ColorContext::GetProfile([Out, Buffer] unsigned char* profile,[In] unsigned int profileSize)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.ColorContext.ProfileData">
            <summary>
            Gets the profile data.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandList">
            <summary>	
            ID2D1CommandList	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandList.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.CommandList"/> class.
            </summary>
            <param name="deviceContext">The device context.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandList.Stream(C1.Util.DX.Direct2D.CommandSink)">
            <summary>
            Streams the contents of the command list to the specified command sink. 
            </summary>
            <param name="sink">The sink into which the command list will be streamed.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandList.Stream(C1.Util.DX.Direct2D.CommandSink1)">
            <summary>
            Streams the contents of the command list to the specified command sink. 
            </summary>
            <param name="sink">The sink into which the command list will be streamed.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandList.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.CommandList"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandList.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.CommandList">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.CommandList"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandList.Stream_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1CommandList::Stream([In] ID2D1CommandSink* sink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandList.Close">
            <summary>	
            HRESULT ID2D1CommandList::Close()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSink1Shadow">
            <summary>
            Internal CommandSink1 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink1Shadow.ToIntPtr(C1.Util.DX.Direct2D.CommandSink1)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSinkShadow">
            <summary>
            Internal CommandSink Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkShadow.ToIntPtr(C1.Util.DX.Direct2D.CommandSink)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSinkShadow.CommandSinkVtbl.SetPrimitiveBlendDelegate">
            <summary>	
            Sets the blending for primitives.
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSinkShadow.CommandSinkVtbl.SetUnitModeDelegate">
            <summary>	
            Sets the unit mode
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSink1Shadow.CommandSink1Vtbl.SetPrimitiveBlend1Delegate">
            <summary>	
            Sets the blending for primitives.
            </summary>	
            <unmanaged>HRESULT ID2D1CommandSink1::SetPrimitiveBlend1([In] D2D1_PRIMITIVE_BLEND primitiveBlend)</unmanaged>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ComputeInformation">
            <summary>	
            ID2D1ComputeInfo	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RenderInformation">
            <summary>	
            ID2D1RenderInfo	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderInformation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.RenderInformation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderInformation.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.RenderInformation">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.RenderInformation"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderInformation.SetInputDescription(System.Int32,C1.Util.DX.Direct2D.InputDescription)">
            <summary>	
            HRESULT ID2D1RenderInfo::SetInputDescription([In] unsigned int inputIndex,[In] D2D1_INPUT_DESCRIPTION inputDescription)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderInformation.SetOutputBuffer(C1.Util.DX.Direct2D.BufferPrecision,C1.Util.DX.Direct2D.ChannelDepth)">
            <summary>	
            HRESULT ID2D1RenderInfo::SetOutputBuffer([In] D2D1_BUFFER_PRECISION bufferPrecision,[In] D2D1_CHANNEL_DEPTH channelDepth)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderInformation.SetCached(C1.Util.DX.Bool)">
            <summary>	
            void ID2D1RenderInfo::SetCached([In] BOOL isCached)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderInformation.SetInstructionCountHint(System.Int32)">
            <summary>	
            void ID2D1RenderInfo::SetInstructionCountHint([In] unsigned int instructionCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.SetConstantBuffer(C1.Util.DX.DataStream)">
            <summary>
            Sets the constant buffer data from a <see cref="T:C1.Util.DX.DataStream"/>.
            </summary>
            <param name="dataStream">The DataStream that contains the constant buffer data</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.SetConstantBuffer``1(``0)">
            <summary>
            Sets the constant buffer data from a struct value.
            </summary>
            <typeparam name="T">Type of the constant buffer</typeparam>
            <param name="value">Value of the constant buffer</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.SetConstantBuffer``1(``0@)">
            <summary>
            Sets the constant buffer data from a struct value.
            </summary>
            <typeparam name="T">Type of the constant buffer</typeparam>
            <param name="value">Value of the constant buffer</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ComputeInformation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.ComputeInformation">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.ComputeInformation"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.SetComputeShaderConstantBuffer(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1ComputeInfo::SetComputeShaderConstantBuffer([In, Buffer] const void* buffer,[In] unsigned int bufferCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.SetComputeShader(System.Guid)">
            <summary>	
            HRESULT ID2D1ComputeInfo::SetComputeShader([In] const GUID&amp; shaderId)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeInformation.SetResourceTexture(System.Int32,C1.Util.DX.Direct2D.ResourceTexture)">
            <summary>	
            HRESULT ID2D1ComputeInfo::SetResourceTexture([In] unsigned int textureIndex,[In] ID2D1ResourceTexture* resourceTexture)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ComputeTransformShadow">
            <summary>
            Internal ComputeTransform Callback
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.TransformShadow">
            <summary>
            Internal Transform Callback
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.TransformNodeShadow">
            <summary>
            Internal TransformNode Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNodeShadow.ToIntPtr(C1.Util.DX.Direct2D.TransformNode)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformShadow.ToIntPtr(C1.Util.DX.Direct2D.Transform)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeTransformShadow.ToIntPtr(C1.Util.DX.Direct2D.ComputeTransform)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffectAttribute">
            <summary>
            Global attribute for <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/> description.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.CustomEffectAttribute"/> class.
            </summary>
            <param name="description">Description of the custom effect</param>
            <param name="category">Category of the custom effect</param>
            <param name="author">Author of the custom effect</param>
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomEffectAttribute.DisplayName">
            <summary>
            Gets the DisplayName name.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomEffectAttribute.Description">
            <summary>
            Gets the Description name.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomEffectAttribute.Category">
            <summary>
            Gets the Category name.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomEffectAttribute.Author">
            <summary>
            Gets the Author name.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffectFactory">
            <summary>
            A class used for creating custom effects.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectFactory.ToXml">
            <summary>
            Converts custom effect to an xml description
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectFactory.InitializeBindings">
            <summary>
            Initializes the property bindings
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectFactory.InitializeXml">
            <summary>
            Initializes the xml descriptor for this effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomEffectFactory.CustomEffect">
            <summary>
            Gets or sets the last created instance of <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffectFactory.CustomEffectFactoryDelegate">
            <summary>
            Delegate used by to create a custom effect.
            </summary>
            <returns>A new instance of custom effect</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffectInputAttribute">
            <summary>
            Input attribute for <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/> description.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectInputAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.CustomEffectInputAttribute"/> attribute.
            </summary>
            <param name="input"></param>
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomEffectInputAttribute.Input">
            <summary>
            Gets the Input name.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffectShadow">
            <summary>
            Internal CustomEffect Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectShadow.ToIntPtr(C1.Util.DX.Direct2D.CustomEffect)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffectShadow.CustomEffectVtbl.SetGraphDelegate">
            <summary>	
            The renderer calls this method to provide the effect implementation with a way to specify its transform graph and transform graph changes. 
            It is executed when: 1) When the effect is first initialized. 2) If the number of inputs to the effect changes.
            </summary>	
            <param name="thisPtr">thisPtr</param>	
            <param name="transformGraph">The graph to which the effect describes its transform topology through the SetDescription call.</param>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomVertexBufferProperties">
            <summary>	
            D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomVertexBufferProperties.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.CustomVertexBufferProperties"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomVertexBufferProperties.#ctor(System.Byte[],C1.Util.DX.Direct2D.InputElement[],System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.CustomVertexBufferProperties"/> class.
            </summary>
            <param name="inputSignature"></param>
            <param name="inputElements"></param>
            <param name="stride"></param>
        </member>
        <member name="F:C1.Util.DX.Direct2D.CustomVertexBufferProperties.ShaderBufferWithInputSignature">
            <summary>	
            const unsigned char* shaderBufferWithInputSignature	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CustomVertexBufferProperties.ShaderBufferSize">
            <summary>	
            unsigned int shaderBufferSize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CustomVertexBufferProperties.InputElementsPointer">
            <summary>	
            const D2D1_INPUT_ELEMENT_DESC* inputElements	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CustomVertexBufferProperties.ElementCount">
            <summary>	
            unsigned int elementCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CustomVertexBufferProperties.Stride">
            <summary>	
            unsigned int stride	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomVertexBufferProperties.InputSignature">
            <summary>	
            The vertex shader bytecode to use as a signature.
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.CustomVertexBufferProperties.InputElements">
            <summary>	
            The input elements in the vertex shader.
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DeviceContextRenderTarget">
            <summary>	
            ID2D1DCRenderTarget	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContextRenderTarget.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.RenderTargetProperties@)">
            <summary>	
            Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="properties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.  To enable the device context (DC) render target to work with GDI, set the DXGI format to <see cref="F:C1.Util.DX.DXGI.Format.B8G8R8A8_UNorm"/> and the alpha mode to <see cref="F:C1.Util.DX.Direct2D.AlphaMode.Premultiplied"/> or D2D1_ALPHA_MODE_IGNORE. For more information about pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContextRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DeviceContextRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContextRenderTarget.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.DeviceContextRenderTarget">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.DeviceContextRenderTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContextRenderTarget.BindDeviceContext(System.IntPtr,C1.Util.DX.RectL)">
            <summary>	
            HRESULT ID2D1DCRenderTarget::BindDC([In] const HDC hDC,[In] const RECT* pSubRect)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Device">
            <summary>	
            ID2D1Device	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.Create(C1.Util.DX.DXGI.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Device"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.Create(C1.Util.DX.DXGI.Device,C1.Util.DX.Direct2D.CreationProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Device"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="creationProperties">The creation properties.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.Create(C1.Util.DX.Direct2D.Factory1,C1.Util.DX.DXGI.Device)">
            <summary>	
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Device"/> class.
            </summary>	
            <param name="factory"><para>The <see cref="T:C1.Util.DX.Direct2D.Factory1"/> object used when creating  the <see cref="T:C1.Util.DX.Direct2D.Device"/>. </para></param>	
            <param name="device"><para>The <see cref="T:C1.Util.DX.DXGI.Device"/> object used when creating  the <see cref="T:C1.Util.DX.Direct2D.Device"/>. </para></param>	
            <remarks>	
            Each call to CreateDevice returns a unique <see cref="T:C1.Util.DX.Direct2D.Device"/> object.The <see cref="T:C1.Util.DX.DXGI.Device"/> object is obtained by calling QueryInterface on an ID3D10Device or an ID3D11Device.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Device">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Device"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.CreateDeviceContext(C1.Util.DX.Direct2D.DeviceContextOptions)">
            <summary>	
            HRESULT ID2D1Device::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext** deviceContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.CreatePrintControl(C1.Util.DX.WIC.ImagingFactory,System.IntPtr,System.Nullable{C1.Util.DX.Direct2D.PrintControlProperties})">
            <summary>	
            HRESULT ID2D1Device::CreatePrintControl([In] IWICImagingFactory* wicFactory,[In] IPrintDocumentPackageTarget* documentTarget,[In, Optional] const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties,[Out, Fast] ID2D1PrintControl** printControl)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.SetMaximumTextureMemory(System.Int64)">
            <summary>	
            void ID2D1Device::SetMaximumTextureMemory([In] unsigned longlong maximumInBytes)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.GetMaximumTextureMemory">
            <summary>	
            unsigned longlong ID2D1Device::GetMaximumTextureMemory()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device.ClearResources(System.Int32)">
            <summary>	
            void ID2D1Device::ClearResources([In] unsigned int millisecondsSinceUse)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Device1">
            <summary>	
            ID2D1Device1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device1.Create(C1.Util.DX.Direct2D.Factory2,C1.Util.DX.DXGI.Device)">
            <summary>	
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Device1"/> class.
            </summary>	
            <param name="factory">The <see cref="T:C1.Util.DX.Direct2D.Factory2"/> object used when creating  the <see cref="T:C1.Util.DX.Direct2D.Device1"/>.</param>	
            <param name="device">The <see cref="T:C1.Util.DX.DXGI.Device"/> object used when creating  the <see cref="T:C1.Util.DX.Direct2D.Device1"/>.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Device1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Device1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Device1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device1.GetRenderingPriority">
            <summary>	
            D2D1_RENDERING_PRIORITY ID2D1Device1::GetRenderingPriority()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device1.SetRenderingPriority(C1.Util.DX.Direct2D.RenderingPriority)">
            <summary>	
            void ID2D1Device1::SetRenderingPriority([In] D2D1_RENDERING_PRIORITY renderingPriority)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Device1.CreateDeviceContext1(C1.Util.DX.Direct2D.DeviceContextOptions)">
            <summary>	
            HRESULT ID2D1Device1::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext1** deviceContext1)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DeviceContext">
            <summary>	
            ID2D1DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.Create(C1.Util.DX.DXGI.Surface)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/> class.
            </summary>
            <param name="surface">The surface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.Create(C1.Util.DX.DXGI.Surface,C1.Util.DX.Direct2D.CreationProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Device"/> class.
            </summary>
            <param name="surface">The surface.</param>
            <param name="creationProperties">The creation properties.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.Create(C1.Util.DX.Direct2D.Device,C1.Util.DX.Direct2D.DeviceContextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/> class using an existing <see cref="T:C1.Util.DX.Direct2D.Device"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="options">The options to be applied to the created device context.</param>
            <remarks>
            The new device context will not have a  selected target bitmap. The caller must create and select a bitmap as the target surface of the context.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawImage(C1.Util.DX.Direct2D.Effect,C1.Util.DX.Point2F,C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Direct2D.CompositeMode)">
            <summary>
            Draws an image to the device context.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawImage(C1.Util.DX.Direct2D.Effect,C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Direct2D.CompositeMode)">
            <summary>
            Draws an image to the device context.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawImage(C1.Util.DX.Direct2D.Image,C1.Util.DX.Point2F,C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Direct2D.CompositeMode)">
            <summary>
            Draws an image to the device context.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawImage(C1.Util.DX.Direct2D.Image,C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Direct2D.CompositeMode)">
            <summary>
            Draws an image to the device context.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Single,C1.Util.DX.Direct2D.InterpolationMode)">
            <summary>
            Draws the bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolationMode">The interpolation mode.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Single,C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Matrix4x4)">
            <summary>
            Draws the bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolationMode">The interpolation mode.</param>
            <param name="perspectiveTransformRef">The perspective transform ref.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Single,C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.RectF,C1.Util.DX.Matrix4x4)">
            <summary>
            Draws the bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolationMode">The interpolation mode.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="perspectiveTransformRef">The perspective transform ref.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetEffectInvalidRectangles(C1.Util.DX.Direct2D.Effect)">
            <summary>
            Gets the effect invalid rectangles.
            </summary>
            <param name="effect">The effect.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetEffectRequiredInputRectangles(C1.Util.DX.Direct2D.Effect,C1.Util.DX.Direct2D.EffectInputDescription[])">
            <summary>
            Gets the effect required input rectangles.
            </summary>
            <param name="renderEffect">The render effect.</param>
            <param name="inputDescriptions">The input descriptions.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetEffectRequiredInputRectangles(C1.Util.DX.Direct2D.Effect,C1.Util.DX.RectF,C1.Util.DX.Direct2D.EffectInputDescription[])">
            <summary>
            Gets the effect required input rectangles.
            </summary>
            <param name="renderEffect">The render effect.</param>
            <param name="renderImageRectangle">The render image rectangle.</param>
            <param name="inputDescriptions">The input descriptions.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.FillOpacityMask(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="opacityMask">No documentation.</param>	
            <param name="brush">No documentation.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.DeviceContext">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.DeviceContext"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateBitmap1(C1.Util.DX.Size2L,System.IntPtr,System.Int32,C1.Util.DX.Direct2D.BitmapProperties1)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateBitmap([In] D2D_SIZE_U size,[In, Optional] const void* sourceData,[In] unsigned int pitch,[In] const D2D1_BITMAP_PROPERTIES1* bitmapProperties,[Out, Fast] ID2D1Bitmap1** bitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateBitmap1FromWicBitmap(C1.Util.DX.WIC.BitmapSource,C1.Util.DX.Direct2D.BitmapProperties1)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateBitmapFromWicBitmap([In] IWICBitmapSource* wicBitmapSource,[In, Optional] const D2D1_BITMAP_PROPERTIES1* bitmapProperties,[Out] ID2D1Bitmap1** bitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateColorContext(C1.Util.DX.Direct2D.ColorSpace,System.Byte[],System.Int32)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateColorContext([In] D2D1_COLOR_SPACE space,[In, Buffer, Optional] const unsigned char* profile,[In] unsigned int profileSize,[Out, Fast] ID2D1ColorContext** colorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateColorContextFromFilename(System.String)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateColorContextFromFilename([In] const wchar_t* filename,[Out, Fast] ID2D1ColorContext** colorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateColorContextFromWicColorContext(C1.Util.DX.WIC.ColorContext)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateColorContextFromWicColorContext([In] IWICColorContext* wicColorContext,[Out, Fast] ID2D1ColorContext** colorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateBitmap1FromDxgiSurface(C1.Util.DX.DXGI.Surface,C1.Util.DX.Direct2D.BitmapProperties1)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateBitmapFromDxgiSurface([In] IDXGISurface* surface,[In, Optional] const D2D1_BITMAP_PROPERTIES1* bitmapProperties,[Out, Fast] ID2D1Bitmap1** bitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateEffect(System.Guid)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateEffect([In] const GUID&amp; effectId,[Out, Fast] ID2D1Effect** effect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateEffect(System.Guid,C1.Util.DX.Direct2D.Effect)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateEffect([In] const GUID&amp; effectId,[Out, Fast] ID2D1Effect** effect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateGradientStopCollection1(C1.Util.DX.Direct2D.GradientStop[],System.Int32,C1.Util.DX.Direct2D.ColorSpace,C1.Util.DX.Direct2D.ColorSpace,C1.Util.DX.Direct2D.BufferPrecision,C1.Util.DX.Direct2D.ExtendMode,C1.Util.DX.Direct2D.ColorInterpolationMode)">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* straightAlphaGradientStops,[In] unsigned int straightAlphaGradientStopsCount,[In] D2D1_COLOR_SPACE preInterpolationSpace,[In] D2D1_COLOR_SPACE postInterpolationSpace,[In] D2D1_BUFFER_PRECISION bufferPrecision,[In] D2D1_EXTEND_MODE extendMode,[In] D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode,[Out, Fast] ID2D1GradientStopCollection1** gradientStopCollection1)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateImageBrush(C1.Util.DX.Direct2D.Image,C1.Util.DX.Direct2D.ImageBrushProperties@,System.Nullable{C1.Util.DX.Direct2D.BrushProperties})">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateImageBrush([In, Optional] ID2D1Image* image,[In] const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1ImageBrush** imageBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateBitmapBrush1(C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.Direct2D.BitmapBrushProperties1},System.Nullable{C1.Util.DX.Direct2D.BrushProperties})">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateBitmapBrush([In, Optional] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1BitmapBrush1** bitmapBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.CreateCommandList">
            <summary>	
            HRESULT ID2D1DeviceContext::CreateCommandList([Out, Fast] ID2D1CommandList** commandList)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.IsDxgiFormatSupported(C1.Util.DX.DXGI.Format)">
            <summary>	
            BOOL ID2D1DeviceContext::IsDxgiFormatSupported([In] DXGI_FORMAT format)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.IsBufferPrecisionSupported(C1.Util.DX.Direct2D.BufferPrecision)">
            <summary>	
            BOOL ID2D1DeviceContext::IsBufferPrecisionSupported([In] D2D1_BUFFER_PRECISION bufferPrecision)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetImageLocalBounds(C1.Util.DX.Direct2D.Image)">
            <summary>	
            HRESULT ID2D1DeviceContext::GetImageLocalBounds([In] ID2D1Image* image,[Out] D2D_RECT_F* localBounds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetImageWorldBounds(C1.Util.DX.Direct2D.Image)">
            <summary>	
            HRESULT ID2D1DeviceContext::GetImageWorldBounds([In] ID2D1Image* image,[Out] D2D_RECT_F* worldBounds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetGlyphRunWorldBounds(C1.Util.DX.Point2F,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            HRESULT ID2D1DeviceContext::GetGlyphRunWorldBounds([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] DWRITE_MEASURING_MODE measuringMode,[Out] D2D_RECT_F* bounds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetDevice">
            <summary>	
            void ID2D1DeviceContext::GetDevice([Out] ID2D1Device** device)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.SetTarget(C1.Util.DX.Direct2D.Image)">
            <summary>	
            void ID2D1DeviceContext::SetTarget([In, Optional] ID2D1Image* image)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetTarget">
            <summary>	
            void ID2D1DeviceContext::GetTarget([Out, Optional] ID2D1Image** image)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.SetRenderingControls(C1.Util.DX.Direct2D.RenderingControls)">
            <summary>	
            void ID2D1DeviceContext::SetRenderingControls([In] const D2D1_RENDERING_CONTROLS* renderingControls)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetRenderingControls">
            <summary>	
            void ID2D1DeviceContext::GetRenderingControls([Out] D2D1_RENDERING_CONTROLS* renderingControls)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.SetPrimitiveBlend(C1.Util.DX.Direct2D.PrimitiveBlend)">
            <summary>	
            void ID2D1DeviceContext::SetPrimitiveBlend([In] D2D1_PRIMITIVE_BLEND primitiveBlend)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetPrimitiveBlend">
            <summary>	
            D2D1_PRIMITIVE_BLEND ID2D1DeviceContext::GetPrimitiveBlend()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.SetUnitMode(C1.Util.DX.Direct2D.UnitMode)">
            <summary>	
            void ID2D1DeviceContext::SetUnitMode([In] D2D1_UNIT_MODE unitMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetUnitMode">
            <summary>	
            D2D1_UNIT_MODE ID2D1DeviceContext::GetUnitMode()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawGlyphRun(C1.Util.DX.Point2F,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,C1.Util.DX.Direct2D.Brush,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            void ID2D1DeviceContext::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawGlyphRun(C1.Util.DX.Point2F,System.IntPtr,System.IntPtr,C1.Util.DX.Direct2D.Brush,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            void ID2D1DeviceContext::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawImage(C1.Util.DX.Direct2D.Image,System.Nullable{C1.Util.DX.Point2F},System.Nullable{C1.Util.DX.RectF},C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Direct2D.CompositeMode)">
            <summary>	
            void ID2D1DeviceContext::DrawImage([In] ID2D1Image* image,[In, Optional] const D2D_POINT_2F* targetOffset,[In, Optional] const D2D_RECT_F* imageRectangle,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In] D2D1_COMPOSITE_MODE compositeMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawGdiMetafile(C1.Util.DX.Direct2D.GdiMetafile,System.Nullable{C1.Util.DX.Point2F})">
            <summary>	
            void ID2D1DeviceContext::DrawGdiMetafile([In] ID2D1GdiMetafile* gdiMetafile,[In, Optional] const D2D_POINT_2F* targetOffset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.RectF},System.Single,C1.Util.DX.Direct2D.InterpolationMode,System.Nullable{C1.Util.DX.RectF},System.Nullable{C1.Util.DX.Matrix4x4})">
            <summary>	
            void ID2D1DeviceContext::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_F* destinationRectangle,[In] float opacity,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D_RECT_F* sourceRectangle,[In, Optional] const D2D_MATRIX_4X4_F* perspectiveTransform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.PushLayer(C1.Util.DX.Direct2D.LayerParameters1@,C1.Util.DX.Direct2D.Layer)">
            <summary>	
            void ID2D1DeviceContext::PushLayer([In] const D2D1_LAYER_PARAMETERS1* layerParameters,[In, Optional] ID2D1Layer* layer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.InvalidateEffectInputRectangle(C1.Util.DX.Direct2D.Effect,System.Int32,C1.Util.DX.RectF)">
            <summary>	
            HRESULT ID2D1DeviceContext::InvalidateEffectInputRectangle([In] ID2D1Effect* effect,[In] unsigned int input,[In] const D2D_RECT_F* inputRectangle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetEffectInvalidRectangleCount(C1.Util.DX.Direct2D.Effect)">
            <summary>	
            HRESULT ID2D1DeviceContext::GetEffectInvalidRectangleCount([In] ID2D1Effect* effect,[Out] unsigned int* rectangleCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetEffectInvalidRectangles(C1.Util.DX.Direct2D.Effect,C1.Util.DX.RectF[],System.Int32)">
            <summary>	
            HRESULT ID2D1DeviceContext::GetEffectInvalidRectangles([In] ID2D1Effect* effect,[Out, Buffer] D2D_RECT_F* rectangles,[In] unsigned int rectanglesCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.GetEffectRequiredInputRectangles(C1.Util.DX.Direct2D.Effect,System.Nullable{C1.Util.DX.RectF},C1.Util.DX.Direct2D.EffectInputDescription[],C1.Util.DX.RectF[],System.Int32)">
            <summary>	
            HRESULT ID2D1DeviceContext::GetEffectRequiredInputRectangles([In] ID2D1Effect* renderEffect,[In, Optional] const D2D_RECT_F* renderImageRectangle,[In, Buffer] const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions,[Out, Buffer] D2D_RECT_F* requiredInputRects,[In] unsigned int inputCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext.FillOpacityMask(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.Brush,System.Nullable{C1.Util.DX.RectF},System.Nullable{C1.Util.DX.RectF})">
            <summary>	
            void ID2D1DeviceContext::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DeviceContext1">
            <summary>	
            ID2D1DeviceContext1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext1.Create(C1.Util.DX.Direct2D.Device1,C1.Util.DX.Direct2D.DeviceContextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DeviceContext1"/> class using an existing <see cref="T:C1.Util.DX.Direct2D.Device1"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="options">The options to be applied to the created device context.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DeviceContext1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.DeviceContext1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.DeviceContext1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext1.CreateFilledGeometryRealization(C1.Util.DX.Direct2D.Geometry,System.Single)">
            <summary>	
            HRESULT ID2D1DeviceContext1::CreateFilledGeometryRealization([In] ID2D1Geometry* geometry,[In] float flatteningTolerance,[Out] ID2D1GeometryRealization** geometryRealization)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext1.CreateStrokedGeometryRealization(C1.Util.DX.Direct2D.Geometry,System.Single,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            HRESULT ID2D1DeviceContext1::CreateStrokedGeometryRealization([In] ID2D1Geometry* geometry,[In] float flatteningTolerance,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[Out] ID2D1GeometryRealization** geometryRealization)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DeviceContext1.DrawGeometryRealization(C1.Util.DX.Direct2D.GeometryRealization,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            void ID2D1DeviceContext1::DrawGeometryRealization([In] ID2D1GeometryRealization* geometryRealization,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawInformation">
            <summary>	
            ID2D1DrawInfo	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetVertexConstantBuffer(C1.Util.DX.DataStream)">
            <summary>
            Sets the constant buffer data from a <see cref="T:C1.Util.DX.DataStream"/> for the Vertex stage.
            </summary>
            <param name="dataStream">The DataStream that contains the constant buffer data</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetVertexConstantBuffer``1(``0)">
            <summary>
            Sets the constant buffer data from a struct value for the Vertex stage.
            </summary>
            <typeparam name="T">Type of the constant buffer</typeparam>
            <param name="value">Value of the constant buffer</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetVertexConstantBuffer``1(``0@)">
            <summary>
            Sets the constant buffer data from a struct value for the Vertex Stage.
            </summary>
            <typeparam name="T">Type of the constant buffer</typeparam>
            <param name="value">Value of the constant buffer</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetPixelConstantBuffer(C1.Util.DX.DataStream)">
            <summary>
            Sets the constant buffer data from a <see cref="T:C1.Util.DX.DataStream"/> for the Pixel stage.
            </summary>
            <param name="dataStream">The DataStream that contains the constant buffer data</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetPixelConstantBuffer``1(``0)">
            <summary>
            Sets the constant buffer data from a struct value for the Pixel stage.
            </summary>
            <typeparam name="T">Type of the constant buffer</typeparam>
            <param name="value">Value of the constant buffer</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetPixelConstantBuffer``1(``0@)">
            <summary>
            Sets the constant buffer data from a struct value for the Pixel Stage.
            </summary>
            <typeparam name="T">Type of the constant buffer</typeparam>
            <param name="value">Value of the constant buffer</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DrawInformation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.DrawInformation">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.DrawInformation"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetPixelShaderConstantBuffer(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1DrawInfo::SetPixelShaderConstantBuffer([In, Buffer] const void* buffer,[In] unsigned int bufferCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetResourceTexture(System.Int32,C1.Util.DX.Direct2D.ResourceTexture)">
            <summary>	
            HRESULT ID2D1DrawInfo::SetResourceTexture([In] unsigned int textureIndex,[In] ID2D1ResourceTexture* resourceTexture)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetVertexShaderConstantBuffer(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1DrawInfo::SetVertexShaderConstantBuffer([In, Buffer] const void* buffer,[In] unsigned int bufferCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetPixelShader(System.Guid,C1.Util.DX.Direct2D.PixelOptions)">
            <summary>	
            HRESULT ID2D1DrawInfo::SetPixelShader([In] const GUID&amp; shaderId,[In] D2D1_PIXEL_OPTIONS pixelOptions)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawInformation.SetVertexProcessing(C1.Util.DX.Direct2D.VertexBuffer,C1.Util.DX.Direct2D.VertexOptions,System.Nullable{C1.Util.DX.Direct2D.BlendDescription},System.Nullable{C1.Util.DX.Direct2D.VertexRange},System.Nullable{System.Guid})">
            <summary>	
            HRESULT ID2D1DrawInfo::SetVertexProcessing([In, Optional] ID2D1VertexBuffer* vertexBuffer,[In] D2D1_VERTEX_OPTIONS vertexOptions,[In, Optional] const D2D1_BLEND_DESCRIPTION* blendDescription,[In, Optional] const D2D1_VERTEX_RANGE* vertexRange,[In, Optional] const GUID* vertexShader)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawingStateBlock">
            <summary>	
            ID2D1DrawingStateBlock	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.Create(C1.Util.DX.Direct2D.Factory)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.DrawingStateDescription)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.Create(C1.Util.DX.Direct2D.Factory,System.Nullable{C1.Util.DX.Direct2D.DrawingStateDescription},C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.DrawingStateBlock">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.GetDescription(C1.Util.DX.Direct2D.DrawingStateDescription@)">
            <summary>	
            void ID2D1DrawingStateBlock::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.SetDescription(C1.Util.DX.Direct2D.DrawingStateDescription@)">
            <summary>	
            void ID2D1DrawingStateBlock::SetDescription([In] const D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.SetTextRenderingParams(C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            void ID2D1DrawingStateBlock::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock.GetTextRenderingParams">
            <summary>	
            void ID2D1DrawingStateBlock::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.DrawingStateBlock.Description">
            <summary>	
            GetDescription / SetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawingStateBlock1">
            <summary>	
            ID2D1DrawingStateBlock1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.Create(C1.Util.DX.Direct2D.Factory1)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock1"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory1"/></param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.Create(C1.Util.DX.Direct2D.Factory1,C1.Util.DX.Direct2D.DrawingStateDescription1)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock1"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory1"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.Create(C1.Util.DX.Direct2D.Factory1,C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock1"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory1"/></param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.Create(C1.Util.DX.Direct2D.Factory1,C1.Util.DX.Direct2D.DrawingStateDescription1,C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock1"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory1"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.DrawingStateBlock1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.DrawingStateBlock1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.GetDescription(C1.Util.DX.Direct2D.DrawingStateDescription1@)">
            <summary>	
            void ID2D1DrawingStateBlock1::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawingStateBlock1.SetDescription(C1.Util.DX.Direct2D.DrawingStateDescription1@)">
            <summary>	
            void ID2D1DrawingStateBlock1::SetDescription([In] const D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.DrawingStateBlock1.Description">
            <summary>	
            GetDescription / SetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawTransformShadow">
            <summary>
            Internal DrawTransform Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawTransformShadow.ToIntPtr(C1.Util.DX.Direct2D.DrawTransform)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effect">
            <summary>	
            ID2D1Effect	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Properties">
            <summary>	
            ID2D1Properties	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetPropertyName(System.Int32)">
            <summary>	
            Gets the number of characters for the given property name.
            </summary>	
            <param name="index"><para>The index of the property for which the name is being returned.</para></param>	
            <returns>The name of the property</returns>	
            <remarks>	
            This method returns an empty string if index is invalid.
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetIntValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetUIntValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetFloatValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetBoolValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetGuidValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetVector2Value(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetVector3Value(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetVector4Value(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetPoint2FValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetRectFValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetColorFValue(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetMatrix3x2Value(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetMatrix4x4Value(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetMatrix5x4Value(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetEnumValue``1(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetComObjectValue``1(System.Int32)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetValue``1(System.Int32,C1.Util.DX.Direct2D.PropertyType)">
            <summary>	
            Gets the value of the specified property by index.
            </summary>	
            <param name="index"><para>The index of the property from which the data is to be obtained.</para></param>	
            <param name="type">Property type.</param>	
            <returns>The value of the specified property by index.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetIntValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetUIntValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetFloatValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetBoolValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetGuidValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetVector2ValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetVector3ValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetVector4ValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetPoint2FValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetRectFValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetColorFValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetMatrix3x2ValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetMatrix4x4ValueByName(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetMatrix5x4ValueByName(System.String)">
            <summary>
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetEnumValueByName``1(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetComObjectValueByName``1(System.String)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetValue``1(System.String,C1.Util.DX.Direct2D.PropertyType)">
            <summary>	
            Gets the value of the specified property by name.
            </summary>	
            <param name="name">The name of the property.</param>	
            <param name="type">Property type.</param>	
            <returns>The value of the specified property by name.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,System.Int32)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,System.UInt32)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,System.Boolean)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,System.Guid)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,System.Single)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Vector2)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Vector3)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Vector4)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Point2F)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.RectF)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.ColorF)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Matrix3x2)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Matrix4x4)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Matrix5x4)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,System.String)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName``1(System.String,``0)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName``1(System.String,C1.Util.DX.Direct2D.PropertyType,``0)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="name">Name of the property</param>
            <param name="type">Property type.</param>	
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,System.Int32)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,System.UInt32)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,System.Boolean)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,System.Guid)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,System.Single)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Vector2)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Vector3)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Vector4)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Point2F)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.RectF)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.ColorF)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Matrix3x2)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Matrix4x4)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Matrix5x4)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,System.String)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetEnumValue``1(System.Int32,``0)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue``1(System.Int32,``0)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue``1(System.Int32,C1.Util.DX.Direct2D.PropertyType,``0)">
            <summary>
            Sets the named property to the given value.
            </summary>
            <param name="index">Index of the property</param>
            <param name="type">Property type.</param>	
            <param name="value">Value of the property</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Properties"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Properties">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Properties"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetPropertyCount">
            <summary>	
            unsigned int ID2D1Properties::GetPropertyCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetPropertyName(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1Properties::GetPropertyName([In] unsigned int index,[Out, Buffer] wchar_t* name,[In] unsigned int nameCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetPropertyNameLength(System.Int32)">
            <summary>	
            unsigned int ID2D1Properties::GetPropertyNameLength([In] unsigned int index)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetTypeInfo(System.Int32)">
            <summary>	
            D2D1_PROPERTY_TYPE ID2D1Properties::GetType([In] unsigned int index)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetPropertyIndex(System.String)">
            <summary>	
            unsigned int ID2D1Properties::GetPropertyIndex([In] const wchar_t* name)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValueByName(System.String,C1.Util.DX.Direct2D.PropertyType,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1Properties::SetValueByName([In] const wchar_t* name,[In] D2D1_PROPERTY_TYPE type,[In, Buffer] const void* data,[In] unsigned int dataSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.SetValue(System.Int32,C1.Util.DX.Direct2D.PropertyType,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1Properties::SetValue([In] unsigned int index,[In] D2D1_PROPERTY_TYPE type,[In, Buffer] const void* data,[In] unsigned int dataSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetValueByName(System.String,C1.Util.DX.Direct2D.PropertyType,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1Properties::GetValueByName([In] const wchar_t* name,[In] D2D1_PROPERTY_TYPE type,[Out, Buffer] void* data,[In] unsigned int dataSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetValue(System.Int32,C1.Util.DX.Direct2D.PropertyType,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1Properties::GetValue([In] unsigned int index,[In] D2D1_PROPERTY_TYPE type,[Out, Buffer] void* data,[In] unsigned int dataSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetValueSize(System.Int32)">
            <summary>	
            unsigned int ID2D1Properties::GetValueSize([In] unsigned int index)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Properties.GetSubProperties(System.Int32)">
            <summary>	
            HRESULT ID2D1Properties::GetSubProperties([In] unsigned int index,[Out, Optional] ID2D1Properties** subProperties)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.Properties.Cached">
            <summary>
            Gets or sets Cached property.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.Create(C1.Util.DX.Direct2D.DeviceContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effect"/> class.
            </summary>
            <param name="deviceContext">The device context.</param>
            <param name="effectId"><para>The class ID of the effect to create.</para></param>	
            <remarks>
            The created effect does not increment the reference count for the dynamic-link library (DLL) from which the effect was created. If the application deletes an effect while that effect is loaded, the resulting behavior will be unpredictable.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.Create(C1.Util.DX.Direct2D.EffectContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effect"/> class.
            </summary>
            <param name="effectContext">The effect context.</param>
            <param name="effectId"><para>The class ID of the effect to create.</para></param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.CreateCustom``1(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of a custom <see cref="T:C1.Util.DX.Direct2D.Effect"/> class.
            </summary>
            <param name="deviceContext">The device context.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.RegisterAndCreateCustom``1(C1.Util.DX.Direct2D.Factory1,C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Registers, if necessary, and initializes a new instance of a custom <see cref="T:C1.Util.DX.Direct2D.Effect"/> class.
            </summary>
            <param name="factory">The factory to register the effect.</param>
            <param name="deviceContext">The device context.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.CreateCustom``1(C1.Util.DX.Direct2D.EffectContext)">
            <summary>
            Initializes a new instance of a custom <see cref="T:C1.Util.DX.Direct2D.Effect"/> class.
            </summary>
            <param name="effectContext">The effect context.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.SetInputEffect(System.Int32,C1.Util.DX.Direct2D.Effect,System.Boolean)">
            <summary>
            Sets the input by using the output of a given effect.
            </summary>
            <param name="index">Index of the input</param>
            <param name="effect">Effect output to use as input</param>
            <param name="invalidate">To invalidate</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effect"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Effect">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Effect"/>.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.DisplacementMap">
            <summary>CLSID_D2D1DisplacementMap</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Border">
            <summary>CLSID_D2D1Border</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Saturation">
            <summary>CLSID_D2D1Saturation</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Histogram">
            <summary>CLSID_D2D1Histogram</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.DistantDiffuse">
            <summary>CLSID_D2D1DistantDiffuse</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Composite">
            <summary>CLSID_D2D1Composite</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.HueRotation">
            <summary>CLSID_D2D1HueRotation</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Scale">
            <summary>CLSID_D2D1Scale</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.DistantSpecular">
            <summary>CLSID_D2D1DistantSpecular</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Atlas">
            <summary>CLSID_D2D1Atlas</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Brightness">
            <summary>CLSID_D2D1Brightness</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Premultiply">
            <summary>CLSID_D2D1Premultiply</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.SpotDiffuse">
            <summary>CLSID_D2D1SpotDiffuse</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.TableTransfer">
            <summary>CLSID_D2D1TableTransfer</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Turbulence">
            <summary>CLSID_D2D1Turbulence</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.ColorManagement">
            <summary>CLSID_D2D1ColorManagement</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.GaussianBlur">
            <summary>CLSID_D2D1GaussianBlur</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.ArithmeticComposite">
            <summary>CLSID_D2D1ArithmeticComposite</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Crop">
            <summary>CLSID_D2D1Crop</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.DirectionalBlur">
            <summary>CLSID_D2D1DirectionalBlur</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Flood">
            <summary>CLSID_D2D1Flood</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.DiscreteTransfer">
            <summary>CLSID_D2D1DiscreteTransfer</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.PointSpecular">
            <summary>CLSID_D2D1PointSpecular</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Morphology">
            <summary>CLSID_D2D1Morphology</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.UnPremultiply">
            <summary>CLSID_D2D1UnPremultiply</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.SpotSpecular">
            <summary>CLSID_D2D1SpotSpecular</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.ConvolveMatrix">
            <summary>CLSID_D2D1ConvolveMatrix</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.GammaTransfer">
            <summary>CLSID_D2D1GammaTransfer</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.LuminanceToAlpha">
            <summary>CLSID_D2D1LuminanceToAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.OpacityMetadata">
            <summary>CLSID_D2D1OpacityMetadata</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.ColorMatrix">
            <summary>CLSID_D2D1ColorMatrix</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Tile">
            <summary>CLSID_D2D1Tile</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Blend">
            <summary>CLSID_D2D1Blend</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Shadow">
            <summary>CLSID_D2D1Shadow</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.BitmapSource">
            <summary>CLSID_D2D1BitmapSource</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.LinearTransfer">
            <summary>CLSID_D2D1LinearTransfer</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.PointDiffuse">
            <summary>CLSID_D2D1PointDiffuse</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.DpiCompensation">
            <summary>CLSID_D2D1DpiCompensation</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.YCbCr">
            <summary>CLSID_D2D1YCbCr</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.AffineTransform2D">
            <summary>CLSID_D2D12DAffineTransform</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.PerspectiveTransform3D">
            <summary>CLSID_D2D13DPerspectiveTransform</summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.Effect.Transform3D">
            <summary>CLSID_D2D13DTransform</summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.SetInput(System.Int32,C1.Util.DX.Direct2D.Image,System.Boolean)">
            <summary>	
            void ID2D1Effect::SetInput([In] unsigned int index,[In, Optional] ID2D1Image* input,[In] BOOL invalidate)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.SetInputCount(System.Int32)">
            <summary>	
            HRESULT ID2D1Effect::SetInputCount([In] unsigned int inputCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.GetInput(System.Int32)">
            <summary>	
            void ID2D1Effect::GetInput([In] unsigned int index,[Out, Optional] ID2D1Image** input)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.GetInputCount">
            <summary>	
            unsigned int ID2D1Effect::GetInputCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effect.GetOutput">
            <summary>	
            void ID2D1Effect::GetOutput([Out] ID2D1Image** outputImage)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effect.CustomEffect">
            <summary>
            Gets or sets the associated instance of <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.EffectContext">
            <summary>	
            ID2D1EffectContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.GetMaximumSupportedFeatureLevel(C1.Util.DX.Direct3D11.FeatureLevel[])">
            <summary>
            Gets the maximum feature level supported by this instance.
            </summary>
            <param name="featureLevels">An array of feature levels</param>
            <returns>The maximum feature level selected from the array</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CheckFeatureSupport(C1.Util.DX.Direct2D.Feature)">
            <summary>
            Check if this device is supporting a feature.
            </summary>
            <param name="feature">The feature to check.</param>
            <returns>
            Returns true if this device supports this feature, otherwise false.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.EffectContext"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.EffectContext">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.EffectContext"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.GetDpi(System.Single@,System.Single@)">
            <summary>	
            void ID2D1EffectContext::GetDpi([Out] float* dpiX,[Out] float* dpiY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateEffect(System.Guid)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateEffect([In] const GUID&amp; effectId,[Out, Fast] ID2D1Effect** effect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateEffect(System.Guid,C1.Util.DX.Direct2D.Effect)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateEffect([In] const GUID&amp; effectId,[Out, Fast] ID2D1Effect** effect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.GetMaximumSupportedFeatureLevel(C1.Util.DX.Direct3D11.FeatureLevel[],System.Int32)">
            <summary>	
            HRESULT ID2D1EffectContext::GetMaximumSupportedFeatureLevel([In, Buffer] const D3D_FEATURE_LEVEL* featureLevels,[In] unsigned int featureLevelsCount,[Out] D3D_FEATURE_LEVEL* maximumSupportedFeatureLevel)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateTransformNodeFromEffect(C1.Util.DX.Direct2D.Effect)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateTransformNodeFromEffect([In] ID2D1Effect* effect,[Out] ID2D1TransformNode** transformNode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateBlendTransform(System.Int32,C1.Util.DX.Direct2D.BlendDescription@)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateBlendTransform([In] unsigned int numInputs,[In] const D2D1_BLEND_DESCRIPTION* blendDescription,[Out, Fast] ID2D1BlendTransform** transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateBorderTransform(C1.Util.DX.Direct2D.ExtendMode,C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateBorderTransform([In] D2D1_EXTEND_MODE extendModeX,[In] D2D1_EXTEND_MODE extendModeY,[Out, Fast] ID2D1BorderTransform** transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateOffsetTransform(C1.Util.DX.Point2L)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateOffsetTransform([In] POINT offset,[Out, Fast] ID2D1OffsetTransform** transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateBoundsAdjustmentTransform(C1.Util.DX.RectL)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateBoundsAdjustmentTransform([In] const RECT* outputRectangle,[Out, Fast] ID2D1BoundsAdjustmentTransform** transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.LoadPixelShader(System.Guid,System.Byte[])">
            <summary>	
            HRESULT ID2D1EffectContext::LoadPixelShader([In] const GUID&amp; shaderId,[In, Buffer] const unsigned char* shaderBuffer,[In] unsigned int shaderBufferCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.LoadVertexShader(System.Guid,System.Byte[])">
            <summary>	
            HRESULT ID2D1EffectContext::LoadVertexShader([In] const GUID&amp; resourceId,[In, Buffer] const unsigned char* shaderBuffer,[In] unsigned int shaderBufferCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.LoadComputeShader(System.Guid,System.Byte[])">
            <summary>	
            HRESULT ID2D1EffectContext::LoadComputeShader([In] const GUID&amp; resourceId,[In, Buffer] const unsigned char* shaderBuffer,[In] unsigned int shaderBufferCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.IsShaderLoaded(System.Guid)">
            <summary>	
            BOOL ID2D1EffectContext::IsShaderLoaded([In] const GUID&amp; shaderId)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateResourceTexture(System.Nullable{System.Guid},System.IntPtr,System.Byte[],System.Int32[],System.Int32)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateResourceTexture([In, Optional] const GUID* resourceId,[In] const void* resourceTextureProperties,[In, Buffer, Optional] const unsigned char* data,[In, Buffer, Optional] const unsigned int* strides,[In] unsigned int dataSize,[Out, Fast] ID2D1ResourceTexture** resourceTexture)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.FindResourceTexture(System.Guid)">
            <summary>	
            HRESULT ID2D1EffectContext::FindResourceTexture([In] const GUID* resourceId,[Out] ID2D1ResourceTexture** resourceTexture)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateVertexBuffer(C1.Util.DX.Direct2D.VertexBufferProperties,System.Nullable{System.Guid},System.IntPtr)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateVertexBuffer([In] const D2D1_VERTEX_BUFFER_PROPERTIES* vertexBufferProperties,[In, Optional] const GUID* resourceId,[In, Optional] const void* customVertexBufferProperties,[Out, Fast] ID2D1VertexBuffer** buffer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.FindVertexBuffer(System.Guid)">
            <summary>	
            HRESULT ID2D1EffectContext::FindVertexBuffer([In] const GUID* resourceId,[Out] ID2D1VertexBuffer** buffer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateColorContext(C1.Util.DX.Direct2D.ColorSpace,System.Byte[],System.Int32)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateColorContext([In] D2D1_COLOR_SPACE space,[In, Buffer, Optional] const unsigned char* profile,[In] unsigned int profileSize,[Out, Fast] ID2D1ColorContext** colorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateColorContextFromFilename(System.String)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateColorContextFromFilename([In] const wchar_t* filename,[Out, Fast] ID2D1ColorContext** colorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CreateColorContextFromWicColorContext(C1.Util.DX.WIC.ColorContext)">
            <summary>	
            HRESULT ID2D1EffectContext::CreateColorContextFromWicColorContext([In] IWICColorContext* wicColorContext,[Out, Fast] ID2D1ColorContext** colorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.CheckFeatureSupport(C1.Util.DX.Direct2D.Feature,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1EffectContext::CheckFeatureSupport([In] D2D1_FEATURE feature,[Out, Buffer] void* featureSupportData,[In] unsigned int featureSupportDataSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EffectContext.IsBufferPrecisionSupported(C1.Util.DX.Direct2D.BufferPrecision)">
            <summary>	
            BOOL ID2D1EffectContext::IsBufferPrecisionSupported([In] D2D1_BUFFER_PRECISION bufferPrecision)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.EffectContext.Dpi">
            <summary>
            Gets the DPI.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.EffectInputDescription">
            <summary>	
            D2D1_EFFECT_INPUT_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.EffectInputDescription.EffectPointer">
            <summary>	
            ID2D1Effect* effect	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.EffectInputDescription.InputIndex">
            <summary>	
            unsigned int inputIndex	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.EffectInputDescription.InputRectangle">
            <summary>	
            D2D_RECT_F inputRectangle	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.EffectInputDescription.Effect">
            <summary>
            Gets or sets the effect.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.EllipseGeometry">
            <summary>	
            ID2D1EllipseGeometry	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Geometry">
            <summary>	
            ID2D1Geometry	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Geometry.DefaultFlatteningTolerance">
            <summary>
            Default flattening tolerance used for all methods that are not explicitly using it. Default is set to 0.25f.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Combine(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.CombineMode,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Combine(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.CombineMode,System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Combine(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.CombineMode,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Compare(C1.Util.DX.Direct2D.Geometry)">
            <summary>	
            Describes the intersection between this geometry and the specified geometry. The comparison is performed by using the specified flattening tolerance.	
            </summary>	
            <remarks>	
            When interpreting the returned relation value, it is important to remember that the member <see cref="F:C1.Win.DX.Direct2D.GeometryRelation.IsContained" /> of the  D2D1_GEOMETRY_RELATION enumeration type means that this geometry is contained  inside inputGeometry, not that this geometry contains inputGeometry.  For  more information about how to interpret other possible return values, see <see cref="T:C1.Win.DX.Direct2D.GeometryRelation" />. 	
            </remarks>	
            <param name="inputGeometry">The geometry to test.  </param>
            <returns>When this method returns, contains a reference to a value that describes how this geometry is related to inputGeometry. You must allocate storage for this parameter.   </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Compare(C1.Util.DX.Direct2D.Geometry,System.Single)">
            <summary>	
            Describes the intersection between this geometry and the specified geometry. The comparison is performed by using the specified flattening tolerance.	
            </summary>	
            <remarks>	
            When interpreting the returned relation value, it is important to remember that the member <see cref="F:C1.Win.DX.Direct2D.GeometryRelation.IsContained" /> of the  D2D1_GEOMETRY_RELATION enumeration type means that this geometry is contained  inside inputGeometry, not that this geometry contains inputGeometry.  For  more information about how to interpret other possible return values, see <see cref="T:C1.Win.DX.Direct2D.GeometryRelation" />. 	
            </remarks>	
            <param name="inputGeometry">The geometry to test.  </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to a value that describes how this geometry is related to inputGeometry. You must allocate storage for this parameter.   </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputeArea">
            <summary>	
            Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <returns>When this this method returns, contains a reference to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputeArea(System.Single)">
            <summary>	
            Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this this method returns, contains a reference to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputeLength">
            <summary>	
            Calculates the length of the geometry as though each segment were unrolled into a line. 	
            </summary>	
            <returns>When this method returns, contains a reference to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputeLength(System.Single)">
            <summary>	
            Calculates the length of the geometry as though each segment were unrolled into a line. 	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputePointAtLength(System.Single,C1.Util.DX.Point2F@)">
            <summary>	
            Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. </param>
            <param name="unitTangentVector">Whenthis method returns, contains a reference to the tangent vector at the specified distance along the geometry. If the geometry is empty,  this vector contains NaN as its x and y values. You must allocate storage for this parameter. </param>
            <returns>The location at the specified distance along the geometry. If the geometry is empty,  this point contains NaN as its x and y values. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputePointAtLength(System.Single,System.Single,C1.Util.DX.Point2F@)">
            <summary>	
            Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="unitTangentVector">Whenthis method returns, contains a reference to the tangent vector at the specified distance along the geometry. If the geometry is empty,  this vector contains NaN as its x and y values. You must allocate storage for this parameter. </param>
            <returns>The location at the specified distance along the geometry. If the geometry is empty,  this point contains NaN as its x and y values. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.FillContainsPoint(C1.Util.DX.Point2L)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.FillContainsPoint(C1.Util.DX.Point2F)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.FillContainsPoint(C1.Util.DX.Point2L,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.FillContainsPoint(C1.Util.DX.Point2F,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.FillContainsPoint(C1.Util.DX.Point2L,C1.Util.DX.Matrix3x2,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment, or NULL. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.GetBounds">
            <summary>	
            Retrieves the bounds of the geometry.	
            </summary>	
            <returns>When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left &gt; bounds.right. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.GetWidenedBounds(System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.GetWidenedBounds(System.Single,System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.GetWidenedBounds(System.Single,C1.Util.DX.Direct2D.StrokeStyle,System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <param name="strokeStyle">The style of the stroke that widens the geometry. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Outline(C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:C1.Util.DX.Direct2D.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:C1.Util.DX.Direct2D.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="geometrySink">The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Outline(System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:C1.Util.DX.Direct2D.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:C1.Util.DX.Direct2D.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Outline(System.Nullable{C1.Util.DX.Matrix3x2},System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:C1.Util.DX.Direct2D.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:C1.Util.DX.Direct2D.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="worldTransform">The transform to apply to the geometry outline, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Simplify(C1.Util.DX.Direct2D.GeometrySimplificationOption,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="geometrySink"> The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Simplify(C1.Util.DX.Direct2D.GeometrySimplificationOption,System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink"> The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Simplify(C1.Util.DX.Direct2D.GeometrySimplificationOption,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="worldTransform">The transform to apply to the simplified geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink"> The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2L,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2F,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2L,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2F,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2L,System.Single,C1.Util.DX.Direct2D.StrokeStyle,C1.Util.DX.Matrix3x2)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2F,System.Single,C1.Util.DX.Direct2D.StrokeStyle,C1.Util.DX.Matrix3x2)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2L,System.Single,C1.Util.DX.Direct2D.StrokeStyle,C1.Util.DX.Matrix3x2,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Tessellate(C1.Util.DX.Direct2D.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="tessellationSink">The <see cref="T:C1.Win.DX.Direct2D.TessellationSink" /> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Tessellate(System.Single,C1.Util.DX.Direct2D.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="tessellationSink">The <see cref="T:C1.Util.DX.Direct2D.TessellationSink"/> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Tessellate(System.Nullable{C1.Util.DX.Matrix3x2},System.Single,C1.Util.DX.Direct2D.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="worldTransform">The transform to apply to this geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="tessellationSink">The <see cref="T:C1.Util.DX.Direct2D.TessellationSink"/> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Widen(System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="geometrySink">The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Widen(System.Single,System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Widen(System.Single,C1.Util.DX.Direct2D.StrokeStyle,System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Widen(System.Single,C1.Util.DX.Direct2D.StrokeStyle,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="worldTransform">The transform to apply to the geometry after widening it, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Geometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Geometry">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Geometry"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.GetBounds(System.Nullable{C1.Util.DX.Matrix3x2})">
            <summary>	
            HRESULT ID2D1Geometry::GetBounds([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[Out] D2D_RECT_F* bounds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.GetWidenedBounds(System.Single,C1.Util.DX.Direct2D.StrokeStyle,System.Nullable{C1.Util.DX.Matrix3x2},System.Single)">
            <summary>	
            HRESULT ID2D1Geometry::GetWidenedBounds([In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] D2D_RECT_F* bounds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.StrokeContainsPoint(C1.Util.DX.Point2F,System.Single,C1.Util.DX.Direct2D.StrokeStyle,System.Nullable{C1.Util.DX.Matrix3x2},System.Single)">
            <summary>	
            HRESULT ID2D1Geometry::StrokeContainsPoint([In] D2D_POINT_2F point,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] BOOL* contains)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.FillContainsPoint(C1.Util.DX.Point2F,System.Nullable{C1.Util.DX.Matrix3x2},System.Single)">
            <summary>	
            HRESULT ID2D1Geometry::FillContainsPoint([In] D2D_POINT_2F point,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] BOOL* contains)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Compare(C1.Util.DX.Direct2D.Geometry,System.Nullable{C1.Util.DX.Matrix3x2},System.Single)">
            <summary>	
            HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D_MATRIX_3X2_F* inputGeometryTransform,[In] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Simplify_(C1.Util.DX.Direct2D.GeometrySimplificationOption,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            HRESULT ID2D1Geometry::Simplify([In] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Tessellate_(System.Nullable{C1.Util.DX.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            HRESULT ID2D1Geometry::Tessellate([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Combine_(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.CombineMode,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            HRESULT ID2D1Geometry::CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[In] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D_MATRIX_3X2_F* inputGeometryTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Outline_(System.Nullable{C1.Util.DX.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            HRESULT ID2D1Geometry::Outline([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputeArea(System.Nullable{C1.Util.DX.Matrix3x2},System.Single)">
            <summary>	
            HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] float* area)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputeLength(System.Nullable{C1.Util.DX.Matrix3x2},System.Single)">
            <summary>	
            HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] float* length)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.ComputePointAtLength(System.Single,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,C1.Util.DX.Point2F@)">
            <summary>	
            HRESULT ID2D1Geometry::ComputePointAtLength([In] float length,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out, Optional] D2D_POINT_2F* point,[Out, Optional] D2D_POINT_2F* unitTangentVector)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Geometry.Widen_(System.Single,C1.Util.DX.Direct2D.StrokeStyle,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            HRESULT ID2D1Geometry::Widen([In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.Geometry.FlatteningTolerance">
            <summary>
            Get or set the default flattening tolerance used for all methods that are not explicitly using it. Default is set to 0.25f.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.EllipseGeometry.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.Ellipse)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.EllipseGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="ellipse">A value that describes the center point, x-radius, and y-radius of the ellipse geometry.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.EllipseGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.EllipseGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.EllipseGeometry.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.EllipseGeometry">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.EllipseGeometry"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.EllipseGeometry.GetEllipse">
            <summary>	
            void ID2D1EllipseGeometry::GetEllipse([Out] D2D1_ELLIPSE* ellipse)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Factory1">
            <summary>	
            ID2D1Factory1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Factory">
            <summary>	
            ID2D1Factory	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Factory">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Factory"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.ReloadSystemMetrics">
            <summary>	
            HRESULT ID2D1Factory::ReloadSystemMetrics()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.GetDesktopDpi(System.Single@,System.Single@)">
            <summary>	
            void ID2D1Factory::GetDesktopDpi([Out] float* dpiX,[Out] float* dpiY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateRectangleGeometry(C1.Util.DX.RectF)">
            <summary>	
            HRESULT ID2D1Factory::CreateRectangleGeometry([In] const D2D_RECT_F* rectangle,[Out, Fast] ID2D1RectangleGeometry** rectangleGeometry)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateRoundedRectangleGeometry(C1.Util.DX.Direct2D.RoundedRectangle@)">
            <summary>	
            HRESULT ID2D1Factory::CreateRoundedRectangleGeometry([In] const D2D1_ROUNDED_RECT* roundedRectangle,[Out, Fast] ID2D1RoundedRectangleGeometry** roundedRectangleGeometry)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateEllipseGeometry(C1.Util.DX.Direct2D.Ellipse)">
            <summary>	
            HRESULT ID2D1Factory::CreateEllipseGeometry([In] const D2D1_ELLIPSE* ellipse,[Out, Fast] ID2D1EllipseGeometry** ellipseGeometry)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateGeometryGroup(C1.Util.DX.Direct2D.FillMode,C1.Util.DX.Direct2D.Geometry[],System.Int32)">
            <summary>	
            HRESULT ID2D1Factory::CreateGeometryGroup([In] D2D1_FILL_MODE fillMode,[In, Buffer] ID2D1Geometry** geometries,[In] unsigned int geometriesCount,[Out, Fast] ID2D1GeometryGroup** geometryGroup)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateGeometryGroup(C1.Util.DX.Direct2D.FillMode,C1.Util.DX.ComArray{C1.Util.DX.Direct2D.Geometry},System.Int32)">
            <summary>	
            HRESULT ID2D1Factory::CreateGeometryGroup([In] D2D1_FILL_MODE fillMode,[In, Buffer] ID2D1Geometry** geometries,[In] unsigned int geometriesCount,[Out, Fast] ID2D1GeometryGroup** geometryGroup)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateTransformedGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Matrix3x2@)">
            <summary>	
            HRESULT ID2D1Factory::CreateTransformedGeometry([In] ID2D1Geometry* sourceGeometry,[In] const D2D_MATRIX_3X2_F* transform,[Out, Fast] ID2D1TransformedGeometry** transformedGeometry)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreatePathGeometry">
            <summary>	
            HRESULT ID2D1Factory::CreatePathGeometry([Out, Fast] ID2D1PathGeometry** pathGeometry)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateStrokeStyle(C1.Util.DX.Direct2D.StrokeStyleProperties@,System.Single[])">
            <summary>	
            HRESULT ID2D1Factory::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[In] unsigned int dashesCount,[Out, Fast] ID2D1StrokeStyle** strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateStrokeStyle(C1.Util.DX.Direct2D.StrokeStyleProperties@)">
            <summary>	
            HRESULT ID2D1Factory::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[In] unsigned int dashesCount,[Out, Fast] ID2D1StrokeStyle** strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateDrawingStateBlock(System.Nullable{C1.Util.DX.Direct2D.DrawingStateDescription},C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            HRESULT ID2D1Factory::CreateDrawingStateBlock([In, Optional] const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription,[In, Optional] IDWriteRenderingParams* textRenderingParams,[Out, Fast] ID2D1DrawingStateBlock** drawingStateBlock)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateWicBitmapRenderTarget(C1.Util.DX.WIC.Bitmap,C1.Util.DX.Direct2D.RenderTargetProperties@)">
            <summary>	
            HRESULT ID2D1Factory::CreateWicBitmapRenderTarget([In] IWICBitmap* target,[In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out, Fast] ID2D1RenderTarget** renderTarget)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateHwndRenderTarget(C1.Util.DX.Direct2D.RenderTargetProperties@,C1.Util.DX.Direct2D.HwndRenderTargetProperties)">
            <summary>	
            HRESULT ID2D1Factory::CreateHwndRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[In] const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties,[Out, Fast] ID2D1HwndRenderTarget** hwndRenderTarget)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateDxgiSurfaceRenderTarget(C1.Util.DX.DXGI.Surface,C1.Util.DX.Direct2D.RenderTargetProperties@)">
            <summary>	
            HRESULT ID2D1Factory::CreateDxgiSurfaceRenderTarget([In] IDXGISurface* dxgiSurface,[In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out, Fast] ID2D1RenderTarget** renderTarget)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory.CreateDCRenderTarget(C1.Util.DX.Direct2D.RenderTargetProperties@)">
            <summary>	
            HRESULT ID2D1Factory::CreateDCRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out, Fast] ID2D1DCRenderTarget** dcRenderTarget)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.Create(C1.Util.DX.Direct2D.FactoryType)">
            <summary>
            Default Constructor for a <see cref="T:C1.Util.DX.Direct2D.Factory1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.RegisterEffect``1(System.Func{``0})">
            <summary>
            Register a <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/> factory.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.RegisterEffect``1(System.Func{``0},System.Guid)">
            <summary>
            Register a <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/> factory.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.RegisterEffect``1">
            <summary>
            Register a <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.RegisterEffect``1(System.Guid)">
            <summary>
            Register a <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.UnregisterEffect``1">
            <summary>
            Unregister a <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.CreateGdiMetafile(System.IO.Stream)">
            <summary>
            Creates a new GdiMetafile object that you can use to replay metafile content.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Factory1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Factory1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Factory1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.CreateDevice(C1.Util.DX.DXGI.Device)">
            <summary>	
            HRESULT ID2D1Factory1::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device** d2dDevice)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.CreateStrokeStyle1(C1.Util.DX.Direct2D.StrokeStyleProperties1@,System.Single[])">
            <summary>	
            HRESULT ID2D1Factory1::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[In] unsigned int dashesCount,[Out, Fast] ID2D1StrokeStyle1** strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.CreateStrokeStyle1(C1.Util.DX.Direct2D.StrokeStyleProperties1@)">
            <summary>	
            HRESULT ID2D1Factory1::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[In] unsigned int dashesCount,[Out, Fast] ID2D1StrokeStyle1** strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.CreatePathGeometry1">
            <summary>	
            HRESULT ID2D1Factory1::CreatePathGeometry([Out, Fast] ID2D1PathGeometry1** pathGeometry)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.CreateDrawingStateBlock1(System.Nullable{C1.Util.DX.Direct2D.DrawingStateDescription1},C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            HRESULT ID2D1Factory1::CreateDrawingStateBlock([In, Optional] const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription,[In, Optional] IDWriteRenderingParams* textRenderingParams,[Out, Fast] ID2D1DrawingStateBlock1** drawingStateBlock)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.CreateGdiMetafile_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1Factory1::CreateGdiMetafile([In] IStream* metafileStream,[Out] ID2D1GdiMetafile** metafile)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.RegisterEffectFromStream_(System.Guid,System.IntPtr,C1.Util.DX.Direct2D.PropertyBinding[],System.Int32,C1.Util.DX.FunctionCallback)">
            <summary>	
            HRESULT ID2D1Factory1::RegisterEffectFromStream([In] const GUID&amp; classId,[In] IStream* propertyXml,[In, Buffer, Optional] const D2D1_PROPERTY_BINDING* bindings,[In] unsigned int bindingsCount,[In] const __function__stdcall* effectFactory)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.RegisterEffectFromString(System.Guid,System.String,C1.Util.DX.Direct2D.PropertyBinding[],System.Int32,C1.Util.DX.FunctionCallback)">
            <summary>	
            HRESULT ID2D1Factory1::RegisterEffectFromString([In] const GUID&amp; classId,[In] const wchar_t* propertyXml,[In, Buffer, Optional] const D2D1_PROPERTY_BINDING* bindings,[In] unsigned int bindingsCount,[In] const __function__stdcall* effectFactory)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.UnregisterEffect(System.Guid)">
            <summary>	
            HRESULT ID2D1Factory1::UnregisterEffect([In] const GUID&amp; classId)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.GetRegisteredEffects(System.Guid[],System.Int32,System.Int32@,System.Int32@)">
            <summary>	
            HRESULT ID2D1Factory1::GetRegisteredEffects([Out, Buffer, Optional] GUID* effects,[In] unsigned int effectsCount,[Out, Optional] unsigned int* effectsReturned,[Out, Optional] unsigned int* effectsRegistered)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory1.GetEffectProperties(System.Guid)">
            <summary>	
            HRESULT ID2D1Factory1::GetEffectProperties([In] const GUID&amp; effectId,[Out] ID2D1Properties** properties)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.Factory1.IsSupported">
            <summary>
            Gets a value indicating if Direct2D is supported on this platform.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Factory1.RegisteredEffects">
            <summary>	
            Get the effects registered
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Factory2">
            <summary>	
            ID2D1Factory2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory2.Create(C1.Util.DX.Direct2D.FactoryType)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.Direct2D.Factory2"/> class with the specified <see cref="T:C1.Util.DX.Direct2D.FactoryType"/>.
            </summary>
            <param name="factoryType">The factory threading type.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Factory2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory2.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Factory2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Factory2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Factory2.CreateDevice1(C1.Util.DX.DXGI.Device)">
            <summary>	
            HRESULT ID2D1Factory2::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device1** d2dDevice1)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GeometryGroup">
            <summary>	
            ID2D1GeometryGroup	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.FillMode,C1.Util.DX.Direct2D.Geometry[])">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.GeometryGroup"/>, which is an object that holds other geometries.	
            </summary>	
            <remarks>	
            Geometry groups are a convenient way to group several geometries simultaneously so all figures of several distinct geometries are concatenated into one. To create a  <see cref="T:C1.Util.DX.Direct2D.GeometryGroup"/> object, call  the CreateGeometryGroup method on the <see cref="T:C1.Util.DX.Direct2D.Factory"/> object, passing in the fillMode with possible values of   <see cref="F:C1.Util.DX.Direct2D.FillMode.Alternate"/> (alternate) and D2D1_FILL_MODE_WINDING, an array of geometry objects to add to the geometry group, and the number of elements in this array. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="fillMode">A value that specifies the rule that a composite shape uses to determine whether a given point is part of the geometry. </param>
            <param name="geometries">An array containing the geometry objects to add to the geometry group. The number of elements in this array is indicated by the geometriesCount parameter.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.GetSourceGeometry">
            <summary>	
            Retrieves the geometries in the geometry group. 	
            </summary>	
            <remarks>	
            The returned geometries are referenced and  counted, and the caller must release them. 	
            </remarks>	
            <returns>an array of geometries to be filled by this method. The length of the array is specified by the geometryCount parameter.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.GetSourceGeometry(System.Int32)">
            <summary>	
            Retrieves the geometries in the geometry group. 	
            </summary>	
            <remarks>	
            The returned geometries are referenced and  counted, and the caller must release them. 	
            </remarks>	
            <param name="geometriesCount">A value indicating the number of geometries to return in the geometries array. If this value is less than the number of geometries in the geometry group, the remaining geometries are omitted. If this value is larger than the number of geometries in the geometry group, the extra geometries are set to NULL. To obtain the number of geometries currently in the geometry group, use the {{GetSourceGeometryCount}} method. </param>
            <returns>an array of geometries to be filled by this method. The length of the array is specified by the geometryCount parameter.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GeometryGroup"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GeometryGroup">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GeometryGroup"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.GetFillMode">
            <summary>	
            D2D1_FILL_MODE ID2D1GeometryGroup::GetFillMode()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.GetSourceGeometryCount">
            <summary>	
            unsigned int ID2D1GeometryGroup::GetSourceGeometryCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryGroup.GetSourceGeometries(C1.Util.DX.Direct2D.Geometry[],System.Int32)">
            <summary>	
            void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[In] unsigned int geometriesCount)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GeometryRealization">
            <summary>	
            ID2D1GeometryRealization	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryRealization.Create(C1.Util.DX.Direct2D.DeviceContext1,C1.Util.DX.Direct2D.Geometry,System.Single)">
            <summary>	
            Creates a device-dependent representation of the fill of the geometry that can be subsequently rendered.
            </summary>
            <param name="context">The device context where the created instance should be attached to.</param>
            <param name="geometry">The geometry to realize.</param>	
            <param name="flatteningTolerance">The flattening tolerance to use when converting Beziers to line segments. This parameter shares the same units as the coordinates of the geometry.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryRealization.Create(C1.Util.DX.Direct2D.DeviceContext1,C1.Util.DX.Direct2D.Geometry,System.Single,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            Creates a device-dependent representation of the stroke of a geometry that can be subsequently rendered.
            </summary>	
            <param name="context">The device context where the created instance should be attached to.</param>
            <param name="geometry">The geometry to realize.</param>	
            <param name="flatteningTolerance">The flattening tolerance to use when converting Beziers to line segments. This parameter shares the same units as the coordinates of the geometry.</param>	
            <param name="strokeWidth">The width of the stroke. This parameter shares the same units as the coordinates of the geometry.</param>	
            <param name="strokeStyle">The stroke style (optional).</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryRealization.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GeometryRealization"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometryRealization.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GeometryRealization">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GeometryRealization"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.GeometrySinkShadow">
            <summary>
            Internal GeometrySink Callback
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.SimplifiedGeometrySinkShadow">
            <summary>
            Internal SimplifiedGeometrySink Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkShadow.ToIntPtr(C1.Util.DX.Direct2D.SimplifiedGeometrySink)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkShadow.ToIntPtr(C1.Util.DX.Direct2D.GeometrySink)">
            <summary>
            Get a native callback pointer from a managed callback.
            </summary>
            <param name="geometrySink">The geometry sink.</param>
            <returns>A pointer to the unmanaged geometry sink counterpart</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.GradientStopCollection">
            <summary>	
            ID2D1GradientStopCollection	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.GradientStop[])">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection"/> from the specified gradient stops, a Gamma StandardRgb, and ExtendMode.Clamp.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.GradientStop[],C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection"/> from the specified gradient stops, color Gamma.StandardRgb, and extend mode.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.GradientStop[],C1.Util.DX.Direct2D.Gamma)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection"/> from the specified gradient stops, color interpolation gamma, and ExtendMode.Clamp.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.GradientStop[],C1.Util.DX.Direct2D.Gamma,C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection"/> from the specified gradient stops, color interpolation gamma, and extend mode.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GradientStopCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.GetGradientStopCount">
            <summary>	
            unsigned int ID2D1GradientStopCollection::GetGradientStopCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.GetGradientStops(C1.Util.DX.Direct2D.GradientStop[],System.Int32)">
            <summary>	
            void ID2D1GradientStopCollection::GetGradientStops([Out, Buffer] D2D1_GRADIENT_STOP* gradientStops,[In] unsigned int gradientStopsCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.GetColorInterpolationGamma">
            <summary>	
            D2D1_GAMMA ID2D1GradientStopCollection::GetColorInterpolationGamma()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection.GetExtendMode">
            <summary>	
            D2D1_EXTEND_MODE ID2D1GradientStopCollection::GetExtendMode()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GradientStopCollection1">
            <summary>	
            ID2D1GradientStopCollection1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Direct2D.GradientStop[],C1.Util.DX.Direct2D.ColorSpace,C1.Util.DX.Direct2D.ColorSpace,C1.Util.DX.Direct2D.BufferPrecision,C1.Util.DX.Direct2D.ExtendMode,C1.Util.DX.Direct2D.ColorInterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection1"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="straightAlphaGradientStops">An array of color values and offsets.</param>
            <param name="preInterpolationSpace">Specifies both the input color space and the space in which the color interpolation occurs.</param>
            <param name="postInterpolationSpace">The color space that colors will be converted to after interpolation occurs.</param>
            <param name="bufferPrecision">The precision of the texture used to hold interpolated values.</param>
            <param name="extendMode">Defines how colors outside of the range defined by the stop collection are determined.</param>
            <param name="colorInterpolationMode">The new gradient stop collection.</param>
            <remarks>
            This method linearly interpolates between the color stops. An optional color space conversion is applied after interpolation. Whether and how this gamma conversion is applied is determined before and after interpolation. This method will fail if the device context does not support the requested buffer precision.Additional ReferencesD2D1_GRADIENT_STOP, D2D1_GAMMA_CONVERSION, <see cref="T:C1.Util.DX.Direct2D.BufferPrecision"/>, <see cref="T:C1.Util.DX.Direct2D.ExtendMode"/>, <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection"/>RequirementsMinimum supported operating systemSame as Interface / Class Highest IRQL levelN/A (user mode) Callable from DlllMain()No Callable from services and session 0Yes Callable from UI threadYes?
            </remarks>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GradientStopCollection1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GradientStopCollection1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.GetGradientStops1(C1.Util.DX.Direct2D.GradientStop[],System.Int32)">
            <summary>	
            void ID2D1GradientStopCollection1::GetGradientStops1([Out, Buffer] D2D1_GRADIENT_STOP* gradientStops,[In] unsigned int gradientStopsCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.GetPreInterpolationSpace">
            <summary>	
            D2D1_COLOR_SPACE ID2D1GradientStopCollection1::GetPreInterpolationSpace()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.GetPostInterpolationSpace">
            <summary>	
            D2D1_COLOR_SPACE ID2D1GradientStopCollection1::GetPostInterpolationSpace()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.GetBufferPrecision">
            <summary>	
            D2D1_BUFFER_PRECISION ID2D1GradientStopCollection1::GetBufferPrecision()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GradientStopCollection1.GetColorInterpolationMode">
            <summary>	
            D2D1_COLOR_INTERPOLATION_MODE ID2D1GradientStopCollection1::GetColorInterpolationMode()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.WindowRenderTarget">
            <summary>	
            ID2D1HwndRenderTarget	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.WindowRenderTarget.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.RenderTargetProperties,C1.Util.DX.Direct2D.HwndRenderTargetProperties)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.WindowRenderTarget"/>, a render target that renders to a window.	
            </summary>	
            <remarks>	
            When you create a render target and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the {{D2DERR_RECREATE_TARGET}} error is received. When you receive this error, you need to recreate the render target (and any resources it created).	
            </remarks>
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="hwndProperties">The window handle, initial size (in pixels), and present options.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.WindowRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.WindowRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.WindowRenderTarget.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.WindowRenderTarget">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.WindowRenderTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.WindowRenderTarget.CheckWindowState">
            <summary>	
            D2D1_WINDOW_STATE ID2D1HwndRenderTarget::CheckWindowState()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.WindowRenderTarget.Resize(C1.Util.DX.Size2L)">
            <summary>	
            HRESULT ID2D1HwndRenderTarget::Resize([In] const D2D_SIZE_U* pixelSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.WindowRenderTarget.GetHwnd">
            <summary>	
            HWND ID2D1HwndRenderTarget::GetHwnd()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ImageBrush">
            <summary>	
            ID2D1ImageBrush	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Direct2D.Image,C1.Util.DX.Direct2D.ImageBrushProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ImageBrush"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="image">The image.</param>
            <param name="imageBrushProperties">The image brush properties.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.Create(C1.Util.DX.Direct2D.DeviceContext,C1.Util.DX.Direct2D.Image,C1.Util.DX.Direct2D.ImageBrushProperties,C1.Util.DX.Direct2D.BrushProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ImageBrush"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="image">The image.</param>
            <param name="imageBrushProperties">The image brush properties.</param>
            <param name="brushProperties">The brush properties.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ImageBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.ImageBrush">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.ImageBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.SetImage(C1.Util.DX.Direct2D.Image)">
            <summary>	
            void ID2D1ImageBrush::SetImage([In, Optional] ID2D1Image* image)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.SetExtendModeX(C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            void ID2D1ImageBrush::SetExtendModeX([In] D2D1_EXTEND_MODE extendModeX)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.SetExtendModeY(C1.Util.DX.Direct2D.ExtendMode)">
            <summary>	
            void ID2D1ImageBrush::SetExtendModeY([In] D2D1_EXTEND_MODE extendModeY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.SetInterpolationMode(C1.Util.DX.Direct2D.InterpolationMode)">
            <summary>	
            void ID2D1ImageBrush::SetInterpolationMode([In] D2D1_INTERPOLATION_MODE interpolationMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.SetSourceRectangle(C1.Util.DX.RectF)">
            <summary>	
            void ID2D1ImageBrush::SetSourceRectangle([In] const D2D_RECT_F* sourceRectangle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.GetImage">
            <summary>	
            void ID2D1ImageBrush::GetImage([Out] ID2D1Image** image)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.GetExtendModeX">
            <summary>	
            D2D1_EXTEND_MODE ID2D1ImageBrush::GetExtendModeX()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.GetExtendModeY">
            <summary>	
            D2D1_EXTEND_MODE ID2D1ImageBrush::GetExtendModeY()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.GetInterpolationMode">
            <summary>	
            D2D1_INTERPOLATION_MODE ID2D1ImageBrush::GetInterpolationMode()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ImageBrush.GetSourceRectangle">
            <summary>	
            void ID2D1ImageBrush::GetSourceRectangle([Out] D2D_RECT_F* sourceRectangle)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Layer">
            <summary>	
            ID2D1Layer	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Layer.Create(C1.Util.DX.Direct2D.RenderTarget)">
            <summary>	
            Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size. The layer resource is allocated to the minimum size when {{PushLayer}} is called.
            </summary>	
            <remarks>	
            Regardless of whether a size is initially specified, the layer automatically resizes as needed.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Layer.Create(C1.Util.DX.Direct2D.RenderTarget,System.Nullable{C1.Util.DX.Size2F})">
            <summary>	
            Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size.  	
            </summary>	
            <remarks>	
            Regardless of whether a size is initially specified, the layer automatically resizes as needed.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="size">If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when {{PushLayer}} is called.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Layer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Layer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Layer.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Layer">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Layer"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Layer.GetSize">
            <summary>	
            D2D_SIZE_F ID2D1Layer::GetSize()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.LinearGradientBrush">
            <summary>	
            ID2D1LinearGradientBrush	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.LinearGradientBrushProperties,C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.LinearGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:C1.Util.DX.Direct2D.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.LinearGradientBrushProperties,System.Nullable{C1.Util.DX.Direct2D.BrushProperties},C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.LinearGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:C1.Util.DX.Direct2D.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.LinearGradientBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.LinearGradientBrush">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.LinearGradientBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.SetStartPoint(C1.Util.DX.Point2F)">
            <summary>	
            void ID2D1LinearGradientBrush::SetStartPoint([In] D2D_POINT_2F startPoint)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.SetEndPoint(C1.Util.DX.Point2F)">
            <summary>	
            void ID2D1LinearGradientBrush::SetEndPoint([In] D2D_POINT_2F endPoint)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.GetStartPoint">
            <summary>	
            D2D_POINT_2F ID2D1LinearGradientBrush::GetStartPoint()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.GetEndPoint">
            <summary>	
            D2D_POINT_2F ID2D1LinearGradientBrush::GetEndPoint()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LinearGradientBrush.GetGradientStopCollection">
            <summary>	
            void ID2D1LinearGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Mesh">
            <summary>	
            ID2D1Mesh	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Mesh.Create(C1.Util.DX.Direct2D.RenderTarget)">
            <summary>	
            Create a mesh that uses triangles to describe a shape.	
            </summary>	
            <remarks>	
            To populate a mesh, use its {{Open}} method to obtain an <see cref="T:C1.Util.DX.Direct2D.TessellationSink"/>. To draw the mesh, use the render target's {{FillMesh}} method.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Mesh.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.Triangle[])">
            <summary>	
            Create a mesh that uses triangles to describe a shape and populates it with triangles.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="triangles">An array of <see cref="T:C1.Util.DX.Direct2D.Triangle"/> structures that describe the triangles to add to this mesh.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Mesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Mesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Mesh.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Mesh">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Mesh"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Mesh.Open">
            <summary>	
            HRESULT ID2D1Mesh::Open([Out] ID2D1TessellationSink** tessellationSink)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.OffsetTransform">
            <summary>	
            ID2D1OffsetTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.OffsetTransform.Create(C1.Util.DX.Direct2D.EffectContext,C1.Util.DX.Point2L)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.OffsetTransform"/> class
            </summary>
            <param name="context">The effect context</param>
            <param name="offset">The offset transformation</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.OffsetTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.OffsetTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.OffsetTransform.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.OffsetTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.OffsetTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.OffsetTransform.SetOffset(C1.Util.DX.Point2L)">
            <summary>	
            void ID2D1OffsetTransform::SetOffset([In] POINT offset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.OffsetTransform.GetOffset">
            <summary>	
            POINT ID2D1OffsetTransform::GetOffset()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PathGeometry">
            <summary>	
            ID2D1PathGeometry	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.Create(C1.Util.DX.Direct2D.Factory)">
            <summary>	
            Creates an empty <see cref="T:C1.Util.DX.Direct2D.PathGeometry"/>.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.Stream(C1.Util.DX.Direct2D.GeometrySink)">
            <summary>	
            Copies the contents of the path geometry to the specified <see cref="T:C1.Util.DX.Direct2D.GeometrySink"/>.	
            </summary>	
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.PathGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.PathGeometry">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.PathGeometry"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.Open">
            <summary>	
            HRESULT ID2D1PathGeometry::Open([Out] ID2D1GeometrySink** geometrySink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.Stream_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1PathGeometry::Stream([In] ID2D1GeometrySink* geometrySink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.GetSegmentCount">
            <summary>	
            HRESULT ID2D1PathGeometry::GetSegmentCount([Out] unsigned int* count)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry.GetFigureCount">
            <summary>	
            HRESULT ID2D1PathGeometry::GetFigureCount([Out] unsigned int* count)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PathGeometry1">
            <summary>	
            ID2D1PathGeometry1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry1.Create(C1.Util.DX.Direct2D.Factory1)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.PathGeometry1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.PathGeometry1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.PathGeometry1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.PathGeometry1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PathGeometry1.ComputePointAndSegmentAtLength(System.Single,System.Int32,System.Nullable{C1.Util.DX.Matrix3x2},System.Single,C1.Util.DX.Direct2D.PointDescription@)">
            <summary>	
            HRESULT ID2D1PathGeometry1::ComputePointAndSegmentAtLength([In] float length,[In] unsigned int startSegment,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] D2D1_POINT_DESCRIPTION* pointDescription)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PrintControl">
            <summary>	
            ID2D1PrintControl	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.Create(C1.Util.DX.Direct2D.Device,C1.Util.DX.WIC.ImagingFactory,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.PrintControl"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.Create(C1.Util.DX.Direct2D.Device,C1.Util.DX.WIC.ImagingFactory,System.IntPtr,C1.Util.DX.Direct2D.PrintControlProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.PrintControl"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.AddPage(C1.Util.DX.Direct2D.CommandList,C1.Util.DX.Size2F)">
            <summary>
            Converts Direct2D primitives in the passed-in command list into a fixed page representation for use by the print subsystem.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.AddPage(C1.Util.DX.Direct2D.CommandList,C1.Util.DX.Size2F,C1.Util.DX.Storage.ComStream)">
            <summary>
            Converts Direct2D primitives in the passed-in command list into a fixed page representation for use by the print subsystem.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.AddPage(C1.Util.DX.Direct2D.CommandList,C1.Util.DX.Size2F,C1.Util.DX.Storage.ComStream,System.Int64@,System.Int64@)">
            <summary>
            Converts Direct2D primitives in the passed-in command list into a fixed page representation for use by the print subsystem.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.PrintControl"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.PrintControl">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.PrintControl"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.AddPage_(C1.Util.DX.Direct2D.CommandList,C1.Util.DX.Size2F,System.IntPtr,System.Int64@,System.Int64@)">
            <summary>	
            HRESULT ID2D1PrintControl::AddPage([In] ID2D1CommandList* commandList,[In] D2D_SIZE_F pageSize,[In, Optional] IStream* pagePrintTicketStream,[Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PrintControl.Close">
            <summary>	
            HRESULT ID2D1PrintControl::Close()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BindingType">
            <summary>	
            Types supported in the PropertyBindingAttribute for mapping to D2D1_PROPERTY_TYPE.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Int32">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_INT32.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.UInt32">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_UINT32.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Boolean">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_BOOL.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Guid">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_CLSID.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Float">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_FLOAT.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Vector2">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_VECTOR2.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Vector3">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_VECTOR3.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Vector4">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_VECTOR4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Matrix3x2">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_MATRIX_3X2.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Matrix4x4">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_MATRIX_4X4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Matrix5x4">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_MATRIX_5X4.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.Enum">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_ENUM.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.BindingType.IUnknown">
            <summary>
            Mapped to D2D1_PROPERTY_TYPE_IUNKNOWN.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.PropertyBinding">
            <summary>	
            D2D1_PROPERTY_BINDING	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PropertyBinding.Get(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets binding for the specified customEffectType and propertyInfo.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyBinding.PropertyName">
            <summary>	
            const wchar_t* propertyName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyBinding.SetFunction">
            <summary>	
            __function__stdcall* setFunction	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyBinding.GetFunction">
            <summary>	
            __function__stdcall* getFunction	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBinding.TypeName">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.PropertyBindingAttribute">
            <summary>
            Metadata description for <see cref="T:C1.Util.DX.Direct2D.CustomEffect"/> property binding.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PropertyBindingAttribute.#ctor(C1.Util.DX.Direct2D.BindingType,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.PropertyBindingAttribute"/> attribute.
            </summary>
            <param name="bindingType">Type of binding</param>
            <param name="order">Order of the property</param>
            <param name="min">Minimum value of this property</param>
            <param name="max">Maximum value of this property</param>
            <param name="defaultValue">Default value of this property</param>
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBindingAttribute.BindingType">
            <summary>
            Gets binding type.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBindingAttribute.Order">
            <summary>
            Gets the order of this property.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBindingAttribute.DisplayName">
            <summary>
            Gets the DisplayName.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBindingAttribute.Type">
            <summary>
            Gets the Type of the property.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBindingAttribute.Min">
            <summary>
            Gets the Min value.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBindingAttribute.Max">
            <summary>
            Gets the Max value.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.PropertyBindingAttribute.Default">
            <summary>
            Gets the Default value.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.PropertyTypeHelper">
            <summary>
            Helper functions for <see cref="T:C1.Util.DX.Direct2D.PropertyType"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.PropertyTypeHelper.ConvertToString(C1.Util.DX.Direct2D.PropertyType)">
            <summary>
            Converts a property type to a text.
            </summary>
            <param name="propertyType">The property type</param>
            <returns>A string representing this property type.</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.RadialGradientBrush">
            <summary>	
            ID2D1RadialGradientBrush	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.RadialGradientBrushProperties@,C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:C1.Util.DX.Direct2D.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.RadialGradientBrushProperties,C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:C1.Util.DX.Direct2D.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.RadialGradientBrushProperties,C1.Util.DX.Direct2D.BrushProperties,C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:C1.Util.DX.Direct2D.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.Direct2D.RadialGradientBrushProperties@,System.Nullable{C1.Util.DX.Direct2D.BrushProperties},C1.Util.DX.Direct2D.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.Direct2D.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:C1.Util.DX.Direct2D.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.RadialGradientBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.RadialGradientBrush">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.RadialGradientBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.SetCenter(C1.Util.DX.Point2F)">
            <summary>	
            void ID2D1RadialGradientBrush::SetCenter([In] D2D_POINT_2F center)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.SetGradientOriginOffset(C1.Util.DX.Point2F)">
            <summary>	
            void ID2D1RadialGradientBrush::SetGradientOriginOffset([In] D2D_POINT_2F gradientOriginOffset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.SetRadiusX(System.Single)">
            <summary>	
            void ID2D1RadialGradientBrush::SetRadiusX([In] float radiusX)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.SetRadiusY(System.Single)">
            <summary>	
            void ID2D1RadialGradientBrush::SetRadiusY([In] float radiusY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.GetCenter">
            <summary>	
            D2D_POINT_2F ID2D1RadialGradientBrush::GetCenter()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.GetGradientOriginOffset">
            <summary>	
            D2D_POINT_2F ID2D1RadialGradientBrush::GetGradientOriginOffset()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.GetRadiusX">
            <summary>	
            float ID2D1RadialGradientBrush::GetRadiusX()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.GetRadiusY">
            <summary>	
            float ID2D1RadialGradientBrush::GetRadiusY()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RadialGradientBrush.GetGradientStopCollection">
            <summary>	
            void ID2D1RadialGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RectangleGeometry">
            <summary>	
            ID2D1RectangleGeometry	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RectangleGeometry.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.RectF)">
            <summary>	
             Creates an <see cref="T:C1.Util.DX.Direct2D.RectangleGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="rectangle">The coordinates of the rectangle geometry. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RectangleGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.RectangleGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RectangleGeometry.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.RectangleGeometry">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.RectangleGeometry"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RectangleGeometry.GetRectangle">
            <summary>	
            void ID2D1RectangleGeometry::GetRect([Out] D2D_RECT_F* rect)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ResourceTexture">
            <summary>	
            ID2D1ResourceTexture	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ResourceTexture.Create(C1.Util.DX.Direct2D.EffectContext,System.Guid,C1.Util.DX.Direct2D.ResourceTextureProperties)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.BlendTransform"/> class
            </summary>
            <param name="context">The effect context</param>
            <param name="resourceId">A unique identifier to the resource</param>
            <param name="resourceTextureProperties">The description of the resource</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ResourceTexture.Create(C1.Util.DX.Direct2D.EffectContext,System.Guid,C1.Util.DX.Direct2D.ResourceTextureProperties,System.Byte[],System.Int32[])">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.BlendTransform"/> class
            </summary>
            <param name="context">The effect context</param>
            <param name="resourceId">A unique identifier to the resource</param>
            <param name="resourceTextureProperties">The description of the resource</param>
            <param name="data">Data</param>
            <param name="strides">Strides</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ResourceTexture.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ResourceTexture"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ResourceTexture.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.ResourceTexture">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.ResourceTexture"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ResourceTexture.Update(System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Byte[],System.Int32)">
            <summary>	
            HRESULT ID2D1ResourceTexture::Update([In, Buffer, Optional] const unsigned int* minimumExtents,[In, Buffer, Optional] const unsigned int* maximimumExtents,[In, Buffer, Optional] const unsigned int* strides,[In] unsigned int dimensions,[In, Buffer] const unsigned char* data,[In] unsigned int dataCount)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ResourceTextureProperties">
            <summary>	
            D2D1_RESOURCE_TEXTURE_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResourceTextureProperties.ExtentsPointer">
            <summary>	
            const unsigned int* extents	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResourceTextureProperties.Dimensions">
            <summary>	
            unsigned int dimensions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResourceTextureProperties.BufferPrecision">
            <summary>	
            D2D1_BUFFER_PRECISION bufferPrecision	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResourceTextureProperties.ChannelDepth">
            <summary>	
            D2D1_CHANNEL_DEPTH channelDepth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResourceTextureProperties.Filter">
            <summary>	
            D2D1_FILTER filter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResourceTextureProperties.ExtendModesPointer">
            <summary>	
            const D2D1_EXTEND_MODE* extendModes	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.ResourceTextureProperties.Extents">
            <summary>	
            <para>The extents of the resource table in each dimension.</para>	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.ResourceTextureProperties.ExtendModes">
            <summary>	
            <para>Specifies how pixel values beyond the extent of the texture will be sampled, in every dimension.</para>	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RoundedRectangleGeometry">
            <summary>	
            ID2D1RoundedRectangleGeometry	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RoundedRectangleGeometry.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.RoundedRectangle)">
            <summary>	
             Creates an <see cref="T:C1.Util.DX.Direct2D.RoundedRectangleGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="roundedRectangle">The coordinates and corner radii of the rounded rectangle geometry.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RoundedRectangleGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.RoundedRectangleGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RoundedRectangleGeometry.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.RoundedRectangleGeometry">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.RoundedRectangleGeometry"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RoundedRectangleGeometry.GetRoundedRect">
            <summary>	
            void ID2D1RoundedRectangleGeometry::GetRoundedRect([Out] D2D1_ROUNDED_RECT* roundedRect)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SolidColorBrush">
            <summary>	
            ID2D1SolidColorBrush	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SolidColorBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.ColorF)">
            <summary>	
            Creates a new <see cref="T:C1.Util.DX.Direct2D.SolidColorBrush"/> that has the specified color and opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SolidColorBrush.Create(C1.Util.DX.Direct2D.RenderTarget,C1.Util.DX.ColorF,System.Nullable{C1.Util.DX.Direct2D.BrushProperties})">
            <summary>	
            Creates a new <see cref="T:C1.Util.DX.Direct2D.SolidColorBrush"/> that has the specified color and opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:C1.Util.DX.Direct2D.RenderTarget"/></param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
            <param name="brushProperties">The base opacity of the brush.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SolidColorBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.SolidColorBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SolidColorBrush.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.SolidColorBrush">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.SolidColorBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SolidColorBrush.SetColor(C1.Util.DX.ColorF)">
            <summary>	
            void ID2D1SolidColorBrush::SetColor([In] const D2D_COLOR_F* color)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SolidColorBrush.GetColor">
            <summary>	
            D2D_COLOR_F ID2D1SolidColorBrush::GetColor()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SourceTransformShadow">
            <summary>
            Internal SourceTransform Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SourceTransformShadow.ToIntPtr(C1.Util.DX.Direct2D.SourceTransform)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.StrokeStyle">
            <summary>	
            ID2D1StrokeStyle	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.StrokeStyleProperties@)">
            <summary>
            Creates an <see cref="T:C1.Util.DX.Direct2D.StrokeStyle"/> that describes start cap, dash pattern, and other features of a stroke.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="properties">a definition for this render target</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.StrokeStyleProperties@,System.Single[])">
            <summary>
            Creates an <see cref="T:C1.Util.DX.Direct2D.StrokeStyle"/> that describes start cap, dash pattern, and other features of a stroke.	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.Direct2D.Factory"/></param>
            <param name="properties">A structure that describes the stroke's line cap, dash offset, and other details of a stroke.</param>
            <param name="dashes">An array whose elements are set to the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. The length of each dash and space in the dash pattern is the product of the element value in the array and the stroke width. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.StrokeStyle"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.StrokeStyle">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.StrokeStyle"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetStartCap">
            <summary>	
            D2D1_CAP_STYLE ID2D1StrokeStyle::GetStartCap()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetEndCap">
            <summary>	
            D2D1_CAP_STYLE ID2D1StrokeStyle::GetEndCap()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetDashCap">
            <summary>	
            D2D1_CAP_STYLE ID2D1StrokeStyle::GetDashCap()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetMiterLimit">
            <summary>	
            float ID2D1StrokeStyle::GetMiterLimit()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetLineJoin">
            <summary>	
            D2D1_LINE_JOIN ID2D1StrokeStyle::GetLineJoin()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetDashOffset">
            <summary>	
            float ID2D1StrokeStyle::GetDashOffset()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetDashStyle">
            <summary>	
            D2D1_DASH_STYLE ID2D1StrokeStyle::GetDashStyle()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetDashesCount">
            <summary>	
            unsigned int ID2D1StrokeStyle::GetDashesCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle.GetDashes(System.Single[],System.Int32)">
            <summary>	
            void ID2D1StrokeStyle::GetDashes([Out, Buffer] float* dashes,[In] unsigned int dashesCount)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.StrokeStyle1">
            <summary>	
            ID2D1StrokeStyle1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle1.Create(C1.Util.DX.Direct2D.Factory1,C1.Util.DX.Direct2D.StrokeStyleProperties1@)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.StrokeStyle1"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="strokeStyleProperties">No documentation.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle1.Create(C1.Util.DX.Direct2D.Factory1,C1.Util.DX.Direct2D.StrokeStyleProperties1@,System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.StrokeStyle1"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="strokeStyleProperties">No documentation.</param>
            <param name="dashes">No documentation.</param>
            <remarks>
            It is valid to specify a dash array only if <see cref="F:C1.Util.DX.Direct2D.DashStyle.Custom"/> is also specified.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.StrokeStyle1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.StrokeStyle1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.StrokeStyle1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.StrokeStyle1.GetStrokeTransformType">
            <summary>	
            D2D1_STROKE_TRANSFORM_TYPE ID2D1StrokeStyle1::GetStrokeTransformType()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TessellationSinkShadow">
            <summary>
            Internal TessellationSink Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TessellationSinkShadow.ToIntPtr(C1.Util.DX.Direct2D.TessellationSink)">
            <summary>
            Get a native callback pointer from a managed callback.
            </summary>
            <param name="tessellationSink">The geometry sink.</param>
            <returns>A pointer to the unmanaged geomerty sink counterpart</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.TransformedGeometry">
            <summary>	
            ID2D1TransformedGeometry	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformedGeometry.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Matrix3x2)">
            <summary>
            Constructor for a <see cref="T:C1.Util.DX.Direct2D.TransformedGeometry"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformedGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.TransformedGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformedGeometry.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.TransformedGeometry">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.TransformedGeometry"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformedGeometry.GetSourceGeometry">
            <summary>	
            void ID2D1TransformedGeometry::GetSourceGeometry([Out] ID2D1Geometry** sourceGeometry)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformedGeometry.GetTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            void ID2D1TransformedGeometry::GetTransform([Out] D2D_MATRIX_3X2_F* transform)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.TransformedGeometry.Transform">
            <summary>	
            GetTransform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TransformGraph">
            <summary>	
            ID2D1TransformGraph	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.SetSingleTransformNode(C1.Util.DX.Direct2D.TransformNode)">
            <summary>	
            Sets a single transform node as being equivalent to the whole graph.
            </summary>	
            <param name="node"><para>The node to be set.</para></param>	
            <remarks>	
            This equivalent to calling <see cref="M:C1.Util.DX.Direct2D.TransformGraph.Clear"/>, adding a single node, and connecting all of the node inputs to the effect inputs in order.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.AddNode(C1.Util.DX.Direct2D.TransformNode)">
            <summary>	
            Adds the provided node to the transform graph.
            </summary>	
            <param name="node"><para>The node that will be added to the transform graph.</para></param>	
            <remarks>	
            This adds a transform node to the transform graph. A node must be added to the transform graph before it can be interconnected in any way.A transform graph cannot be directly added to another transform graph. 	
            Any other kind of interface derived from <see cref="T:C1.Util.DX.Direct2D.TransformNode"/> can be added to the transform graph.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.RemoveNode(C1.Util.DX.Direct2D.TransformNode)">
            <summary>	
            Removes the provided node from the transform graph.
            </summary>	
            <param name="node"><para>The node that will be removed from the transform graph.</para></param>	
            <remarks>	
            The node must already exist in the graph; otherwise, the call fails with D2DERR_NOT_FOUND.Any connections to this node will be removed when the node is removed.After the node is removed, it cannot be used by the interface until it has been added to the graph by AddNode.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.SetOutputNode(C1.Util.DX.Direct2D.TransformNode)">
            <summary>	
            Sets the output node for the transform graph.
            </summary>	
            <param name="node"><para>The node that will be set as the output of the the transform graph.</para></param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.ConnectNode(C1.Util.DX.Direct2D.TransformNode,C1.Util.DX.Direct2D.TransformNode,System.Int32)">
            <summary>	
            Connects two nodes inside the transform graph.
            </summary>	
            <param name="fromNode">The node from which the connection will be made.</param>	
            <param name="toNode">The node to which the connection will be made.</param>	
            <param name="toNodeInputIndex">The node input that will be connected.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.ConnectToEffectInput(System.Int32,C1.Util.DX.Direct2D.TransformNode,System.Int32)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="toEffectInputIndex"><para>The effect input to which the transform node will be bound.</para></param>	
            <param name="node"><para>The node to which the connection will be made.</para></param>	
            <param name="toNodeInputIndex"><para>The node input that will be connected.</para></param>	
            <returns>The method returns an <see cref="T:C1.Util.DX.HResult"/>.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.TransformGraph"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.TransformGraph">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.TransformGraph"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.GetInputCount">
            <summary>	
            unsigned int ID2D1TransformGraph::GetInputCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.SetSingleTransformNode_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1TransformGraph::SetSingleTransformNode([In] ID2D1TransformNode* node)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.AddNode_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1TransformGraph::AddNode([In] ID2D1TransformNode* node)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.RemoveNode_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1TransformGraph::RemoveNode([In] ID2D1TransformNode* node)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.SetOutputNode_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1TransformGraph::SetOutputNode([In] ID2D1TransformNode* node)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.ConnectNode__(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1TransformGraph::ConnectNode([In] ID2D1TransformNode* fromNode,[In] ID2D1TransformNode* toNode,[In] unsigned int toNodeInputIndex)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.ConnectToEffectInput_(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1TransformGraph::ConnectToEffectInput([In] unsigned int toEffectInputIndex,[In] ID2D1TransformNode* node,[In] unsigned int toNodeInputIndex)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.Clear">
            <summary>	
            void ID2D1TransformGraph::Clear()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformGraph.SetPassthroughGraph(System.Int32)">
            <summary>	
            HRESULT ID2D1TransformGraph::SetPassthroughGraph([In] unsigned int effectInputIndex)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.VertexBuffer">
            <summary>	
            ID2D1VertexBuffer	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexBuffer.Create(C1.Util.DX.Direct2D.EffectContext,System.Guid,C1.Util.DX.Direct2D.VertexBufferProperties,C1.Util.DX.Direct2D.CustomVertexBufferProperties)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.VertexBuffer"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.VertexBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexBuffer.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.VertexBuffer">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.VertexBuffer"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexBuffer.Map(System.Byte[],System.Int32)">
            <summary>	
            HRESULT ID2D1VertexBuffer::Map([Out, Buffer] unsigned char** data,[In] unsigned int bufferSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexBuffer.Unmap">
            <summary>	
            HRESULT ID2D1VertexBuffer::Unmap()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.VertexBufferProperties">
            <summary>	
            D2D1_VERTEX_BUFFER_PROPERTIES	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexBufferProperties.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.VertexBufferProperties"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexBufferProperties.#ctor(System.Int32,C1.Util.DX.Direct2D.VertexUsage,C1.Util.DX.DataStream)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.VertexBufferProperties"/> class.
            </summary>
            <param name="inputCount">The number of inputs to the vertex shader.</param>
            <param name="usage">Indicates how frequently the vertex buffer is likely to be updated.</param>
            <param name="data">The initial contents of the vertex buffer</param>
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexBufferProperties.InputCount">
            <summary>	
            unsigned int inputCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexBufferProperties.Usage">
            <summary>	
            D2D1_VERTEX_USAGE usage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexBufferProperties.DataPointer">
            <summary>	
            const unsigned char* data	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexBufferProperties.SizeInBytes">
            <summary>	
            unsigned int byteWidth	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct2D.VertexBufferProperties.Data">
            <summary>	
            The initial contents of the vertex buffer.
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.WicRenderTarget">
            <summary>
            A Wic RenderTarget.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.WicRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.WicRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.WicRenderTarget.Create(C1.Util.DX.Direct2D.Factory,C1.Util.DX.WIC.Bitmap,C1.Util.DX.Direct2D.RenderTargetProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.WicRenderTarget"/> class from a <see cref="T:C1.Util.DX.WIC.Bitmap"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="wicBitmap">The WIC bitmap.</param>
            <param name="renderTargetProperties">The render target properties.</param>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.AffineTransform2D">
            <summary>
            Builtin AffineTransform2D effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.AffineTransform2D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.AffineTransform2D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.AffineTransform2D.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.AffineTransform2D"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.AffineTransform2D.InterpolationMode">
            <summary>
            The interpolation mode used to scale the image. There are 6 scale modes that range in quality and speed. 
            If you don't select a mode, the effect uses the interpolation mode of the device context. 
            See <see cref="P:C1.Util.DX.Direct2D.Effects.AffineTransform2D.InterpolationMode"/> for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.AffineTransform2D.BorderMode">
            <summary>
            The mode used to calculate the border of the image, soft or hard. See <see cref="P:C1.Util.DX.Direct2D.Effects.AffineTransform2D.BorderMode"/> modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.AffineTransform2D.TransformMatrix">
            <summary>
            The 3x2 matrix to transform the image using the Direct2D matrix transform. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.AffineTransform2D.Sharpness">
            <summary>
            In the high quality cubic interpolation mode, the sharpness level of the scaling filter as a float between 0 and 1. 
            The values are unitless. You can use sharpness to adjust the quality of an image when you scale the image.
            The sharpness factor affects the shape of the kernel. The higher the sharpness factor, the smaller the kernel.
            </summary>
            <remarks>
            This property affects only the high quality cubic interpolation mode.
            </remarks>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.ArithmeticComposite">
            <summary>
            Builtin ArithmeticComposite effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ArithmeticComposite.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.ArithmeticComposite"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ArithmeticComposite.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.ArithmeticComposite"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ArithmeticComposite.Coefficients">
            <summary>
            The coefficients for the equation used to composite the two input images. The coefficients are unitless and unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ArithmeticComposite.ClampOutput">
            <summary>
            Whether the effect clamps color values to between 0 and 1 before the effect passes the values to the next effect in the graph. The effect clamps the values before it premultiplies the alpha.
            if you set this to TRUE the effect will clamp the values. If you set this to FALSE, the effect will not clamp the color values, but other effects and the output surface may clamp the values if they are not of high enough precision.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Atlas">
            <summary>
            Builtin Atlas effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Atlas.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Atlas"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Atlas.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Atlas"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Atlas.InputRectangle">
            <summary>
            The portion of the image passed to the next effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Atlas.InputPaddingRectangle">
            <summary>
            The portion of the image passed to the next effect.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.BitmapSource">
            <summary>
            Builtin BitmapSource effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.BitmapSource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.BitmapSource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.BitmapSource.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.BitmapSource"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.BitmapSource.WicBitmapSource">
            <summary>
            The <see cref="T:C1.Util.DX.WIC.BitmapSource"/> containing the image data to be loaded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.BitmapSource.ScaleSource">
            <summary>
            The scale amount in the X and Y direction. 
            The effect multiplies the width by the X value and the height by the Y value. 
            This property is a <see cref="T:C1.Util.DX.Vector2"/> defined as: (X scale, Y scale). The scale amounts are FLOAT, unitless, and must be positive or 0.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.BitmapSource.InterpolationMode">
            <summary>
            The interpolation mode used to scale the image. See Interpolation modes for more info.
            If the mode disables the mipmap, then BitmapSouce will cache the image at the resolution determined by the Scale and EnableDPICorrection properties. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.BitmapSource.EnableDpiCorrection">
            <summary>
            If you set this to true, the effect will scale the input image to convert the DPI reported by IWICBitmapSource to the DPI of the device context. 
            The effect uses the interpolation mode you set with the InterpolationMode property. 
            If you set this to false, the effect uses a DPI of 96.0 for the output image.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.BitmapSource.AlphaMode">
            <summary>
            The alpha mode of the output. This can be either premultiplied or straight. See Alpha modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.BitmapSource.Orientation">
            <summary>
            A flip and/or rotation operation to be performed on the image. See Orientation for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Blend">
            <summary>
            Builtin Blend effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Blend.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Blend"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Blend.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Blend"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Blend.Mode">
            <summary>
            The blend mode used for the effect. See Blend modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Border">
            <summary>
            Builtin Border effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Border.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Border"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Border.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Border"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Border.EdgeModeX">
            <summary>
            The edge mode in the X direction for the effect. You can set this to clamp, wrap, or mirror. See Edge modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Border.EdgeModeY">
            <summary>
            The edge mode in the Y direction for the effect. You can set this to clamp, wrap, or mirror. See Edge modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Brightness">
            <summary>
            Builtin Brightness effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Brightness.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Brightness"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Brightness.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Brightness"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Brightness.WhitePoint">
            <summary>
            The upper portion of the brightness transfer curve. The white point adjusts the appearance of the brighter portions of the image. This property is for both the x value and the y value, in that order. Each of the values of this property are between 0 and 1, inclusive.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Brightness.BlackPoint">
            <summary>
            The lower portion of the brightness transfer curve. The black point adjusts the appearance of the darker portions of the image. This property is for both the x value and the y value, in that order. Each of the values of this property are between 0 and 1, inclusive.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.ColorManagement">
            <summary>
            Builtin ColorManagement effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ColorManagement.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.ColorManagement"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ColorManagement.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.ColorManagement"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorManagement.SourceContext">
            <summary>
            The source color context. Default null
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorManagement.SourceIntent">
            <summary>
            The rendering intent for the source context.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorManagement.DestinationContext">
            <summary>
            The destination color context. Default null
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorManagement.DestinationIntent">
            <summary>
            The rendering intent for the destination context.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorManagement.AlphaMode">
            <summary>
            The alpha mode of this color management.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.ColorMatrix">
            <summary>
            Builtin ColorMatrix effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ColorMatrix.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.ColorMatrix"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ColorMatrix.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.ColorMatrix"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorMatrix.Matrix">
            <summary>
            A 5x4 matrix of float values. The elements in the matrix are not bounded and are unitless.
            The default is the identity matrix.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorMatrix.AlphaMode">
            <summary>
            The alpha mode of the output. This can be either premultiplied or straight. See Alpha modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ColorMatrix.ClampOutput">
            <summary>
            Whether the effect clamps color values to between 0 and 1 before the effect passes the values to the next effect in the graph. The effect clamps the values before it premultiplies the alpha .
            if you set this to TRUE the effect will clamp the values. 
            If you set this to FALSE, the effect will not clamp the color values, but other effects and the output surface may clamp the values if they are not of high enough precision.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Composite">
            <summary>
            Builtin Composite effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Composite.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Composite"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Composite.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Composite"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Composite.Mode">
            <summary>
            The mode used for the effect.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.ConvolveMatrix">
            <summary>
            Builtin ConvolveMatrix effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.ConvolveMatrix"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.ConvolveMatrix"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.KernelUnitLength">
            <summary>
            The size of one unit in the kernel. The units are in (DIPs/kernel unit), where a kernel unit is the size of the element in the convolution kernel. A value of 1 (DIP/kernel unit) corresponds to one pixel in a image at 96 DPI.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.ScaleMode">
            <summary>
            The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. There are six scale modes that range in quality and speed. If you don't select a mode, the effect uses the interpolation mode of the device context. See Scale modes for more info
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.KernelSizeX">
            <summary>
            The width of the kernel matrix. The units are specified in kernel units.       
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.KernelSizeY">
            <summary>
            The height of the kernel matrix. The units are specified in kernel units.        
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.KernelMatrix">
            <summary>
            The kernel matrix to be applied to the image. The kernel elements aren't bounded and are specified as floats.
            The first set of KernelSizeX numbers in the FLOAT[] corresponds to the first row in the kernel. 
            The second set of KernelSizeX numbers correspond to the second row, and so on up to KernelSizeY rows.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.Divisor">
            <summary>
            The kernel matrix is applied to a pixel and then the result is divided by this value. 0 behaves as a value of float epsilon.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.Bias">
            <summary>
            The effect applies the kernel matrix, the divisor, and then the bias is added to the result. The bias is unbounded and unitless.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.KernelOffset">
            <summary>
            Shifts the convolution kernel from a centered position on the output pixel to a position you specify left/right and up/down. The offset is defined in kernel units.
            With some offsets and kernel sizes, the convolution kernel’s samples won't land on a pixel image center. The pixel values for the kernel sample are computed by bilinear interpolation.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.PreserveAlpha">
            <summary>
            Specifies whether the convolution kernel is applied to the alpha channel or only the color channels.
            If you set this to TRUE the convolution kernel is applied only to the color channels.
            If you set this to FALSE the convolution kernel is applied to all channels.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.BorderMode">
            <summary>
            The mode used to calculate the border of the image, soft or hard. See <see cref="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.BorderMode"/> modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.ConvolveMatrix.ClampOutput">
            <summary>
            Whether the effect clamps color values to between 0 and 1 before the effect passes the values to the next effect in the graph. The effect clamps the values before it premultiplies the alpha .
            if you set this to TRUE the effect will clamp the values. 
            If you set this to FALSE, the effect will not clamp the color values, but other effects and the output surface may clamp the values if they are not of high enough precision.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Crop">
            <summary>
            Builtin Crop effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Crop.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Crop"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Crop.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Crop"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Crop.Rectangle">
            <summary>
            The region to be cropped specified as a vector in the form (left, top, width, height). The units are in DIPs.
            </summary>
            <remarks>
            The rectangle will be truncated if it overlaps the edge boundaries of the input image.
            </remarks>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.DirectionalBlur">
            <summary>
            Builtin DirectionalBlur effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DirectionalBlur.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.DirectionalBlur"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DirectionalBlur.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.DirectionalBlur"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DirectionalBlur.StandardDeviation">
            <summary>
            Gets or sets the amount of blur to be applied to the image. Default: 1.0f
            </summary>
            <remarks>
            You can compute the blur radius of the kernel by multiplying the standard deviation by 3. The units of both the standard deviation and blur radius are DIPs. A value of zero DIPs disables this effect entirely. 
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DirectionalBlur.Angle">
            <summary>
            The angle of the blur relative to the x-axis, in the counterclockwise direction. The units are specified in degrees.
            The blur kernel is first generated using the same process as for the Gaussian Blur effect. The kernel values are then transformed according to the blur angle using this equation and then applied to the bitmap.
            offset2D – amount of transformation introduced in the blur kernel as a result of the blur angle.
            dist – distance from the center of the kernel to the current position in the kernel. offset2d = (dist * cos(??), dist * sin(??) ) 
            </summary>
            <remarks>
            You can compute the blur radius of the kernel by multiplying the standard deviation by 3. The units of both the standard deviation and blur radius are DIPs. A value of zero DIPs disables this effect entirely. 
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DirectionalBlur.Optimization">
            <summary>
            The optimization mode. See <see cref="T:C1.Util.DX.Direct2D.DirectionalBlurOptimization"/> modes for more info.
            </summary>
            <remarks>
            Default value is <see cref="F:C1.Util.DX.Direct2D.DirectionalBlurOptimization.Balanced"/>.
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DirectionalBlur.BorderMode">
            <summary>
            The mode used to calculate the border of the image, soft or hard. See <see cref="P:C1.Util.DX.Direct2D.Effects.DirectionalBlur.BorderMode"/> modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.DiscreteTransfer">
            <summary>
            Builtin DiscreteTransfer effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.DiscreteTransfer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.DiscreteTransfer"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.RedTable">
            <summary>
            The list of values used to define the transfer function for the Red channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.RedDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Red channel. If you set this to FALSE the effect applies the RedDiscreteTransfer function to the Red channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.GreenTable">
            <summary>
            The list of values that define the transfer function for the Green channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.GreenDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Green channel. If you set this to FALSE the effect applies the GreenDiscreteTransfer function to the Green channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.BlueTable">
            <summary>
            The list of values that define the transfer function for the Blue channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.BlueDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Blue channel. If you set this to FALSE the effect applies the BlueDiscreteTransfer function to the Blue channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.AlphaTable">
            <summary>
            The list of values that define the transfer function for the Alpha channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.AlphaDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Alpha channel. If you set this to FALSE the effect applies the AlphaDiscreteTransfer function to the Alpha channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DiscreteTransfer.ClampOutput">
            <summary>
            Whether the effect clamps color values to between 0 and 1 before the effect passes the values to the next effect in the graph. The effect clamps the values before it premultiplies the alpha .
            if you set this to TRUE the effect will clamp the values. 
            If you set this to FALSE, the effect will not clamp the color values, but other effects and the output surface may clamp the values if they are not of high enough precision.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.DisplacementMap">
            <summary>
            Builtin DisplacementMap effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DisplacementMap.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.DisplacementMap"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DisplacementMap.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.DisplacementMap"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DisplacementMap.Scale">
            <summary>
            Multiplies the intensity of the selected channel from the displacement image. The higher you set this property, the more the effect displaces the pixels
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DisplacementMap.XChannelSelect">
            <summary>
            The effect extracts the intensity from this color channel and uses it to spatially displace the image in the X direction. See Color channels for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DisplacementMap.YChannelSelect">
            <summary>
            The effect extracts the intensity from this color channel and uses it to spatially displace the image in the Y direction. See Color channels for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.DistantDiffuse">
            <summary>
            Builtin DistantDiffuse effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DistantDiffuse.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.DistantDiffuse"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DistantDiffuse.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.DistantDiffuse"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantDiffuse.Azimuth">
            <summary>
            The direction angle of the light source in the XY plane relative to the X-axis in the counter clock wise direction. The units are in degrees and must be between 0 and 360 degrees.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantDiffuse.Elevation">
            <summary>
            The direction angle of the light source in the YZ plane relative to the Y-axis in the counter clock wise direction. The units are in degrees and must be between 0 and 360 degrees.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantDiffuse.DiffuseConstant">
            <summary>
            The ratio of diffuse reflection to amount of incoming light. This property must be between 0 and 10,000 and is unitless. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantDiffuse.SurfaceScale">
            <summary>
            The scale factor in the Z direction. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantDiffuse.Color">
            <summary>
            The color of the incoming light. This property is exposed as a <see cref="T:C1.Util.DX.Vector3"/> – (R, G, B) and used to compute LR, LG, LB. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantDiffuse.KernelUnitLength">
            <summary>
            The size of an element in the Sobel kernel used to generate the surface normal in the X and Y direction. 
            This property maps to the dx and dy values in the Sobel gradient. 
            This property is a <see cref="T:C1.Util.DX.Vector2"/> (Kernel Unit Length X, Kernel Unit Length Y) and is defined in (device-independent pixels (DIPs)/Kernel Unit). 
            The effect uses bilinear interpolation to scale the bitmap to match size of kernel elements.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantDiffuse.ScaleMode">
            <summary>
            The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. 
            There are six scale modes that range in quality and speed. 
            If you don't select a mode, the effect uses the interpolation mode of the device context. 
            See Scale modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.DistantSpecular">
            <summary>
            Builtin DistantSpecular effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DistantSpecular.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.DistantSpecular"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DistantSpecular.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.DistantSpecular"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.Azimuth">
            <summary>
            The direction angle of the light source in the XY plane relative to the X-axis in the counter clock wise direction. The units are in degrees and must be between 0 and 360 degrees.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.Elevation">
            <summary>
            The direction angle of the light source in the YZ plane relative to the Y-axis in the counter clock wise direction. The units are in degrees and must be between 0 and 360 degrees.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.SpecularExponent">
            <summary>
            The exponent for the specular term in the Phong lighting equation. A larger value corresponds to a more reflective surface. The value is unitless and must be between 1.0 and 128. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.SpecularConstant">
            <summary>
            The ratio of specular reflection to the incoming light. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.SurfaceScale">
            <summary>
            The scale factor in the Z direction. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.Color">
            <summary>
            The color of the incoming light. This property is exposed as a <see cref="T:C1.Util.DX.Vector3"/> – (R, G, B) and used to compute LR, LG, LB. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.KernelUnitLength">
            <summary>
            The size of an element in the Sobel kernel used to generate the surface normal in the X and Y direction. 
            This property maps to the dx and dy values in the Sobel gradient. 
            This property is a <see cref="T:C1.Util.DX.Vector2"/> (Kernel Unit Length X, Kernel Unit Length Y) and is defined in (device-independent pixels (DIPs)/Kernel Unit). 
            The effect uses bilinear interpolation to scale the bitmap to match size of kernel elements.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DistantSpecular.ScaleMode">
            <summary>
            The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. There are six scale modes that range in quality and speed. If you don't select a mode, the effect uses the interpolation mode of the device context. See Scale modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.DpiCompensation">
            <summary>
            Builtin DpiCompensation effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DpiCompensation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.DpiCompensation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.DpiCompensation.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.DpiCompensation"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DpiCompensation.InterpolationMode">
            <summary>
            The Dpi interpolation mode.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DpiCompensation.BorderMode">
            <summary>
            The mode used to calculate the border of the image, soft or hard. See <see cref="P:C1.Util.DX.Direct2D.Effects.DpiCompensation.BorderMode"/> modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.DpiCompensation.InputDpi">
            <summary>
            The input dpi.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Flood">
            <summary>
            Builtin Flood effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Flood.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Flood"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Flood.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Flood"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Flood.Color">
            <summary>
            The color and opacity of the bitmap. This property is a <see cref="T:C1.Util.DX.ColorF"/>. 
            The individual values for each channel are of type FLOAT, unbounded and unitless. 
            The effect doesn't modify the values for the channels.
            The RGBA values for each channel range from 0 to 1.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.GammaTransfer">
            <summary>
            Builtin GammaTransfer effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.GammaTransfer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.GammaTransfer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.GammaTransfer.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.GammaTransfer"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.RedAmplitude">
            <summary>
            The amplitude of the gamma transfer function for the Red channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.RedExponent">
            <summary>
            The exponent of the gamma transfer function for the Red channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.RedOffset">
            <summary>
            The offset of the gamma transfer function for the Red channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.RedDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Red channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Red channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.GreenAmplitude">
            <summary>
            The amplitude of the gamma transfer function for the Green channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.GreenExponent">
            <summary>
            The exponent of the gamma transfer function for the Green channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.GreenOffset">
            <summary>
            The offset of the gamma transfer function for the Green channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.GreenDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Green channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Green channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.BlueAmplitude">
            <summary>
            The amplitude of the gamma transfer function for the Blue channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.BlueExponent">
            <summary>
            The exponent of the gamma transfer function for the Blue channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.BlueOffset">
            <summary>
            The offset of the gamma transfer function for the Blue channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.BlueDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Blue channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Blue channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.AlphaAmplitude">
            <summary>
            The amplitude of the gamma transfer function for the Alpha channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.AlphaExponent">
            <summary>
            The exponent of the gamma transfer function for the Alpha channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.AlphaOffset">
            <summary>
            The offset of the gamma transfer function for the Alpha channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.AlphaDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Alpha channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Alpha channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GammaTransfer.ClampOutput">
            <summary>
            Whether the effect clamps color values to between 0 and 1 before the effect passes the values to the next effect in the graph. The effect clamps the values before it premultiplies the alpha .
            if you set this to TRUE the effect will clamp the values. 
            If you set this to FALSE, the effect will not clamp the color values, but other effects and the output surface may clamp the values if they are not of high enough precision.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.GaussianBlur">
            <summary>
            Builtin GaussianBlur effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.GaussianBlur.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.GaussianBlur"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.GaussianBlur.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.GaussianBlur"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GaussianBlur.StandardDeviation">
            <summary>
            Gets or sets the amount of blur to be applied to the image. Default: 1.0f
            </summary>
            <remarks>
            You can compute the blur radius of the kernel by multiplying the standard deviation by 3. The units of both the standard deviation and blur radius are DIPs. A value of zero DIPs disables this effect entirely. 
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GaussianBlur.Optimization">
            <summary>
            The optimization mode. See <see cref="T:C1.Util.DX.Direct2D.GaussianBlurOptimization"/> modes for more info.
            </summary>
            <remarks>
            Default value is <see cref="F:C1.Util.DX.Direct2D.GaussianBlurOptimization.Balanced"/>.
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.GaussianBlur.BorderMode">
            <summary>
            The mode used to calculate the border of the image, soft or hard. See <see cref="P:C1.Util.DX.Direct2D.Effects.GaussianBlur.BorderMode"/> modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Histogram">
            <summary>
            Builtin Histogram effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Histogram.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Histogram"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Histogram.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Histogram"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Histogram.NumBins">
            <summary>
            Specifies the number of bins used for the histogram. The range of intensity values that fall into a particular bucket depend on the number of specified buckets. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Histogram.ChannelSelect">
            <summary>
            Specifies the channel used to generate the histogram. This effect has a single data output corresponding to the specified channel. See Channel selectors for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Histogram.HistogramOutput">
            <summary>
            The output array.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.HueRotation">
            <summary>
            Builtin HueRotate effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.HueRotation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.HueRotation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.HueRotation.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.HueRotation"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.HueRotation.Angle">
            <summary>
            The angle to rotate the hue, in degrees.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.LinearTransfer">
            <summary>
            Builtin LinearTransfer effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.LinearTransfer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.LinearTransfer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.LinearTransfer.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.LinearTransfer"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.RedYIntercept">
            <summary>
            The Y-intercept of the linear function for the Red channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.RedSlope">
            <summary>
            The slope of the linear function for the Red channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.RedDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Red channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Red channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.GreenYIntercept">
            <summary>
            The Y-intercept of the linear function for the Green channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.GreenSlope">
            <summary>
            The slope of the linear function for the Green channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.GreenDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Green channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Green channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.BlueYIntercept">
            <summary>
            The Y-intercept of the linear function for the Blue channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.BlueSlope">
            <summary>
            The slope of the linear function for the Blue channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.BlueDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Blue channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Blue channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.AlphaYIntercept">
            <summary>
            The Y-intercept of the linear function for the Alpha channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.AlphaSlope">
            <summary>
            The slope of the linear function for the Alpha channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.AlphaDisable">
            <summary>
            If you set this to TRUE it does not apply the transfer function to the Alpha channel. An identity transfer function is used. If you set this to FALSE it applies the gamma transfer function to the Alpha channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.LinearTransfer.ClampOutput">
            <summary>
            Whether the effect clamps color values to between 0 and 1 before the effect passes the values to the next effect in the graph. The effect clamps the values before it premultiplies the alpha.
            if you set this to TRUE the effect will clamp the values. 
            If you set this to FALSE, the effect will not clamp the color values, but other effects and the output surface may clamp the values if they are not of high enough precision.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.LuminanceToAlpha">
            <summary>
            Builtin LuminanceToAlpha effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.LuminanceToAlpha.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.LuminanceToAlpha"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.LuminanceToAlpha.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.LuminanceToAlpha"/> effect.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Morphology">
            <summary>
            Builtin Morphology effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Morphology.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Morphology"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Morphology.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Morphology"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Morphology.Mode">
            <summary>
            The morphology mode. The available modes are erode (flatten) and dilate (thicken).
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Morphology.Width">
            <summary>
            Size of the kernel in the X direction. The units are in DIPs.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Morphology.Height">
            <summary>
            Size of the kernel in the Y direction. The units are in DIPs.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.OpacityMetadata">
            <summary>
            Builtin Opacity metadata effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.OpacityMetadata.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.OpacityMetadata"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.OpacityMetadata.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.OpacityMetadata"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.OpacityMetadata.OpaqueRect">
            <summary>
            The portion of the source image that is opaque. The default is the entire input image.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D">
            <summary>
            Rotates the image in 3 dimensions as if viewed from a distance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.InterpolationMode">
            <summary>
            Image interpolation mode.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.BorderMode">
            <summary>
            The border mode.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.Depth">
            <summary>
            The perspective depth.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.PerspectiveOrigin">
            <summary>
            The perspective origin.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.LocalOffset">
            <summary>
            The transformation local offset.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.GlobalOffset">
            <summary>
            The transformation global offset.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.RotationOrigin">
            <summary>
            The transformation rotation origin.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PerspectiveTransform3D.Rotation">
            <summary>
            The transformation rotation.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.PointDiffuse">
            <summary>
            Builtin PointDiffuse effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.PointDiffuse.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.PointDiffuse"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.PointDiffuse.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.PointDiffuse"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointDiffuse.LightPosition">
            <summary>
            The light position of the point light source. The property is a D2D1_VECTOR_3F defined as (x, y, z). The units are in device-independent pixels (DIPs) and the values are unitless and unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointDiffuse.DiffuseConstant">
            <summary>
            The ratio of diffuse reflection to amount of incoming light. This property must be between 0 and 10,000 and is unitless. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointDiffuse.SurfaceScale">
            <summary>
            The scale factor in the Z direction. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointDiffuse.Color">
            <summary>
            The color of the incoming light. This property is exposed as a <see cref="T:C1.Util.DX.Vector3"/> – (R, G, B) and used to compute LR, LG, LB. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointDiffuse.KernelUnitLength">
            <summary>
            The size of an element in the Sobel kernel used to generate the surface normal in the X and Y direction. 
            This property maps to the dx and dy values in the Sobel gradient. 
            This property is a <see cref="T:C1.Util.DX.Vector2"/> (Kernel Unit Length X, Kernel Unit Length Y) and is defined in (device-independent pixels (DIPs)/Kernel Unit). 
            The effect uses bilinear interpolation to scale the bitmap to match size of kernel elements.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointDiffuse.ScaleMode">
            <summary>
            The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. 
            There are six scale modes that range in quality and speed. 
            If you don't select a mode, the effect uses the interpolation mode of the device context. 
            See Scale modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.PointSpecular">
            <summary>
            Builtin PointSpecular effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.PointSpecular.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.PointSpecular"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.PointSpecular.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.PointSpecular"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointSpecular.LightPosition">
            <summary>
            The light position of the point light source. The property is a D2D1_VECTOR_3F defined as (x, y, z). The units are in device-independent pixels (DIPs) and the values are unitless and unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointSpecular.SpecularExponent">
            <summary>
            The exponent for the specular term in the Phong lighting equation. A larger value corresponds to a more reflective surface. The value is unitless and must be between 1.0 and 128. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointSpecular.SpecularConstant">
            <summary>
            The ratio of specular reflection to the incoming light. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointSpecular.SurfaceScale">
            <summary>
            The scale factor in the Z direction. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointSpecular.Color">
            <summary>
            The color of the incoming light. This property is exposed as a <see cref="T:C1.Util.DX.Vector3"/> – (R, G, B) and used to compute LR, LG, LB. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointSpecular.KernelUnitLength">
            <summary>
            The size of an element in the Sobel kernel used to generate the surface normal in the X and Y direction. 
            This property maps to the dx and dy values in the Sobel gradient. 
            This property is a <see cref="T:C1.Util.DX.Vector2"/> (Kernel Unit Length X, Kernel Unit Length Y) and is defined in (device-independent pixels (DIPs)/Kernel Unit). 
            The effect uses bilinear interpolation to scale the bitmap to match size of kernel elements.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.PointSpecular.ScaleMode">
            <summary>
            The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. There are six scale modes that range in quality and speed. If you don't select a mode, the effect uses the interpolation mode of the device context. See Scale modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Premultiply">
            <summary>
            Builtin Premultiply effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Premultiply.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Premultiply"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Premultiply.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Premultiply"/> effect.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Saturation">
            <summary>
            Builtin Saturation effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Saturation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Saturation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Saturation.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Saturation"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Saturation.Value">
            <summary>
            The saturation of the image. You can set the saturation to a value between 0 and 1. If you set it to 1 the output image is fully saturated. If you set it to 0 the output image is monochrome. The saturation value is unitless.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Scale">
            <summary>
            Builtin Scale effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Scale.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Scale"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Scale.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Scale"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Scale.ScaleAmount">
            <summary>
            The scale amount in the X and Y direction as a ratio of the output size to the input size. This property a <see cref="T:C1.Util.DX.Vector2"/> defined as: (X scale, Y scale). The scale amounts are FLOAT, unitless, and must be positive or 0.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Scale.CenterPoint">
            <summary>
            The image scaling center point. This property is a <see cref="T:C1.Util.DX.Vector2"/> defined as: (point X, point Y). The units are in DIPs.
            Use the center point property to scale around a point other than the upper-left corner.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Scale.BorderMode">
            <summary>
            The mode used to calculate the border of the image, soft or hard. See Border modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Scale.Sharpness">
            <summary>
            In the high quality cubic interpolation mode, the sharpness level of the scaling filter as a float between 0 and 1. The values are unitless. You can use sharpness to adjust the quality of an image when you scale the image down.
            The sharpness factor affects the shape of the kernel. The higher the sharpness factor, the smaller the kernel.
            </summary>
            <remarks>
            This property affects only the high quality cubic interpolation mode.
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Scale.InterpolationMode">
            <summary>
            The interpolation mode the effect uses to scale the image. 
            There are 6 scale modes that range in quality and speed. 
            If you don't select a mode, the effect uses the interpolation mode of the device context. See Interpolation modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Shadow">
            <summary>
            Builtin Shadow effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Shadow.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Shadow"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Shadow.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Shadow"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Shadow.BlurStandardDeviation">
            <summary>
            The amount of blur to be applied to the alpha channel of the image. You can compute the blur radius of the kernel by multiplying the standard deviation by 3. The units of both the standard deviation and blur radius are DIPs.
            This property is the same as the Gaussian Blur standard deviation property.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Shadow.Color">
            <summary>
            The color of the drop shadow. This property is a <see cref="T:C1.Util.DX.ColorF"/> defined as: (R, G, B, A). 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Shadow.Optimization">
            <summary>
            The level of performance optimization.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.SpotDiffuse">
            <summary>
            Builtin SpotDiffuse effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.SpotDiffuse.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.SpotDiffuse"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.SpotDiffuse.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.SpotDiffuse"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.LightPosition">
            <summary>
            The light position of the point light source. The property is a <see cref="T:C1.Util.DX.Vector3"/> defined as (x, y, z). The units are in device-independent pixels (DIPs) and the values are unitless and unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.PointsAt">
            <summary>
            Where the spot light is focused. The property is exposed as a <see cref="T:C1.Util.DX.Vector3"/>  with – (x, y, z). The units are in DIPs and the values are unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.Focus">
            <summary>
            The focus of the spot light. This property is unitless and is defined between 0 and 200.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.LimitingConeAngle">
            <summary>
            The cone angle that restricts the region where the light is projected. No light is projected outside the cone. The limiting cone angle is the angle between the spot light axis (the axis between the LightPosition and PointsAt properties) and the spot light cone. This property is defined in degrees and must be between 0 to 90 degrees.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.DiffuseConstant">
            <summary>
            The ratio of diffuse reflection to amount of incoming light. This property must be between 0 and 10,000 and is unitless. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.SurfaceScale">
            <summary>
            The scale factor in the Z direction. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.Color">
            <summary>
            The color of the incoming light. This property is exposed as a <see cref="T:C1.Util.DX.Vector3"/> – (R, G, B) and used to compute LR, LG, LB. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.KernelUnitLength">
            <summary>
            The size of an element in the Sobel kernel used to generate the surface normal in the X and Y direction. 
            This property maps to the dx and dy values in the Sobel gradient. 
            This property is a <see cref="T:C1.Util.DX.Vector2"/> (Kernel Unit Length X, Kernel Unit Length Y) and is defined in (device-independent pixels (DIPs)/Kernel Unit). 
            The effect uses bilinear interpolation to scale the bitmap to match size of kernel elements.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotDiffuse.ScaleMode">
            <summary>
            The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. 
            There are six scale modes that range in quality and speed. 
            If you don't select a mode, the effect uses the interpolation mode of the device context. 
            See Scale modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.SpotSpecular">
            <summary>
            Builtin SpotSpecular effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.SpotSpecular.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.SpotSpecular"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.SpotSpecular.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.SpotSpecular"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.LightPosition">
            <summary>
            The light position of the point light source. The property is a D2D1_VECTOR_3F defined as (x, y, z). The units are in device-independent pixels (DIPs) and the values are unitless and unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.PointsAt">
            <summary>
            Where the spot light is focused. The property is exposed as a <see cref="T:C1.Util.DX.Vector3"/>  with – (x, y, z). The units are in DIPs and the values are unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.Focus">
            <summary>
            The focus of the spot light. This property is unitless and is defined between 0 and 200.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.LimitingConeAngle">
            <summary>
            The cone angle that restricts the region where the light is projected. No light is projected outside the cone. The limiting cone angle is the angle between the spot light axis (the axis between the LightPosition and PointsAt properties) and the spot light cone. This property is defined in degrees and must be between 0 to 90 degrees.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.SpecularExponent">
            <summary>
            The exponent for the specular term in the Phong lighting equation. A larger value corresponds to a more reflective surface. The value is unitless and must be between 1.0 and 128. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.SpecularConstant">
            <summary>
            The ratio of specular reflection to the incoming light. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.SurfaceScale">
            <summary>
            The scale factor in the Z direction. The value is unitless and must be between 0 and 10,000.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.Color">
            <summary>
            The color of the incoming light. This property is exposed as a <see cref="T:C1.Util.DX.Vector3"/> – (R, G, B) and used to compute LR, LG, LB. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.KernelUnitLength">
            <summary>
            The size of an element in the Sobel kernel used to generate the surface normal in the X and Y direction. 
            This property maps to the dx and dy values in the Sobel gradient. 
            This property is a <see cref="T:C1.Util.DX.Vector2"/> (Kernel Unit Length X, Kernel Unit Length Y) and is defined in (device-independent pixels (DIPs)/Kernel Unit). 
            The effect uses bilinear interpolation to scale the bitmap to match size of kernel elements.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.SpotSpecular.ScaleMode">
            <summary>
            The interpolation mode the effect uses to scale the image to the corresponding kernel unit length. There are six scale modes that range in quality and speed. If you don't select a mode, the effect uses the interpolation mode of the device context. See Scale modes for more info.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.TableTransfer">
            <summary>
            Builtin TableTransfer effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.TableTransfer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.TableTransfer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.TableTransfer.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.TableTransfer"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.RedTable">
            <summary>
            The list of values used to define the transfer function for the Red channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.RedDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Red channel. If you set this to FALSE the effect applies the RedTableTransfer function to the Red channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.GreenTable">
            <summary>
            The list of values that define the transfer function for the Green channel.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.GreenDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Green channel. If you set this to FALSE the effect applies the GreenTableTransfer function to the Green channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.BlueTable">
            <summary>
            The list of values that define the transfer function for the Blue channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.BlueDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Blue channel. If you set this to FALSE the effect applies the BlueTableTransfer function to the Blue channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.AlphaTable">
            <summary>
            The list of values that define the transfer function for the Alpha channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.AlphaDisable">
            <summary>
            If you set this to TRUE the effect does not apply the transfer function to the Alpha channel. If you set this to FALSE the effect applies the AlphaTableTransfer function to the Alpha channel. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.TableTransfer.ClampOutput">
            <summary>
            Whether the effect clamps color values to between 0 and 1 before the effect passes the values to the next effect in the graph. The effect clamps the values before it premultiplies the alpha .
            if you set this to TRUE the effect will clamp the values. 
            If you set this to FALSE, the effect will not clamp the color values, but other effects and the output surface may clamp the values if they are not of high enough precision.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Tile">
            <summary>
            Builtin Tile effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Tile.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Tile"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Tile.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Tile"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Tile.Rectangle">
            <summary>
            The region to be tiled specified as a vector in the form (left, top, width, height). The units are in DIPs.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Transform3D">
            <summary>
            Builtin Transform3D effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Transform3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Transform3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Transform3D.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Transform3D"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Transform3D.InterpolationMode">
            <summary>
            The interpolation mode used to scale the image. There are 6 scale modes that range in quality and speed. 
            If you don't select a mode, the effect uses the interpolation mode of the device context. 
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Transform3D.BorderMode">
            <summary>
            The mode used to calculate the border of the image, soft or hard.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Transform3D.TransformMatrix">
            <summary>
            A 4x4 transform matrix applied to the projection plane.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.Turbulence">
            <summary>
            Builtin Turbulence effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Turbulence.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.Turbulence"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.Turbulence.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.Turbulence"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Turbulence.Offset">
            <summary>
            The coordinates where the turbulence output is generated.
            The algorithm used to generate the Perlin noise is position dependent, so a different offset results in a different output. This property is not bounded and the units are specified in DIPs
            </summary>
            <remarks>
            The offset does not have the same effect as a translation because the noise function output is infinite and the function will wrap around the tile.
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Turbulence.BaseFrequency">
            <summary>
            The base frequencies in the X and Y direction.. This property is a float and must be greater than 0. The units are specified in 1/DIPs.
            A value of 1 (1/DIPs) for the base frequency results in the Perlin noise completing an entire cycle between two pixels. The ease interpolation for these pixels results in completely random pixels, since there is no correlation between the pixels.
            A value of 0.1(1/DIPs) for the base frequency, the Perlin noise function repeats every 10 DIPs. This results in correlation between pixels and the typical turbulence effect is visible
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Turbulence.OctaveCount">
            <summary>
            The number of octaves for the noise function. This property is an int and must be greater than 0.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Turbulence.Seed">
            <summary>
            The seed for the pseudo random generator. This property is unbounded.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Turbulence.Noise">
            <summary>
            The turbulence noise mode. This property can be either fractal sum or turbulence. Indicates whether to generate a bitmap based on Fractal Noise or the Turbulence function. See Noise modes for more info.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.Turbulence.Stitchable">
            <summary>
            Turns stitching on or off. The base frequency is adjusted so that output bitmap can be stitched. This is useful if you want to tile multiple copies of the turbulence effect output.
            true: The output bitmap can be tiled (using the tile effect) without the appearance of seams. The base frequency is adjusted so that output bitmap can be stitched. 
            false: The base frequency is not adjusted, so seams may appear between tiles if the bitmap is tiled.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.UnPremultiply">
            <summary>
            Builtin Premultiply effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.UnPremultiply.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.UnPremultiply"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.UnPremultiply.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.Effects.UnPremultiply"/> effect.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.Effects.YCbCr">
            <summary>
            The built-in YCbCr effect.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.YCbCr.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.YCbCr"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Effects.YCbCr.Create(C1.Util.DX.Direct2D.DeviceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Effects.YCbCr"/> effect.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.YCbCr.ChromaSubSampling">
            <summary>
            Gets or sets the chroma subsampling of the input chroma image.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.YCbCr.Transform">
            <summary>
            Gets or sets the axis-aligned affine transform of the image. Axis aligned transforms include Scale, Flips, and 90 degree rotations.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.Effects.YCbCr.InterpolationMode">
            <summary>
            Gets or sets the interpolation mode.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.AffineTransform2DInterpolationMode">
            <summary>	
            D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DInterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DInterpolationMode.Linear">
            <summary>	
            D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DInterpolationMode.Cubic">
            <summary>	
            D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DInterpolationMode.MultiSampleLinear">
            <summary>	
            D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DInterpolationMode.Anisotropic">
            <summary>	
            D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DInterpolationMode.HighQualityCubic">
            <summary>	
            D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.AffineTransform2DProperties">
            <summary>	
            D2D1_2DAFFINETRANSFORM_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DProperties.InterpolationMode">
            <summary>	
            D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DProperties.BorderMode">
            <summary>	
            D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DProperties.TransformMatrix">
            <summary>	
            D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AffineTransform2DProperties.Sharpness">
            <summary>	
            D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.AlphaMode">
            <summary>	
            D2D1_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AlphaMode.Unknown">
            <summary>	
            D2D1_ALPHA_MODE_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AlphaMode.Premultiplied">
            <summary>	
            D2D1_ALPHA_MODE_PREMULTIPLIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AlphaMode.Straight">
            <summary>	
            D2D1_ALPHA_MODE_STRAIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AlphaMode.Ignore">
            <summary>	
            D2D1_ALPHA_MODE_IGNORE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.AntialiasMode">
            <summary>	
            D2D1_ANTIALIAS_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AntialiasMode.PerPrimitive">
            <summary>	
            D2D1_ANTIALIAS_MODE_PER_PRIMITIVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AntialiasMode.Aliased">
            <summary>	
            D2D1_ANTIALIAS_MODE_ALIASED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ArcSize">
            <summary>	
            D2D1_ARC_SIZE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArcSize.Small">
            <summary>	
            D2D1_ARC_SIZE_SMALL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArcSize.Large">
            <summary>	
            D2D1_ARC_SIZE_LARGE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ArithmeticCompositeProperties">
            <summary>	
            D2D1_ARITHMETICCOMPOSITE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArithmeticCompositeProperties.Coefficients">
            <summary>	
            D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArithmeticCompositeProperties.ClampOutput">
            <summary>	
            D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.AtlasProperties">
            <summary>	
            D2D1_ATLAS_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AtlasProperties.InputRectangle">
            <summary>	
            D2D1_ATLAS_PROP_INPUT_RECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.AtlasProperties.InputPaddingRectangle">
            <summary>	
            D2D1_ATLAS_PROP_INPUT_PADDING_RECT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapInterpolationMode">
            <summary>	
            D2D1_BITMAP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapInterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapInterpolationMode.Linear">
            <summary>	
            D2D1_BITMAP_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapOptions">
            <summary>	
            D2D1_BITMAP_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapOptions.None">
            <summary>	
            D2D1_BITMAP_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapOptions.Target">
            <summary>	
            D2D1_BITMAP_OPTIONS_TARGET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapOptions.CannotDraw">
            <summary>	
            D2D1_BITMAP_OPTIONS_CANNOT_DRAW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapOptions.CpuRead">
            <summary>	
            D2D1_BITMAP_OPTIONS_CPU_READ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapOptions.GdiCompatible">
            <summary>	
            D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapSourceAlphaMode">
            <summary>	
            D2D1_BITMAPSOURCE_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceAlphaMode.Premultiplied">
            <summary>	
            D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceAlphaMode.Straight">
            <summary>	
            D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapSourceInterpolationMode">
            <summary>	
            D2D1_BITMAPSOURCE_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceInterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceInterpolationMode.Linear">
            <summary>	
            D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceInterpolationMode.Cubic">
            <summary>	
            D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceInterpolationMode.Fant">
            <summary>	
            D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceInterpolationMode.MipmapLinear">
            <summary>	
            D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapSourceOrientation">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.Default">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.FlipHorizontal">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.RotateClockwise180">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.RotateClockwise180FlipHorizontal">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.RotateClockwise270FlipHorizontal">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.RotateClockwise90">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.RotateClockwise90FlipHorizontal">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceOrientation.RotateClockwise270">
            <summary>	
            D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapSourceProperties">
            <summary>	
            D2D1_BITMAPSOURCE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceProperties.WicBitmapSource">
            <summary>	
            D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceProperties.Scale">
            <summary>	
            D2D1_BITMAPSOURCE_PROP_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceProperties.InterpolationMode">
            <summary>	
            D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceProperties.EnableDpiCorrection">
            <summary>	
            D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceProperties.AlphaMode">
            <summary>	
            D2D1_BITMAPSOURCE_PROP_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapSourceProperties.Orientation">
            <summary>	
            D2D1_BITMAPSOURCE_PROP_ORIENTATION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Blend">
            <summary>	
            D2D1_BLEND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.Zero">
            <summary>	
            D2D1_BLEND_ZERO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.One">
            <summary>	
            D2D1_BLEND_ONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.SourceColor">
            <summary>	
            D2D1_BLEND_SRC_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.InverseSourceColor">
            <summary>	
            D2D1_BLEND_INV_SRC_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.SourceAlpha">
            <summary>	
            D2D1_BLEND_SRC_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.InverseSourceAlpha">
            <summary>	
            D2D1_BLEND_INV_SRC_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.DestinationAlpha">
            <summary>	
            D2D1_BLEND_DEST_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.InverseDestinationAlpha">
            <summary>	
            D2D1_BLEND_INV_DEST_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.DestinationColor">
            <summary>	
            D2D1_BLEND_DEST_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.InverseDestinationColor">
            <summary>	
            D2D1_BLEND_INV_DEST_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.SourceAlphaSaturate">
            <summary>	
            D2D1_BLEND_SRC_ALPHA_SAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.BlendFactor">
            <summary>	
            D2D1_BLEND_BLEND_FACTOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Blend.InverseBlendFactor">
            <summary>	
            D2D1_BLEND_INV_BLEND_FACTOR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BlendMode">
            <summary>	
            D2D1_BLEND_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Multiply">
            <summary>	
            D2D1_BLEND_MODE_MULTIPLY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Screen">
            <summary>	
            D2D1_BLEND_MODE_SCREEN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Darken">
            <summary>	
            D2D1_BLEND_MODE_DARKEN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Lighten">
            <summary>	
            D2D1_BLEND_MODE_LIGHTEN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Dissolve">
            <summary>	
            D2D1_BLEND_MODE_DISSOLVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.ColorBurn">
            <summary>	
            D2D1_BLEND_MODE_COLOR_BURN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.LinearBurn">
            <summary>	
            D2D1_BLEND_MODE_LINEAR_BURN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.DarkerColor">
            <summary>	
            D2D1_BLEND_MODE_DARKER_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.LighterColor">
            <summary>	
            D2D1_BLEND_MODE_LIGHTER_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.ColorDodge">
            <summary>	
            D2D1_BLEND_MODE_COLOR_DODGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.LinearDodge">
            <summary>	
            D2D1_BLEND_MODE_LINEAR_DODGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Overlay">
            <summary>	
            D2D1_BLEND_MODE_OVERLAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.SoftLight">
            <summary>	
            D2D1_BLEND_MODE_SOFT_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.HardLight">
            <summary>	
            D2D1_BLEND_MODE_HARD_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.VividLight">
            <summary>	
            D2D1_BLEND_MODE_VIVID_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.LinearLight">
            <summary>	
            D2D1_BLEND_MODE_LINEAR_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.PinLight">
            <summary>	
            D2D1_BLEND_MODE_PIN_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.HardMix">
            <summary>	
            D2D1_BLEND_MODE_HARD_MIX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Difference">
            <summary>	
            D2D1_BLEND_MODE_DIFFERENCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Exclusion">
            <summary>	
            D2D1_BLEND_MODE_EXCLUSION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Hue">
            <summary>	
            D2D1_BLEND_MODE_HUE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Saturation">
            <summary>	
            D2D1_BLEND_MODE_SATURATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Color">
            <summary>	
            D2D1_BLEND_MODE_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Luminosity">
            <summary>	
            D2D1_BLEND_MODE_LUMINOSITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Subtract">
            <summary>	
            D2D1_BLEND_MODE_SUBTRACT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendMode.Division">
            <summary>	
            D2D1_BLEND_MODE_DIVISION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BlendOperation">
            <summary>	
            D2D1_BLEND_OPERATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendOperation.Add">
            <summary>	
            D2D1_BLEND_OPERATION_ADD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendOperation.Subtract">
            <summary>	
            D2D1_BLEND_OPERATION_SUBTRACT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendOperation.ReverseSubtract">
            <summary>	
            D2D1_BLEND_OPERATION_REV_SUBTRACT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendOperation.Minimum">
            <summary>	
            D2D1_BLEND_OPERATION_MIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendOperation.Maximum">
            <summary>	
            D2D1_BLEND_OPERATION_MAX	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BlendProperties">
            <summary>	
            D2D1_BLEND_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendProperties.Mode">
            <summary>	
            D2D1_BLEND_PROP_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BorderEdgeMode">
            <summary>	
            D2D1_BORDER_EDGE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BorderEdgeMode.Clamp">
            <summary>	
            D2D1_BORDER_EDGE_MODE_CLAMP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BorderEdgeMode.Wrap">
            <summary>	
            D2D1_BORDER_EDGE_MODE_WRAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BorderEdgeMode.Mirror">
            <summary>	
            D2D1_BORDER_EDGE_MODE_MIRROR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BorderMode">
            <summary>	
            D2D1_BORDER_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BorderMode.Soft">
            <summary>	
            D2D1_BORDER_MODE_SOFT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BorderMode.Hard">
            <summary>	
            D2D1_BORDER_MODE_HARD	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BorderProperties">
            <summary>	
            D2D1_BORDER_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BorderProperties.EdgeModeX">
            <summary>	
            D2D1_BORDER_PROP_EDGE_MODE_X	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BorderProperties.EdgeModeY">
            <summary>	
            D2D1_BORDER_PROP_EDGE_MODE_Y	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BrightnessProperties">
            <summary>	
            D2D1_BRIGHTNESS_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BrightnessProperties.WhitePoint">
            <summary>	
            D2D1_BRIGHTNESS_PROP_WHITE_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BrightnessProperties.BlackPoint">
            <summary>	
            D2D1_BRIGHTNESS_PROP_BLACK_POINT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BufferPrecision">
            <summary>	
            D2D1_BUFFER_PRECISION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BufferPrecision.Unknown">
            <summary>	
            D2D1_BUFFER_PRECISION_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BufferPrecision.PerChannel8UNorm">
            <summary>	
            D2D1_BUFFER_PRECISION_8BPC_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BufferPrecision.PerChannel8UNormSRgb">
            <summary>	
            D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BufferPrecision.PerChannel16UNorm">
            <summary>	
            D2D1_BUFFER_PRECISION_16BPC_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BufferPrecision.PerChannel16Float">
            <summary>	
            D2D1_BUFFER_PRECISION_16BPC_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BufferPrecision.PerChannel32Float">
            <summary>	
            D2D1_BUFFER_PRECISION_32BPC_FLOAT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CapStyle">
            <summary>	
            D2D1_CAP_STYLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CapStyle.Flat">
            <summary>	
            D2D1_CAP_STYLE_FLAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CapStyle.Square">
            <summary>	
            D2D1_CAP_STYLE_SQUARE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CapStyle.Round">
            <summary>	
            D2D1_CAP_STYLE_ROUND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CapStyle.Triangle">
            <summary>	
            D2D1_CAP_STYLE_TRIANGLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ChangeType">
            <summary>	
            D2D1_CHANGE_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChangeType.None">
            <summary>	
            D2D1_CHANGE_TYPE_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChangeType.Properties">
            <summary>	
            D2D1_CHANGE_TYPE_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChangeType.Context">
            <summary>	
            D2D1_CHANGE_TYPE_CONTEXT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChangeType.Graph">
            <summary>	
            D2D1_CHANGE_TYPE_GRAPH	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ChannelDepth">
            <summary>	
            D2D1_CHANNEL_DEPTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChannelDepth.Default">
            <summary>	
            D2D1_CHANNEL_DEPTH_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChannelDepth.One">
            <summary>	
            D2D1_CHANNEL_DEPTH_1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChannelDepth.Four">
            <summary>	
            D2D1_CHANNEL_DEPTH_4	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ChannelSelector">
            <summary>	
            D2D1_CHANNEL_SELECTOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChannelSelector.R">
            <summary>	
            D2D1_CHANNEL_SELECTOR_R	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChannelSelector.G">
            <summary>	
            D2D1_CHANNEL_SELECTOR_G	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChannelSelector.B">
            <summary>	
            D2D1_CHANNEL_SELECTOR_B	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ChannelSelector.A">
            <summary>	
            D2D1_CHANNEL_SELECTOR_A	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorInterpolationMode">
            <summary>	
            D2D1_COLOR_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorInterpolationMode.Straight">
            <summary>	
            D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorInterpolationMode.Premultiplied">
            <summary>	
            D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorManagementAlphaMode">
            <summary>	
            D2D1_COLORMANAGEMENT_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementAlphaMode.Premultiplied">
            <summary>	
            D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementAlphaMode.Straight">
            <summary>	
            D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorManagementProperties">
            <summary>	
            D2D1_COLORMANAGEMENT_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementProperties.SourceColorContext">
            <summary>	
            D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementProperties.SourceRenderingIntent">
            <summary>	
            D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementProperties.DestinationColorContext">
            <summary>	
            D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementProperties.DestinationRenderingIntent">
            <summary>	
            D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementProperties.AlphaMode">
            <summary>	
            D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementProperties.Quality">
            <summary>	
            D2D1_COLORMANAGEMENT_PROP_QUALITY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorManagementQuality">
            <summary>	
            D2D1_COLORMANAGEMENT_QUALITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementQuality.Proof">
            <summary>	
            D2D1_COLORMANAGEMENT_QUALITY_PROOF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementQuality.Normal">
            <summary>	
            D2D1_COLORMANAGEMENT_QUALITY_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementQuality.Best">
            <summary>	
            D2D1_COLORMANAGEMENT_QUALITY_BEST	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorManagementRenderingIntent">
            <summary>	
            D2D1_COLORMANAGEMENT_RENDERING_INTENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementRenderingIntent.Perceptual">
            <summary>	
            D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementRenderingIntent.RelativeColorimetric">
            <summary>	
            D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementRenderingIntent.Saturation">
            <summary>	
            D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorManagementRenderingIntent.AbsoluteColorimetric">
            <summary>	
            D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorMatrixAlphaMode">
            <summary>	
            D2D1_COLORMATRIX_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorMatrixAlphaMode.Premultiplied">
            <summary>	
            D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorMatrixAlphaMode.Straight">
            <summary>	
            D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorMatrixProperties">
            <summary>	
            D2D1_COLORMATRIX_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorMatrixProperties.ColorMatrix">
            <summary>	
            D2D1_COLORMATRIX_PROP_COLOR_MATRIX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorMatrixProperties.AlphaMode">
            <summary>	
            D2D1_COLORMATRIX_PROP_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorMatrixProperties.ClampOutput">
            <summary>	
            D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ColorSpace">
            <summary>	
            D2D1_COLOR_SPACE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorSpace.Custom">
            <summary>	
            D2D1_COLOR_SPACE_CUSTOM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorSpace.SRgb">
            <summary>	
            D2D1_COLOR_SPACE_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ColorSpace.ScRgb">
            <summary>	
            D2D1_COLOR_SPACE_SCRGB	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CombineMode">
            <summary>	
            D2D1_COMBINE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CombineMode.Union">
            <summary>	
            D2D1_COMBINE_MODE_UNION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CombineMode.Intersect">
            <summary>	
            D2D1_COMBINE_MODE_INTERSECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CombineMode.Xor">
            <summary>	
            D2D1_COMBINE_MODE_XOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CombineMode.Exclude">
            <summary>	
            D2D1_COMBINE_MODE_EXCLUDE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CompatibleRenderTargetOptions">
            <summary>	
            D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompatibleRenderTargetOptions.None">
            <summary>	
            D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompatibleRenderTargetOptions.GdiCompatible">
            <summary>	
            D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CompositeMode">
            <summary>	
            D2D1_COMPOSITE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.SourceOver">
            <summary>	
            D2D1_COMPOSITE_MODE_SOURCE_OVER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.DestinationOver">
            <summary>	
            D2D1_COMPOSITE_MODE_DESTINATION_OVER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.SourceIn">
            <summary>	
            D2D1_COMPOSITE_MODE_SOURCE_IN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.DestinationIn">
            <summary>	
            D2D1_COMPOSITE_MODE_DESTINATION_IN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.SourceOut">
            <summary>	
            D2D1_COMPOSITE_MODE_SOURCE_OUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.DestinationOut">
            <summary>	
            D2D1_COMPOSITE_MODE_DESTINATION_OUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.SourceAtop">
            <summary>	
            D2D1_COMPOSITE_MODE_SOURCE_ATOP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.DestinationAtop">
            <summary>	
            D2D1_COMPOSITE_MODE_DESTINATION_ATOP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.Xor">
            <summary>	
            D2D1_COMPOSITE_MODE_XOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.Plus">
            <summary>	
            D2D1_COMPOSITE_MODE_PLUS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.SourceCopy">
            <summary>	
            D2D1_COMPOSITE_MODE_SOURCE_COPY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.BoundedSourceCopy">
            <summary>	
            D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeMode.MaskInvert">
            <summary>	
            D2D1_COMPOSITE_MODE_MASK_INVERT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CompositeProperties">
            <summary>	
            D2D1_COMPOSITE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CompositeProperties.Mode">
            <summary>	
            D2D1_COMPOSITE_PROP_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ConvoleMatrixProperties">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.KernelUnitLength">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.ScaleMode">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.KernelSizeX">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.KernelSizeY">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.KernelMatrix">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.Divisor">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_DIVISOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.Bias">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_BIAS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.KernelOffset">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.PreserveAlpha">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.BorderMode">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixProperties.ClampOutput">
            <summary>	
            D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ConvoleMatrixScaleMode">
            <summary>	
            D2D1_CONVOLVEMATRIX_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixScaleMode.NearestNeighbor">
            <summary>	
            D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixScaleMode.Linear">
            <summary>	
            D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixScaleMode.Cubic">
            <summary>	
            D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixScaleMode.MultiSampleLinear">
            <summary>	
            D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixScaleMode.Anisotropic">
            <summary>	
            D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ConvoleMatrixScaleMode.HighQualityCubic">
            <summary>	
            D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CropProperties">
            <summary>	
            D2D1_CROP_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CropProperties.Rectangle">
            <summary>	
            D2D1_CROP_PROP_RECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CropProperties.BorderMode">
            <summary>	
            D2D1_CROP_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DashStyle">
            <summary>	
            D2D1_DASH_STYLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DashStyle.Solid">
            <summary>	
            D2D1_DASH_STYLE_SOLID	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DashStyle.Dash">
            <summary>	
            D2D1_DASH_STYLE_DASH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DashStyle.Dot">
            <summary>	
            D2D1_DASH_STYLE_DOT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DashStyle.DashDot">
            <summary>	
            D2D1_DASH_STYLE_DASH_DOT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DashStyle.DashDotDot">
            <summary>	
            D2D1_DASH_STYLE_DASH_DOT_DOT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DashStyle.Custom">
            <summary>	
            D2D1_DASH_STYLE_CUSTOM	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DebugLevel">
            <summary>	
            D2D1_DEBUG_LEVEL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DebugLevel.None">
            <summary>	
            D2D1_DEBUG_LEVEL_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DebugLevel.Error">
            <summary>	
            D2D1_DEBUG_LEVEL_ERROR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DebugLevel.Warning">
            <summary>	
            D2D1_DEBUG_LEVEL_WARNING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DebugLevel.Information">
            <summary>	
            D2D1_DEBUG_LEVEL_INFORMATION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DeviceContextInitializeMode">
            <summary>	
            D2D1_DC_INITIALIZE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DeviceContextInitializeMode.Copy">
            <summary>	
            D2D1_DC_INITIALIZE_MODE_COPY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DeviceContextInitializeMode.Clear">
            <summary>	
            D2D1_DC_INITIALIZE_MODE_CLEAR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DeviceContextOptions">
            <summary>	
            D2D1_DEVICE_CONTEXT_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DeviceContextOptions.None">
            <summary>	
            D2D1_DEVICE_CONTEXT_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DeviceContextOptions.EnableMultithreadedOptimizations">
            <summary>	
            D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DirectionalBlurOptimization">
            <summary>	
            D2D1_DIRECTIONALBLUR_OPTIMIZATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DirectionalBlurOptimization.Speed">
            <summary>	
            D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DirectionalBlurOptimization.Balanced">
            <summary>	
            D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DirectionalBlurOptimization.Quality">
            <summary>	
            D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DirectionalBlurProperties">
            <summary>	
            D2D1_DIRECTIONALBLUR_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DirectionalBlurProperties.StandardDeviation">
            <summary>	
            D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DirectionalBlurProperties.Angle">
            <summary>	
            D2D1_DIRECTIONALBLUR_PROP_ANGLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DirectionalBlurProperties.Optimization">
            <summary>	
            D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DirectionalBlurProperties.BorderMode">
            <summary>	
            D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DiscreteTransferProperties">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.RedTable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_RED_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.RedDisable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_RED_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.GreenTable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.GreenDisable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.BlueTable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.BlueDisable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.AlphaTable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.AlphaDisable">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DiscreteTransferProperties.ClampOutput">
            <summary>	
            D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DisplacementMapProperties">
            <summary>	
            D2D1_DISPLACEMENTMAP_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DisplacementMapProperties.Scale">
            <summary>	
            D2D1_DISPLACEMENTMAP_PROP_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DisplacementMapProperties.XChannelSelect">
            <summary>	
            D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DisplacementMapProperties.YChannelSelect">
            <summary>	
            D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DistantDiffuseProperties">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseProperties.Azimuth">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP_AZIMUTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseProperties.Elevation">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP_ELEVATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseProperties.DiffuseConstant">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseProperties.SurfaceScale">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseProperties.Color">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseProperties.KernelUnitLength">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseProperties.ScaleMode">
            <summary>	
            D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DistantDiffuseScaleMode">
            <summary>	
            D2D1_DISTANTDIFFUSE_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseScaleMode.NearestNeighbor">
            <summary>	
            D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseScaleMode.Linear">
            <summary>	
            D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseScaleMode.Cubic">
            <summary>	
            D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseScaleMode.MultiSampleLinear">
            <summary>	
            D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseScaleMode.Anisotropic">
            <summary>	
            D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantDiffuseScaleMode.HighQualityCubic">
            <summary>	
            D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DistantSpecularProperties">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.Azimuth">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_AZIMUTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.Elevation">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_ELEVATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.SpecularExponent">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.SpecularConstant">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.SurfaceScale">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.Color">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.KernelUnitLength">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularProperties.ScaleMode">
            <summary>	
            D2D1_DISTANTSPECULAR_PROP_SCALE_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DistantSpecularScaleMode">
            <summary>	
            D2D1_DISTANTSPECULAR_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularScaleMode.NearestNeighbor">
            <summary>	
            D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularScaleMode.Linear">
            <summary>	
            D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularScaleMode.Cubic">
            <summary>	
            D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularScaleMode.MultiSampleLinear">
            <summary>	
            D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularScaleMode.Anisotropic">
            <summary>	
            D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DistantSpecularScaleMode.HighQualityCubic">
            <summary>	
            D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DpiCompensationInterpolationMode">
            <summary>	
            D2D1_DPICOMPENSATION_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationInterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationInterpolationMode.Linear">
            <summary>	
            D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationInterpolationMode.Cubic">
            <summary>	
            D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationInterpolationMode.MultiSampleLinear">
            <summary>	
            D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationInterpolationMode.Anisotropic">
            <summary>	
            D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationInterpolationMode.HighQualityCubic">
            <summary>	
            D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DpiCompensationProperties">
            <summary>	
            D2D1_DPICOMPENSATION_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationProperties.InterpolationMode">
            <summary>	
            D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationProperties.BorderMode">
            <summary>	
            D2D1_DPICOMPENSATION_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DpiCompensationProperties.InputDpi">
            <summary>	
            D2D1_DPICOMPENSATION_PROP_INPUT_DPI	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawTextOptions">
            <summary>	
            D2D1_DRAW_TEXT_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawTextOptions.NoSnap">
            <summary>	
            D2D1_DRAW_TEXT_OPTIONS_NO_SNAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawTextOptions.Clip">
            <summary>	
            D2D1_DRAW_TEXT_OPTIONS_CLIP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawTextOptions.EnableColorFont">
            <summary>	
            D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawTextOptions.None">
            <summary>	
            D2D1_DRAW_TEXT_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ExtendMode">
            <summary>	
            D2D1_EXTEND_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ExtendMode.Clamp">
            <summary>	
            D2D1_EXTEND_MODE_CLAMP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ExtendMode.Wrap">
            <summary>	
            D2D1_EXTEND_MODE_WRAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ExtendMode.Mirror">
            <summary>	
            D2D1_EXTEND_MODE_MIRROR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FactoryType">
            <summary>	
            D2D1_FACTORY_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FactoryType.SingleThreaded">
            <summary>	
            D2D1_FACTORY_TYPE_SINGLE_THREADED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FactoryType.MultiThreaded">
            <summary>	
            D2D1_FACTORY_TYPE_MULTI_THREADED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Feature">
            <summary>	
            D2D1_FEATURE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Feature.Doubles">
            <summary>	
            D2D1_FEATURE_DOUBLES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Feature.D3D10XHardwareOptions">
            <summary>	
            D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FeatureLevel">
            <summary>	
            D2D1_FEATURE_LEVEL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FeatureLevel.Level_DEFAULT">
            <summary>	
            D2D1_FEATURE_LEVEL_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FeatureLevel.Level_9">
            <summary>	
            D2D1_FEATURE_LEVEL_9	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FeatureLevel.Level_10">
            <summary>	
            D2D1_FEATURE_LEVEL_10	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FigureBegin">
            <summary>	
            D2D1_FIGURE_BEGIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FigureBegin.Filled">
            <summary>	
            D2D1_FIGURE_BEGIN_FILLED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FigureBegin.Hollow">
            <summary>	
            D2D1_FIGURE_BEGIN_HOLLOW	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FigureEnd">
            <summary>	
            D2D1_FIGURE_END	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FigureEnd.Open">
            <summary>	
            D2D1_FIGURE_END_OPEN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FigureEnd.Closed">
            <summary>	
            D2D1_FIGURE_END_CLOSED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FillMode">
            <summary>	
            D2D1_FILL_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FillMode.Alternate">
            <summary>	
            D2D1_FILL_MODE_ALTERNATE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FillMode.Winding">
            <summary>	
            D2D1_FILL_MODE_WINDING	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Filter">
            <summary>	
            D2D1_FILTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumMagMipPoint">
            <summary>	
            D2D1_FILTER_MIN_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumMagPointMipLinear">
            <summary>	
            D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumPointMagLinearMipPoint">
            <summary>	
            D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumPointMagMipLinear">
            <summary>	
            D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumLinearMagMipPoint">
            <summary>	
            D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumLinearMagPointMipLinear">
            <summary>	
            D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumMagLinearMipPoint">
            <summary>	
            D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.MinimumMagMipLinear">
            <summary>	
            D2D1_FILTER_MIN_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Filter.Anisotropic">
            <summary>	
            D2D1_FILTER_ANISOTROPIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FloodProperties">
            <summary>	
            D2D1_FLOOD_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FloodProperties.Color">
            <summary>	
            D2D1_FLOOD_PROP_COLOR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Gamma">
            <summary>	
            D2D1_GAMMA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Gamma.StandardRgb">
            <summary>	
            D2D1_GAMMA_2_2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Gamma.Linear">
            <summary>	
            D2D1_GAMMA_1_0	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GammaTransferProperties">
            <summary>	
            D2D1_GAMMATRANSFER_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.RedAmplitude">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.RedExponent">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_RED_EXPONENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.RedOffset">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_RED_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.RedDisable">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_RED_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.GreenAmplitude">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.GreenExponent">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.GreenOffset">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.GreenDisable">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.BlueAmplitude">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.BlueExponent">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.BlueOffset">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.BlueDisable">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.AlphaAmplitude">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.AlphaExponent">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.AlphaOffset">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.AlphaDisable">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GammaTransferProperties.ClampOutput">
            <summary>	
            D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GaussianBlurOptimization">
            <summary>	
            D2D1_GAUSSIANBLUR_OPTIMIZATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GaussianBlurOptimization.Speed">
            <summary>	
            D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GaussianBlurOptimization.Balanced">
            <summary>	
            D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GaussianBlurOptimization.Quality">
            <summary>	
            D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GaussianBlurProperties">
            <summary>	
            D2D1_GAUSSIANBLUR_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GaussianBlurProperties.StandardDeviation">
            <summary>	
            D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GaussianBlurProperties.Optimization">
            <summary>	
            D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GaussianBlurProperties.BorderMode">
            <summary>	
            D2D1_GAUSSIANBLUR_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GeometryRelation">
            <summary>	
            D2D1_GEOMETRY_RELATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GeometryRelation.Unknown">
            <summary>	
            D2D1_GEOMETRY_RELATION_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GeometryRelation.Disjoint">
            <summary>	
            D2D1_GEOMETRY_RELATION_DISJOINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GeometryRelation.IsContained">
            <summary>	
            D2D1_GEOMETRY_RELATION_IS_CONTAINED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GeometryRelation.Contains">
            <summary>	
            D2D1_GEOMETRY_RELATION_CONTAINS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GeometryRelation.Overlap">
            <summary>	
            D2D1_GEOMETRY_RELATION_OVERLAP	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GeometrySimplificationOption">
            <summary>	
            D2D1_GEOMETRY_SIMPLIFICATION_OPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GeometrySimplificationOption.CubicsAndLines">
            <summary>	
            D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GeometrySimplificationOption.Lines">
            <summary>	
            D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.HistogramProperties">
            <summary>	
            D2D1_HISTOGRAM_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.HistogramProperties.NumBins">
            <summary>	
            D2D1_HISTOGRAM_PROP_NUM_BINS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.HistogramProperties.ChannelSelect">
            <summary>	
            D2D1_HISTOGRAM_PROP_CHANNEL_SELECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.HistogramProperties.HistogramOutput">
            <summary>	
            D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.HueRotationProperties">
            <summary>	
            D2D1_HUEROTATION_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.HueRotationProperties.Angle">
            <summary>	
            D2D1_HUEROTATION_PROP_ANGLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.InterpolationMode">
            <summary>	
            D2D1_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationMode.Linear">
            <summary>	
            D2D1_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationMode.Cubic">
            <summary>	
            D2D1_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationMode.MultiSampleLinear">
            <summary>	
            D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationMode.Anisotropic">
            <summary>	
            D2D1_INTERPOLATION_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationMode.HighQualityCubic">
            <summary>	
            D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.InterpolationModeDefinition">
            <summary>	
            D2D1_ENUM_0	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.NearestNeighbor">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.Linear">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.Cubic">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.MultiSampleLinear">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.Anisotropic">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.HighQualityCubic">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.Fant">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_FANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InterpolationModeDefinition.MipmapLinear">
            <summary>	
            D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.LayerOptions">
            <summary>	
            D2D1_LAYER_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerOptions.None">
            <summary>	
            D2D1_LAYER_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerOptions.InitializeForCleartype">
            <summary>	
            D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.LayerOptions1">
            <summary>	
            D2D1_LAYER_OPTIONS1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerOptions1.None">
            <summary>	
            D2D1_LAYER_OPTIONS1_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerOptions1.InitializeFromBackground">
            <summary>	
            D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerOptions1.IgnoreAlpha">
            <summary>	
            D2D1_LAYER_OPTIONS1_IGNORE_ALPHA	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.LinearTransferProperties">
            <summary>	
            D2D1_LINEARTRANSFER_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.RedYIntercept">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.RedSlope">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_RED_SLOPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.RedDisable">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_RED_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.GreenYIntercept">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.GreenSlope">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.GreenDisable">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.BlueYIntercept">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.BlueSlope">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.BlueDisable">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.AlphaYIntercept">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.AlphaSlope">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.AlphaDisable">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearTransferProperties.ClampOutput">
            <summary>	
            D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.LineJoin">
            <summary>	
            D2D1_LINE_JOIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LineJoin.Miter">
            <summary>	
            D2D1_LINE_JOIN_MITER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LineJoin.Bevel">
            <summary>	
            D2D1_LINE_JOIN_BEVEL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LineJoin.Round">
            <summary>	
            D2D1_LINE_JOIN_ROUND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LineJoin.MiterOrBevel">
            <summary>	
            D2D1_LINE_JOIN_MITER_OR_BEVEL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.MapOptions">
            <summary>	
            D2D1_MAP_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MapOptions.None">
            <summary>	
            D2D1_MAP_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MapOptions.Read">
            <summary>	
            D2D1_MAP_OPTIONS_READ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MapOptions.Write">
            <summary>	
            D2D1_MAP_OPTIONS_WRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MapOptions.Discard">
            <summary>	
            D2D1_MAP_OPTIONS_DISCARD	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.MorphologyMode">
            <summary>	
            D2D1_MORPHOLOGY_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MorphologyMode.Erode">
            <summary>	
            D2D1_MORPHOLOGY_MODE_ERODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MorphologyMode.Dilate">
            <summary>	
            D2D1_MORPHOLOGY_MODE_DILATE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.MorphologyProperties">
            <summary>	
            D2D1_MORPHOLOGY_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MorphologyProperties.Mode">
            <summary>	
            D2D1_MORPHOLOGY_PROP_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MorphologyProperties.Width">
            <summary>	
            D2D1_MORPHOLOGY_PROP_WIDTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MorphologyProperties.Height">
            <summary>	
            D2D1_MORPHOLOGY_PROP_HEIGHT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.OpacityMaskContent">
            <summary>	
            D2D1_OPACITY_MASK_CONTENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.OpacityMaskContent.Graphics">
            <summary>	
            D2D1_OPACITY_MASK_CONTENT_GRAPHICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.OpacityMaskContent.TextNatural">
            <summary>	
            D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.OpacityMaskContent.TextGdiCompatible">
            <summary>	
            D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.OpacityMetadataProperties">
            <summary>	
            D2D1_OPACITYMETADATA_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.OpacityMetadataProperties.InputOpaqueRectangle">
            <summary>	
            D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PathSegment">
            <summary>	
            D2D1_PATH_SEGMENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PathSegment.None">
            <summary>	
            D2D1_PATH_SEGMENT_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PathSegment.ForceUnstroked">
            <summary>	
            D2D1_PATH_SEGMENT_FORCE_UNSTROKED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PathSegment.ForceRoundLineJoin">
            <summary>	
            D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PerspectiveTransform3DInteroplationMode">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DInteroplationMode.NearestNeighbor">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DInteroplationMode.Linear">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DInteroplationMode.Cubic">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DInteroplationMode.MultiSampleLinear">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DInteroplationMode.Anisotropic">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.InterpolationMode">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.BorderMode">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.Depth">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.PerspectiveOrigin">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.LocalOffset">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.GlobalOffset">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.RotationOrigin">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PerspectiveTransform3DProperties.Rotation">
            <summary>	
            D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PixelOptions">
            <summary>	
            D2D1_PIXEL_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PixelOptions.None">
            <summary>	
            D2D1_PIXEL_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PixelOptions.TrivialSampling">
            <summary>	
            D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PointDiffuseProperties">
            <summary>	
            D2D1_POINTDIFFUSE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseProperties.LightPosition">
            <summary>	
            D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseProperties.DiffuseConstant">
            <summary>	
            D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseProperties.SurfaceScale">
            <summary>	
            D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseProperties.Color">
            <summary>	
            D2D1_POINTDIFFUSE_PROP_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseProperties.KernelUnitLength">
            <summary>	
            D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseProperties.ScaleMode">
            <summary>	
            D2D1_POINTDIFFUSE_PROP_SCALE_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PointDiffuseScaleMode">
            <summary>	
            D2D1_POINTDIFFUSE_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseScaleMode.NearestNeighbor">
            <summary>	
            D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseScaleMode.Linear">
            <summary>	
            D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseScaleMode.Cubic">
            <summary>	
            D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseScaleMode.MultiSampleLinear">
            <summary>	
            D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseScaleMode.Anisotropic">
            <summary>	
            D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDiffuseScaleMode.HighQualityCubic">
            <summary>	
            D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PointSpecularProperties">
            <summary>	
            D2D1_POINTSPECULAR_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularProperties.LightPosition">
            <summary>	
            D2D1_POINTSPECULAR_PROP_LIGHT_POSITION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularProperties.SpecularExponent">
            <summary>	
            D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularProperties.SpecularConstant">
            <summary>	
            D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularProperties.SurfaceScale">
            <summary>	
            D2D1_POINTSPECULAR_PROP_SURFACE_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularProperties.Color">
            <summary>	
            D2D1_POINTSPECULAR_PROP_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularProperties.KernelUnitLength">
            <summary>	
            D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularProperties.ScaleMode">
            <summary>	
            D2D1_POINTSPECULAR_PROP_SCALE_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PointSpecularScaleMode">
            <summary>	
            D2D1_POINTSPECULAR_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularScaleMode.NearestNeighbor">
            <summary>	
            D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularScaleMode.Linear">
            <summary>	
            D2D1_POINTSPECULAR_SCALE_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularScaleMode.Cubic">
            <summary>	
            D2D1_POINTSPECULAR_SCALE_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularScaleMode.MultiSampleLinear">
            <summary>	
            D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularScaleMode.Anisotropic">
            <summary>	
            D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointSpecularScaleMode.HighQualityCubic">
            <summary>	
            D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PresentOptions">
            <summary>	
            D2D1_PRESENT_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PresentOptions.None">
            <summary>	
            D2D1_PRESENT_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PresentOptions.RetainContents">
            <summary>	
            D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PresentOptions.Immediately">
            <summary>	
            D2D1_PRESENT_OPTIONS_IMMEDIATELY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PrimitiveBlend">
            <summary>	
            D2D1_PRIMITIVE_BLEND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrimitiveBlend.SourceOver">
            <summary>	
            D2D1_PRIMITIVE_BLEND_SOURCE_OVER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrimitiveBlend.Copy">
            <summary>	
            D2D1_PRIMITIVE_BLEND_COPY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrimitiveBlend.Minimum">
            <summary>	
            D2D1_PRIMITIVE_BLEND_MIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrimitiveBlend.Add">
            <summary>	
            D2D1_PRIMITIVE_BLEND_ADD	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PrintFontSubsetMode">
            <summary>	
            D2D1_PRINT_FONT_SUBSET_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrintFontSubsetMode.Default">
            <summary>	
            D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrintFontSubsetMode.Eachpage">
            <summary>	
            D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrintFontSubsetMode.None">
            <summary>	
            D2D1_PRINT_FONT_SUBSET_MODE_NONE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Property">
            <summary>	
            D2D1_PROPERTY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.Clsid">
            <summary>	
            D2D1_PROPERTY_CLSID	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.DisplayName">
            <summary>	
            D2D1_PROPERTY_DISPLAYNAME	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.Author">
            <summary>	
            D2D1_PROPERTY_AUTHOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.Category">
            <summary>	
            D2D1_PROPERTY_CATEGORY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.Description">
            <summary>	
            D2D1_PROPERTY_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.Inputs">
            <summary>	
            D2D1_PROPERTY_INPUTS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.Cached">
            <summary>	
            D2D1_PROPERTY_CACHED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.Precision">
            <summary>	
            D2D1_PROPERTY_PRECISION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.MinimumInputs">
            <summary>	
            D2D1_PROPERTY_MIN_INPUTS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Property.MaximumInputs">
            <summary>	
            D2D1_PROPERTY_MAX_INPUTS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PropertyType">
            <summary>	
            D2D1_PROPERTY_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Unknown">
            <summary>	
            D2D1_PROPERTY_TYPE_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.String">
            <summary>	
            D2D1_PROPERTY_TYPE_STRING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Bool">
            <summary>	
            D2D1_PROPERTY_TYPE_BOOL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.UInt32">
            <summary>	
            D2D1_PROPERTY_TYPE_UINT32	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Int32">
            <summary>	
            D2D1_PROPERTY_TYPE_INT32	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Float">
            <summary>	
            D2D1_PROPERTY_TYPE_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Vector2">
            <summary>	
            D2D1_PROPERTY_TYPE_VECTOR2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Vector3">
            <summary>	
            D2D1_PROPERTY_TYPE_VECTOR3	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Vector4">
            <summary>	
            D2D1_PROPERTY_TYPE_VECTOR4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Blob">
            <summary>	
            D2D1_PROPERTY_TYPE_BLOB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.IUnknown">
            <summary>	
            D2D1_PROPERTY_TYPE_IUNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Enum">
            <summary>	
            D2D1_PROPERTY_TYPE_ENUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Array">
            <summary>	
            D2D1_PROPERTY_TYPE_ARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Clsid">
            <summary>	
            D2D1_PROPERTY_TYPE_CLSID	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Matrix3x2">
            <summary>	
            D2D1_PROPERTY_TYPE_MATRIX_3X2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Matrix4x3">
            <summary>	
            D2D1_PROPERTY_TYPE_MATRIX_4X3	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Matrix4x4">
            <summary>	
            D2D1_PROPERTY_TYPE_MATRIX_4X4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.Matrix5x4">
            <summary>	
            D2D1_PROPERTY_TYPE_MATRIX_5X4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PropertyType.ColorContext">
            <summary>	
            D2D1_PROPERTY_TYPE_COLOR_CONTEXT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RenderingPriority">
            <summary>	
            D2D1_RENDERING_PRIORITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderingPriority.Normal">
            <summary>	
            D2D1_RENDERING_PRIORITY_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderingPriority.Low">
            <summary>	
            D2D1_RENDERING_PRIORITY_LOW	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RenderTargetType">
            <summary>	
            D2D1_RENDER_TARGET_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetType.Default">
            <summary>	
            D2D1_RENDER_TARGET_TYPE_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetType.Software">
            <summary>	
            D2D1_RENDER_TARGET_TYPE_SOFTWARE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetType.Hardware">
            <summary>	
            D2D1_RENDER_TARGET_TYPE_HARDWARE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RenderTargetUsage">
            <summary>	
            D2D1_RENDER_TARGET_USAGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetUsage.None">
            <summary>	
            D2D1_RENDER_TARGET_USAGE_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetUsage.ForceBitmapRemoting">
            <summary>	
            D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetUsage.GdiCompatible">
            <summary>	
            D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SaturationProperties">
            <summary>	
            D2D1_SATURATION_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SaturationProperties.Saturation">
            <summary>	
            D2D1_SATURATION_PROP_SATURATION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ScaleInterpolationMode">
            <summary>	
            D2D1_SCALE_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleInterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleInterpolationMode.Linear">
            <summary>	
            D2D1_SCALE_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleInterpolationMode.Cubic">
            <summary>	
            D2D1_SCALE_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleInterpolationMode.MultiSampleLinear">
            <summary>	
            D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleInterpolationMode.Anisotropic">
            <summary>	
            D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleInterpolationMode.HighQualityCubic">
            <summary>	
            D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ScaleProperties">
            <summary>	
            D2D1_SCALE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleProperties.Scale">
            <summary>	
            D2D1_SCALE_PROP_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleProperties.CenterPoint">
            <summary>	
            D2D1_SCALE_PROP_CENTER_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleProperties.InterpolationMode">
            <summary>	
            D2D1_SCALE_PROP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleProperties.BorderMode">
            <summary>	
            D2D1_SCALE_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ScaleProperties.Sharpness">
            <summary>	
            D2D1_SCALE_PROP_SHARPNESS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ShadowOptimization">
            <summary>	
            D2D1_SHADOW_OPTIMIZATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ShadowOptimization.Speed">
            <summary>	
            D2D1_SHADOW_OPTIMIZATION_SPEED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ShadowOptimization.Balanced">
            <summary>	
            D2D1_SHADOW_OPTIMIZATION_BALANCED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ShadowOptimization.Quality">
            <summary>	
            D2D1_SHADOW_OPTIMIZATION_QUALITY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ShadowProperties">
            <summary>	
            D2D1_SHADOW_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ShadowProperties.BlurStandardDeviation">
            <summary>	
            D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ShadowProperties.Color">
            <summary>	
            D2D1_SHADOW_PROP_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ShadowProperties.Optimization">
            <summary>	
            D2D1_SHADOW_PROP_OPTIMIZATION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SpotDiffuseProperties">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.LightPosition">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.PointsAt">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_POINTS_AT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.Focus">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_FOCUS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.LimitingConeAngle">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.DiffuseConstant">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.SurfaceScale">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.Color">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.KernelUnitLength">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseProperties.ScaleMode">
            <summary>	
            D2D1_SPOTDIFFUSE_PROP_SCALE_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SpotDiffuseScaleMode">
            <summary>	
            D2D1_SPOTDIFFUSE_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseScaleMode.NearestNeighbor">
            <summary>	
            D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseScaleMode.Linear">
            <summary>	
            D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseScaleMode.Cubic">
            <summary>	
            D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseScaleMode.MultiSampleLinear">
            <summary>	
            D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseScaleMode.Anisotropic">
            <summary>	
            D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotDiffuseScaleMode.HighQualityCubic">
            <summary>	
            D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SpotSpecularProperties">
            <summary>	
            D2D1_SPOTSPECULAR_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.LightPosition">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.PointsAt">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_POINTS_AT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.Focus">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_FOCUS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.LimitingConeAngle">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.SpecularExponent">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.SpecularConstant">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.SurfaceScale">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.Color">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.KernelUnitLength">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularProperties.ScaleMode">
            <summary>	
            D2D1_SPOTSPECULAR_PROP_SCALE_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SpotSpecularScaleMode">
            <summary>	
            D2D1_SPOTSPECULAR_SCALE_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularScaleMode.NearestNeighbor">
            <summary>	
            D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularScaleMode.Linear">
            <summary>	
            D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularScaleMode.Cubic">
            <summary>	
            D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularScaleMode.MultiSampleLinear">
            <summary>	
            D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularScaleMode.Anisotropic">
            <summary>	
            D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SpotSpecularScaleMode.HighQualityCubic">
            <summary>	
            D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.StrokeTransformType">
            <summary>	
            D2D1_STROKE_TRANSFORM_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeTransformType.Normal">
            <summary>	
            D2D1_STROKE_TRANSFORM_TYPE_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeTransformType.Fixed">
            <summary>	
            D2D1_STROKE_TRANSFORM_TYPE_FIXED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeTransformType.Hairline">
            <summary>	
            D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SubProperty">
            <summary>	
            D2D1_SUBPROPERTY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SubProperty.DisplayName">
            <summary>	
            D2D1_SUBPROPERTY_DISPLAYNAME	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SubProperty.Isreadonly">
            <summary>	
            D2D1_SUBPROPERTY_ISREADONLY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SubProperty.Minimum">
            <summary>	
            D2D1_SUBPROPERTY_MIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SubProperty.Maximum">
            <summary>	
            D2D1_SUBPROPERTY_MAX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SubProperty.Default">
            <summary>	
            D2D1_SUBPROPERTY_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SubProperty.Fields">
            <summary>	
            D2D1_SUBPROPERTY_FIELDS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SubProperty.Index">
            <summary>	
            D2D1_SUBPROPERTY_INDEX	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SweepDirection">
            <summary>	
            D2D1_SWEEP_DIRECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SweepDirection.CounterClockwise">
            <summary>	
            D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.SweepDirection.Clockwise">
            <summary>	
            D2D1_SWEEP_DIRECTION_CLOCKWISE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TableTransferProperties">
            <summary>	
            D2D1_TABLETRANSFER_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.RedTable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_RED_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.RedDisable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_RED_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.GreenTable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_GREEN_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.GreenDisable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_GREEN_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.BlueTable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_BLUE_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.BlueDisable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_BLUE_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.AlphaTable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_ALPHA_TABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.AlphaDisable">
            <summary>	
            D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TableTransferProperties.ClampOutput">
            <summary>	
            D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TextAntialiasMode">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TextAntialiasMode.Default">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TextAntialiasMode.Cleartype">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TextAntialiasMode.Grayscale">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TextAntialiasMode.Aliased">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE_ALIASED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ThreadingMode">
            <summary>	
            D2D1_THREADING_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ThreadingMode.SingleThreaded">
            <summary>	
            D2D1_THREADING_MODE_SINGLE_THREADED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ThreadingMode.MultiThreaded">
            <summary>	
            D2D1_THREADING_MODE_MULTI_THREADED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TileProperties">
            <summary>	
            D2D1_TILE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TileProperties.Rectangle">
            <summary>	
            D2D1_TILE_PROP_RECT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Transform3DInterpolationMode">
            <summary>	
            D2D1_3DTRANSFORM_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DInterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DInterpolationMode.Linear">
            <summary>	
            D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DInterpolationMode.Cubic">
            <summary>	
            D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DInterpolationMode.MultiSampleLinear">
            <summary>	
            D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DInterpolationMode.Anisotropic">
            <summary>	
            D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Transform3DProperties">
            <summary>	
            D2D1_3DTRANSFORM_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DProperties.InterpolationMode">
            <summary>	
            D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DProperties.BorderMode">
            <summary>	
            D2D1_3DTRANSFORM_PROP_BORDER_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Transform3DProperties.TransformMatrix">
            <summary>	
            D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TurbulenceNoise">
            <summary>	
            D2D1_TURBULENCE_NOISE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceNoise.FractalSum">
            <summary>	
            D2D1_TURBULENCE_NOISE_FRACTAL_SUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceNoise.Turbulence">
            <summary>	
            D2D1_TURBULENCE_NOISE_TURBULENCE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TurbulenceProperties">
            <summary>	
            D2D1_TURBULENCE_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceProperties.Offset">
            <summary>	
            D2D1_TURBULENCE_PROP_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceProperties.Size">
            <summary>	
            D2D1_TURBULENCE_PROP_SIZE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceProperties.BaseFrequency">
            <summary>	
            D2D1_TURBULENCE_PROP_BASE_FREQUENCY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceProperties.NumOctaves">
            <summary>	
            D2D1_TURBULENCE_PROP_NUM_OCTAVES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceProperties.Seed">
            <summary>	
            D2D1_TURBULENCE_PROP_SEED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceProperties.Noise">
            <summary>	
            D2D1_TURBULENCE_PROP_NOISE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.TurbulenceProperties.Stitchable">
            <summary>	
            D2D1_TURBULENCE_PROP_STITCHABLE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.UnitMode">
            <summary>	
            D2D1_UNIT_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.UnitMode.Dips">
            <summary>	
            D2D1_UNIT_MODE_DIPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.UnitMode.Pixels">
            <summary>	
            D2D1_UNIT_MODE_PIXELS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.VertexOptions">
            <summary>	
            D2D1_VERTEX_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexOptions.None">
            <summary>	
            D2D1_VERTEX_OPTIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexOptions.DoNotClear">
            <summary>	
            D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexOptions.UseDepthBuffer">
            <summary>	
            D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexOptions.AssumeNoOverlap">
            <summary>	
            D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.VertexUsage">
            <summary>	
            D2D1_VERTEX_USAGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexUsage.Static">
            <summary>	
            D2D1_VERTEX_USAGE_STATIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexUsage.Dynamic">
            <summary>	
            D2D1_VERTEX_USAGE_DYNAMIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.WindowState">
            <summary>	
            D2D1_WINDOW_STATE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.WindowState.None">
            <summary>	
            D2D1_WINDOW_STATE_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.WindowState.Occluded">
            <summary>	
            D2D1_WINDOW_STATE_OCCLUDED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.YcbcrChromaSubSampling">
            <summary>	
            D2D1_YCBCR_CHROMA_SUBSAMPLING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrChromaSubSampling.Auto">
            <summary>	
            D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrChromaSubSampling.Both">
            <summary>	
            D2D1_YCBCR_CHROMA_SUBSAMPLING_420	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrChromaSubSampling.Horizontal">
            <summary>	
            D2D1_YCBCR_CHROMA_SUBSAMPLING_422	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrChromaSubSampling.None">
            <summary>	
            D2D1_YCBCR_CHROMA_SUBSAMPLING_444	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrChromaSubSampling.Vertical">
            <summary>	
            D2D1_YCBCR_CHROMA_SUBSAMPLING_440	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.YcbcrInterpolationMode">
            <summary>	
            D2D1_YCBCR_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrInterpolationMode.NearestNeighbor">
            <summary>	
            D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrInterpolationMode.Linear">
            <summary>	
            D2D1_YCBCR_INTERPOLATION_MODE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrInterpolationMode.Cubic">
            <summary>	
            D2D1_YCBCR_INTERPOLATION_MODE_CUBIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrInterpolationMode.MultiSampleLinear">
            <summary>	
            D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrInterpolationMode.Anisotropic">
            <summary>	
            D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YcbcrInterpolationMode.HighQualityCubic">
            <summary>	
            D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.YCbCrProperties">
            <summary>	
            D2D1_YCBCR_PROP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YCbCrProperties.ChromaSubSampling">
            <summary>	
            D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YCbCrProperties.TransformMatrix">
            <summary>	
            D2D1_YCBCR_PROP_TRANSFORM_MATRIX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.YCbCrProperties.InterpolationMode">
            <summary>	
            D2D1_YCBCR_PROP_INTERPOLATION_MODE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.D2D1">
            <summary>
            Direct2D functions.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.D2D1.DefaultFlatteningTolerance">
            <summary>
            The default tolerance for geometric flattening operations.
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370975%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.IsMatrixInvertible(C1.Util.DX.Matrix3x2@)">
            <summary>	
            BOOL D2D1IsMatrixInvertible([In] const D2D_MATRIX_3X2_F* matrix)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.InvertMatrix(C1.Util.DX.Matrix3x2@)">
            <summary>	
            BOOL D2D1InvertMatrix([InOut] D2D_MATRIX_3X2_F* matrix)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.CreateFactory(C1.Util.DX.Direct2D.FactoryType,System.Guid,System.Nullable{C1.Util.DX.Direct2D.FactoryOptions},System.IntPtr@)">
            <summary>	
            HRESULT D2D1CreateFactory([In] D2D1_FACTORY_TYPE factoryType,[In] const GUID&amp; riid,[In, Optional] const D2D1_FACTORY_OPTIONS* pFactoryOptions,[Out] void** ppIFactory)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.MakeSkewMatrix(System.Single,System.Single,C1.Util.DX.Point2F,C1.Util.DX.Matrix3x2@)">
            <summary>	
            void D2D1MakeSkewMatrix([In] float angleX,[In] float angleY,[In] D2D_POINT_2F center,[Out] D2D_MATRIX_3X2_F* matrix)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.MakeRotateMatrix(System.Single,C1.Util.DX.Point2F,C1.Util.DX.Matrix3x2@)">
            <summary>	
            void D2D1MakeRotateMatrix([In] float angle,[In] D2D_POINT_2F center,[Out] D2D_MATRIX_3X2_F* matrix)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.Tan(System.Single)">
            <summary>	
            float D2D1Tan([In] float angle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.Vec3Length(System.Single,System.Single,System.Single)">
            <summary>	
            float D2D1Vec3Length([In] float x,[In] float y,[In] float z)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.SinCos(System.Single,System.Single@,System.Single@)">
            <summary>	
            void D2D1SinCos([In] float angle,[Out] float* s,[Out] float* c)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.CreateDevice(C1.Util.DX.DXGI.Device,System.Nullable{C1.Util.DX.Direct2D.CreationProperties})">
            <summary>	
            HRESULT D2D1CreateDevice([In] IDXGIDevice* dxgiDevice,[In, Optional] const D2D1_CREATION_PROPERTIES* creationProperties,[Out, Fast] ID2D1Device** d2dDevice)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.ConvertColorSpace(C1.Util.DX.Direct2D.ColorSpace,C1.Util.DX.Direct2D.ColorSpace,C1.Util.DX.ColorF)">
            <summary>	
            D2D_COLOR_F D2D1ConvertColorSpace([In] D2D1_COLOR_SPACE sourceColorSpace,[In] D2D1_COLOR_SPACE destinationColorSpace,[In] const D2D_COLOR_F* color)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.CreateDeviceContext(C1.Util.DX.DXGI.Surface,System.Nullable{C1.Util.DX.Direct2D.CreationProperties})">
            <summary>	
            HRESULT D2D1CreateDeviceContext([In] IDXGISurface* dxgiSurface,[In, Optional] const D2D1_CREATION_PROPERTIES* creationProperties,[Out, Fast] ID2D1DeviceContext** d2dDeviceContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.ComputeMaximumScaleFactor(C1.Util.DX.Matrix3x2@)">
            <summary>	
            float D2D1ComputeMaximumScaleFactor([In] const D2D_MATRIX_3X2_F* matrix)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.D2D1.ComputeFlatteningTolerance(C1.Util.DX.Matrix3x2@,System.Single,System.Single,System.Single)">
            <summary>
            Computes the appropriate flattening tolerance to pass to APIs that take a flattening tolerance (for instance, DeviceContext.CreateFilledGeometryRealization).
            </summary>
            <param name="matrix">The matrix that will be applied subsequently to the geometry being flattened.</param>
            <param name="dpiX">The horizontal DPI of the render target that the geometry will be rendered onto (a choice of 96 implies no DPI correction).</param>
            <param name="dpiY">The vertical DPI of the render target that the geometry will be rendered onto (a choice of 96 implies no DPI correction).</param>
            <param name="maxZoomFactor">The maximum amount of additional scaling (on top of any scaling implied by the matrix or the DPI) that will be applied to the geometry.</param>
            <returns>The flattening tolerance.</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.ResultCode">
            <summary>	
            D2D result codes.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.InvalidCall">
            <summary>
            D2DERR_INVALID_CALL
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.WrongFactory">
            <summary>
            D2DERR_WRONG_FACTORY
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.MaximumTextureSizeExceeded">
            <summary>
            D2DERR_MAX_TEXTURE_SIZE_EXCEEDED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.NoHardwareDevice">
            <summary>
            D2DERR_NO_HARDWARE_DEVICE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.WrongResourceDomain">
            <summary>
            D2DERR_WRONG_RESOURCE_DOMAIN
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.Win32Error">
            <summary>
            D2DERR_WIN32_ERROR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.NoSubProperties">
            <summary>
            D2DERR_NO_SUBPROPERTIES
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.PopCallDidNotMatchPush">
            <summary>
            D2DERR_POP_CALL_DID_NOT_MATCH_PUSH
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.PrintJobClosed">
            <summary>
            D2DERR_PRINT_JOB_CLOSED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.UnsupportedVersion">
            <summary>
            D2DERR_UNSUPPORTED_VERSION
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.IncompatibleBrushTypes">
            <summary>
            D2DERR_INCOMPATIBLE_BRUSH_TYPES
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.IntermediateTooLarge">
            <summary>
            D2DERR_INTERMEDIATE_TOO_LARGE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.RecreateTarget">
            <summary>
            D2DERR_RECREATE_TARGET
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.ZeroVector">
            <summary>
            D2DERR_ZERO_VECTOR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.ShaderCompileFailed">
            <summary>
            D2DERR_SHADER_COMPILE_FAILED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.ScannerFailed">
            <summary>
            D2DERR_SCANNER_FAILED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.TooManyShaderElements">
            <summary>
            D2DERR_TOO_MANY_SHADER_ELEMENTS
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.TextRendererNotReleased">
            <summary>
            D2DERR_TEXT_RENDERER_NOT_RELEASED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.CyclicGraph">
            <summary>
            D2DERR_CYCLIC_GRAPH
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.BitmapCannotDraw">
            <summary>
            D2DERR_BITMAP_CANNOT_DRAW
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.ScreenAccessDenied">
            <summary>
            D2DERR_SCREEN_ACCESS_DENIED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.InvalidInternalGraphConfiguration">
            <summary>
            D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.LayerAlreadyInUse">
            <summary>
            D2DERR_LAYER_ALREADY_IN_USE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.BitmapBoundAsTarget">
            <summary>
            D2DERR_BITMAP_BOUND_AS_TARGET
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.InternalError">
            <summary>
            D2DERR_INTERNAL_ERROR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.InvalidProperty">
            <summary>
            D2DERR_INVALID_PROPERTY
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.RenderTargetHasLayerOrCliprect">
            <summary>
            D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.TooManyTransformInputs">
            <summary>
            D2DERR_TOO_MANY_TRANSFORM_INPUTS
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.OutstandingBitmapReferences">
            <summary>
            D2DERR_OUTSTANDING_BITMAP_REFERENCES
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.InvalidTarget">
            <summary>
            D2DERR_INVALID_TARGET
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.WrongState">
            <summary>
            D2DERR_WRONG_STATE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.InvalidGraphConfiguration">
            <summary>
            D2DERR_INVALID_GRAPH_CONFIGURATION
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.DisplayStateInvalid">
            <summary>
            D2DERR_DISPLAY_STATE_INVALID
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.TextEffectIsWrongType">
            <summary>
            D2DERR_TEXT_EFFECT_IS_WRONG_TYPE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.UnsupportedOperation">
            <summary>
            D2DERR_UNSUPPORTED_OPERATION
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.PushPopUnbalanced">
            <summary>
            D2DERR_PUSH_POP_UNBALANCED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.DisplayFormatNotSupported">
            <summary>
            D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.OriginalTargetNotBound">
            <summary>
            D2DERR_ORIGINAL_TARGET_NOT_BOUND
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.PrintFormatNotSupported">
            <summary>
            D2DERR_PRINT_FORMAT_NOT_SUPPORTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.NotInitializeD">
            <summary>
            D2DERR_NOT_INITIALIZED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.EffectIsNotRegistered">
            <summary>
            D2DERR_EFFECT_IS_NOT_REGISTERED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.TargetNotGdiCompatible">
            <summary>
            D2DERR_TARGET_NOT_GDI_COMPATIBLE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.BadNumber">
            <summary>
            D2DERR_BAD_NUMBER
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.ExceedsMaximumBitmapSize">
            <summary>
            D2DERR_EXCEEDS_MAX_BITMAP_SIZE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct2D.ResultCode.InsufficientDeviceCapabilities">
            <summary>
            D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSink">
            <summary>	
            ID2D1CommandSink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.BeginDraw">
            <summary>	
            HRESULT ID2D1CommandSink::BeginDraw()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.EndDraw">
            <summary>	
            HRESULT ID2D1CommandSink::EndDraw()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.SetAntialiasMode(C1.Util.DX.Direct2D.AntialiasMode)">
            <summary>	
            HRESULT ID2D1CommandSink::SetAntialiasMode([In] D2D1_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.SetTags(System.Int64,System.Int64)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTags([In] unsigned longlong tag1,[In] unsigned longlong tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.SetTextAntialiasMode(C1.Util.DX.Direct2D.TextAntialiasMode)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTextAntialiasMode([In] D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.SetTextRenderingParams(C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.SetTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTransform([In] const D2D_MATRIX_3X2_F* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.SetPrimitiveBlend(C1.Util.DX.Direct2D.PrimitiveBlend)">
            <summary>	
            HRESULT ID2D1CommandSink::SetPrimitiveBlend([In] D2D1_PRIMITIVE_BLEND primitiveBlend)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.SetUnitMode(C1.Util.DX.Direct2D.UnitMode)">
            <summary>	
            HRESULT ID2D1CommandSink::SetUnitMode([In] D2D1_UNIT_MODE unitMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.Clear(System.Nullable{C1.Util.DX.ColorF})">
            <summary>	
            HRESULT ID2D1CommandSink::Clear([In, Optional] const D2D_COLOR_F* color)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.DrawGlyphRun(C1.Util.DX.Point2F,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,C1.Util.DX.Direct2D.Brush,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.DrawLine(C1.Util.DX.Point2F,C1.Util.DX.Point2F,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawLine([In] D2D_POINT_2F point0,[In] D2D_POINT_2F point1,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.DrawGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.DrawRectangle(C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.RectF},System.Single,C1.Util.DX.Direct2D.InterpolationMode,System.Nullable{C1.Util.DX.RectF},System.Nullable{C1.Util.DX.Matrix4x4})">
            <summary>	
            HRESULT ID2D1CommandSink::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_F* destinationRectangle,[In] float opacity,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D_RECT_F* sourceRectangle,[In, Optional] const D2D_MATRIX_4X4_F* perspectiveTransform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.DrawImage(C1.Util.DX.Direct2D.Image,System.Nullable{C1.Util.DX.Point2F},System.Nullable{C1.Util.DX.RectF},C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Direct2D.CompositeMode)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawImage([In] ID2D1Image* image,[In, Optional] const D2D_POINT_2F* targetOffset,[In, Optional] const D2D_RECT_F* imageRectangle,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In] D2D1_COMPOSITE_MODE compositeMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.DrawGdiMetafile(C1.Util.DX.Direct2D.GdiMetafile,System.Nullable{C1.Util.DX.Point2F})">
            <summary>	
            HRESULT ID2D1CommandSink::DrawGdiMetafile([In] ID2D1GdiMetafile* gdiMetafile,[In, Optional] const D2D_POINT_2F* targetOffset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.FillMesh(C1.Util.DX.Direct2D.Mesh,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            HRESULT ID2D1CommandSink::FillMesh([In] ID2D1Mesh* mesh,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.FillOpacityMask(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.Brush,System.Nullable{C1.Util.DX.RectF},System.Nullable{C1.Util.DX.RectF})">
            <summary>	
            HRESULT ID2D1CommandSink::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.FillGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            HRESULT ID2D1CommandSink::FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.FillRectangle(C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            HRESULT ID2D1CommandSink::FillRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.PushAxisAlignedClip(C1.Util.DX.RectF,C1.Util.DX.Direct2D.AntialiasMode)">
            <summary>	
            HRESULT ID2D1CommandSink::PushAxisAlignedClip([In] const D2D_RECT_F* clipRect,[In] D2D1_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.PushLayer(C1.Util.DX.Direct2D.LayerParameters1@,C1.Util.DX.Direct2D.Layer)">
            <summary>	
            HRESULT ID2D1CommandSink::PushLayer([In] const D2D1_LAYER_PARAMETERS1* layerParameters1,[In, Optional] ID2D1Layer* layer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.PopAxisAlignedClip">
            <summary>	
            HRESULT ID2D1CommandSink::PopAxisAlignedClip()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink.PopLayer">
            <summary>	
            HRESULT ID2D1CommandSink::PopLayer()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSink1">
            <summary>	
            ID2D1CommandSink1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink1.SetPrimitiveBlend1(C1.Util.DX.Direct2D.PrimitiveBlend)">
            <summary>	
            HRESULT ID2D1CommandSink1::SetPrimitiveBlend1([In] D2D1_PRIMITIVE_BLEND primitiveBlend)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSink1Native">
            <summary>	
            ID2D1CommandSink1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CommandSinkNative">
            <summary>	
            ID2D1CommandSink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.CommandSinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.CommandSinkNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.CommandSinkNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.BeginDraw">
            <summary>	
            HRESULT ID2D1CommandSink::BeginDraw()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.EndDraw">
            <summary>	
            HRESULT ID2D1CommandSink::EndDraw()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.SetAntialiasMode(C1.Util.DX.Direct2D.AntialiasMode)">
            <summary>	
            HRESULT ID2D1CommandSink::SetAntialiasMode([In] D2D1_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.SetTags(System.Int64,System.Int64)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTags([In] unsigned longlong tag1,[In] unsigned longlong tag2)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.SetTextAntialiasMode(C1.Util.DX.Direct2D.TextAntialiasMode)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTextAntialiasMode([In] D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.SetTextRenderingParams(C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.SetTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            HRESULT ID2D1CommandSink::SetTransform([In] const D2D_MATRIX_3X2_F* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.SetPrimitiveBlend(C1.Util.DX.Direct2D.PrimitiveBlend)">
            <summary>	
            HRESULT ID2D1CommandSink::SetPrimitiveBlend([In] D2D1_PRIMITIVE_BLEND primitiveBlend)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.SetUnitMode(C1.Util.DX.Direct2D.UnitMode)">
            <summary>	
            HRESULT ID2D1CommandSink::SetUnitMode([In] D2D1_UNIT_MODE unitMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.Clear(System.Nullable{C1.Util.DX.ColorF})">
            <summary>	
            HRESULT ID2D1CommandSink::Clear([In, Optional] const D2D_COLOR_F* color)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.DrawGlyphRun(C1.Util.DX.Point2F,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,C1.Util.DX.Direct2D.Brush,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.DrawLine(C1.Util.DX.Point2F,C1.Util.DX.Point2F,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawLine([In] D2D_POINT_2F point0,[In] D2D_POINT_2F point1,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.DrawGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.DrawRectangle(C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush,System.Single,C1.Util.DX.Direct2D.StrokeStyle)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.DrawBitmap(C1.Util.DX.Direct2D.Bitmap,System.Nullable{C1.Util.DX.RectF},System.Single,C1.Util.DX.Direct2D.InterpolationMode,System.Nullable{C1.Util.DX.RectF},System.Nullable{C1.Util.DX.Matrix4x4})">
            <summary>	
            HRESULT ID2D1CommandSink::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_F* destinationRectangle,[In] float opacity,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D_RECT_F* sourceRectangle,[In, Optional] const D2D_MATRIX_4X4_F* perspectiveTransform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.DrawImage(C1.Util.DX.Direct2D.Image,System.Nullable{C1.Util.DX.Point2F},System.Nullable{C1.Util.DX.RectF},C1.Util.DX.Direct2D.InterpolationMode,C1.Util.DX.Direct2D.CompositeMode)">
            <summary>	
            HRESULT ID2D1CommandSink::DrawImage([In] ID2D1Image* image,[In, Optional] const D2D_POINT_2F* targetOffset,[In, Optional] const D2D_RECT_F* imageRectangle,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In] D2D1_COMPOSITE_MODE compositeMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.DrawGdiMetafile(C1.Util.DX.Direct2D.GdiMetafile,System.Nullable{C1.Util.DX.Point2F})">
            <summary>	
            HRESULT ID2D1CommandSink::DrawGdiMetafile([In] ID2D1GdiMetafile* gdiMetafile,[In, Optional] const D2D_POINT_2F* targetOffset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.FillMesh(C1.Util.DX.Direct2D.Mesh,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            HRESULT ID2D1CommandSink::FillMesh([In] ID2D1Mesh* mesh,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.FillOpacityMask(C1.Util.DX.Direct2D.Bitmap,C1.Util.DX.Direct2D.Brush,System.Nullable{C1.Util.DX.RectF},System.Nullable{C1.Util.DX.RectF})">
            <summary>	
            HRESULT ID2D1CommandSink::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.FillGeometry(C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            HRESULT ID2D1CommandSink::FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.FillRectangle(C1.Util.DX.RectF,C1.Util.DX.Direct2D.Brush)">
            <summary>	
            HRESULT ID2D1CommandSink::FillRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.PushAxisAlignedClip(C1.Util.DX.RectF,C1.Util.DX.Direct2D.AntialiasMode)">
            <summary>	
            HRESULT ID2D1CommandSink::PushAxisAlignedClip([In] const D2D_RECT_F* clipRect,[In] D2D1_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.PushLayer(C1.Util.DX.Direct2D.LayerParameters1@,C1.Util.DX.Direct2D.Layer)">
            <summary>	
            HRESULT ID2D1CommandSink::PushLayer([In] const D2D1_LAYER_PARAMETERS1* layerParameters1,[In, Optional] ID2D1Layer* layer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.PopAxisAlignedClip">
            <summary>	
            HRESULT ID2D1CommandSink::PopAxisAlignedClip()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSinkNative.PopLayer">
            <summary>	
            HRESULT ID2D1CommandSink::PopLayer()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink1Native.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.CommandSink1Native"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink1Native.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.CommandSink1Native">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.CommandSink1Native"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CommandSink1Native.SetPrimitiveBlend1(C1.Util.DX.Direct2D.PrimitiveBlend)">
            <summary>	
            HRESULT ID2D1CommandSink1::SetPrimitiveBlend1([In] D2D1_PRIMITIVE_BLEND primitiveBlend)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ComputeTransform">
            <summary>	
            ID2D1ComputeTransform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Transform">
            <summary>	
            ID2D1Transform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Transform.MapOutputRectToInputRects(C1.Util.DX.RectL,C1.Util.DX.RectL[])">
            <summary>	
            Allows a transform to state how it would map a rectangle requested on its output to a set of sample rectangles on its input.
            </summary>	
            <param name="outputRect">The output rectangle to which the inputs must be mapped.</param>	
            <param name="inputRects">The corresponding set of inputs. The inputs will directly correspond to the transform inputs.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Transform.MapInputRectsToOutputRect(C1.Util.DX.RectL[],C1.Util.DX.RectL[],C1.Util.DX.RectL@)">
            <summary>	
            Performs the inverse mapping to <strong>MapOutputRectToInputRects</strong>.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Transform.MapInvalidRect(System.Int32,C1.Util.DX.RectL)">
            <summary>
            Sets the input rectangles for this rendering pass into the transform.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeTransform.SetComputeInfo(C1.Util.DX.Direct2D.ComputeInformation)">
            <summary>
            Sets the render information used to specify the compute shader pass.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeTransform.CalculateThreadgroups(C1.Util.DX.RectL,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Allows a compute-shader–based transform to select the number of thread groups to execute based on the number of output pixels it needs to fill.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.ComputeTransformNative">
            <summary>	
            ID2D1ComputeTransform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TransformNative">
            <summary>	
            ID2D1Transform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.TransformNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.TransformNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.TransformNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNative.MapOutputRectToInputRects(C1.Util.DX.RectL,C1.Util.DX.RectL[])">
            <summary>	
            HRESULT ID2D1Transform::MapOutputRectToInputRects([In] const RECT* outputRect,[Out, Buffer] RECT* inputRects,[In] unsigned int inputRectsCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNative.MapInputRectsToOutputRect(C1.Util.DX.RectL[],C1.Util.DX.RectL[],C1.Util.DX.RectL@)">
            <summary>	
            HRESULT ID2D1Transform::MapInputRectsToOutputRect([In, Buffer] const RECT* inputRects,[In, Buffer] const RECT* inputOpaqueSubRects,[In] unsigned int inputRectCount,[Out] RECT* outputRect,[Out] RECT* outputOpaqueSubRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TransformNative.MapInvalidRect(System.Int32,C1.Util.DX.RectL)">
            <summary>	
            HRESULT ID2D1Transform::MapInvalidRect([In] unsigned int inputIndex,[In] RECT invalidInputRect,[Out] RECT* invalidOutputRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeTransformNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.ComputeTransformNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeTransformNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.ComputeTransformNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.ComputeTransformNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeTransformNative.SetComputeInfo(C1.Util.DX.Direct2D.ComputeInformation)">
            <summary>	
            HRESULT ID2D1ComputeTransform::SetComputeInfo([In] ID2D1ComputeInfo* computeInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.ComputeTransformNative.CalculateThreadgroups(C1.Util.DX.RectL,System.Int32@,System.Int32@,System.Int32@)">
            <summary>	
            HRESULT ID2D1ComputeTransform::CalculateThreadgroups([In] const RECT* outputRect,[Out] unsigned int* dimensionX,[Out] unsigned int* dimensionY,[Out] unsigned int* dimensionZ)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffect">
            <summary>	
            ID2D1EffectImpl	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffect.Initialize(C1.Util.DX.Direct2D.EffectContext,C1.Util.DX.Direct2D.TransformGraph)">
            <summary>	
            Creates any resources used repeatedly during subsequent rendering calls.
            </summary>	
            <param name="effectContext"><para>An internal factory interface that creates and returns effect author centric types.</para></param>	
            <param name="transformGraph">No documentation.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffect.PrepareForRender(C1.Util.DX.Direct2D.ChangeType)">
            <summary>	
            Prepares an effect for the rendering process.	
            </summary>	
            <param name="changeType">Indicates the type of change the effect should expect.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffect.SetGraph(C1.Util.DX.Direct2D.TransformGraph)">
            <summary>	
            The renderer calls this method to provide the effect implementation with a way to specify its transform graph and transform graph changes. 
            The renderer calls this method when: 1) When the effect is first initialized. 2) If the number of inputs to the effect changes.
            </summary>	
            <param name="transformGraph">The graph to which the effect describes its transform topology through the SetDescription call..</param>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CustomEffectNative">
            <summary>	
            ID2D1EffectImpl	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.CustomEffectNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.CustomEffectNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.CustomEffectNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectNative.Initialize(C1.Util.DX.Direct2D.EffectContext,C1.Util.DX.Direct2D.TransformGraph)">
            <summary>	
            HRESULT ID2D1EffectImpl::Initialize([In] ID2D1EffectContext* effectContext,[In] ID2D1TransformGraph* transformGraph)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectNative.PrepareForRender(C1.Util.DX.Direct2D.ChangeType)">
            <summary>	
            HRESULT ID2D1EffectImpl::PrepareForRender([In] D2D1_CHANGE_TYPE changeType)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.CustomEffectNative.SetGraph(C1.Util.DX.Direct2D.TransformGraph)">
            <summary>	
            HRESULT ID2D1EffectImpl::SetGraph([In] ID2D1TransformGraph* transformGraph)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawTransform">
            <summary>	
            ID2D1DrawTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawTransform.SetDrawInfo(C1.Util.DX.Direct2D.DrawInformation)">
            <summary>	
            Sets the GPU render information for the transform.
            </summary>	
            <param name="drawInfo">The interface to specify the GPU-based transform pass.</param>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawTransformNative">
            <summary>	
            ID2D1DrawTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawTransformNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.DrawTransformNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawTransformNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.DrawTransformNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.DrawTransformNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.DrawTransformNative.SetDrawInfo(C1.Util.DX.Direct2D.DrawInformation)">
            <summary>	
            HRESULT ID2D1DrawTransform::SetDrawInfo([In] ID2D1DrawInfo* drawInfo)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GdiInteropRenderTarget">
            <summary>	
            ID2D1GdiInteropRenderTarget	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiInteropRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GdiInteropRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiInteropRenderTarget.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GdiInteropRenderTarget">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GdiInteropRenderTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiInteropRenderTarget.GetDC(C1.Util.DX.Direct2D.DeviceContextInitializeMode)">
            <summary>	
            HRESULT ID2D1GdiInteropRenderTarget::GetDC([In] D2D1_DC_INITIALIZE_MODE mode,[Out] HDC* hdc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiInteropRenderTarget.ReleaseDC(System.Nullable{C1.Util.DX.RectL})">
            <summary>	
            HRESULT ID2D1GdiInteropRenderTarget::ReleaseDC([In, Optional] const RECT* update)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiInteropRenderTarget.ReleaseDC">
            <summary>	
            Indicates that drawing with the device context is finished.  	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GdiMetafile">
            <summary>	
            ID2D1GdiMetafile	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiMetafile.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GdiMetafile"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiMetafile.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GdiMetafile">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GdiMetafile"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiMetafile.Stream_(System.IntPtr)">
            <summary>	
            HRESULT ID2D1GdiMetafile::Stream([In] ID2D1GdiMetafileSink* sink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiMetafile.GetBounds">
            <summary>	
            HRESULT ID2D1GdiMetafile::GetBounds([Out] D2D_RECT_F* bounds)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GdiMetafileSink">
            <summary>	
            ID2D1GdiMetafileSink	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GdiMetafileSinkNative">
            <summary>	
            ID2D1GdiMetafileSink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiMetafileSinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GdiMetafileSinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiMetafileSinkNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GdiMetafileSinkNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GdiMetafileSinkNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GdiMetafileSinkNative.ProcessRecord_(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID2D1GdiMetafileSink::ProcessRecord([In] unsigned int recordType,[In, Optional] const void* recordData,[In] unsigned int recordDataSize)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GeometrySink">
            <summary>	
            ID2D1GeometrySink	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SimplifiedGeometrySink">
            <summary>	
            ID2D1SimplifiedGeometrySink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySink.SetFillMode(C1.Util.DX.Direct2D.FillMode)">
            <summary>	
            Specifies the method used to determine which points are inside the geometry described by this geometry sink  and which points are outside.  	
            </summary>	
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySink.SetSegmentFlags(C1.Util.DX.Direct2D.PathSegment)">
            <summary>	
            Specifies stroke and join options to be applied to new segments added to the geometry sink. 	
            </summary>	
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySink.BeginFigure(C1.Util.DX.Point2F,C1.Util.DX.Direct2D.FigureBegin)">
            <summary>	
            Starts a new figure at the specified point. 	
            </summary>	
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySink.AddLines(C1.Util.DX.Point2F[])">
            <summary>	
             Creates a sequence of lines using the specified points and adds them to the geometry sink.	
            </summary>	
            <param name="pointsRef">A pointer to an array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.   </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySink.AddBeziers(C1.Util.DX.Direct2D.BezierSegment[])">
            <summary>	
            Creates a sequence of cubic Bezier curves and adds them to the geometry sink. 	
            </summary>	
            <param name="beziers">A pointer to an array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySink.EndFigure(C1.Util.DX.Direct2D.FigureEnd)">
            <summary>	
             Ends the current figure; optionally, closes it.	
            </summary>	
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by {{BeginFigure}}.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySink.Close">
            <summary>	
            Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state. 	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySink.AddLine(C1.Util.DX.Point2F)">
            <summary>	
            Creates a line segment between the current point and the specified end point and adds it to the geometry sink. 	
            </summary>	
            <param name="point">The end point of the line to draw.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySink.AddBezier(C1.Util.DX.Direct2D.BezierSegment)">
            <summary>	
             Creates  a cubic Bezier curve between the current point and the specified endpoint.	
            </summary>	
            <param name="bezier">A structure that describes the control points and endpoint of the Bezier curve to add. </param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySink.AddQuadraticBezier(C1.Util.DX.Direct2D.QuadraticBezierSegment)">
            <summary>	
            Creates  a quadratic Bezier curve between the current point and the specified endpoint.	
            </summary>	
            <param name="bezier">A structure that describes the control point and the endpoint of the quadratic Bezier curve to add.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySink.AddQuadraticBeziers(C1.Util.DX.Direct2D.QuadraticBezierSegment[])">
            <summary>	
            Adds a sequence of quadratic Bezier segments as an array in a single call.	
            </summary>	
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySink.AddArc(C1.Util.DX.Direct2D.ArcSegment)">
            <summary>	
            Adds a single arc to the path geometry.	
            </summary>	
            <param name="arc">The arc segment to add to the figure.</param>
        </member>
        <member name="T:C1.Util.DX.Direct2D.GeometrySinkNative">
            <summary>	
            ID2D1GeometrySink	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative">
            <summary>	
            ID2D1SimplifiedGeometrySink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.SetFillMode(C1.Util.DX.Direct2D.FillMode)">
            <summary>	
            void ID2D1SimplifiedGeometrySink::SetFillMode([In] D2D1_FILL_MODE fillMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.SetSegmentFlags(C1.Util.DX.Direct2D.PathSegment)">
            <summary>	
            void ID2D1SimplifiedGeometrySink::SetSegmentFlags([In] D2D1_PATH_SEGMENT vertexFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.BeginFigure(C1.Util.DX.Point2F,C1.Util.DX.Direct2D.FigureBegin)">
            <summary>	
            void ID2D1SimplifiedGeometrySink::BeginFigure([In] D2D_POINT_2F startPoint,[In] D2D1_FIGURE_BEGIN figureBegin)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.AddLines(C1.Util.DX.Point2F[])">
            <summary>	
            void ID2D1SimplifiedGeometrySink::AddLines([In, Buffer] const D2D_POINT_2F* points,[In] unsigned int pointsCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.AddBeziers(C1.Util.DX.Direct2D.BezierSegment[])">
            <summary>	
            void ID2D1SimplifiedGeometrySink::AddBeziers([In, Buffer] const D2D1_BEZIER_SEGMENT* beziers,[In] unsigned int beziersCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.EndFigure(C1.Util.DX.Direct2D.FigureEnd)">
            <summary>	
            void ID2D1SimplifiedGeometrySink::EndFigure([In] D2D1_FIGURE_END figureEnd)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SimplifiedGeometrySinkNative.Close">
            <summary>	
            HRESULT ID2D1SimplifiedGeometrySink::Close()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.GeometrySinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.GeometrySinkNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.GeometrySinkNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.AddLine(C1.Util.DX.Point2F)">
            <summary>	
            void ID2D1GeometrySink::AddLine([In] D2D_POINT_2F point)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.AddBezier(C1.Util.DX.Direct2D.BezierSegment@)">
            <summary>	
            void ID2D1GeometrySink::AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.AddBezier(C1.Util.DX.Direct2D.BezierSegment)">
            <summary>	
            void ID2D1GeometrySink::AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.AddQuadraticBezier(C1.Util.DX.Direct2D.QuadraticBezierSegment)">
            <summary>	
            void ID2D1GeometrySink::AddQuadraticBezier([In] const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.AddQuadraticBeziers(C1.Util.DX.Direct2D.QuadraticBezierSegment[])">
            <summary>	
            void ID2D1GeometrySink::AddQuadraticBeziers([In, Buffer] const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers,[In] unsigned int beziersCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.AddArc(C1.Util.DX.Direct2D.ArcSegment@)">
            <summary>	
            void ID2D1GeometrySink::AddArc([In] const D2D1_ARC_SEGMENT* arc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.GeometrySinkNative.AddArc(C1.Util.DX.Direct2D.ArcSegment)">
            <summary>	
            void ID2D1GeometrySink::AddArc([In] const D2D1_ARC_SEGMENT* arc)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Multithread">
            <summary>	
            ID2D1Multithread	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Multithread.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Multithread"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Multithread.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.Multithread">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.Multithread"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.Multithread.GetMultithreadProtected">
            <summary>	
            BOOL ID2D1Multithread::GetMultithreadProtected()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Multithread.Enter">
            <summary>	
            void ID2D1Multithread::Enter()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Multithread.Leave">
            <summary>	
            void ID2D1Multithread::Leave()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.SourceTransform">
            <summary>	
            ID2D1SourceTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SourceTransform.SetRenderInfo(C1.Util.DX.Direct2D.RenderInformation)">
            <summary>	
            Provides a render information interface to the source transform to allow it to specify state to the rendering system. This part of the render information interface is shared with the GPU transform.
            </summary>	
            <param name="renderInfo"><para>The interface supplied to the transform to allow specifying the precision-based transform pass.</para></param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SourceTransform.Draw(C1.Util.DX.Direct2D.Bitmap1,C1.Util.DX.RectL,C1.Util.DX.Point2L)">
            <summary>
            Draws the transform to the graphics processing unit (GPU)–based Direct2D pipeline.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.SourceTransformNative">
            <summary>	
            ID2D1SourceTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SourceTransformNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.SourceTransformNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SourceTransformNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.SourceTransformNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.SourceTransformNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.SourceTransformNative.SetRenderInfo(C1.Util.DX.Direct2D.RenderInformation)">
            <summary>	
            HRESULT ID2D1SourceTransform::SetRenderInfo([In] ID2D1RenderInfo* renderInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.SourceTransformNative.Draw(C1.Util.DX.Direct2D.Bitmap1,C1.Util.DX.RectL,C1.Util.DX.Point2L)">
            <summary>	
            HRESULT ID2D1SourceTransform::Draw([In] ID2D1Bitmap1* target,[In] const RECT* drawRect,[In] D2D_POINT_2U targetOrigin)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TessellationSink">
            <summary>	
            ID2D1TessellationSink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TessellationSink.AddTriangles(C1.Util.DX.Direct2D.Triangle[])">
            <summary>	
            Copies the specified triangles to the sink.  	
            </summary>	
            <param name="triangles">An array of <see cref="T:C1.Util.DX.Direct2D.Triangle"/> structures that describe the triangles to add to the sink.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TessellationSink.Close">
            <summary>	
             Closes the sink.	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.TessellationSinkNative">
            <summary>	
            ID2D1TessellationSink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TessellationSinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.TessellationSinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TessellationSinkNative.op_Explicit(System.IntPtr)~C1.Util.DX.Direct2D.TessellationSinkNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct2D.TessellationSinkNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.TessellationSinkNative.AddTriangles(C1.Util.DX.Direct2D.Triangle[])">
            <summary>	
            void ID2D1TessellationSink::AddTriangles([In, Buffer] const D2D1_TRIANGLE* triangles,[In] unsigned int trianglesCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.TessellationSinkNative.Close">
            <summary>	
            HRESULT ID2D1TessellationSink::Close()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ArcSegment">
            <summary>	
            D2D1_ARC_SEGMENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArcSegment.Point">
            <summary>	
            D2D_POINT_2F point	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArcSegment.Size">
            <summary>	
            D2D_SIZE_F size	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArcSegment.RotationAngle">
            <summary>	
            float rotationAngle	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArcSegment.SweepDirection">
            <summary>	
            D2D1_SWEEP_DIRECTION sweepDirection	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ArcSegment.ArcSize">
            <summary>	
            D2D1_ARC_SIZE arcSize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BezierSegment">
            <summary>	
            D2D1_BEZIER_SEGMENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BezierSegment.Point1">
            <summary>	
            D2D_POINT_2F point1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BezierSegment.Point2">
            <summary>	
            D2D_POINT_2F point2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BezierSegment.Point3">
            <summary>	
            D2D_POINT_2F point3	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapBrushProperties">
            <summary>	
            D2D1_BITMAP_BRUSH_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapBrushProperties.ExtendModeX">
            <summary>	
            D2D1_EXTEND_MODE extendModeX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapBrushProperties.ExtendModeY">
            <summary>	
            D2D1_EXTEND_MODE extendModeY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapBrushProperties.InterpolationMode">
            <summary>	
            D2D1_BITMAP_INTERPOLATION_MODE interpolationMode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapBrushProperties1">
            <summary>	
            D2D1_BITMAP_BRUSH_PROPERTIES1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapBrushProperties1.ExtendModeX">
            <summary>	
            D2D1_EXTEND_MODE extendModeX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapBrushProperties1.ExtendModeY">
            <summary>	
            D2D1_EXTEND_MODE extendModeY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapBrushProperties1.InterpolationMode">
            <summary>	
            D2D1_INTERPOLATION_MODE interpolationMode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BitmapProperties">
            <summary>	
            D2D1_BITMAP_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties.PixelFormat">
            <summary>	
            D2D1_PIXEL_FORMAT pixelFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties.DpiX">
            <summary>	
            float dpiX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BitmapProperties.DpiY">
            <summary>	
            float dpiY	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapProperties.#ctor(C1.Util.DX.Direct2D.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.BitmapProperties.#ctor(C1.Util.DX.Direct2D.PixelFormat,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
        </member>
        <member name="T:C1.Util.DX.Direct2D.BlendDescription">
            <summary>	
            D2D1_BLEND_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendDescription.SourceBlend">
            <summary>	
            D2D1_BLEND sourceBlend	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendDescription.DestinationBlend">
            <summary>	
            D2D1_BLEND destinationBlend	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendDescription.BlendOperation">
            <summary>	
            D2D1_BLEND_OPERATION blendOperation	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendDescription.SourceBlendAlpha">
            <summary>	
            D2D1_BLEND sourceBlendAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendDescription.DestinationBlendAlpha">
            <summary>	
            D2D1_BLEND destinationBlendAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendDescription.BlendOperationAlpha">
            <summary>	
            D2D1_BLEND_OPERATION blendOperationAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BlendDescription.BlendFactor">
            <summary>	
            SHARPDX_COLOR4 blendFactor	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.BrushProperties">
            <summary>	
            D2D1_BRUSH_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BrushProperties.Opacity">
            <summary>	
            float opacity	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.BrushProperties.Transform">
            <summary>	
            D2D_MATRIX_3X2_F transform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.CreationProperties">
            <summary>	
            D2D1_CREATION_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CreationProperties.ThreadingMode">
            <summary>	
            D2D1_THREADING_MODE threadingMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CreationProperties.DebugLevel">
            <summary>	
            D2D1_DEBUG_LEVEL debugLevel	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.CreationProperties.Options">
            <summary>	
            D2D1_DEVICE_CONTEXT_OPTIONS options	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawingStateDescription">
            <summary>	
            D2D1_DRAWING_STATE_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription.AntialiasMode">
            <summary>	
            D2D1_ANTIALIAS_MODE antialiasMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription.TextAntialiasMode">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription.Tag1">
            <summary>	
            unsigned longlong tag1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription.Tag2">
            <summary>	
            unsigned longlong tag2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription.Transform">
            <summary>	
            D2D_MATRIX_3X2_F transform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.DrawingStateDescription1">
            <summary>	
            D2D1_DRAWING_STATE_DESCRIPTION1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription1.AntialiasMode">
            <summary>	
            D2D1_ANTIALIAS_MODE antialiasMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription1.TextAntialiasMode">
            <summary>	
            D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription1.Tag1">
            <summary>	
            unsigned longlong tag1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription1.Tag2">
            <summary>	
            unsigned longlong tag2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription1.Transform">
            <summary>	
            D2D_MATRIX_3X2_F transform	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription1.PrimitiveBlend">
            <summary>	
            D2D1_PRIMITIVE_BLEND primitiveBlend	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.DrawingStateDescription1.UnitMode">
            <summary>	
            D2D1_UNIT_MODE unitMode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Ellipse">
            <summary>	
            D2D1_ELLIPSE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Ellipse.Point">
            <summary>	
            D2D_POINT_2F point	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Ellipse.RadiusX">
            <summary>	
            float radiusX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Ellipse.RadiusY">
            <summary>	
            float radiusY	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.Ellipse.#ctor(C1.Util.DX.Point2F,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.Ellipse"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radiusX">The radius X.</param>
            <param name="radiusY">The radius Y.</param>
        </member>
        <member name="T:C1.Util.DX.Direct2D.FactoryOptions">
            <summary>	
            D2D1_FACTORY_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FactoryOptions.DebugLevel">
            <summary>	
            D2D1_DEBUG_LEVEL debugLevel	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FeatureDataD3D10XHardwareOptions">
            <summary>	
            D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FeatureDataD3D10XHardwareOptions.ComputeShadersPlusRawAndStructuredBuffersViaShader4X">
            <summary>	
            BOOL computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.FeatureDataDoubles">
            <summary>	
            D2D1_FEATURE_DATA_DOUBLES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.FeatureDataDoubles.DoublePrecisionFloatShaderOps">
            <summary>	
            BOOL doublePrecisionFloatShaderOps	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.GradientStop">
            <summary>	
            D2D1_GRADIENT_STOP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GradientStop.Position">
            <summary>	
            float position	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.GradientStop.Color">
            <summary>	
            D2D_COLOR_F color	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.HwndRenderTargetProperties">
            <summary>	
            D2D1_HWND_RENDER_TARGET_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.HwndRenderTargetProperties.Hwnd">
            <summary>	
            HWND hwnd	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.HwndRenderTargetProperties.PixelSize">
            <summary>	
            D2D_SIZE_U pixelSize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.HwndRenderTargetProperties.PresentOptions">
            <summary>	
            D2D1_PRESENT_OPTIONS presentOptions	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.ImageBrushProperties">
            <summary>	
            D2D1_IMAGE_BRUSH_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ImageBrushProperties.SourceRectangle">
            <summary>	
            D2D_RECT_F sourceRectangle	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ImageBrushProperties.ExtendModeX">
            <summary>	
            D2D1_EXTEND_MODE extendModeX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ImageBrushProperties.ExtendModeY">
            <summary>	
            D2D1_EXTEND_MODE extendModeY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.ImageBrushProperties.InterpolationMode">
            <summary>	
            D2D1_INTERPOLATION_MODE interpolationMode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.InputDescription">
            <summary>	
            D2D1_INPUT_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InputDescription.Filter">
            <summary>	
            D2D1_FILTER filter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InputDescription.LevelOfDetailCount">
            <summary>	
            unsigned int levelOfDetailCount	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputDescription.#ctor(C1.Util.DX.Direct2D.Filter,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Util.DX.Direct2D.InputDescription"/> struct.
            </summary>
            <param name="filter">The type of filter to apply to the input texture</param>
            <param name="levelOfDetail">The mip level to retrieve from the upstream transform, if specified.</param>
        </member>
        <member name="T:C1.Util.DX.Direct2D.InputElement">
            <summary>	
            D2D1_INPUT_ELEMENT_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InputElement.SemanticName">
            <summary>	
            const char* semanticName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InputElement.SemanticIndex">
            <summary>	
            unsigned int semanticIndex	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InputElement.Format">
            <summary>	
            DXGI_FORMAT format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InputElement.Slot">
            <summary>	
            unsigned int inputSlot	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.InputElement.AlignedByteOffset">
            <summary>	
            unsigned int alignedByteOffset	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputElement.#ctor(System.String,System.Int32,C1.Util.DX.DXGI.Format,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Win.DX.Direct2D.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputElement.#ctor(System.String,System.Int32,C1.Util.DX.DXGI.Format,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Win.DX.Direct2D.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "offset">Offset (in bytes) between each element. Use AppendAligned for convenience to define the current element directly after the previous one, including any packing if necessary.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputElement.Equals(C1.Util.DX.Direct2D.InputElement)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Direct2D.InputElement"/> is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputElement.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputElement.op_Equality(C1.Util.DX.Direct2D.InputElement,C1.Util.DX.Direct2D.InputElement)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.InputElement.op_Inequality(C1.Util.DX.Direct2D.InputElement,C1.Util.DX.Direct2D.InputElement)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct2D.InputElement.AppendAligned">
            <summary>
              Returns a value that can be used for the offset parameter of an InputElement to indicate that the element
              should be aligned directly after the previous element, including any packing if neccessary.
            </summary>
            <returns>A value used to align input elements.</returns>
        </member>
        <member name="T:C1.Util.DX.Direct2D.LayerParameters">
            <summary>	
            D2D1_LAYER_PARAMETERS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters.ContentBounds">
            <summary>	
            D2D_RECT_F contentBounds	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters.GeometricMaskPointer">
            <summary>	
            ID2D1Geometry* geometricMask	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters.MaskAntialiasMode">
            <summary>	
            D2D1_ANTIALIAS_MODE maskAntialiasMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters.MaskTransform">
            <summary>	
            D2D_MATRIX_3X2_F maskTransform	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters.Opacity">
            <summary>	
            float opacity	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters.OpacityBrushPointer">
            <summary>	
            ID2D1Brush* opacityBrush	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters.LayerOptions">
            <summary>	
            D2D1_LAYER_OPTIONS layerOptions	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LayerParameters.SetGeometricMask(C1.Util.DX.Direct2D.Geometry)">
            <summary>
            Sets the geometric mask.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.LayerParameters.SetOpacityBrush(C1.Util.DX.Direct2D.Brush)">
            <summary>
            Sets the opacity brush.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.LayerParameters1">
            <summary>	
            D2D1_LAYER_PARAMETERS1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters1.ContentBounds">
            <summary>	
            D2D_RECT_F contentBounds	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters1.GeometricMaskPointer">
            <summary>	
            ID2D1Geometry* geometricMask	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters1.MaskAntialiasMode">
            <summary>	
            D2D1_ANTIALIAS_MODE maskAntialiasMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters1.MaskTransform">
            <summary>	
            D2D_MATRIX_3X2_F maskTransform	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters1.Opacity">
            <summary>	
            float opacity	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters1.OpacityBrushPointer">
            <summary>	
            ID2D1Brush* opacityBrush	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LayerParameters1.LayerOptions">
            <summary>	
            D2D1_LAYER_OPTIONS1 layerOptions	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.LayerParameters1.#ctor(C1.Util.DX.RectF,C1.Util.DX.Direct2D.Geometry,C1.Util.DX.Direct2D.AntialiasMode,C1.Util.DX.Matrix3x2,System.Single,C1.Util.DX.Direct2D.Brush,C1.Util.DX.Direct2D.LayerOptions1)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.LayerParameters1"/> struct.
            </summary>
            <param name="contentBounds">The content bounds.</param>
            <param name="geometryMask">The geometry mask.</param>
            <param name="maskAntialiasMode">The mask antialias mode.</param>
            <param name="maskTransform">The mask transform.</param>
            <param name="opacity">The opacity.</param>
            <param name="opacityBrush">The opacity brush.</param>
            <param name="layerOptions">The layer options.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.LayerParameters1.SetGeometricMask(C1.Util.DX.Direct2D.Geometry)">
            <summary>
            Sets the geometric mask.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct2D.LayerParameters1.SetOpacityBrush(C1.Util.DX.Direct2D.Brush)">
            <summary>
            Sets the opacity brush.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct2D.LinearGradientBrushProperties">
            <summary>	
            D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearGradientBrushProperties.StartPoint">
            <summary>	
            D2D_POINT_2F startPoint	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.LinearGradientBrushProperties.EndPoint">
            <summary>	
            D2D_POINT_2F endPoint	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.MappedRectangle">
            <summary>	
            D2D1_MAPPED_RECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MappedRectangle.Pitch">
            <summary>	
            unsigned int pitch	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.MappedRectangle.Bits">
            <summary>	
            unsigned char* bits	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PixelFormat">
            <summary>	
            D2D1_PIXEL_FORMAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PixelFormat.Format">
            <summary>	
            DXGI_FORMAT format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PixelFormat.AlphaMode">
            <summary>	
            D2D1_ALPHA_MODE alphaMode	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.PixelFormat.#ctor(C1.Util.DX.DXGI.Format,C1.Util.DX.Direct2D.AlphaMode)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.PixelFormat"/> struct.
            </summary>
            <param name="format">A value that specifies the size and arrangement of channels in each pixel.</param>
            <param name="alphaMode">A value that specifies whether the alpha channel is using pre-multiplied alpha, straight alpha, whether it should be ignored and considered opaque, or whether it is unknown.</param>
        </member>
        <member name="T:C1.Util.DX.Direct2D.PointDescription">
            <summary>	
            D2D1_POINT_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDescription.Point">
            <summary>	
            D2D_POINT_2F point	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDescription.UnitTangentVector">
            <summary>	
            D2D_POINT_2F unitTangentVector	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDescription.EndSegment">
            <summary>	
            unsigned int endSegment	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDescription.EndFigure">
            <summary>	
            unsigned int endFigure	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PointDescription.LengthToEndSegment">
            <summary>	
            float lengthToEndSegment	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.PrintControlProperties">
            <summary>	
            D2D1_PRINT_CONTROL_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrintControlProperties.FontSubset">
            <summary>	
            D2D1_PRINT_FONT_SUBSET_MODE fontSubset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrintControlProperties.RasterDPI">
            <summary>	
            float rasterDPI	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.PrintControlProperties.ColorSpace">
            <summary>	
            D2D1_COLOR_SPACE colorSpace	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.QuadraticBezierSegment">
            <summary>	
            D2D1_QUADRATIC_BEZIER_SEGMENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.QuadraticBezierSegment.Point1">
            <summary>	
            D2D_POINT_2F point1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.QuadraticBezierSegment.Point2">
            <summary>	
            D2D_POINT_2F point2	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RadialGradientBrushProperties">
            <summary>	
            D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RadialGradientBrushProperties.Center">
            <summary>	
            D2D_POINT_2F center	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RadialGradientBrushProperties.GradientOriginOffset">
            <summary>	
            D2D_POINT_2F gradientOriginOffset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RadialGradientBrushProperties.RadiusX">
            <summary>	
            float radiusX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RadialGradientBrushProperties.RadiusY">
            <summary>	
            float radiusY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RenderingControls">
            <summary>	
            D2D1_RENDERING_CONTROLS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderingControls.BufferPrecision">
            <summary>	
            D2D1_BUFFER_PRECISION bufferPrecision	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderingControls.TileSize">
            <summary>	
            D2D_SIZE_U tileSize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.RenderTargetProperties">
            <summary>	
            D2D1_RENDER_TARGET_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetProperties.Type">
            <summary>	
            D2D1_RENDER_TARGET_TYPE type	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetProperties.PixelFormat">
            <summary>	
            D2D1_PIXEL_FORMAT pixelFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetProperties.DpiX">
            <summary>	
            float dpiX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetProperties.DpiY">
            <summary>	
            float dpiY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetProperties.Usage">
            <summary>	
            D2D1_RENDER_TARGET_USAGE usage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RenderTargetProperties.MinLevel">
            <summary>	
            D2D1_FEATURE_LEVEL minLevel	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTargetProperties.#ctor(C1.Util.DX.Direct2D.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.RenderTargetProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format and alpha mode of the render target. You can use the {{D2D1::PixelFormat}} function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}.</param>
        </member>
        <member name="M:C1.Util.DX.Direct2D.RenderTargetProperties.#ctor(C1.Util.DX.Direct2D.RenderTargetType,C1.Util.DX.Direct2D.PixelFormat,System.Single,System.Single,C1.Util.DX.Direct2D.RenderTargetUsage,C1.Util.DX.Direct2D.FeatureLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct2D.RenderTargetProperties"/> struct.
            </summary>
            <param name="type">A value that specifies whether the render target should force hardware or software rendering. A value of <see cref="F:C1.Util.DX.Direct2D.RenderTargetType.Default"/> specifies that the render target should use hardware rendering if it is available; otherwise, it uses software rendering. Note that WIC bitmap render targets do not support hardware rendering.</param>
            <param name="pixelFormat">The pixel format and alpha mode of the render target. You can use the {{D2D1::PixelFormat}} function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}.</param>
            <param name="dpiX">The horizontal DPI of the render target.  To use the default DPI, set dpiX and dpiY to 0. For more information, see the Remarks section. 	</param>
            <param name="dpiY">The vertical DPI of the render target. To use the default DPI, set dpiX and dpiY to 0.  For more information, see the Remarks section. 	</param>
            <param name="usage">A value that specifies how the render target is remoted and whether it should be GDI-compatible.  Set to <see cref="F:C1.Util.DX.Direct2D.RenderTargetUsage.None"/> to create a render target that is not compatible with GDI and uses Direct3D command-stream remoting if it  is available.</param>
            <param name="minLevel">A value that specifies the minimum Direct3D feature level required for hardware rendering. If the specified minimum level is not available, the render target uses software rendering if the type  member is set to <see cref="F:C1.Util.DX.Direct2D.RenderTargetType.Default"/>; if  type  is set to to D2D1_RENDER_TARGET_TYPE_HARDWARE, render target creation fails. A value of <see cref="F:C1.Util.DX.Direct2D.FeatureLevel.Level_DEFAULT"/> indicates that Direct2D should determine whether the Direct3D feature level of the device is adequate. This field is used only when creating <see cref="T:C1.Util.DX.Direct2D.WindowRenderTarget"/> and <see cref="T:C1.Util.DX.Direct2D.DeviceContextRenderTarget"/> objects.	</param>  
        </member>
        <member name="T:C1.Util.DX.Direct2D.RoundedRectangle">
            <summary>	
            D2D1_ROUNDED_RECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RoundedRectangle.Rect">
            <summary>	
            D2D_RECT_F rect	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RoundedRectangle.RadiusX">
            <summary>	
            float radiusX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.RoundedRectangle.RadiusY">
            <summary>	
            float radiusY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.StrokeStyleProperties">
            <summary>	
            D2D1_STROKE_STYLE_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties.StartCap">
            <summary>	
            D2D1_CAP_STYLE startCap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties.EndCap">
            <summary>	
            D2D1_CAP_STYLE endCap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties.DashCap">
            <summary>	
            D2D1_CAP_STYLE dashCap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties.LineJoin">
            <summary>	
            D2D1_LINE_JOIN lineJoin	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties.MiterLimit">
            <summary>	
            float miterLimit	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties.DashStyle">
            <summary>	
            D2D1_DASH_STYLE dashStyle	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties.DashOffset">
            <summary>	
            float dashOffset	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.StrokeStyleProperties1">
            <summary>	
            D2D1_STROKE_STYLE_PROPERTIES1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.StartCap">
            <summary>	
            D2D1_CAP_STYLE startCap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.EndCap">
            <summary>	
            D2D1_CAP_STYLE endCap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.DashCap">
            <summary>	
            D2D1_CAP_STYLE dashCap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.LineJoin">
            <summary>	
            D2D1_LINE_JOIN lineJoin	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.MiterLimit">
            <summary>	
            float miterLimit	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.DashStyle">
            <summary>	
            D2D1_DASH_STYLE dashStyle	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.DashOffset">
            <summary>	
            float dashOffset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.StrokeStyleProperties1.TransformType">
            <summary>	
            D2D1_STROKE_TRANSFORM_TYPE transformType	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.Triangle">
            <summary>	
            D2D1_TRIANGLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Triangle.Point1">
            <summary>	
            D2D_POINT_2F point1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Triangle.Point2">
            <summary>	
            D2D_POINT_2F point2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.Triangle.Point3">
            <summary>	
            D2D_POINT_2F point3	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct2D.VertexRange">
            <summary>	
            D2D1_VERTEX_RANGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexRange.StartVertex">
            <summary>	
            unsigned int startVertex	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct2D.VertexRange.VertexCount">
            <summary>	
            unsigned int vertexCount	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct2D.VertexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:C1.Util.DX.Direct2D.VertexRange"/> struct.
            </summary>
            <param name="startVertex">The first vertex in the range to process.</param>
            <param name="vertexCount">The number of vertices in the count to use.</param>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BlendState">
            <summary>	
            ID3D11BlendState	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceChild">
            <summary>	
            ID3D11DeviceChild	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.NativePointerUpdated(System.IntPtr)">
            <summary>
            Method called when the <see cref="P:C1.Util.DX.CppObject.NativePointer"/> is updated.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DeviceChild"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DeviceChild">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DeviceChild"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.GetDevice(C1.Util.DX.Direct3D11.Device@)">
            <summary>	
            void ID3D11DeviceChild::GetDevice([Out] ID3D11Device** ppDevice)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            HRESULT ID3D11DeviceChild::GetPrivateData([In] const GUID&amp; guid,[InOut] unsigned int* pDataSize,[Out, Buffer, Optional] void* pData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT ID3D11DeviceChild::SetPrivateData([In] const GUID&amp; guid,[In] unsigned int DataSize,[In, Buffer, Optional] const void* pData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceChild.SetPrivateDataInterface(System.Guid,C1.Util.DX.ComObject)">
            <summary>	
            HRESULT ID3D11DeviceChild::SetPrivateDataInterface([In] const GUID&amp; guid,[In, Optional] const IUnknown* pData)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceChild.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceChild.Device">
            <summary>	
            GetDevice	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.BlendStateDescription)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.BlendState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.BlendState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.BlendState">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.BlendState"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState.GetDescription(C1.Util.DX.Direct3D11.BlendStateDescription@)">
            <summary>	
            void ID3D11BlendState::GetDesc([Out] D3D11_BLEND_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.BlendState.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BlendState1">
            <summary>	
            ID3D11BlendState1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState1.Create(C1.Util.DX.Direct3D11.Device1,C1.Util.DX.Direct3D11.BlendStateDescription1)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.BlendState1" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.BlendState1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.BlendState1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.BlendState1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendState1.GetDescription1(C1.Util.DX.Direct3D11.BlendStateDescription1@)">
            <summary>	
            void ID3D11BlendState1::GetDesc1([Out] D3D11_BLEND_DESC1* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.BlendState1.Description1">
            <summary>	
            GetDescription1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Buffer">
            <summary>	
            ID3D11Buffer	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Resource">
            <summary>	
            ID3D11Resource	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.MaximumMipLevels">
            <summary>Constant MaximumMipLevels.</summary>
            <unmanaged>D3D11_REQ_MIP_LEVELS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.ResourceSizeInMegabytes">
            <summary>Constant ResourceSizeInMegabytes.</summary>
            <unmanaged>D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.MaximumTexture1DArraySize">
            <summary>Constant MaximumTexture1DArraySize.</summary>
            <unmanaged>D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.MaximumTexture2DArraySize">
            <summary>Constant MaximumTexture2DArraySize.</summary>
            <unmanaged>D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.MaximumTexture1DSize">
            <summary>Constant MaximumTexture1DSize.</summary>
            <unmanaged>D3D11_REQ_TEXTURE1D_U_DIMENSION</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.MaximumTexture2DSize">
            <summary>Constant MaximumTexture2DSize.</summary>
            <unmanaged>D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.MaximumTexture3DSize">
            <summary>Constant MaximumTexture3DSize.</summary>
            <unmanaged>D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Resource.MaximumTextureCubeSize">
            <summary>Constant MaximumTextureCubeSize.</summary>
            <unmanaged>D3D11_REQ_TEXTURECUBE_DIMENSION</unmanaged>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.FromSwapChain``1(C1.Util.DX.DXGI.SwapChain,System.Int32)">
            <summary>
            Gets a swap chain back buffer.
            </summary>
            <typeparam name = "T">The type of the buffer.</typeparam>
            <param name = "swapChain">The swap chain to get the buffer from.</param>
            <param name = "index">The index of the desired buffer.</param>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.SubResourceIndexFromMipLevel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the sub resource index from a miplevel.
            </summary>
            <param name="mipSlice">A zero-based index for the mipmap level to address; 0 indicates the first, most detailed mipmap level.</param>
            <param name="arraySlice">The zero-based index for the array level to address; always use 0 for volume (3D) textures.</param>
            <param name="mipLevel">Number of mipmap levels in the resource.</param>
            <returns>
            The index which equals MipSlice + (ArraySlice * MipLevels).
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.CalculateMipSize(System.Int32,System.Int32)">
            <summary>
            Calculates the resulting size at a single level for an original size.
            </summary>
            <param name="mipLevel">The mip level to get the size.</param>
            <param name="baseSize">Size of the base.</param>
            <returns>
            Size of the mipLevel
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.CalculateSubResourceIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Calculates the sub resource index for a particular mipSlice and arraySlice.
            </summary>
            <param name="mipSlice">The mip slice.</param>
            <param name="arraySlice">The array slice.</param>
            <param name="mipSize">The size of slice. This values is resource dependent. Texture1D -> mipSize of the Width. Texture2D -> mipSize of the Height. Texture3D -> mipsize of the Depth</param>
            <returns>The resulting miplevel calulated for this instance with this mipSlice and arraySlice.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Resource">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Resource"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.GetDimension">
            <summary>	
            void ID3D11Resource::GetType([Out] D3D11_RESOURCE_DIMENSION* pResourceDimension)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.SetEvictionPriority(System.Int32)">
            <summary>	
            void ID3D11Resource::SetEvictionPriority([In] unsigned int EvictionPriority)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Resource.GetEvictionPriority">
            <summary>	
            unsigned int ID3D11Resource::GetEvictionPriority()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.BufferDescription)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "description">The description of the buffer.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.DataStream,C1.Util.DX.Direct3D11.BufferDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "data">Initial data used to initialize the buffer.</param>
            <param name = "description">The description of the buffer.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create(C1.Util.DX.Direct3D11.Device,System.IntPtr,C1.Util.DX.Direct3D11.BufferDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Buffer" /> class.
            </summary>
            <param name="device">The device with which to associate the buffer.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="description">The description of the buffer.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create(C1.Util.DX.Direct3D11.Device,System.Int32,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.BindFlags,C1.Util.DX.Direct3D11.CpuAccessFlags,C1.Util.DX.Direct3D11.ResourceMiscFlags,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "sizeInBytes">The size, in bytes, of the buffer.</param>
            <param name = "usage">The usage pattern for the buffer.</param>
            <param name = "bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name = "accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name = "miscFlags">Miscellaneous resource options.</param>
            <param name = "structureByteStride">The size (in bytes) of the structure element for structured buffers.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.DataStream,System.Int32,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.BindFlags,C1.Util.DX.Direct3D11.CpuAccessFlags,C1.Util.DX.Direct3D11.ResourceMiscFlags,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "data">Initial data used to initialize the buffer.</param>
            <param name = "sizeInBytes">The size, in bytes, of the buffer.</param>
            <param name = "usage">The usage pattern for the buffer.</param>
            <param name = "bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name = "accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name = "miscFlags">Miscellaneous resource options.</param>
            <param name = "structureByteStride">The size (in bytes) of the structure element for structured buffers.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create``1(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.BindFlags,``0@,System.Int32,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.CpuAccessFlags,C1.Util.DX.Direct3D11.ResourceMiscFlags,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Buffer"/> class.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="device">The device with which to associate the buffer.</param>
            <param name="bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name="data">Initial data used to initialize the buffer.</param>
            <param name="sizeInBytes">The size, in bytes, of the buffer. If 0 is specified, sizeof(T) is used. </param>
            <param name="usage">The usage pattern for the buffer.</param>
            <param name="accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name="miscFlags">Miscellaneous resource options.</param>
            <param name="structureByteStride">The size (in bytes) of the structure element for structured buffers.</param>
            <returns>An initialized buffer</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create``1(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.BindFlags,``0[],System.Int32,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.CpuAccessFlags,C1.Util.DX.Direct3D11.ResourceMiscFlags,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Buffer"/> class.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="device">The device with which to associate the buffer.</param>
            <param name="bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name="data">Initial data used to initialize the buffer.</param>
            <param name="sizeInBytes">The size, in bytes, of the buffer. If 0 is specified, sizeof(T) * data.Length is used.</param>
            <param name="usage">The usage pattern for the buffer.</param>
            <param name="accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name="miscFlags">Miscellaneous resource options.</param>
            <param name="structureByteStride">The size (in bytes) of the structure element for structured buffers.</param>
            <returns>An initialized buffer</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create``1(C1.Util.DX.Direct3D11.Device,``0@,C1.Util.DX.Direct3D11.BufferDescription)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Buffer"/> class.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="device">The device with which to associate the buffer.</param>
            <param name="data">Initial data used to initialize the buffer.</param>
            <param name="description">The description.</param>
            <returns>
            An initialized buffer
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.Create``1(C1.Util.DX.Direct3D11.Device,``0[],C1.Util.DX.Direct3D11.BufferDescription)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Buffer"/> class.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="device">The device with which to associate the buffer.</param>
            <param name="data">Initial data used to initialize the buffer.</param>
            <param name="description">The description.</param>
            <returns>
            An initialized buffer
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Buffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Buffer">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Buffer"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Buffer.GetDescription(C1.Util.DX.Direct3D11.BufferDescription@)">
            <summary>	
            void ID3D11Buffer::GetDesc([Out] D3D11_BUFFER_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Buffer.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ClassInstance">
            <summary>	
            ID3D11ClassInstance	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassInstance.Create(C1.Util.DX.Direct3D11.ClassLinkage,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Initializes a class-instance object that represents an HLSL class instance.	
            </summary>	
            <param name="linkage">An instance of <see cref="T:C1.Util.DX.Direct3D11.ClassLinkage"/>.</param>
            <param name="classTypeName">The type name of a class to initialize. </param>
            <param name="constantBufferOffset">Identifies the constant buffer that contains the class data. </param>
            <param name="constantVectorOffset">The four-component vector offset from the start of the constant buffer where the class data will begin. Consequently, this is not a byte offset. </param>
            <param name="textureOffset">The texture slot for the first texture; there may be multiple textures following the offset. </param>
            <param name="samplerOffset">The sampler slot for the first sampler; there may be multiple samplers following the offset. </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassInstance.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.ClassInstance"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassInstance.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.ClassInstance">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.ClassInstance"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassInstance.GetClassLinkage">
            <summary>	
            void ID3D11ClassInstance::GetClassLinkage([Out] ID3D11ClassLinkage** ppLinkage)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassInstance.GetDescription(C1.Util.DX.Direct3D11.ClassInstanceDescription@)">
            <summary>	
            void ID3D11ClassInstance::GetDesc([Out] D3D11_CLASS_INSTANCE_DESC* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassInstance.GetInstanceName(System.IntPtr,C1.Util.DX.PointerSize@)">
            <summary>	
            void ID3D11ClassInstance::GetInstanceName([Out, Buffer, Optional] char* pInstanceName,[InOut] SIZE_T* pBufferLength)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassInstance.GetTypeName(System.IntPtr,C1.Util.DX.PointerSize@)">
            <summary>	
            void ID3D11ClassInstance::GetTypeName([Out, Buffer, Optional] char* pTypeName,[InOut] SIZE_T* pBufferLength)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.ClassInstance.InstanceName">
            <summary>
            Gets the instance name of the current HLSL class.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.ClassInstance.TypeName">
            <summary>
            Gets the type of the current HLSL class.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.ClassInstance.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ClassLinkage">
            <summary>	
            ID3D11ClassLinkage	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassLinkage.Create(C1.Util.DX.Direct3D11.Device)">
            <summary>
            Create a new instance of <see cref = "T:C1.Util.DX.Direct3D11.ClassLinkage" />.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassLinkage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.ClassLinkage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassLinkage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.ClassLinkage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.ClassLinkage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassLinkage.GetClassInstance(System.String,System.Int32)">
            <summary>	
            HRESULT ID3D11ClassLinkage::GetClassInstance([In] const char* pClassInstanceName,[In] unsigned int InstanceIndex,[Out] ID3D11ClassInstance** ppInstance)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ClassLinkage.CreateClassInstance(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            HRESULT ID3D11ClassLinkage::CreateClassInstance([In] const char* pClassTypeName,[In] unsigned int ConstantBufferOffset,[In] unsigned int ConstantVectorOffset,[In] unsigned int TextureOffset,[In] unsigned int SamplerOffset,[Out, Fast] ID3D11ClassInstance** ppInstance)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ComputeShader">
            <summary>	
            ID3D11ComputeShader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShader.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.ComputeShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.ComputeShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShader.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.ComputeShader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.ComputeShader"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Counter">
            <summary>	
            ID3D11Counter	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Asynchronous">
            <summary>	
            ID3D11Asynchronous	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Asynchronous.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Asynchronous"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Asynchronous.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Asynchronous">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Asynchronous"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Asynchronous.GetDataSize">
            <summary>	
            unsigned int ID3D11Asynchronous::GetDataSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Counter.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.CounterDescription)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.Counter" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The counter description.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Counter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Counter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Counter.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Counter">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Counter"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Counter.GetDescription(C1.Util.DX.Direct3D11.CounterDescription@)">
            <summary>	
            void ID3D11Counter::GetDesc([Out] D3D11_COUNTER_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Counter.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CounterMetadata">
            <summary>
            Counter metadata that contains the type, name, units of measure, and a description of an existing counter.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.CounterMetadata.Type">
            <summary>
            Gets the data type of a counter (see <see cref="T:C1.Util.DX.Direct3D11.CounterType"/>).
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.CounterMetadata.HardwareCounterCount">
            <summary>
            Gets the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.CounterMetadata.Name">
            <summary>
            Gets a brief name for the counter.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.CounterMetadata.Units">
            <summary>
            Gets the units a counter measures.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.CounterMetadata.Description">
            <summary>
            Gets a description of the counter.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilState">
            <summary>	
            ID3D11DepthStencilState	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilState.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.DepthStencilStateDescription)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.DepthStencilState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DepthStencilState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilState.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DepthStencilState">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DepthStencilState"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilState.GetDescription(C1.Util.DX.Direct3D11.DepthStencilStateDescription@)">
            <summary>	
            void ID3D11DepthStencilState::GetDesc([Out] D3D11_DEPTH_STENCIL_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DepthStencilState.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilView">
            <summary>	
            ID3D11DepthStencilView	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ResourceView">
            <summary>	
            ID3D11View	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ResourceView.ResourceAs``1">
            <summary>	
            Get the resource that is accessed through this view.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ResourceView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.ResourceView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ResourceView.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.ResourceView">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.ResourceView"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ResourceView.GetResource">
            <summary>	
            void ID3D11View::GetResource([Out] void** ppResource)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.ResourceView.Resource">
            <summary>	
            Get the resource that is accessed through this view.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.DepthStencilView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.DepthStencilView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">DepthStencil</see> flag.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.DepthStencilViewDescription)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.DepthStencilView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.DepthStencilView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">DepthStencil</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:C1.Util.DX.Direct3D11.DepthStencilView" /> to be created.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DepthStencilView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilView.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DepthStencilView">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DepthStencilView"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilView.GetDescription(C1.Util.DX.Direct3D11.DepthStencilViewDescription@)">
            <summary>	
            void ID3D11DepthStencilView::GetDesc([Out] D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DepthStencilView.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Device">
            <summary>	
            ID3D11Device	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Device.MultisampleCountMaximum">
            <summary>Constant MultisampleCountMaximum.</summary>
            <unmanaged>D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT</unmanaged>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.Create(C1.Util.DX.Direct3D11.DriverType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Device"/> class. 
            </summary>
            <param name="driverType">
            Type of the driver.
            </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.Create(C1.Util.DX.DXGI.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Device"/> class. 
            </summary>
            <param name="adapter">
            The adapter.
            </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.Create(C1.Util.DX.Direct3D11.DriverType,C1.Util.DX.Direct3D11.DeviceCreationFlags)">
            <summary>
            Constructor for a D3D11 Device. See <see cref="M:C1.Util.DX.Direct3D11.D3D11.CreateDevice(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DriverType,System.IntPtr,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[],System.Int32,System.Int32,C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.FeatureLevel@,C1.Util.DX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
            <param name="driverType">Type of the driver.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.Create(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DeviceCreationFlags)">
            <summary>
            Constructor for a D3D11 Device. See <see cref="M:C1.Util.DX.Direct3D11.D3D11.CreateDevice(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DriverType,System.IntPtr,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[],System.Int32,System.Int32,C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.FeatureLevel@,C1.Util.DX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.Create(C1.Util.DX.Direct3D11.DriverType,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[])">
            <summary>
            Constructor for a D3D11 Device. See <see cref="M:C1.Util.DX.Direct3D11.D3D11.CreateDevice(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DriverType,System.IntPtr,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[],System.Int32,System.Int32,C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.FeatureLevel@,C1.Util.DX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.Create(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[])">
            <summary>
            Constructor for a D3D11 Device. See <see cref="M:C1.Util.DX.Direct3D11.D3D11.CreateDevice(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DriverType,System.IntPtr,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[],System.Int32,System.Int32,C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.FeatureLevel@,C1.Util.DX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetCounterMetadata(C1.Util.DX.Direct3D11.CounterDescription)">
            <summary>
            Get the type, name, units of measure, and a description of an existing counter.	
            </summary>
            <param name="counterDescription">The counter description.</param>
            <returns>Description of the counter</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.OpenSharedResource``1(System.IntPtr)">
            <summary>
            Give a device access to a shared resource created on a different Direct3d device.
            </summary>
            <typeparam name="T">The type of the resource we are gaining access to.</typeparam>
            <param name="resourceHandle">A resource handle. See remarks.</param>
            <returns>
            This method returns a reference to the resource we are gaining access to.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckComputeShaderFormatSupport(C1.Util.DX.DXGI.Format)">
            <summary>
            Check if this device is supporting compute shaders for the specified format.
            </summary>
            <param name="format">The format for which to check support.</param>
            <returns>Flags indicating usage contexts in which the specified format is supported.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckD3D11Feature">
            <summary>	
            Gets information about the features <see cref="F:C1.Util.DX.Direct3D11.Feature.D3D11Options"/> that are supported by the current graphics driver.
            </summary>	
            <returns>Returns a structure <see cref="T:C1.Util.DX.Direct3D11.FeatureDataD3D11Options"/> </returns>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckShaderMinimumPrecisionSupport">
            <summary>	
            Gets information about the features <see cref="F:C1.Util.DX.Direct3D11.Feature.ShaderMinimumPrecisionSupport"/> that are supported by the current graphics driver.
            </summary>	
            <returns>Returns a structure <see cref="T:C1.Util.DX.Direct3D11.FeatureDataShaderMinimumPrecisionSupport"/> </returns>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckFullNonPow2TextureSupport">
            <summary>	
            Gets information about whether the driver supports the nonpowers-of-2-unconditionally feature.
            </summary>	
            <returns>Returns <strong>true</strong> if this hardware supports non-powers-of-2 texture. This returns always true Direct3D 10 and higher feature levels.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckTileBasedDeferredRendererSupport">
            <summary>	
            Gets information about whether a rendering device batches rendering commands and performs multipass rendering into tiles or bins over a render area.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckFeatureSupport(C1.Util.DX.Direct3D11.Feature)">
            <summary>
            Check if this device is supporting a feature.
            </summary>
            <param name="feature">The feature to check.</param>
            <returns>
            Returns true if this device supports this feature, otherwise false.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckThreadingSupport(System.Boolean@,System.Boolean@)">
            <summary>
            Check if this device is supporting threading.
            </summary>
            <param name="supportsConcurrentResources">Support concurrent resources.</param>
            <param name="supportsCommandLists">Support command lists.</param>
            <returns>
            A <see cref="T:C1.Util.DX.HResult"/> object describing the result of the operation.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.IsSupportedFeatureLevel(C1.Util.DX.Direct3D11.FeatureLevel)">
            <summary>
            Check if a feature level is supported by a primary adapter.
            </summary>
            <param name="featureLevel">The feature level.</param>
            <returns><c>true</c> if the primary adapter is supporting this feature level; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.IsSupportedFeatureLevel(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.FeatureLevel)">
            <summary>
            Check if a feature level is supported by a particular adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="featureLevel">The feature level.</param>
            <returns><c>true</c> if the specified adapter is supporting this feature level; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetSupportedFeatureLevel">
            <summary>
            Gets the highest supported hardware feature level of the primary adapter.
            </summary>
            <returns>The highest supported hardware feature level.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetSupportedFeatureLevel(C1.Util.DX.DXGI.Adapter)">
            <summary>
            Gets the highest supported hardware feature level of the primary adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <returns>
            The highest supported hardware feature level.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateDevice(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DriverType,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[])">
            <summary>
            Internal CreateDevice
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Device">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Device"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateBuffer(C1.Util.DX.Direct3D11.BufferDescription@,System.Nullable{C1.Util.DX.DataBox})">
            <summary>	
            HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateTexture1D(C1.Util.DX.Direct3D11.Texture1DDescription@,C1.Util.DX.DataBox[])">
            <summary>	
            HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateTexture2D(C1.Util.DX.Direct3D11.Texture2DDescription@,C1.Util.DX.DataBox[])">
            <summary>	
            HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateTexture3D(C1.Util.DX.Direct3D11.Texture3DDescription@,C1.Util.DX.DataBox[])">
            <summary>	
            HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateShaderResourceView(C1.Util.DX.Direct3D11.Resource,System.Nullable{C1.Util.DX.Direct3D11.ShaderResourceViewDescription})">
            <summary>	
            HRESULT ID3D11Device::CreateShaderResourceView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc,[Out, Fast] ID3D11ShaderResourceView** ppSRView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateUnorderedAccessView(C1.Util.DX.Direct3D11.Resource,System.Nullable{C1.Util.DX.Direct3D11.UnorderedAccessViewDescription})">
            <summary>	
            HRESULT ID3D11Device::CreateUnorderedAccessView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc,[Out, Fast] ID3D11UnorderedAccessView** ppUAView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateRenderTargetView(C1.Util.DX.Direct3D11.Resource,System.Nullable{C1.Util.DX.Direct3D11.RenderTargetViewDescription})">
            <summary>	
            HRESULT ID3D11Device::CreateRenderTargetView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_RENDER_TARGET_VIEW_DESC* pDesc,[Out, Fast] ID3D11RenderTargetView** ppRTView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateDepthStencilView(C1.Util.DX.Direct3D11.Resource,System.Nullable{C1.Util.DX.Direct3D11.DepthStencilViewDescription})">
            <summary>	
            HRESULT ID3D11Device::CreateDepthStencilView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc,[Out, Fast] ID3D11DepthStencilView** ppDepthStencilView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateInputLayout(C1.Util.DX.Direct3D11.InputElement[],System.Int32,System.IntPtr,C1.Util.DX.PointerSize)">
            <summary>	
            HRESULT ID3D11Device::CreateInputLayout([In, Buffer] const D3D11_INPUT_ELEMENT_DESC* pInputElementDescs,[In] unsigned int NumElements,[In, Buffer] const void* pShaderBytecodeWithInputSignature,[In] SIZE_T BytecodeLength,[Out, Fast] ID3D11InputLayout** ppInputLayout)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateVertexShader(System.IntPtr,C1.Util.DX.PointerSize,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>	
            HRESULT ID3D11Device::CreateVertexShader([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Fast] ID3D11VertexShader** ppVertexShader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateGeometryShader(System.IntPtr,C1.Util.DX.PointerSize,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>	
            HRESULT ID3D11Device::CreateGeometryShader([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Fast] ID3D11GeometryShader** ppGeometryShader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateGeometryShaderWithStreamOutput(System.IntPtr,C1.Util.DX.PointerSize,C1.Util.DX.Direct3D11.StreamOutputElement[],System.Int32,System.Int32[],System.Int32,System.Int32,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>	
            HRESULT ID3D11Device::CreateGeometryShaderWithStreamOutput([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Buffer, Optional] const D3D11_SO_DECLARATION_ENTRY* pSODeclaration,[In] unsigned int NumEntries,[In, Buffer, Optional] const unsigned int* pBufferStrides,[In] unsigned int NumStrides,[In] unsigned int RasterizedStream,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Fast] ID3D11GeometryShader** ppGeometryShader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreatePixelShader(System.IntPtr,C1.Util.DX.PointerSize,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>	
            HRESULT ID3D11Device::CreatePixelShader([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Fast] ID3D11PixelShader** ppPixelShader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateHullShader(System.IntPtr,C1.Util.DX.PointerSize,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>	
            HRESULT ID3D11Device::CreateHullShader([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Fast] ID3D11HullShader** ppHullShader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateDomainShader(System.IntPtr,C1.Util.DX.PointerSize,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>	
            HRESULT ID3D11Device::CreateDomainShader([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Fast] ID3D11DomainShader** ppDomainShader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateComputeShader(System.IntPtr,C1.Util.DX.PointerSize,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>	
            HRESULT ID3D11Device::CreateComputeShader([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Fast] ID3D11ComputeShader** ppComputeShader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateClassLinkage">
            <summary>	
            HRESULT ID3D11Device::CreateClassLinkage([Out, Fast] ID3D11ClassLinkage** ppLinkage)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateBlendState(C1.Util.DX.Direct3D11.BlendStateDescription@)">
            <summary>	
            HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateDepthStencilState(C1.Util.DX.Direct3D11.DepthStencilStateDescription@)">
            <summary>	
            HRESULT ID3D11Device::CreateDepthStencilState([In] const D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc,[Out, Fast] ID3D11DepthStencilState** ppDepthStencilState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateRasterizerState(C1.Util.DX.Direct3D11.RasterizerStateDescription@)">
            <summary>	
            HRESULT ID3D11Device::CreateRasterizerState([In] const D3D11_RASTERIZER_DESC* pRasterizerDesc,[Out, Fast] ID3D11RasterizerState** ppRasterizerState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateSamplerState(C1.Util.DX.Direct3D11.SamplerStateDescription@)">
            <summary>	
            HRESULT ID3D11Device::CreateSamplerState([In] const D3D11_SAMPLER_DESC* pSamplerDesc,[Out, Fast] ID3D11SamplerState** ppSamplerState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateQuery(C1.Util.DX.Direct3D11.QueryDescription)">
            <summary>	
            HRESULT ID3D11Device::CreateQuery([In] const D3D11_QUERY_DESC* pQueryDesc,[Out, Fast] ID3D11Query** ppQuery)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreatePredicate(C1.Util.DX.Direct3D11.QueryDescription)">
            <summary>	
            HRESULT ID3D11Device::CreatePredicate([In] const D3D11_QUERY_DESC* pPredicateDesc,[Out, Fast] ID3D11Predicate** ppPredicate)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateCounter(C1.Util.DX.Direct3D11.CounterDescription)">
            <summary>	
            HRESULT ID3D11Device::CreateCounter([In] const D3D11_COUNTER_DESC* pCounterDesc,[Out, Fast] ID3D11Counter** ppCounter)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CreateDeferredContext(System.Int32)">
            <summary>	
            HRESULT ID3D11Device::CreateDeferredContext([In] unsigned int ContextFlags,[Out, Fast] ID3D11DeviceContext** ppDeferredContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.OpenSharedResource(System.IntPtr,System.Guid)">
            <summary>	
            HRESULT ID3D11Device::OpenSharedResource([In] void* hResource,[In] const GUID&amp; ReturnedInterface,[Out, Optional] void** ppResource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckFormatSupport(C1.Util.DX.DXGI.Format)">
            <summary>	
            HRESULT ID3D11Device::CheckFormatSupport([In] DXGI_FORMAT Format,[Out] D3D11_FORMAT_SUPPORT* pFormatSupport)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckMultisampleQualityLevels(C1.Util.DX.DXGI.Format,System.Int32)">
            <summary>	
            HRESULT ID3D11Device::CheckMultisampleQualityLevels([In] DXGI_FORMAT Format,[In] unsigned int SampleCount,[Out] unsigned int* pNumQualityLevels)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetCounterCapabilities">
            <summary>	
            void ID3D11Device::CheckCounterInfo([Out] D3D11_COUNTER_INFO* pCounterInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckCounter(C1.Util.DX.Direct3D11.CounterDescription,C1.Util.DX.Direct3D11.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>	
            HRESULT ID3D11Device::CheckCounter([In] const D3D11_COUNTER_DESC* pDesc,[Out] D3D11_COUNTER_TYPE* pType,[Out] unsigned int* pActiveCounters,[Out, Buffer, Optional] char* szName,[InOut, Optional] unsigned int* pNameLength,[Out, Buffer, Optional] char* szUnits,[InOut, Optional] unsigned int* pUnitsLength,[Out, Buffer, Optional] char* szDescription,[InOut, Optional] unsigned int* pDescriptionLength)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.CheckFeatureSupport(C1.Util.DX.Direct3D11.Feature,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ID3D11Device::CheckFeatureSupport([In] D3D11_FEATURE Feature,[Out, Buffer] void* pFeatureSupportData,[In] unsigned int FeatureSupportDataSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            HRESULT ID3D11Device::GetPrivateData([In] const GUID&amp; guid,[InOut] unsigned int* pDataSize,[Out, Buffer, Optional] void* pData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT ID3D11Device::SetPrivateData([In] const GUID&amp; guid,[In] unsigned int DataSize,[In, Buffer, Optional] const void* pData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.SetPrivateDataInterface(System.Guid,C1.Util.DX.ComObject)">
            <summary>	
            HRESULT ID3D11Device::SetPrivateDataInterface([In] const GUID&amp; guid,[In, Optional] const IUnknown* pData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetFeatureLevel">
            <summary>	
            D3D_FEATURE_LEVEL ID3D11Device::GetFeatureLevel()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetCreationFlags">
            <summary>	
            unsigned int ID3D11Device::GetCreationFlags()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetDeviceRemovedReason">
            <summary>	
            HRESULT ID3D11Device::GetDeviceRemovedReason()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetImmediateContext(C1.Util.DX.Direct3D11.DeviceContext@)">
            <summary>	
            void ID3D11Device::GetImmediateContext([Out] ID3D11DeviceContext** ppImmediateContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.SetExceptionMode(System.Int32)">
            <summary>	
            HRESULT ID3D11Device::SetExceptionMode([In] unsigned int RaiseFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device.GetExceptionMode">
            <summary>	
            unsigned int ID3D11Device::GetExceptionMode()	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Device.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Device.ImmediateContext">
            <summary>	
            GetImmediateContext	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Device1">
            <summary>	
            ID3D11Device1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.CreateDeviceContextState``1(C1.Util.DX.Direct3D11.CreateDeviceContextStateFlags,C1.Util.DX.Direct3D11.FeatureLevel[],C1.Util.DX.Direct3D11.FeatureLevel@)">
            <summary>	
            Creates a context state object that holds all Microsoft Direct3D state and some Direct3D behavior.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.OpenSharedResource1``1(System.IntPtr)">
            <summary>	
            Gives a device access to a shared resource that is referenced by name and that was created on a different device. You must have previously created the resource as shared and specified that it uses NT handles (that is, you set the <see cref="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.SharedNthandle"/> flag).
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.OpenSharedResource1``1(System.String,C1.Util.DX.DXGI.SharedResourceFlags)">
            <summary>	
            Gives a device access to a shared resource that is referenced by name and that was created on a different device. You must have previously created the resource as shared and specified that it uses NT handles (that is, you set the <see cref="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.SharedNthandle"/> flag).
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Device1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Device1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Device1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.GetImmediateContext1(C1.Util.DX.Direct3D11.DeviceContext1@)">
            <summary>	
            void ID3D11Device1::GetImmediateContext1([Out] ID3D11DeviceContext1** ppImmediateContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.CreateDeferredContext1(System.Int32)">
            <summary>	
            HRESULT ID3D11Device1::CreateDeferredContext1([In] unsigned int ContextFlags,[Out, Fast] ID3D11DeviceContext1** ppDeferredContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.CreateBlendState1(C1.Util.DX.Direct3D11.BlendStateDescription1@)">
            <summary>	
            HRESULT ID3D11Device1::CreateBlendState1([In] const D3D11_BLEND_DESC1* pBlendStateDesc,[Out, Fast] ID3D11BlendState1** ppBlendState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.CreateRasterizerState1(C1.Util.DX.Direct3D11.RasterizerStateDescription1@)">
            <summary>	
            HRESULT ID3D11Device1::CreateRasterizerState1([In] const D3D11_RASTERIZER_DESC1* pRasterizerDesc,[Out, Fast] ID3D11RasterizerState1** ppRasterizerState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.CreateDeviceContextState(C1.Util.DX.Direct3D11.CreateDeviceContextStateFlags,C1.Util.DX.Direct3D11.FeatureLevel[],System.Int32,System.Int32,System.Guid,C1.Util.DX.Direct3D11.FeatureLevel@)">
            <summary>	
            HRESULT ID3D11Device1::CreateDeviceContextState([In] D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG Flags,[In, Buffer] const D3D_FEATURE_LEVEL* pFeatureLevels,[In] unsigned int FeatureLevels,[In] unsigned int SDKVersion,[In] const GUID&amp; EmulatedInterface,[Out, Optional] D3D_FEATURE_LEVEL* pChosenFeatureLevel,[Out, Fast] ID3DDeviceContextState** ppContextState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.OpenSharedResource1(System.IntPtr,System.Guid)">
            <summary>	
            HRESULT ID3D11Device1::OpenSharedResource1([In] void* hResource,[In] const GUID&amp; returnedInterface,[Out] void** ppResource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device1.OpenSharedResourceByName(System.String,C1.Util.DX.DXGI.SharedResourceFlags,System.Guid)">
            <summary>	
            HRESULT ID3D11Device1::OpenSharedResourceByName([In] const wchar_t* lpName,[In] DXGI_SHARED_RESOURCE_FLAGS dwDesiredAccess,[In] const GUID&amp; returnedInterface,[Out] void** ppResource)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Device1.ImmediateContext1">
            <summary>	
            GetImmediateContext1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Device2">
            <summary>	
            ID3D11Device2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Device2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device2.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Device2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Device2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device2.GetImmediateContext2(C1.Util.DX.Direct3D11.DeviceContext2@)">
            <summary>	
            void ID3D11Device2::GetImmediateContext2([Out] ID3D11DeviceContext2** ppImmediateContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device2.CreateDeferredContext2(System.Int32)">
            <summary>	
            HRESULT ID3D11Device2::CreateDeferredContext2([In] unsigned int ContextFlags,[Out, Fast] ID3D11DeviceContext2** ppDeferredContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device2.GetResourceTiling(C1.Util.DX.Direct3D11.Resource,System.Int32@,C1.Util.DX.Direct3D11.PackedMipDescription@,C1.Util.DX.Direct3D11.TileShape@,System.Int32@,System.Int32,C1.Util.DX.Direct3D11.SubResourceTiling[])">
            <summary>	
            void ID3D11Device2::GetResourceTiling([In] ID3D11Resource* pTiledResource,[Out, Optional] unsigned int* pNumTilesForEntireResource,[Out, Optional] D3D11_PACKED_MIP_DESC* pPackedMipDesc,[Out, Optional] D3D11_TILE_SHAPE* pStandardTileShapeForNonPackedMips,[InOut] unsigned int* pNumSubresourceTilings,[In] unsigned int FirstSubresourceTilingToGet,[Out, Buffer] D3D11_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Device2.CheckMultisampleQualityLevels1(C1.Util.DX.DXGI.Format,System.Int32,C1.Util.DX.Direct3D11.CheckMultisampleQualityLevelsFlags)">
            <summary>	
            HRESULT ID3D11Device2::CheckMultisampleQualityLevels1([In] DXGI_FORMAT Format,[In] unsigned int SampleCount,[In] D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG Flags,[Out] unsigned int* pNumQualityLevels)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Device2.ImmediateContext2">
            <summary>	
            GetImmediateContext2	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CommonShaderStageBase">
            <summary>
            Common Shader class. Provides a common set of methods for a Shader Stage.
            TODO: check if usage of abstract is not introducing an unacceptable overhead...
            </summary>
            <summary>
            D3D11 common shader constants.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.SamplerRegisterComponents">
            <summary>D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.SamplerRegisterCount">
            <summary>D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferComponentBitCount">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TextureCoordRangeReductionMinimum">
            <summary>D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TempRegisterComponents">
            <summary>D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferPartialUpdateExtentsByteAlignment">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.InputResourceSlotCount">
            <summary>D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ImmediateConstantBufferRegisterCount">
            <summary>D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TextureElOffsetMaximumPositive">
            <summary>D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferComponents">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TempRegisterReadsPerInst">
            <summary>D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.SubRoutineNestingLimit">
            <summary>D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ImmediateConstantBufferRegisterReadPorts">
            <summary>D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferApiSlotCount">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.InputResourceRegisterReadPorts">
            <summary>D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ImmediateConstantBufferRegisterReadsPerInst">
            <summary>D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.InputResourceRegisterCount">
            <summary>D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.InputResourceRegisterReadsPerInst">
            <summary>D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferRegisterReadPorts">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.FlowcontrolNestingLimit">
            <summary>D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ImmediateValueComponentBitCount">
            <summary>D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.SamplerRegisterReadsPerInst">
            <summary>D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TempRegisterComponentBitCount">
            <summary>D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.SamplerRegisterReadPorts">
            <summary>D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TextureElOffsetMaximumNegative">
            <summary>D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TextureCoordRangeReductionMaximum">
            <summary>D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TempRegisterCount">
            <summary>D3D11_COMMONSHADER_TEMP_REGISTER_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferRegisterCount">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ImmediateConstantBufferRegisterComponents">
            <summary>D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.TempRegisterReadPorts">
            <summary>D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.InputResourceRegisterComponents">
            <summary>D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferRegisterComponents">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferHwSlotCount">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.SamplerSlotCount">
            <summary>D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT</summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonShaderStageBase.ConstantBufferRegisterReadsPerInst">
            <summary>D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST</summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.CommonShaderStageBase"/> class.
            </summary>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.GetConstantBuffers(System.Int32,System.Int32)">
            <summary>
            Gets the constant buffers used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving constant buffers.</param>
            <param name = "count">Number of buffers to retrieve.</param>
            <returns>An array of constant buffers.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.GetSamplers(System.Int32,System.Int32)">
            <summary>
            Gets the sampler states used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving samplers.</param>
            <param name = "count">Number of samplers to retrieve.</param>
            <returns>An array of sampler states.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.GetShaderResources(System.Int32,System.Int32)">
            <summary>
            Gets the shader resources used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving shader resources.</param>
            <param name = "count">Number of resources to retrieve.</param>
            <returns>An array of shader resources.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetConstantBuffer(System.Int32,C1.Util.DX.Direct3D11.Buffer)">
            <summary>
            Sets a single constant buffer to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the constant buffer.</param>
            <param name = "constantBuffer">constant buffer to set</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetConstantBuffers(System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>
            Sets an array of constant buffers to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the array of constant buffers.</param>
            <param name = "constantBuffers">An array of constant buffer to set</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetConstantBuffers(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer})">
            <summary>
            Sets an array of constant buffers to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the array of constant buffers.</param>
            <param name = "constantBuffers">An array of constant buffer to set</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetSampler(System.Int32,C1.Util.DX.Direct3D11.SamplerState)">
            <summary>
            Sets a single sampler to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the sampler.</param>
            <param name = "sampler">sampler state to set</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetSamplers(System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>
            Sets an array of samplers to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the array of sampler states.</param>
            <param name = "samplers">An array of sampler state to set</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetSamplers(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.SamplerState})">
            <summary>
            Sets an array of samplers to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which  to set the array of sampler states.</param>
            <param name = "samplers">An array of sampler state to set</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetShaderResource(System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView)">
            <summary>
            Sets a single shader resource to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the resource.</param>
            <param name = "resourceView">Resource view to attach</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetShaderResources(System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "shaderResourceViews">Array of {{shader resource view}} interfaces to set to the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetShaderResources(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ShaderResourceView})">
            <summary>
            Bind an array of shader resources to the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "shaderResourceViews">Array of {{shader resource view}} interfaces to set to the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.GetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>
            Get the shader resources.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name = "shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.GetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>
            Get an array of sampler states from the shader pipeline stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
            <param name="samplersRef">Array of sampler-state interface pointers (see <see cref="T:C1.Util.DX.Direct3D11.SamplerState"/>) to be returned by the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.GetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>
            Get the constant buffers used by the shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
            <param name="constantBuffersRef">Array of constant buffer interface pointers (see <see cref="T:C1.Util.DX.Direct3D11.Buffer"/>) to be returned by the method.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name = "shaderResourceViews">Array of {{shader resource view}} interfaces to set to the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetShaderResources(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ShaderResourceView})">
            <summary>
            Bind an array of shader resources to the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name = "shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetShaderResources(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Bind an array of shader resources to the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name = "shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>
            Set an array of sampler states to the shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
            <param name="samplers">Pointer to an array of sampler-state interfaces (see <see cref="T:C1.Util.DX.Direct3D11.SamplerState"/>). See Remarks.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetSamplers(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.SamplerState})">
            <summary>
            Set an array of sampler states to the shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
            <param name="samplers">Pointer to an array of sampler-state interfaces (see <see cref="T:C1.Util.DX.Direct3D11.SamplerState"/>). See Remarks.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>
            Set the constant buffers used by the shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
            <param name="constantBuffers">Array of constant buffers (see <see cref="T:C1.Util.DX.Direct3D11.Buffer"/>) being given to the device.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStageBase.SetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer})">
            <summary>
            Set the constant buffers used by the shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
            <param name="constantBuffers">Array of constant buffers (see <see cref="T:C1.Util.DX.Direct3D11.Buffer"/>) being given to the device.</param>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CommonShaderStage`1">
            <summary>
            Common Shader class. Provides a common set of methods for a Shader Stage.
            TODO: check if usage of abstract is not introducing an unacceptable overhead...
            </summary>
            <typeparam name = "T">Type of the shader</typeparam>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStage`1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.CommonShaderStage`1"/> class.
            </summary>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStage`1.Get">
            <summary>
            Gets the shader currently assigned to the device.
            </summary>
            <returns>The shader (null if no shader is assigned).</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStage`1.Get(C1.Util.DX.Direct3D11.ClassInstance[])">
            <summary>
            Gets the shader currently assigned to the device.
            </summary>
            <param name = "classInstances">An array that will be used to contain any class instances currently active.</param>
            <returns>The shader (null if no shader is assigned).</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStage`1.Set(`0)">
            <summary>
            Assigns a compute shader to the device.
            </summary>
            <param name = "shader">The shader to assign to the device. Assign null to disable the compute shader.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStage`1.Set(`0,C1.Util.DX.Direct3D11.ClassInstance[])">
            <summary>
            Assigns a compute shader to the device.
            </summary>
            <param name = "shader">The shader to assign to the device. Assign <c>null</c> to disable the compute shader.</param>
            <param name = "classInstances">An array of class-instance interfaces. Each interface used by a shader must have a corresponding class instance or the shader will get disabled.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommonShaderStage`1.Set(`0,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ClassInstance})">
            <summary>
            Assigns a compute shader to the device.
            </summary>
            <param name = "shader">The shader to assign to the device. Assign <c>null</c> to disable the compute shader.</param>
            <param name = "classInstances">An array of class-instance interfaces. Each interface used by a shader must have a corresponding class instance or the shader will get disabled.</param>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ComputeShaderStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.UnorderedAccessViewSlotCount">
            <summary>Constant UnorderedAccessViewSlotCount.</summary>
            <unmanaged>D3D11_PS_CS_UAV_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.DispatchMaximumThreadGroupsPerDimension">
            <summary>Constant DispatchMaximumThreadGroupsPerDimension.</summary>
            <unmanaged>D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadidingroupflattenedRegisterComponents">
            <summary>Constant ThreadidingroupflattenedRegisterComponents.</summary>
            <unmanaged>D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadidingroupRegisterComponents">
            <summary>Constant ThreadidingroupRegisterComponents.</summary>
            <unmanaged>D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadidRegisterComponents">
            <summary>Constant ThreadidRegisterComponents.</summary>
            <unmanaged>D3D11_CS_THREADID_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupSharedMemoryRegisterCount">
            <summary>Constant ThreadGroupSharedMemoryRegisterCount.</summary>
            <unmanaged>D3D11_CS_TGSM_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadLocalTempRegisterPool">
            <summary>Constant ThreadLocalTempRegisterPool.</summary>
            <unmanaged>D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadgroupidRegisterComponents">
            <summary>Constant ThreadgroupidRegisterComponents.</summary>
            <unmanaged>D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupMaximumY">
            <summary>Constant ThreadGroupMaximumY.</summary>
            <unmanaged>D3D11_CS_THREAD_GROUP_MAX_Y</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupSharedMemoryResourceRegisterReadPorts">
            <summary>Constant ThreadGroupSharedMemoryResourceRegisterReadPorts.</summary>
            <unmanaged>D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadidingroupRegisterCount">
            <summary>Constant ThreadidingroupRegisterCount.</summary>
            <unmanaged>D3D11_CS_THREADIDINGROUP_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupMinimumY">
            <summary>Constant ThreadGroupMinimumY.</summary>
            <unmanaged>D3D11_CS_THREAD_GROUP_MIN_Y</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadidingroupflattenedRegisterCount">
            <summary>Constant ThreadidingroupflattenedRegisterCount.</summary>
            <unmanaged>D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupSharedMemoryRegisterReadsPerInst">
            <summary>Constant ThreadGroupSharedMemoryRegisterReadsPerInst.</summary>
            <unmanaged>D3D11_CS_TGSM_REGISTER_READS_PER_INST</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadgroupidRegisterCount">
            <summary>Constant ThreadgroupidRegisterCount.</summary>
            <unmanaged>D3D11_CS_THREADGROUPID_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupMaximumZ">
            <summary>Constant ThreadGroupMaximumZ.</summary>
            <unmanaged>D3D11_CS_THREAD_GROUP_MAX_Z</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupMinimumX">
            <summary>Constant ThreadGroupMinimumX.</summary>
            <unmanaged>D3D11_CS_THREAD_GROUP_MIN_X</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupSharedMemoryResourceRegisterComponents">
            <summary>Constant ThreadGroupSharedMemoryResourceRegisterComponents.</summary>
            <unmanaged>D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupMaximumX">
            <summary>Constant ThreadGroupMaximumX.</summary>
            <unmanaged>D3D11_CS_THREAD_GROUP_MAX_X</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupMaximumThreadsPerGroup">
            <summary>Constant ThreadGroupMaximumThreadsPerGroup.</summary>
            <unmanaged>D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadGroupMinimumZ">
            <summary>Constant ThreadGroupMinimumZ.</summary>
            <unmanaged>D3D11_CS_THREAD_GROUP_MIN_Z</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderStage.ThreadidRegisterCount">
            <summary>Constant ThreadidRegisterCount.</summary>
            <unmanaged>D3D11_CS_THREADID_REGISTER_COUNT</unmanaged>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.GetUnorderedAccessViews(System.Int32,System.Int32)">
            <summary>	
            Gets an array of views for an unordered resource.	
            </summary>	
            <param name="startSlot">Index of the first element in the zero-based array to return (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). </param>
            <param name="count">Number of views to get (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot). </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetUnorderedAccessView(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessView">A reference to an <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetUnorderedAccessView(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView,System.Int32)">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessView">A reference to an <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
            <param name="uavInitialCount">An Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept.   Any other values set the hidden counter for that Appendable/Consumable UAV. uAVInitialCount is only relevant for UAVs which have the <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessViewBufferFlags"/> flag,  otherwise the argument is ignored. </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetUnorderedAccessViews(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessViews">A reference to an array of <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetUnorderedAccessViews(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessViews">A reference to an array of <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
            <param name="uavInitialCounts">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept.   Any other values set the hidden counter for that Appendable/Consumable UAV.  pUAVInitialCounts is only relevant for UAVs which have the <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessViewBufferFlags"/> flag,  otherwise the argument is ignored. </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.ComputeShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.ComputeShaderStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.ComputeShaderStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetShaderResources(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::CSSetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[In, Buffer, Optional] const void** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetUnorderedAccessViews(System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::CSSetUnorderedAccessViews([In] unsigned int StartSlot,[In] unsigned int NumUAVs,[In, Buffer, Optional] const void** ppUnorderedAccessViews,[In, Buffer, Optional] const void* pUAVInitialCounts)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetShader(C1.Util.DX.Direct3D11.ComputeShader,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext::CSSetShader([In, Optional] ID3D11ComputeShader* pComputeShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetShader(C1.Util.DX.Direct3D11.ComputeShader,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ClassInstance},System.Int32)">
            <summary>	
            void ID3D11DeviceContext::CSSetShader([In, Optional] ID3D11ComputeShader* pComputeShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetSamplers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::CSSetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[In, Buffer, Optional] const void** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.SetConstantBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::CSSetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const void** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.GetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>	
            void ID3D11DeviceContext::CSGetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[Out, Buffer, Optional] ID3D11ShaderResourceView** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.GetUnorderedAccessViews(System.Int32,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            void ID3D11DeviceContext::CSGetUnorderedAccessViews([In] unsigned int StartSlot,[In] unsigned int NumUAVs,[Out, Buffer, Optional] ID3D11UnorderedAccessView** ppUnorderedAccessViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.GetShader(C1.Util.DX.Direct3D11.ComputeShader@,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::CSGetShader([Out] ID3D11ComputeShader** ppComputeShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] unsigned int* pNumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.GetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>	
            void ID3D11DeviceContext::CSGetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[Out, Buffer, Optional] ID3D11SamplerState** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ComputeShaderStage.GetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>	
            void ID3D11DeviceContext::CSGetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceContext">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.Create(C1.Util.DX.Direct3D11.Device)">
            <summary>
            Constructs a new deferred context <see cref = "T:C1.Util.DX.Direct3D11.DeviceContext" />.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.IsDataAvailable(C1.Util.DX.Direct3D11.Asynchronous)">
            <summary>
            Determines whether asynchronous query data is available.
            </summary>
            <param name="data">The data.</param>
            <returns>
            <c>true</c> if asynchronous query data is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.IsDataAvailable(C1.Util.DX.Direct3D11.Asynchronous,C1.Util.DX.Direct3D11.AsynchronousFlags)">
            <summary>
            Determines whether asynchronous query data is available.
            </summary>
            <param name="data">The data.</param>
            <param name="flags">Optional flags</param>
            <returns>
            <c>true</c> if asynchronous query data is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetData(C1.Util.DX.Direct3D11.Asynchronous)">
            <summary>
            Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetData``1(C1.Util.DX.Direct3D11.Asynchronous)">
            <summary>
            Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetData``1(C1.Util.DX.Direct3D11.Asynchronous,``0@)">
            <summary>
            Gets data from the GPU asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The asynchronous data provider.</param>
            <param name="result">The data retrieved from the GPU.</param>
            <returns>
            True if result contains valid data, false otherwise.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetData(C1.Util.DX.Direct3D11.Asynchronous,C1.Util.DX.Direct3D11.AsynchronousFlags)">
            <summary>
            Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <param name = "flags">Flags specifying how the command should operate.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetData``1(C1.Util.DX.Direct3D11.Asynchronous,C1.Util.DX.Direct3D11.AsynchronousFlags)">
            <summary>
            Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <param name = "flags">Flags specifying how the command should operate.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetData``1(C1.Util.DX.Direct3D11.Asynchronous,C1.Util.DX.Direct3D11.AsynchronousFlags,``0@)">
            <summary>
            Gets data from the GPU asynchronously.
            </summary>
            <param name="data">The asynchronous data provider.</param>
            <param name="flags">Flags specifying how the command should operate.</param>
            <param name="result">The data retrieved from the GPU.</param>
            <returns>
            True if result contains valid data, false otherwise.
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.CopyResource(C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.Resource)">
            <summary>	
            Copy the entire contents of the source resource to the destination resource using the GPU. 	
            </summary>	
            <param name="source">A reference to the source resource (see <see cref="T:C1.Util.DX.Direct3D11.Resource"/>). </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:C1.Util.DX.Direct3D11.Resource"/>). </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.CopySubresourceRegion(C1.Util.DX.Direct3D11.Resource,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion},C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Copy a region from a source resource to a destination resource.	
            </summary>	
            <param name="source">A reference to the source resource (see <see cref="T:C1.Util.DX.Direct3D11.Resource"/>). </param>
            <param name="sourceSubresource">Source subresource index. </param>
            <param name="sourceRegion">A reference to a 3D box (see <see cref="T:C1.Util.DX.Direct3D11.ResourceRegion"/>) that defines the source subresources that can be copied. If NULL, the entire source subresource is copied. The box must fit within the source resource. </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:C1.Util.DX.Direct3D11.Resource"/>). </param>
            <param name="destinationSubResource">Destination subresource index. </param>
            <param name="dstX">The x-coordinate of the upper left corner of the destination region. </param>
            <param name="dstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero. </param>
            <param name="dstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero. </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ResolveSubresource(C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.DXGI.Format)">
            <summary>	
            Copy a multisampled resource into a non-multisampled resource.	
            </summary>	
            <param name="source">Source resource. Must be multisampled. </param>
            <param name="sourceSubresource">&gt;The source subresource of the source resource. </param>
            <param name="destination">Destination resource. Must be a created with the <see cref="F:C1.Util.DX.Direct3D11.ResourceUsage.Default"/> flag and be single-sampled. See <see cref="T:C1.Util.DX.Direct3D11.Resource"/>. </param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource. Use {{D3D11CalcSubresource}} to calculate the index. </param>
            <param name="format">A <see cref="T:C1.Util.DX.DXGI.Format"/> that indicates how the multisampled resource will be resolved to a single-sampled resource.  See remarks. </param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Texture1D,System.Int32,System.Int32,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags,C1.Util.DX.DataStream@)">
            <summary>
            Maps the data contained in a subresource to a memory pointer, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="mipSlice">The mip slice.</param>
            <param name="arraySlice">The array slice.</param>
            <param name="mode">The mode.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The output stream containing the pointer.</param>
            <returns>
            The locked <see cref="T:C1.Util.DX.DataBox"/>
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Texture2D,System.Int32,System.Int32,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags,C1.Util.DX.DataStream@)">
            <summary>
            Maps the data contained in a subresource to a memory pointer, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="mipSlice">The mip slice.</param>
            <param name="arraySlice">The array slice.</param>
            <param name="mode">The mode.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The output stream containing the pointer.</param>
            <returns>
            The locked <see cref="T:C1.Util.DX.DataBox"/>
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Texture3D,System.Int32,System.Int32,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags,C1.Util.DX.DataStream@)">
            <summary>
            Maps the data contained in a subresource to a memory pointer, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="mipSlice">The mip slice.</param>
            <param name="arraySlice">The array slice.</param>
            <param name="mode">The mode.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The output stream containing the pointer.</param>
            <returns>
            The locked <see cref="T:C1.Util.DX.DataBox"/>
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Buffer,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags,C1.Util.DX.DataStream@)">
            <summary>
            Maps the data contained in a subresource to a memory pointer, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="mode">The mode.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The output stream containing the pointer.</param>
            <returns>
            The locked <see cref="T:C1.Util.DX.DataBox"/>
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags,System.Int32@)">
            <summary>
            Maps the data contained in a subresource to a memory pointer, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="mipSlice">The mip slice.</param>
            <param name="arraySlice">The array slice.</param>
            <param name="mode">The mode.</param>
            <param name="flags">The flags.</param>
            <param name="mipSize">Size of the selected miplevel.</param>
            <returns>
            The locked <see cref="T:C1.Util.DX.DataBox"/>
            </returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags,C1.Util.DX.DataStream@)">
            <summary>
            Maps the data contained in a subresource to a memory pointer, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="subresource">The subresource.</param>
            <param name="mode">The mode.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The output stream containing the pointer.</param>
            <returns>The locked <see cref="T:C1.Util.DX.DataBox"/></returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags)">
            <summary>	
            Gets a reference to the data contained in a subresource, and denies the GPU access to that subresource.
            </summary>	
            <param name="resourceRef">A reference to a <strong><see cref="T:C1.Util.DX.Direct3D11.Resource"/></strong> interface.</param>	
            <param name="subresource">Index number of the subresource.</param>	
            <param name="mapType">Specifies the CPU's read and write permissions for a resource. For possible values, see <strong><see cref="T:C1.Util.DX.Direct3D11.MapMode"/></strong>.</param>	
            <param name="mapFlags"><strong>Flag</strong> that specifies what the CPU should do when the GPU is busy. This flag is optional.</param>	
            <returns>The mapped subresource (see <strong><see cref="T:C1.Util.DX.DataBox"/></strong>). If <see cref="F:C1.Util.DX.Direct3D11.MapFlags.DoNotWait"/> is used and the resource is still being used by the GPU, this method return an empty DataBox whose property <see cref="P:C1.Util.DX.DataBox.IsEmpty"/> returns <c>true</c>.</returns>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresource``1(``0@,C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion})">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="data">A reference to the data to upload.</param>
            <param name="resource">The destination resource.</param>
            <param name="subresource">The destination subresource.</param>
            <param name="rowPitch">The row pitch.</param>
            <param name="depthPitch">The depth pitch.</param>
            <param name="region">The region</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresource``1(``0[],C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion})">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="data">A reference to the data to upload.</param>
            <param name="resource">The destination resource.</param>
            <param name="subresource">The destination subresource.</param>
            <param name="rowPitch">The row pitch.</param>
            <param name="depthPitch">The depth pitch.</param>
            <param name="region">A region that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresource(C1.Util.DX.DataBox,C1.Util.DX.Direct3D11.Resource,System.Int32)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name = "source">The source data.</param>
            <param name = "resource">The destination resource.</param>
            <param name = "subresource">The destination subresource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresource(C1.Util.DX.DataBox,C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.Direct3D11.ResourceRegion)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name = "source">The source data.</param>
            <param name = "resource">The destination resource.</param>
            <param name = "subresource">The destination subresource.</param>
            <param name = "region">The destination region within the resource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresourceSafe``1(``0@,C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="data">A reference to the data to upload.</param>
            <param name="resource">The destination resource.</param>
            <param name="srcBytesPerElement">The size in bytes per pixel/block element.</param>
            <param name="subresource">The destination subresource.</param>
            <param name="rowPitch">The row pitch.</param>
            <param name="depthPitch">The depth pitch.</param>
            <param name="isCompressedResource">if set to <c>true</c> the resource is a block/compressed resource</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresourceSafe``1(``0[],C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <typeparam name="T">Type of the data to upload</typeparam>
            <param name="data">A reference to the data to upload.</param>
            <param name="resource">The destination resource.</param>
            <param name="srcBytesPerElement">The size in bytes per pixel/block element.</param>
            <param name="subresource">The destination subresource.</param>
            <param name="rowPitch">The row pitch.</param>
            <param name="depthPitch">The depth pitch.</param>
            <param name="isCompressedResource">if set to <c>true</c> the resource is a block/compressed resource</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresourceSafe(C1.Util.DX.DataBox,C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name = "source">The source data.</param>
            <param name = "resource">The destination resource.</param>
            <param name="srcBytesPerElement">The size in bytes per pixel/block element.</param>
            <param name = "subresource">The destination subresource.</param>
            <param name="isCompressedResource">if set to <c>true</c> the resource is a block/compressed resource</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresourceSafe(C1.Util.DX.DataBox,C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,C1.Util.DX.Direct3D11.ResourceRegion,System.Boolean)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name = "source">The source data.</param>
            <param name = "resource">The destination resource.</param>
            <param name="srcBytesPerElement">The size in bytes per pixel/block element.</param>
            <param name = "subresource">The destination subresource.</param>
            <param name = "region">The destination region within the resource.</param>
            <param name="isCompressedResource">if set to <c>true</c> the resource is a block/compressed resource</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresourceSafe(C1.Util.DX.Direct3D11.Resource,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion},System.IntPtr,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Updates the subresource safe method.
            </summary>
            <param name="dstResourceRef">The DST resource ref.</param>
            <param name="dstSubresource">The DST subresource.</param>
            <param name="dstBoxRef">The DST box ref.</param>
            <param name="pSrcData">The p SRC data.</param>
            <param name="srcRowPitch">The SRC row pitch.</param>
            <param name="srcDepthPitch">The SRC depth pitch.</param>
            <param name="srcBytesPerElement">The size in bytes per pixel/block element.</param>
            <param name="isCompressedResource">if set to <c>true</c> the resource is a block/compressed resource</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DeviceContext"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DeviceContext">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DeviceContext"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.NativePointerUpdated(System.IntPtr)">
            <summary>
            Method called when the <see cref="P:C1.Util.DX.CppObject.NativePointer"/> is updated.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.DrawIndexed(System.Int32,System.Int32,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DrawIndexed([In] unsigned int IndexCount,[In] unsigned int StartIndexLocation,[In] int BaseVertexLocation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.Draw(System.Int32,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::Draw([In] unsigned int VertexCount,[In] unsigned int StartVertexLocation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.MapSubresource(C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.Direct3D11.MapMode,C1.Util.DX.Direct3D11.MapFlags,C1.Util.DX.DataBox@)">
            <summary>	
            HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UnmapSubresource(C1.Util.DX.Direct3D11.Resource,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::Unmap([In] ID3D11Resource* pResource,[In] unsigned int Subresource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DrawIndexedInstanced([In] unsigned int IndexCountPerInstance,[In] unsigned int InstanceCount,[In] unsigned int StartIndexLocation,[In] int BaseVertexLocation,[In] unsigned int StartInstanceLocation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.DrawInstanced(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DrawInstanced([In] unsigned int VertexCountPerInstance,[In] unsigned int InstanceCount,[In] unsigned int StartVertexLocation,[In] unsigned int StartInstanceLocation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.Begin(C1.Util.DX.Direct3D11.Asynchronous)">
            <summary>	
            void ID3D11DeviceContext::Begin([In] ID3D11Asynchronous* pAsync)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.End(C1.Util.DX.Direct3D11.Asynchronous)">
            <summary>	
            void ID3D11DeviceContext::End([In] ID3D11Asynchronous* pAsync)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetDataInternal(C1.Util.DX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,C1.Util.DX.Direct3D11.AsynchronousFlags)">
            <summary>	
            HRESULT ID3D11DeviceContext::GetData([In] ID3D11Asynchronous* pAsync,[Out, Buffer, Optional] void* pData,[In] unsigned int DataSize,[In] D3D11_ASYNC_GETDATA_FLAG GetDataFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.SetPredication(C1.Util.DX.Direct3D11.Predicate,C1.Util.DX.Bool)">
            <summary>	
            void ID3D11DeviceContext::SetPredication([In, Optional] ID3D11Predicate* pPredicate,[In] BOOL PredicateValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.DrawAuto">
            <summary>	
            void ID3D11DeviceContext::DrawAuto()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.DrawIndexedInstancedIndirect(C1.Util.DX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DrawIndexedInstancedIndirect([In] ID3D11Buffer* pBufferForArgs,[In] unsigned int AlignedByteOffsetForArgs)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.DrawInstancedIndirect(C1.Util.DX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DrawInstancedIndirect([In] ID3D11Buffer* pBufferForArgs,[In] unsigned int AlignedByteOffsetForArgs)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.Dispatch(System.Int32,System.Int32,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::Dispatch([In] unsigned int ThreadGroupCountX,[In] unsigned int ThreadGroupCountY,[In] unsigned int ThreadGroupCountZ)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.DispatchIndirect(C1.Util.DX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DispatchIndirect([In] ID3D11Buffer* pBufferForArgs,[In] unsigned int AlignedByteOffsetForArgs)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.CopySubresourceRegion_(C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,C1.Util.DX.Direct3D11.Resource,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion})">
            <summary>	
            void ID3D11DeviceContext::CopySubresourceRegion([In] ID3D11Resource* pDstResource,[In] unsigned int DstSubresource,[In] unsigned int DstX,[In] unsigned int DstY,[In] unsigned int DstZ,[In] ID3D11Resource* pSrcResource,[In] unsigned int SrcSubresource,[In, Optional] const D3D11_BOX* pSrcBox)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.CopyResource_(C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.Resource)">
            <summary>	
            void ID3D11DeviceContext::CopyResource([In] ID3D11Resource* pDstResource,[In] ID3D11Resource* pSrcResource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.UpdateSubresource(C1.Util.DX.Direct3D11.Resource,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion},System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::UpdateSubresource([In] ID3D11Resource* pDstResource,[In] unsigned int DstSubresource,[In, Optional] const D3D11_BOX* pDstBox,[In] const void* pSrcData,[In] unsigned int SrcRowPitch,[In] unsigned int SrcDepthPitch)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.CopyStructureCount(C1.Util.DX.Direct3D11.Buffer,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView)">
            <summary>	
            void ID3D11DeviceContext::CopyStructureCount([In] ID3D11Buffer* pDstBuffer,[In] unsigned int DstAlignedByteOffset,[In] ID3D11UnorderedAccessView* pSrcView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ClearRenderTargetView(C1.Util.DX.Direct3D11.RenderTargetView,C1.Util.DX.ColorF)">
            <summary>	
            void ID3D11DeviceContext::ClearRenderTargetView([In] ID3D11RenderTargetView* pRenderTargetView,[In] const SHARPDX_COLOR4* ColorRGBA)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ClearUnorderedAccessView(C1.Util.DX.Direct3D11.UnorderedAccessView,System.Int32[])">
            <summary>	
            void ID3D11DeviceContext::ClearUnorderedAccessViewUint([In] ID3D11UnorderedAccessView* pUnorderedAccessView,[In] const SHARPDX_INT4* Values)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ClearUnorderedAccessView(C1.Util.DX.Direct3D11.UnorderedAccessView,C1.Util.DX.Vector4)">
            <summary>	
            void ID3D11DeviceContext::ClearUnorderedAccessViewFloat([In] ID3D11UnorderedAccessView* pUnorderedAccessView,[In] const SHARPDX_VECTOR4* Values)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ClearDepthStencilView(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.Direct3D11.DepthStencilClearFlags,System.Single,System.Byte)">
            <summary>	
            void ID3D11DeviceContext::ClearDepthStencilView([In] ID3D11DepthStencilView* pDepthStencilView,[In] D3D11_CLEAR_FLAG ClearFlags,[In] float Depth,[In] unsigned char Stencil)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GenerateMips(C1.Util.DX.Direct3D11.ShaderResourceView)">
            <summary>	
            void ID3D11DeviceContext::GenerateMips([In] ID3D11ShaderResourceView* pShaderResourceView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.SetMinimumLod(C1.Util.DX.Direct3D11.Resource,System.Single)">
            <summary>	
            void ID3D11DeviceContext::SetResourceMinLOD([In] ID3D11Resource* pResource,[In] float MinLOD)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetMinimumLod(C1.Util.DX.Direct3D11.Resource)">
            <summary>	
            float ID3D11DeviceContext::GetResourceMinLOD([In] ID3D11Resource* pResource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ResolveSubresource_(C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.DXGI.Format)">
            <summary>	
            void ID3D11DeviceContext::ResolveSubresource([In] ID3D11Resource* pDstResource,[In] unsigned int DstSubresource,[In] ID3D11Resource* pSrcResource,[In] unsigned int SrcSubresource,[In] DXGI_FORMAT Format)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ExecuteCommandList(C1.Util.DX.Direct3D11.CommandList,C1.Util.DX.Bool)">
            <summary>	
            void ID3D11DeviceContext::ExecuteCommandList([In] ID3D11CommandList* pCommandList,[In] BOOL RestoreContextState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetPredication(C1.Util.DX.Bool@)">
            <summary>	
            void ID3D11DeviceContext::GetPredication([Out, Optional] ID3D11Predicate** ppPredicate,[Out, Optional] BOOL* pPredicateValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.ClearState">
            <summary>	
            void ID3D11DeviceContext::ClearState()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.Flush">
            <summary>	
            void ID3D11DeviceContext::Flush()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetTypeInfo">
            <summary>	
            D3D11_DEVICE_CONTEXT_TYPE ID3D11DeviceContext::GetType()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.GetContextFlags">
            <summary>	
            unsigned int ID3D11DeviceContext::GetContextFlags()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext.FinishCommandList(C1.Util.DX.Bool)">
            <summary>	
            HRESULT ID3D11DeviceContext::FinishCommandList([In] BOOL RestoreDeferredContextState,[Out, Optional] ID3D11CommandList** ppCommandList)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.VertexShader">
            <summary>Inner interface giving access to VertexShaderStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.PixelShader">
            <summary>Inner interface giving access to PixelShaderStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.InputAssembler">
            <summary>Inner interface giving access to InputAssemblerStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.GeometryShader">
            <summary>Inner interface giving access to GeometryShaderStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.OutputMerger">
            <summary>Inner interface giving access to OutputMergerStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.StreamOutput">
            <summary>Inner interface giving access to StreamOutputStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.Rasterizer">
            <summary>Inner interface giving access to RasterizerStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.HullShader">
            <summary>Inner interface giving access to HullShaderStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.DomainShader">
            <summary>Inner interface giving access to DomainShaderStage methods. </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.DeviceContext.ComputeShader">
            <summary>Inner interface giving access to ComputeShaderStage methods. </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.InputAssemblerStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.IndexInputResourceSlotCount">
            <summary>Constant IndexInputResourceSlotCount.</summary>
            <unmanaged>D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.VertexIdBitCount">
            <summary>Constant VertexIdBitCount.</summary>
            <unmanaged>D3D11_IA_VERTEX_ID_BIT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.DefaultIndexBufferOffsetInBytes">
            <summary>Constant DefaultIndexBufferOffsetInBytes.</summary>
            <unmanaged>D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.DefaultPrimitiveTopology">
            <summary>Constant DefaultPrimitiveTopology.</summary>
            <unmanaged>D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.IntegerArithmeticBitCount">
            <summary>Constant IntegerArithmeticBitCount.</summary>
            <unmanaged>D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.VertexInputStructureElementsComponents">
            <summary>Constant VertexInputStructureElementsComponents.</summary>
            <unmanaged>D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.VertexInputStructureElementCount">
            <summary>Constant VertexInputStructureElementCount.</summary>
            <unmanaged>D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.PatchMaximumControlPointCount">
            <summary>Constant PatchMaximumControlPointCount.</summary>
            <unmanaged>D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.DefaultVertexBufferOffsetInBytes">
            <summary>Constant DefaultVertexBufferOffsetInBytes.</summary>
            <unmanaged>D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.InstanceIdBitCount">
            <summary>Constant InstanceIdBitCount.</summary>
            <unmanaged>D3D11_IA_INSTANCE_ID_BIT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.VertexInputResourceSlotCount">
            <summary>Constant VertexInputResourceSlotCount.</summary>
            <unmanaged>D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputAssemblerStage.PrimitiveIdBitCount">
            <summary>Constant PrimitiveIdBitCount.</summary>
            <unmanaged>D3D11_IA_PRIMITIVE_ID_BIT_COUNT</unmanaged>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.SetVertexBuffers(System.Int32,C1.Util.DX.Direct3D11.VertexBufferBinding)">
            <summary>
            Bind a single vertex buffer to the input-assembler stage.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.SetVertexBuffers(System.Int32,C1.Util.DX.Direct3D11.VertexBufferBinding[])">
            <summary>
            Bind an array of vertex buffers to the input-assembler stage.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.SetVertexBuffers(System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>
            Bind an array of vertex buffers to the input-assembler stage.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.InputAssemblerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.InputAssemblerStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.InputAssemblerStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.SetInputLayout(C1.Util.DX.Direct3D11.InputLayout)">
            <summary>	
            void ID3D11DeviceContext::IASetInputLayout([In, Optional] ID3D11InputLayout* pInputLayout)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.SetVertexBuffers(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::IASetVertexBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const void* ppVertexBuffers,[In, Buffer, Optional] const void* pStrides,[In, Buffer, Optional] const void* pOffsets)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.SetIndexBuffer(C1.Util.DX.Direct3D11.Buffer,C1.Util.DX.DXGI.Format,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::IASetIndexBuffer([In, Optional] ID3D11Buffer* pIndexBuffer,[In] DXGI_FORMAT Format,[In] unsigned int Offset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.SetPrimitiveTopology(C1.Util.DX.Direct3D11.PrimitiveTopology)">
            <summary>	
            void ID3D11DeviceContext::IASetPrimitiveTopology([In] D3D_PRIMITIVE_TOPOLOGY Topology)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.GetInputLayout">
            <summary>	
            void ID3D11DeviceContext::IAGetInputLayout([Out] ID3D11InputLayout** ppInputLayout)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.GetVertexBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext::IAGetVertexBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppVertexBuffers,[Out, Buffer, Optional] unsigned int* pStrides,[Out, Buffer, Optional] unsigned int* pOffsets)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.GetIndexBuffer(C1.Util.DX.Direct3D11.Buffer@,C1.Util.DX.DXGI.Format@,System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::IAGetIndexBuffer([Out, Optional] ID3D11Buffer** pIndexBuffer,[Out, Optional] DXGI_FORMAT* Format,[Out, Optional] unsigned int* Offset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputAssemblerStage.GetPrimitiveTopology">
            <summary>	
            void ID3D11DeviceContext::IAGetPrimitiveTopology([Out] D3D_PRIMITIVE_TOPOLOGY* pTopology)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.OutputMergerStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.OutputMergerStage.SimultaneousRenderTargetCount">
            <summary>Constant SimultaneousRenderTargetCount.</summary>
            <unmanaged>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</unmanaged>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetRenderTargets">
            <summary>	
            Get references to the render targets that are available to the {{output-merger stage}}.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetRenderTargets(System.Int32)">
            <summary>	
            Get references to the render targets that are available to the {{output-merger stage}}.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetRenderTargets(System.Int32,C1.Util.DX.Direct3D11.DepthStencilView@)">
            <summary>	
            Get references to the render targets and the depth-stencil buffer that are available to the {{output-merger stage}}.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetBlendState(C1.Util.DX.ColorF@,System.Int32@)">
            <summary>	
            Get the {{blend state}} of the output-merger stage.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetDepthStencilState(System.Int32@)">
            <summary>	
            Gets the {{depth-stencil}} state of the output-merger stage.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetUnorderedAccessViews(System.Int32,System.Int32)">
            <summary>	
            Gets an array of views for an unordered resource.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.ResetTargets">
            <summary>
              Unbinds all depth-stencil buffer and render targets from the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>	
            <p>Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage.</p>	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.RenderTargetView)">
            <summary>	
              Binds a single render target to the output-merger stage.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer and a set of render targets to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,System.Int32,C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>
            Binds a depth-stencil buffer and a set of render targets to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.Direct3D11.RenderTargetView)">
            <summary>
              Binds a depth-stencil buffer and a single render target to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.RenderTargetView})">
            <summary>
              Binds a depth-stencil buffer and a set of render targets to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.RenderTargetView})">
            <summary>
              Binds a set of render targets to the output-merger stage and clear the depth stencil view.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.RenderTargetView,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[])">
            <summary>
              Binds a set of unordered access views and a single render target to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a set of unordered access views and a set of render targets to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.Direct3D11.RenderTargetView,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a single render target to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a set of render targets to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.RenderTargetView,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>
              Binds a set of unordered access views and a single render target to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],System.Int32[],C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a set of unordered access views and a set of render targets to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.Direct3D11.RenderTargetView,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a single render target to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetTargets(C1.Util.DX.Direct3D11.DepthStencilView,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],System.Int32[],C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a set of render targets to the output-merger stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetRenderTargets(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.Direct3D11.RenderTargetView)">
            <summary>
              Binds a depth stencil view and a render target view to the output-merger stage keeping existing unordered access views bindings.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetRenderTargets(C1.Util.DX.Direct3D11.RenderTargetView)">
            <summary>
              Binds a render target view to the output-merger stage keeping existing unordered access views bindings.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetRenderTargets(C1.Util.DX.Direct3D11.DepthStencilView,C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth stencil view and a render target view to the output-merger stage keeping existing unordered access views bindings.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetUnorderedAccessView(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Sets an array of views for an unordered resource keeping existing render targets bindings.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetUnorderedAccessView(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView,System.Int32)">
            <summary>	
            Sets an array of views for an unordered resource keeping existing render targets bindings.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetUnorderedAccessViews(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            Sets an array of views for an unordered resource keeping existing render targets bindings.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetUnorderedAccessViews(System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>	
            Sets an array of views for an unordered resource  keeping existing render targets bindings.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetRenderTargetsAndUnorderedAccessViews(System.Int32,C1.Util.DX.Direct3D11.RenderTargetView[],C1.Util.DX.Direct3D11.DepthStencilView,System.Int32,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>	
            Binds resources to the output-merger stage.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetRenderTargetsAndUnorderedAccessViews(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.RenderTargetView},C1.Util.DX.Direct3D11.DepthStencilView,System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.UnorderedAccessView},System.Int32[])">
            <summary>	
            Binds resources to the output-merger stage.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetBlendState(C1.Util.DX.Direct3D11.BlendState,System.Nullable{C1.Util.DX.ColorF},System.UInt32)">
            <summary>	
            Set the blend state of the output-merger stage.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.OutputMergerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.OutputMergerStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.OutputMergerStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetRenderTargets(System.Int32,System.IntPtr,C1.Util.DX.Direct3D11.DepthStencilView)">
            <summary>	
            void ID3D11DeviceContext::OMSetRenderTargets([In] unsigned int NumViews,[In] const void** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetRenderTargetsAndUnorderedAccessViews(System.Int32,System.IntPtr,C1.Util.DX.Direct3D11.DepthStencilView,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::OMSetRenderTargetsAndUnorderedAccessViews([In] unsigned int NumRTVs,[In, Buffer, Optional] const void** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView,[In] unsigned int UAVStartSlot,[In] unsigned int NumUAVs,[In, Buffer, Optional] const void** ppUnorderedAccessViews,[In, Buffer, Optional] const void* pUAVInitialCounts)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetBlendState(C1.Util.DX.Direct3D11.BlendState,System.Nullable{C1.Util.DX.ColorF},System.Int32)">
            <summary>	
            void ID3D11DeviceContext::OMSetBlendState([In, Optional] ID3D11BlendState* pBlendState,[In, Optional] const SHARPDX_COLOR4* BlendFactor,[In] unsigned int SampleMask)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.SetDepthStencilState(C1.Util.DX.Direct3D11.DepthStencilState,System.Int32)">
            <summary>	
            void ID3D11DeviceContext::OMSetDepthStencilState([In, Optional] ID3D11DepthStencilState* pDepthStencilState,[In] unsigned int StencilRef)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetRenderTargets(System.Int32,C1.Util.DX.Direct3D11.RenderTargetView[])">
            <summary>	
            void ID3D11DeviceContext::OMGetRenderTargets([In] unsigned int NumViews,[Out, Buffer, Optional] ID3D11RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D11DepthStencilView** ppDepthStencilView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetRenderTargetsAndUnorderedAccessViews(System.Int32,C1.Util.DX.Direct3D11.RenderTargetView[],System.Int32,System.Int32,C1.Util.DX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            void ID3D11DeviceContext::OMGetRenderTargetsAndUnorderedAccessViews([In] unsigned int NumRTVs,[Out, Buffer, Optional] ID3D11RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D11DepthStencilView** ppDepthStencilView,[In] unsigned int UAVStartSlot,[In] unsigned int NumUAVs,[Out, Buffer, Optional] ID3D11UnorderedAccessView** ppUnorderedAccessViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetBlendState(C1.Util.DX.Direct3D11.BlendState@,C1.Util.DX.ColorF@,System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::OMGetBlendState([Out, Optional] ID3D11BlendState** ppBlendState,[Out, Optional] SHARPDX_COLOR4* BlendFactor,[Out, Optional] unsigned int* pSampleMask)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.OutputMergerStage.GetDepthStencilState(C1.Util.DX.Direct3D11.DepthStencilState@,System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::OMGetDepthStencilState([Out, Optional] ID3D11DepthStencilState** ppDepthStencilState,[Out, Optional] unsigned int* pStencilRef)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.OutputMergerStage.BlendFactor">
            <summary>
            Gets or sets the blend factor.
            </summary>
            <value>The blend factor.</value>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.OutputMergerStage.BlendSampleMask">
            <summary>
            Gets or sets the blend sample mask.
            </summary>
            <value>The blend sample mask.</value>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.OutputMergerStage.BlendState">
            <summary>
            Gets or sets the state of the blend.
            </summary>
            <value>The state of the blend.</value>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.OutputMergerStage.DepthStencilReference">
            <summary>
            Gets or sets the depth stencil reference.
            </summary>
            <value>The depth stencil reference.</value>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.OutputMergerStage.DepthStencilState">
            <summary>
            Gets or sets the state of the depth stencil.
            </summary>
            <value>The state of the depth stencil.</value>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RasterizerStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.GetViewports">
            <summary>	
            Get the array of {{viewports}} bound  to the {{rasterizer stage}} 	
            </summary>	
            <returns>An array of viewports (see <see cref="T:C1.Util.DX.ViewportF"/>).</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.GetViewports(C1.Util.DX.ViewportF[])">
            <summary>	
            Get the array of {{viewports}} bound  to the {{rasterizer stage}} 	
            </summary>	
            <returns>An array of viewports (see <see cref="T:C1.Util.DX.ViewportF"/>).</returns>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.GetScissorRectangles">
            <summary>	
            Get the array of {{scissor rectangles}} bound to the {{rasterizer stage}}.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.GetScissorRectangles(C1.Util.DX.RectL[])">
            <summary>	
            Get the array of {{scissor rectangles}} bound to the {{rasterizer stage}}.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetScissorRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Binds a single scissor rectangle to the rasterizer stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetScissorRectangles(C1.Util.DX.RectL[])">
            <summary>
              Binds a set of scissor rectangles to the rasterizer stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetViewport(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Binds a single viewport to the rasterizer stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetViewport(C1.Util.DX.ViewportF)">
            <summary>
            Binds a single viewport to the rasterizer stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetViewports(C1.Util.DX.ViewportF[],System.Int32)">
            <summary>
            Binds a set of viewports to the rasterizer stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.RasterizerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.RasterizerStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.RasterizerStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetState(C1.Util.DX.Direct3D11.RasterizerState)">
            <summary>	
            void ID3D11DeviceContext::RSSetState([In, Optional] ID3D11RasterizerState* pRasterizerState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetViewports(System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::RSSetViewports([In] unsigned int NumViewports,[In, Buffer, Optional] const void* pViewports)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.SetScissorRects(System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::RSSetScissorRects([In] unsigned int NumRects,[In, Buffer, Optional] const void* pRects)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.GetState">
            <summary>	
            void ID3D11DeviceContext::RSGetState([Out] ID3D11RasterizerState** ppRasterizerState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.GetViewports(System.Int32@,C1.Util.DX.ViewportF[])">
            <summary>	
            void ID3D11DeviceContext::RSGetViewports([InOut] unsigned int* pNumViewports,[Out, Buffer, Optional] D3D11_VIEWPORT* pViewports)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStage.GetScissorRects(System.Int32@,C1.Util.DX.RectL[])">
            <summary>	
            void ID3D11DeviceContext::RSGetScissorRects([InOut] unsigned int* pNumRects,[Out, Buffer, Optional] RECT* pRects)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.StreamOutputStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.SetTargets(System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[])">
            <summary>	
            Set the target output buffers for the stream-output stage of the pipeline.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.SetTarget(C1.Util.DX.Direct3D11.Buffer,System.Int32)">
            <summary>
            Sets the stream output targets bound to the StreamOutput stage.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.SetTargets(C1.Util.DX.Direct3D11.StreamOutputBufferBinding[])">
            <summary>	
            Set the target output {{buffers}} for the {{StreamOutput}} stage, which enables/disables the pipeline to stream-out data.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.GetTargets(System.Int32)">
            <summary>	
            Get the target output {{buffers}} for the {{StreamOutput}} stage of the pipeline.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.StreamOutputStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.StreamOutputStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.StreamOutputStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.SetTargets(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::SOSetTargets([In] unsigned int NumBuffers,[In, Buffer, Optional] const void** ppSOTargets,[In, Buffer, Optional] const void* pOffsets)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputStage.GetTargets(System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>	
            void ID3D11DeviceContext::SOGetTargets([In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppSOTargets)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceContext1">
            <summary>	
            ID3D11DeviceContext1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.Create(C1.Util.DX.Direct3D11.Device1)">
            <summary>
            Initializes a new deferred context instance of <see cref="T:C1.Util.DX.Direct3D11.DeviceContext1"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DeviceContext1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DeviceContext1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DeviceContext1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.CopySubresourceRegion1(C1.Util.DX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,C1.Util.DX.Direct3D11.Resource,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion},System.Int32)">
            <summary>	
            void ID3D11DeviceContext1::CopySubresourceRegion1([In] ID3D11Resource* pDstResource,[In] unsigned int DstSubresource,[In] unsigned int DstX,[In] unsigned int DstY,[In] unsigned int DstZ,[In] ID3D11Resource* pSrcResource,[In] unsigned int SrcSubresource,[In, Optional] const D3D11_BOX* pSrcBox,[In] unsigned int CopyFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.UpdateSubresource1(C1.Util.DX.Direct3D11.Resource,System.Int32,System.Nullable{C1.Util.DX.Direct3D11.ResourceRegion},System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>	
            void ID3D11DeviceContext1::UpdateSubresource1([In] ID3D11Resource* pDstResource,[In] unsigned int DstSubresource,[In, Optional] const D3D11_BOX* pDstBox,[In] const void* pSrcData,[In] unsigned int SrcRowPitch,[In] unsigned int SrcDepthPitch,[In] unsigned int CopyFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.DiscardResource(C1.Util.DX.Direct3D11.Resource)">
            <summary>	
            void ID3D11DeviceContext1::DiscardResource([In] ID3D11Resource* pResource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.DiscardView(C1.Util.DX.Direct3D11.ResourceView)">
            <summary>	
            void ID3D11DeviceContext1::DiscardView([In] ID3D11View* pResourceView)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.VSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::VSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.VSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer},System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::VSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.HSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::HSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.HSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer},System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::HSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.DSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::DSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.DSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer},System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::DSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.GSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::GSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.GSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer},System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::GSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.PSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::PSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.PSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer},System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::PSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.CSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::CSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.CSSetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.Buffer},System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::CSSetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppConstantBuffers,[In, Buffer, Optional] const unsigned int* pFirstConstant,[In, Buffer, Optional] const unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.VSGetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::VSGetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers,[Out, Buffer, Optional] unsigned int* pFirstConstant,[Out, Buffer, Optional] unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.HSGetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::HSGetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers,[Out, Buffer, Optional] unsigned int* pFirstConstant,[Out, Buffer, Optional] unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.DSGetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::DSGetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers,[Out, Buffer, Optional] unsigned int* pFirstConstant,[Out, Buffer, Optional] unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.GSGetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::GSGetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers,[Out, Buffer, Optional] unsigned int* pFirstConstant,[Out, Buffer, Optional] unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.PSGetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::PSGetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers,[Out, Buffer, Optional] unsigned int* pFirstConstant,[Out, Buffer, Optional] unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.CSGetConstantBuffers1(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            void ID3D11DeviceContext1::CSGetConstantBuffers1([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers,[Out, Buffer, Optional] unsigned int* pFirstConstant,[Out, Buffer, Optional] unsigned int* pNumConstants)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.SwapDeviceContextState(C1.Util.DX.Direct3D11.DeviceContextState)">
            <summary>	
            void ID3D11DeviceContext1::SwapDeviceContextState([In] ID3DDeviceContextState* pState,[Out, Optional] ID3DDeviceContextState** ppPreviousState)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.ClearView(C1.Util.DX.Direct3D11.ResourceView,System.Single,C1.Util.DX.RectL[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext1::ClearView([In] ID3D11View* pView,[In] const float* Color,[In, Buffer, Optional] const RECT* pRect,[In] unsigned int NumRects)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext1.DiscardView1(C1.Util.DX.Direct3D11.ResourceView,C1.Util.DX.RectL[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext1::DiscardView1([In] ID3D11View* pResourceView,[In, Buffer, Optional] const RECT* pRects,[In] unsigned int NumRects)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DomainShader">
            <summary>	
            ID3D11DomainShader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShader.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.DomainShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DomainShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShader.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DomainShader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DomainShader"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.GeometryShader">
            <summary>	
            ID3D11GeometryShader	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.GeometryShader.StreamOutputNoRasterizedStream">
            <summary>Constant StreamOutputNoRasterizedStream.</summary>
            <unmanaged>D3D11_SO_NO_RASTERIZED_STREAM</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.GeometryShader.StreamOutputStreamCount">
            <summary>Constant StreamOutputStreamCount.</summary>
            <unmanaged>D3D11_SO_STREAM_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.GeometryShader.StreamOutputOutputComponentCount">
            <summary>Constant StreamOutputOutputComponentCount.</summary>
            <unmanaged>D3D11_SO_OUTPUT_COMPONENT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.GeometryShader.StreamOutputBufferSlotCount">
            <summary>Constant StreamOutputBufferSlotCount.</summary>
            <unmanaged>D3D11_SO_BUFFER_SLOT_COUNT</unmanaged>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShader.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShader.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.StreamOutputElement[],System.Int32[],System.Int32,C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "elements">An array of <see cref = "T:C1.Util.DX.Direct3D11.StreamOutputElement" /> instances describing the layout of the output buffers.</param>
            <param name = "bufferedStrides">An array of buffer strides; each stride is the size of an element for that buffer.</param>
            <param name = "rasterizedStream">The index number of the stream to be sent to the rasterizer stage. Set to NoRasterizedStream if no stream is to be rasterized.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.GeometryShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShader.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.GeometryShader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.GeometryShader"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.HullShader">
            <summary>	
            ID3D11HullShader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShader.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.HullShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.HullShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShader.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.HullShader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.HullShader"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.InputLayout">
            <summary>	
            ID3D11InputLayout	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputLayout.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.InputElement[])">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.InputLayout" /> object to describe the
            input-buffer data for the input-assembler stage.
            </summary>
            <param name = "device">The device used to create the layout.</param>
            <param name = "elements">An array of input elements describing the layout of the input data.</param>
            <param name = "shaderBytecode">The compiled shader used to validate the input elements.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputLayout.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.InputLayout"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputLayout.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.InputLayout">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.InputLayout"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.PixelShader">
            <summary>	
            ID3D11PixelShader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShader.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.PixelShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.PixelShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShader.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.PixelShader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.PixelShader"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Predicate">
            <summary>	
            ID3D11Predicate	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Query">
            <summary>	
            ID3D11Query	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Query.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.QueryDescription)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.Query" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The query description.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Query.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Query"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Query.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Query">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Query"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Query.GetDescription(C1.Util.DX.Direct3D11.QueryDescription@)">
            <summary>	
            void ID3D11Query::GetDesc([Out] D3D11_QUERY_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Query.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Predicate.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.QueryDescription)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.Predicate" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The query description.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Predicate.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Predicate"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Predicate.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Predicate">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Predicate"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RasterizerState">
            <summary>	
            ID3D11RasterizerState	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.RasterizerStateDescription)">
            <summary>	
            Create a rasterizer state object that tells the rasterizer stage how to behave.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.RasterizerState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.RasterizerState">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.RasterizerState"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState.GetDescription(C1.Util.DX.Direct3D11.RasterizerStateDescription@)">
            <summary>	
            void ID3D11RasterizerState::GetDesc([Out] D3D11_RASTERIZER_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.RasterizerState.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RasterizerState1">
            <summary>	
            ID3D11RasterizerState1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState1.Create(C1.Util.DX.Direct3D11.Device1,C1.Util.DX.Direct3D11.RasterizerStateDescription1)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.RasterizerState1" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.RasterizerState1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState1.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.RasterizerState1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.RasterizerState1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerState1.GetDescription1(C1.Util.DX.Direct3D11.RasterizerStateDescription1@)">
            <summary>	
            void ID3D11RasterizerState1::GetDesc1([Out] D3D11_RASTERIZER_DESC1* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.RasterizerState1.Description1">
            <summary>	
            GetDescription1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetView">
            <summary>	
            ID3D11RenderTargetView	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RenderTargetView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.RenderTargetView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.RenderTargetView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">RenderTarget</see> flag.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RenderTargetView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.RenderTargetViewDescription)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.RenderTargetView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.RenderTargetView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">RenderTarget</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:C1.Util.DX.Direct3D11.RenderTargetView" /> to be created.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RenderTargetView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.RenderTargetView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RenderTargetView.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.RenderTargetView">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.RenderTargetView"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RenderTargetView.GetDescription(C1.Util.DX.Direct3D11.RenderTargetViewDescription@)">
            <summary>	
            void ID3D11RenderTargetView::GetDesc([Out] D3D11_RENDER_TARGET_VIEW_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.RenderTargetView.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.SamplerState">
            <summary>	
            ID3D11SamplerState	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.SamplerState.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.SamplerStateDescription)">
            <summary>
            Constructs a new <see cref = "T:C1.Util.DX.Direct3D11.SamplerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.SamplerState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.SamplerState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.SamplerState.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.SamplerState">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.SamplerState"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.SamplerState.GetDescription(C1.Util.DX.Direct3D11.SamplerStateDescription@)">
            <summary>	
            void ID3D11SamplerState::GetDesc([Out] D3D11_SAMPLER_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.SamplerState.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceView">
            <summary>	
            ID3D11ShaderResourceView	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ShaderResourceView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.ShaderResourceView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.ShaderResourceView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">ShaderResource</see> flag.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ShaderResourceView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.ShaderResourceViewDescription)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.ShaderResourceView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.ShaderResourceView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">ShaderResource</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:C1.Util.DX.Direct3D11.ShaderResourceView" /> to be created.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ShaderResourceView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.ShaderResourceView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ShaderResourceView.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.ShaderResourceView">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.ShaderResourceView"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ShaderResourceView.GetDescription(C1.Util.DX.Direct3D11.ShaderResourceViewDescription@)">
            <summary>	
            void ID3D11ShaderResourceView::GetDesc([Out] D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.ShaderResourceView.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Texture1D">
            <summary>	
            ID3D11Texture1D	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture1DDescription@)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture1DDescription,C1.Util.DX.DataStream[])">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture1DDescription,System.IntPtr[])">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture1DDescription,C1.Util.DX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.CalculateSubResourceIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Calculates the sub resource index for a particular mipSlice and arraySlice.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Texture1D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Texture1D">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Texture1D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1D.GetDescription(C1.Util.DX.Direct3D11.Texture1DDescription@)">
            <summary>	
            void ID3D11Texture1D::GetDesc([Out] D3D11_TEXTURE1D_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Texture1D.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Texture2D">
            <summary>	
            ID3D11Texture2D	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture2DDescription@)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture2DDescription,C1.Util.DX.DataRectangle[])">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture2DDescription,C1.Util.DX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2D.CalculateSubResourceIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Calculates the sub resource index for a particular mipSlice and arraySlice.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Texture2D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2D.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Texture2D">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2D.GetDescription(C1.Util.DX.Direct3D11.Texture2DDescription@)">
            <summary>	
            void ID3D11Texture2D::GetDesc([Out] D3D11_TEXTURE2D_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Texture2D.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Texture3D">
            <summary>	
            ID3D11Texture3D	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture3D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture3DDescription@)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture3D.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Texture3DDescription,C1.Util.DX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture3D.CalculateSubResourceIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Calculates the sub resource index for a particular mipSlice and arraySlice.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Texture3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture3D.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Texture3D">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Texture3D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture3D.GetDescription(C1.Util.DX.Direct3D11.Texture3DDescription@)">
            <summary>	
            void ID3D11Texture3D::GetDesc([Out] D3D11_TEXTURE3D_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.Texture3D.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessView">
            <summary>	
            ID3D11UnorderedAccessView	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UnorderedAccessView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.UnorderedAccessView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.UnorderedAccessView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">UnorderedAccess</see> flag.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UnorderedAccessView.Create(C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.UnorderedAccessViewDescription)">
            <summary>
            Creates a <see cref = "T:C1.Util.DX.Direct3D11.UnorderedAccessView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:C1.Util.DX.Direct3D11.UnorderedAccessView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:C1.Util.DX.Direct3D11.BindFlags">UnorderedAccess</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:C1.Util.DX.Direct3D11.UnorderedAccessView" /> to be created.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UnorderedAccessView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UnorderedAccessView.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.UnorderedAccessView">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.UnorderedAccessView"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UnorderedAccessView.GetDescription(C1.Util.DX.Direct3D11.UnorderedAccessViewDescription@)">
            <summary>	
            void ID3D11UnorderedAccessView::GetDesc([Out] D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.Direct3D11.UnorderedAccessView.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.VertexShader">
            <summary>	
            ID3D11VertexShader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShader.Create(C1.Util.DX.Direct3D11.Device,System.Byte[],C1.Util.DX.Direct3D11.ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.VertexShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.VertexShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShader.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.VertexShader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.VertexShader"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.AsynchronousFlags">
            <summary>	
            D3D11_ASYNC_GETDATA_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.AsynchronousFlags.DoNotFlush">
            <summary>	
            D3D11_ASYNC_GETDATA_DONOTFLUSH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.AsynchronousFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BindFlags">
            <summary>	
            D3D11_BIND_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.VertexBuffer">
            <summary>	
            D3D11_BIND_VERTEX_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.IndexBuffer">
            <summary>	
            D3D11_BIND_INDEX_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.ConstantBuffer">
            <summary>	
            D3D11_BIND_CONSTANT_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.ShaderResource">
            <summary>	
            D3D11_BIND_SHADER_RESOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.StreamOutput">
            <summary>	
            D3D11_BIND_STREAM_OUTPUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.RenderTarget">
            <summary>	
            D3D11_BIND_RENDER_TARGET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.DepthStencil">
            <summary>	
            D3D11_BIND_DEPTH_STENCIL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.UnorderedAccess">
            <summary>	
            D3D11_BIND_UNORDERED_ACCESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.Decoder">
            <summary>	
            D3D11_BIND_DECODER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.VideoEncoder">
            <summary>	
            D3D11_BIND_VIDEO_ENCODER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BindFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BlendOperation">
            <summary>	
            D3D11_BLEND_OP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOperation.Add">
            <summary>	
            D3D11_BLEND_OP_ADD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOperation.Subtract">
            <summary>	
            D3D11_BLEND_OP_SUBTRACT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOperation.ReverseSubtract">
            <summary>	
            D3D11_BLEND_OP_REV_SUBTRACT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOperation.Minimum">
            <summary>	
            D3D11_BLEND_OP_MIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOperation.Maximum">
            <summary>	
            D3D11_BLEND_OP_MAX	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BlendOption">
            <summary>	
            D3D11_BLEND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.Zero">
            <summary>	
            D3D11_BLEND_ZERO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.One">
            <summary>	
            D3D11_BLEND_ONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.SourceColor">
            <summary>	
            D3D11_BLEND_SRC_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.InverseSourceColor">
            <summary>	
            D3D11_BLEND_INV_SRC_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.SourceAlpha">
            <summary>	
            D3D11_BLEND_SRC_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.InverseSourceAlpha">
            <summary>	
            D3D11_BLEND_INV_SRC_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.DestinationAlpha">
            <summary>	
            D3D11_BLEND_DEST_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.InverseDestinationAlpha">
            <summary>	
            D3D11_BLEND_INV_DEST_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.DestinationColor">
            <summary>	
            D3D11_BLEND_DEST_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.InverseDestinationColor">
            <summary>	
            D3D11_BLEND_INV_DEST_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.SourceAlphaSaturate">
            <summary>	
            D3D11_BLEND_SRC_ALPHA_SAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.BlendFactor">
            <summary>	
            D3D11_BLEND_BLEND_FACTOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.InverseBlendFactor">
            <summary>	
            D3D11_BLEND_INV_BLEND_FACTOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.SecondarySourceColor">
            <summary>	
            D3D11_BLEND_SRC1_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.InverseSecondarySourceColor">
            <summary>	
            D3D11_BLEND_INV_SRC1_COLOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.SecondarySourceAlpha">
            <summary>	
            D3D11_BLEND_SRC1_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendOption.InverseSecondarySourceAlpha">
            <summary>	
            D3D11_BLEND_INV_SRC1_ALPHA	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CheckMultisampleQualityLevelsFlags">
            <summary>	
            D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CheckMultisampleQualityLevelsFlags.TiledResource">
            <summary>	
            D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CheckMultisampleQualityLevelsFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ColorWriteMaskFlags">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ColorWriteMaskFlags.Red">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE_RED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ColorWriteMaskFlags.Green">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE_GREEN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ColorWriteMaskFlags.Blue">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE_BLUE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ColorWriteMaskFlags.Alpha">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE_ALPHA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ColorWriteMaskFlags.All">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE_ALL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Comparison">
            <summary>	
            D3D11_COMPARISON_FUNC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.Never">
            <summary>	
            D3D11_COMPARISON_NEVER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.Less">
            <summary>	
            D3D11_COMPARISON_LESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.Equal">
            <summary>	
            D3D11_COMPARISON_EQUAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.LessEqual">
            <summary>	
            D3D11_COMPARISON_LESS_EQUAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.Greater">
            <summary>	
            D3D11_COMPARISON_GREATER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.NotEqual">
            <summary>	
            D3D11_COMPARISON_NOT_EQUAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.GreaterEqual">
            <summary>	
            D3D11_COMPARISON_GREATER_EQUAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Comparison.Always">
            <summary>	
            D3D11_COMPARISON_ALWAYS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport">
            <summary>	
            D3D11_FORMAT_SUPPORT2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.AtomicAdd">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.AtomicBitwiseOperations">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.AtomicCompareStoreOrCompareExchange">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.AtomicExchange">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.AtomicSignedMinimumOrMaximum">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.AtomicUnsignedMinimumOrMaximum">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.TypedLoad">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.TypedStore">
            <summary>	
            D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.OutputMergerLogicOperation">
            <summary>	
            D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.Tiled">
            <summary>	
            D3D11_FORMAT_SUPPORT2_TILED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.Shareable">
            <summary>	
            D3D11_FORMAT_SUPPORT2_SHAREABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ComputeShaderFormatSupport.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CopyFlags">
            <summary>	
            D3D11_COPY_FLAGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CopyFlags.NoOverwrite">
            <summary>	
            D3D11_COPY_NO_OVERWRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CopyFlags.Discard">
            <summary>	
            D3D11_COPY_DISCARD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CopyFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CounterKind">
            <summary>	
            D3D11_COUNTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterKind.DeviceDependent0">
            <summary>	
            D3D11_COUNTER_DEVICE_DEPENDENT_0	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CounterType">
            <summary>	
            D3D11_COUNTER_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterType.Float32">
            <summary>	
            D3D11_COUNTER_TYPE_FLOAT32	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterType.UInt16">
            <summary>	
            D3D11_COUNTER_TYPE_UINT16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterType.UInt32">
            <summary>	
            D3D11_COUNTER_TYPE_UINT32	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterType.UInt64">
            <summary>	
            D3D11_COUNTER_TYPE_UINT64	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CpuAccessFlags">
            <summary>	
            D3D11_CPU_ACCESS_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CpuAccessFlags.Write">
            <summary>	
            D3D11_CPU_ACCESS_WRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CpuAccessFlags.Read">
            <summary>	
            D3D11_CPU_ACCESS_READ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CpuAccessFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CreateDeviceContextStateFlags">
            <summary>	
            D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CreateDeviceContextStateFlags.SingleThreaded">
            <summary>	
            D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CreateDeviceContextStateFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CullMode">
            <summary>	
            D3D11_CULL_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CullMode.None">
            <summary>	
            D3D11_CULL_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CullMode.Front">
            <summary>	
            D3D11_CULL_FRONT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CullMode.Back">
            <summary>	
            D3D11_CULL_BACK	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DebugFeatureFlags">
            <summary>	
            D3D11_DEBUG_FEATURE_FLAGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DebugFeatureFlags.FlushPerRender">
            <summary>	
            D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DebugFeatureFlags.FinishPerRender">
            <summary>	
            D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DebugFeatureFlags.PresentPerRender">
            <summary>	
            D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DebugFeatureFlags.AlwaysDiscardOfferedResource">
            <summary>	
            D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DebugFeatureFlags.NeverDiscardOfferedResource">
            <summary>	
            D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DebugFeatureFlags.AvoidBehaviorChangingDebugAids">
            <summary>	
            D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DebugFeatureFlags.DisableTiledResourceMappingTrackingAndValidation">
            <summary>	
            D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilClearFlags">
            <summary>	
            D3D11_CLEAR_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilClearFlags.Depth">
            <summary>	
            D3D11_CLEAR_DEPTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilClearFlags.Stencil">
            <summary>	
            D3D11_CLEAR_STENCIL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDimension">
            <summary>	
            D3D11_DSV_DIMENSION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDimension.Unknown">
            <summary>	
            D3D11_DSV_DIMENSION_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDimension.Texture1D">
            <summary>	
            D3D11_DSV_DIMENSION_TEXTURE1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDimension.Texture1DArray">
            <summary>	
            D3D11_DSV_DIMENSION_TEXTURE1DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDimension.Texture2D">
            <summary>	
            D3D11_DSV_DIMENSION_TEXTURE2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDimension.Texture2DArray">
            <summary>	
            D3D11_DSV_DIMENSION_TEXTURE2DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDimension.Texture2DMultisampled">
            <summary>	
            D3D11_DSV_DIMENSION_TEXTURE2DMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDimension.Texture2DMultisampledArray">
            <summary>	
            D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewFlags">
            <summary>	
            D3D11_DSV_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewFlags.ReadOnlyDepth">
            <summary>	
            D3D11_DSV_READ_ONLY_DEPTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewFlags.ReadOnlyStencil">
            <summary>	
            D3D11_DSV_READ_ONLY_STENCIL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthWriteMask">
            <summary>	
            D3D11_DEPTH_WRITE_MASK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthWriteMask.Zero">
            <summary>	
            D3D11_DEPTH_WRITE_MASK_ZERO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthWriteMask.All">
            <summary>	
            D3D11_DEPTH_WRITE_MASK_ALL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceContextType">
            <summary>	
            D3D11_DEVICE_CONTEXT_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceContextType.Immediate">
            <summary>	
            D3D11_DEVICE_CONTEXT_IMMEDIATE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceContextType.Deferred">
            <summary>	
            D3D11_DEVICE_CONTEXT_DEFERRED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceCreationFlags">
            <summary>	
            D3D11_CREATE_DEVICE_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.SingleThreaded">
            <summary>	
            D3D11_CREATE_DEVICE_SINGLETHREADED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.Debug">
            <summary>	
            D3D11_CREATE_DEVICE_DEBUG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.SwitchToRef">
            <summary>	
            D3D11_CREATE_DEVICE_SWITCH_TO_REF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.PreventThreadingOptimizations">
            <summary>	
            D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.BgraSupport">
            <summary>	
            D3D11_CREATE_DEVICE_BGRA_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.Debuggable">
            <summary>	
            D3D11_CREATE_DEVICE_DEBUGGABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.PreventAlteringLayerSettingsFromRegistry">
            <summary>	
            D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.DisableGpuTimeout">
            <summary>	
            D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.VideoSupport">
            <summary>	
            D3D11_CREATE_DEVICE_VIDEO_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DeviceCreationFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DriverType">
            <summary>	
            D3D_DRIVER_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DriverType.Unknown">
            <summary>	
            D3D_DRIVER_TYPE_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DriverType.Hardware">
            <summary>	
            D3D_DRIVER_TYPE_HARDWARE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DriverType.Reference">
            <summary>	
            D3D_DRIVER_TYPE_REFERENCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DriverType.Null">
            <summary>	
            D3D_DRIVER_TYPE_NULL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DriverType.Software">
            <summary>	
            D3D_DRIVER_TYPE_SOFTWARE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DriverType.Warp">
            <summary>	
            D3D_DRIVER_TYPE_WARP	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Feature">
            <summary>	
            D3D11_FEATURE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.Threading">
            <summary>	
            D3D11_FEATURE_THREADING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.ShaderDoubles">
            <summary>	
            D3D11_FEATURE_DOUBLES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.FormatSupport">
            <summary>	
            D3D11_FEATURE_FORMAT_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.ComputeShaders">
            <summary>	
            D3D11_FEATURE_FORMAT_SUPPORT2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.D3D10XHardwareOptions">
            <summary>	
            D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.D3D11Options">
            <summary>	
            D3D11_FEATURE_D3D11_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.ArchitectureInformation">
            <summary>	
            D3D11_FEATURE_ARCHITECTURE_INFO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.D3D9Options">
            <summary>	
            D3D11_FEATURE_D3D9_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.ShaderMinimumPrecisionSupport">
            <summary>	
            D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.D3D9ShadowSupport">
            <summary>	
            D3D11_FEATURE_D3D9_SHADOW_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.D3D11Options1">
            <summary>	
            D3D11_FEATURE_D3D11_OPTIONS1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.D3D9SimpleInstancingSupport">
            <summary>	
            D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.MarkerSupport">
            <summary>	
            D3D11_FEATURE_MARKER_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Feature.D3D9Options1">
            <summary>	
            D3D11_FEATURE_D3D9_OPTIONS1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureLevel">
            <summary>	
            D3D_FEATURE_LEVEL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureLevel.Level_9_1">
            <summary>	
            D3D_FEATURE_LEVEL_9_1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureLevel.Level_9_2">
            <summary>	
            D3D_FEATURE_LEVEL_9_2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureLevel.Level_9_3">
            <summary>	
            D3D_FEATURE_LEVEL_9_3	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureLevel.Level_10_0">
            <summary>	
            D3D_FEATURE_LEVEL_10_0	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureLevel.Level_10_1">
            <summary>	
            D3D_FEATURE_LEVEL_10_1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureLevel.Level_11_0">
            <summary>	
            D3D_FEATURE_LEVEL_11_0	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureLevel.Level_11_1">
            <summary>	
            D3D_FEATURE_LEVEL_11_1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FillMode">
            <summary>	
            D3D11_FILL_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FillMode.Wireframe">
            <summary>	
            D3D11_FILL_WIREFRAME	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FillMode.Solid">
            <summary>	
            D3D11_FILL_SOLID	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Filter">
            <summary>	
            D3D11_FILTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinMagMipPoint">
            <summary>	
            D3D11_FILTER_MIN_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinMagPointMipLinear">
            <summary>	
            D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinPointMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinPointMagMipLinear">
            <summary>	
            D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinLinearMagMipPoint">
            <summary>	
            D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinLinearMagPointMipLinear">
            <summary>	
            D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinMagMipLinear">
            <summary>	
            D3D11_FILTER_MIN_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.Anisotropic">
            <summary>	
            D3D11_FILTER_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinMagMipPoint">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinMagPointMipLinear">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinPointMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinPointMagMipLinear">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinLinearMagMipPoint">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinLinearMagPointMipLinear">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonMinMagMipLinear">
            <summary>	
            D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.ComparisonAnisotropic">
            <summary>	
            D3D11_FILTER_COMPARISON_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinMagMipPoint">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinMagPointMipLinear">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinPointMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinPointMagMipLinear">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinLinearMagMipPoint">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinLinearMagPointMipLinear">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumMinMagMipLinear">
            <summary>	
            D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MinimumAnisotropic">
            <summary>	
            D3D11_FILTER_MINIMUM_ANISOTROPIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinMagMipPoint">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinMagPointMipLinear">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinPointMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinPointMagMipLinear">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinLinearMagMipPoint">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinLinearMagPointMipLinear">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinMagLinearMipPoint">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumMinMagMipLinear">
            <summary>	
            D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Filter.MaximumAnisotropic">
            <summary>	
            D3D11_FILTER_MAXIMUM_ANISOTROPIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FilterReductionType">
            <summary>	
            D3D11_FILTER_REDUCTION_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FilterReductionType.Standard">
            <summary>	
            D3D11_FILTER_REDUCTION_TYPE_STANDARD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FilterReductionType.Comparison">
            <summary>	
            D3D11_FILTER_REDUCTION_TYPE_COMPARISON	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FilterReductionType.Minimum">
            <summary>	
            D3D11_FILTER_REDUCTION_TYPE_MINIMUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FilterReductionType.Maximum">
            <summary>	
            D3D11_FILTER_REDUCTION_TYPE_MAXIMUM	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FilterType">
            <summary>	
            D3D11_FILTER_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FilterType.Point">
            <summary>	
            D3D11_FILTER_TYPE_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FilterType.Linear">
            <summary>	
            D3D11_FILTER_TYPE_LINEAR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FormatSupport">
            <summary>	
            D3D11_FORMAT_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.Buffer">
            <summary>	
            D3D11_FORMAT_SUPPORT_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.InputAssemblyVertexBuffer">
            <summary>	
            D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.InputAssemblyIndexBuffer">
            <summary>	
            D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.StreamOutputBuffer">
            <summary>	
            D3D11_FORMAT_SUPPORT_SO_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.Texture1D">
            <summary>	
            D3D11_FORMAT_SUPPORT_TEXTURE1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.Texture2D">
            <summary>	
            D3D11_FORMAT_SUPPORT_TEXTURE2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.Texture3D">
            <summary>	
            D3D11_FORMAT_SUPPORT_TEXTURE3D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.TextureCube">
            <summary>	
            D3D11_FORMAT_SUPPORT_TEXTURECUBE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.ShaderLoad">
            <summary>	
            D3D11_FORMAT_SUPPORT_SHADER_LOAD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.ShaderSample">
            <summary>	
            D3D11_FORMAT_SUPPORT_SHADER_SAMPLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.ShaderSampleComparison">
            <summary>	
            D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.ShaderSampleMonoText">
            <summary>	
            D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.Mip">
            <summary>	
            D3D11_FORMAT_SUPPORT_MIP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.MipAutogen">
            <summary>	
            D3D11_FORMAT_SUPPORT_MIP_AUTOGEN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.RenderTarget">
            <summary>	
            D3D11_FORMAT_SUPPORT_RENDER_TARGET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.Blendable">
            <summary>	
            D3D11_FORMAT_SUPPORT_BLENDABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.DepthStencil">
            <summary>	
            D3D11_FORMAT_SUPPORT_DEPTH_STENCIL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.CpuLockable">
            <summary>	
            D3D11_FORMAT_SUPPORT_CPU_LOCKABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.MultisampleResolve">
            <summary>	
            D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.Display">
            <summary>	
            D3D11_FORMAT_SUPPORT_DISPLAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.CastWithinBitLayout">
            <summary>	
            D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.MultisampleRenderTarget">
            <summary>	
            D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.MultisampleLoad">
            <summary>	
            D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.ShaderGather">
            <summary>	
            D3D11_FORMAT_SUPPORT_SHADER_GATHER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.BackBufferCast">
            <summary>	
            D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.TypedUnorderedAccessView">
            <summary>	
            D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.ShaderGatherComparison">
            <summary>	
            D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.DecoderOutput">
            <summary>	
            D3D11_FORMAT_SUPPORT_DECODER_OUTPUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.VideoProcessorOutput">
            <summary>	
            D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.VideoProcessorInput">
            <summary>	
            D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.VideoEncoder">
            <summary>	
            D3D11_FORMAT_SUPPORT_VIDEO_ENCODER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FormatSupport.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.InputClassification">
            <summary>	
            D3D11_INPUT_CLASSIFICATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputClassification.PerVertexData">
            <summary>	
            D3D11_INPUT_PER_VERTEX_DATA	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputClassification.PerInstanceData">
            <summary>	
            D3D11_INPUT_PER_INSTANCE_DATA	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.LogicOperation">
            <summary>	
            D3D11_LOGIC_OP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Clear">
            <summary>	
            D3D11_LOGIC_OP_CLEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Set">
            <summary>	
            D3D11_LOGIC_OP_SET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Copy">
            <summary>	
            D3D11_LOGIC_OP_COPY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.CopyInverted">
            <summary>	
            D3D11_LOGIC_OP_COPY_INVERTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Noop">
            <summary>	
            D3D11_LOGIC_OP_NOOP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Invert">
            <summary>	
            D3D11_LOGIC_OP_INVERT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.And">
            <summary>	
            D3D11_LOGIC_OP_AND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Nand">
            <summary>	
            D3D11_LOGIC_OP_NAND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Or">
            <summary>	
            D3D11_LOGIC_OP_OR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Nor">
            <summary>	
            D3D11_LOGIC_OP_NOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Xor">
            <summary>	
            D3D11_LOGIC_OP_XOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.Equiv">
            <summary>	
            D3D11_LOGIC_OP_EQUIV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.AndReverse">
            <summary>	
            D3D11_LOGIC_OP_AND_REVERSE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.AndInverted">
            <summary>	
            D3D11_LOGIC_OP_AND_INVERTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.OrReverse">
            <summary>	
            D3D11_LOGIC_OP_OR_REVERSE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.LogicOperation.OrInverted">
            <summary>	
            D3D11_LOGIC_OP_OR_INVERTED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.MapFlags">
            <summary>	
            D3D11_MAP_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MapFlags.DoNotWait">
            <summary>	
            D3D11_MAP_FLAG_DO_NOT_WAIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MapFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.MapMode">
            <summary>	
            D3D11_MAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MapMode.Read">
            <summary>	
            D3D11_MAP_READ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MapMode.Write">
            <summary>	
            D3D11_MAP_WRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MapMode.ReadWrite">
            <summary>	
            D3D11_MAP_READ_WRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MapMode.WriteDiscard">
            <summary>	
            D3D11_MAP_WRITE_DISCARD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MapMode.WriteNoOverwrite">
            <summary>	
            D3D11_MAP_WRITE_NO_OVERWRITE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.MinimumPrecision">
            <summary>	
            D3D_MIN_PRECISION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionDefault">
            <summary>	
            D3D_MIN_PRECISION_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionFloat16">
            <summary>	
            D3D_MIN_PRECISION_FLOAT_16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionFloat28">
            <summary>	
            D3D_MIN_PRECISION_FLOAT_2_8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionReserved">
            <summary>	
            D3D_MIN_PRECISION_RESERVED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionSInt16">
            <summary>	
            D3D_MIN_PRECISION_SINT_16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionUInt16">
            <summary>	
            D3D_MIN_PRECISION_UINT_16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionAny16">
            <summary>	
            D3D_MIN_PRECISION_ANY_16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.MinimumPrecision.MinimumPrecisionAny10">
            <summary>	
            D3D_MIN_PRECISION_ANY_10	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.PrimitiveTopology">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.Undefined">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_UNDEFINED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PointList">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_POINTLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.LineList">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_LINELIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.LineStrip">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_LINESTRIP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.TriangleList">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.TriangleStrip">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.LineListWithAdjacency">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.LineStripWithAdjacency">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.TriangleListWithAdjacency">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.TriangleStripWithAdjacency">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith1ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith2ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith3ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith4ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith5ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith6ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith7ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith8ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith9ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith10ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith11ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith12ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith13ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith14ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith15ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith16ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith17ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith18ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith19ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith20ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith21ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith22ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith23ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith24ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith25ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith26ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith27ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith28ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith29ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith30ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith31ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PrimitiveTopology.PatchListWith32ControlPoints">
            <summary>	
            D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.QueryFlags">
            <summary>	
            D3D11_QUERY_MISC_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryFlags.Predicatehint">
            <summary>	
            D3D11_QUERY_MISC_PREDICATEHINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.QueryType">
            <summary>	
            D3D11_QUERY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.Event">
            <summary>	
            D3D11_QUERY_EVENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.Occlusion">
            <summary>	
            D3D11_QUERY_OCCLUSION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.Timestamp">
            <summary>	
            D3D11_QUERY_TIMESTAMP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.TimestampDisjoint">
            <summary>	
            D3D11_QUERY_TIMESTAMP_DISJOINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.PipelineStatistics">
            <summary>	
            D3D11_QUERY_PIPELINE_STATISTICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.OcclusionPredicate">
            <summary>	
            D3D11_QUERY_OCCLUSION_PREDICATE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputStatistics">
            <summary>	
            D3D11_QUERY_SO_STATISTICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputOverflowPredicate">
            <summary>	
            D3D11_QUERY_SO_OVERFLOW_PREDICATE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputStatisticsStream0">
            <summary>	
            D3D11_QUERY_SO_STATISTICS_STREAM0	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream0">
            <summary>	
            D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputStatisticsStream1">
            <summary>	
            D3D11_QUERY_SO_STATISTICS_STREAM1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream1">
            <summary>	
            D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputStatisticsStream2">
            <summary>	
            D3D11_QUERY_SO_STATISTICS_STREAM2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream2">
            <summary>	
            D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputStatisticsStream3">
            <summary>	
            D3D11_QUERY_SO_STATISTICS_STREAM3	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream3">
            <summary>	
            D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDimension">
            <summary>	
            D3D11_RTV_DIMENSION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Unknown">
            <summary>	
            D3D11_RTV_DIMENSION_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Buffer">
            <summary>	
            D3D11_RTV_DIMENSION_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Texture1D">
            <summary>	
            D3D11_RTV_DIMENSION_TEXTURE1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Texture1DArray">
            <summary>	
            D3D11_RTV_DIMENSION_TEXTURE1DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Texture2D">
            <summary>	
            D3D11_RTV_DIMENSION_TEXTURE2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Texture2DArray">
            <summary>	
            D3D11_RTV_DIMENSION_TEXTURE2DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Texture2DMultisampled">
            <summary>	
            D3D11_RTV_DIMENSION_TEXTURE2DMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Texture2DMultisampledArray">
            <summary>	
            D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDimension.Texture3D">
            <summary>	
            D3D11_RTV_DIMENSION_TEXTURE3D	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ResourceDimension">
            <summary>	
            D3D11_RESOURCE_DIMENSION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceDimension.Unknown">
            <summary>	
            D3D11_RESOURCE_DIMENSION_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceDimension.Buffer">
            <summary>	
            D3D11_RESOURCE_DIMENSION_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceDimension.Texture1D">
            <summary>	
            D3D11_RESOURCE_DIMENSION_TEXTURE1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceDimension.Texture2D">
            <summary>	
            D3D11_RESOURCE_DIMENSION_TEXTURE2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceDimension.Texture3D">
            <summary>	
            D3D11_RESOURCE_DIMENSION_TEXTURE3D	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ResourceMiscFlags">
            <summary>	
            D3D11_RESOURCE_MISC_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.GenerateMipMaps">
            <summary>	
            D3D11_RESOURCE_MISC_GENERATE_MIPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.Shared">
            <summary>	
            D3D11_RESOURCE_MISC_SHARED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.TextureCube">
            <summary>	
            D3D11_RESOURCE_MISC_TEXTURECUBE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.DrawIndirectArguments">
            <summary>	
            D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.BufferAllowRawViews">
            <summary>	
            D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.BufferStructured">
            <summary>	
            D3D11_RESOURCE_MISC_BUFFER_STRUCTURED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.ResourceClamp">
            <summary>	
            D3D11_RESOURCE_MISC_RESOURCE_CLAMP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.SharedKeyedmutex">
            <summary>	
            D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.GdiCompatible">
            <summary>	
            D3D11_RESOURCE_MISC_GDI_COMPATIBLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.SharedNthandle">
            <summary>	
            D3D11_RESOURCE_MISC_SHARED_NTHANDLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.RestrictedContent">
            <summary>	
            D3D11_RESOURCE_MISC_RESTRICTED_CONTENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.RestrictSharedResource">
            <summary>	
            D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.RestrictSharedResourceDriver">
            <summary>	
            D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.Guarded">
            <summary>	
            D3D11_RESOURCE_MISC_GUARDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.TilePool">
            <summary>	
            D3D11_RESOURCE_MISC_TILE_POOL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.Tiled">
            <summary>	
            D3D11_RESOURCE_MISC_TILED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceMiscFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ResourceUsage">
            <summary>	
            D3D11_USAGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceUsage.Default">
            <summary>	
            D3D11_USAGE_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceUsage.Immutable">
            <summary>	
            D3D11_USAGE_IMMUTABLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceUsage.Dynamic">
            <summary>	
            D3D11_USAGE_DYNAMIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceUsage.Staging">
            <summary>	
            D3D11_USAGE_STAGING	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderMinimumPrecisionSupport">
            <summary>	
            D3D11_SHADER_MIN_PRECISION_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderMinimumPrecisionSupport.Bit10">
            <summary>	
            D3D11_SHADER_MIN_PRECISION_10_BIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderMinimumPrecisionSupport.Bit16">
            <summary>	
            D3D11_SHADER_MIN_PRECISION_16_BIT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDimension">
            <summary>	
            D3D_SRV_DIMENSION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Unknown">
            <summary>	
            D3D_SRV_DIMENSION_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Buffer">
            <summary>	
            D3D_SRV_DIMENSION_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Texture1D">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURE1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Texture1DArray">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURE1DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Texture2D">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURE2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Texture2DArray">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURE2DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Texture2DMultisampled">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURE2DMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Texture2DMultisampledArray">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURE2DMSARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.Texture3D">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURE3D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.TextureCube">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURECUBE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.TextureCubeArray">
            <summary>	
            D3D_SRV_DIMENSION_TEXTURECUBEARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDimension.ExtendedBuffer">
            <summary>	
            D3D_SRV_DIMENSION_BUFFEREX	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewExtendedBufferFlags">
            <summary>	
            D3D11_BUFFEREX_SRV_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewExtendedBufferFlags.Raw">
            <summary>	
            D3D11_BUFFEREX_SRV_FLAG_RAW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewExtendedBufferFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.StandardMultisampleQualityLevels">
            <summary>	
            D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StandardMultisampleQualityLevels.StandardMultisamplePattern">
            <summary>	
            D3D11_STANDARD_MULTISAMPLE_PATTERN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StandardMultisampleQualityLevels.CenterMultisamplePattern">
            <summary>	
            D3D11_CENTER_MULTISAMPLE_PATTERN	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.StencilOperation">
            <summary>	
            D3D11_STENCIL_OP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.Keep">
            <summary>	
            D3D11_STENCIL_OP_KEEP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.Zero">
            <summary>	
            D3D11_STENCIL_OP_ZERO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.Replace">
            <summary>	
            D3D11_STENCIL_OP_REPLACE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.IncrementAndClamp">
            <summary>	
            D3D11_STENCIL_OP_INCR_SAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.DecrementAndClamp">
            <summary>	
            D3D11_STENCIL_OP_DECR_SAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.Invert">
            <summary>	
            D3D11_STENCIL_OP_INVERT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.Increment">
            <summary>	
            D3D11_STENCIL_OP_INCR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StencilOperation.Decrement">
            <summary>	
            D3D11_STENCIL_OP_DECR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TextureAddressMode">
            <summary>	
            D3D11_TEXTURE_ADDRESS_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureAddressMode.Wrap">
            <summary>	
            D3D11_TEXTURE_ADDRESS_WRAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureAddressMode.Mirror">
            <summary>	
            D3D11_TEXTURE_ADDRESS_MIRROR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureAddressMode.Clamp">
            <summary>	
            D3D11_TEXTURE_ADDRESS_CLAMP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureAddressMode.Border">
            <summary>	
            D3D11_TEXTURE_ADDRESS_BORDER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureAddressMode.MirrorOnce">
            <summary>	
            D3D11_TEXTURE_ADDRESS_MIRROR_ONCE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TextureCubeFace">
            <summary>	
            D3D11_TEXTURECUBE_FACE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureCubeFace.PositiveX">
            <summary>	
            D3D11_TEXTURECUBE_FACE_POSITIVE_X	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureCubeFace.NegativeX">
            <summary>	
            D3D11_TEXTURECUBE_FACE_NEGATIVE_X	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureCubeFace.PositiveY">
            <summary>	
            D3D11_TEXTURECUBE_FACE_POSITIVE_Y	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureCubeFace.NegativeY">
            <summary>	
            D3D11_TEXTURECUBE_FACE_NEGATIVE_Y	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureCubeFace.PositiveZ">
            <summary>	
            D3D11_TEXTURECUBE_FACE_POSITIVE_Z	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TextureCubeFace.NegativeZ">
            <summary>	
            D3D11_TEXTURECUBE_FACE_NEGATIVE_Z	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TileCopyFlags">
            <summary>	
            D3D11_TILE_COPY_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileCopyFlags.NoOverwrite">
            <summary>	
            D3D11_TILE_COPY_NO_OVERWRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileCopyFlags.LinearBufferToSwizzledTiledResource">
            <summary>	
            D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileCopyFlags.SwizzledTiledResourceToLinearBuffer">
            <summary>	
            D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileCopyFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TiledResourcesTier">
            <summary>	
            D3D11_TILED_RESOURCES_TIER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TiledResourcesTier.NotSupported">
            <summary>	
            D3D11_TILED_RESOURCES_NOT_SUPPORTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TiledResourcesTier.Tier1">
            <summary>	
            D3D11_TILED_RESOURCES_TIER_1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TiledResourcesTier.Tier2">
            <summary>	
            D3D11_TILED_RESOURCES_TIER_2	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TileMappingFlags">
            <summary>	
            D3D11_TILE_MAPPING_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileMappingFlags.NoOverwrite">
            <summary>	
            D3D11_TILE_MAPPING_NO_OVERWRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileMappingFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TileRangeFlags">
            <summary>	
            D3D11_TILE_RANGE_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRangeFlags.Null">
            <summary>	
            D3D11_TILE_RANGE_NULL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRangeFlags.Skip">
            <summary>	
            D3D11_TILE_RANGE_SKIP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRangeFlags.ReuseSingleTile">
            <summary>	
            D3D11_TILE_RANGE_REUSE_SINGLE_TILE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRangeFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewBufferFlags">
            <summary>	
            D3D11_BUFFER_UAV_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewBufferFlags.Raw">
            <summary>	
            D3D11_BUFFER_UAV_FLAG_RAW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewBufferFlags.Append">
            <summary>	
            D3D11_BUFFER_UAV_FLAG_APPEND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewBufferFlags.Counter">
            <summary>	
            D3D11_BUFFER_UAV_FLAG_COUNTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewBufferFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension">
            <summary>	
            D3D11_UAV_DIMENSION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension.Unknown">
            <summary>	
            D3D11_UAV_DIMENSION_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension.Buffer">
            <summary>	
            D3D11_UAV_DIMENSION_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension.Texture1D">
            <summary>	
            D3D11_UAV_DIMENSION_TEXTURE1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension.Texture1DArray">
            <summary>	
            D3D11_UAV_DIMENSION_TEXTURE1DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension.Texture2D">
            <summary>	
            D3D11_UAV_DIMENSION_TEXTURE2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension.Texture2DArray">
            <summary>	
            D3D11_UAV_DIMENSION_TEXTURE2DARRAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDimension.Texture3D">
            <summary>	
            D3D11_UAV_DIMENSION_TEXTURE3D	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CommonGuid">
            <summary>
            D3D11 common guid constants.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CommonGuid.DebugObjectName">
            <summary>WKPDID_D3DDebugObjectName</summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.D3D11">
            <summary>
            D3D11 functions.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.D3D11.SdkVersion">
            <summary>D3D11_SDK_VERSION</summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.D3D11.CreateDevice(C1.Util.DX.DXGI.Adapter,C1.Util.DX.Direct3D11.DriverType,System.IntPtr,C1.Util.DX.Direct3D11.DeviceCreationFlags,C1.Util.DX.Direct3D11.FeatureLevel[],System.Int32,System.Int32,C1.Util.DX.Direct3D11.Device,C1.Util.DX.Direct3D11.FeatureLevel@,C1.Util.DX.Direct3D11.DeviceContext@)">
            <summary>	
            HRESULT D3D11CreateDevice([In, Optional] IDXGIAdapter* pAdapter,[In] D3D_DRIVER_TYPE DriverType,[In] HINSTANCE Software,[In] D3D11_CREATE_DEVICE_FLAG Flags,[In, Buffer, Optional] const D3D_FEATURE_LEVEL* pFeatureLevels,[In] unsigned int FeatureLevels,[In] unsigned int SDKVersion,[Out, Fast] ID3D11Device** ppDevice,[Out, Optional] D3D_FEATURE_LEVEL* pFeatureLevel,[Out, Optional] ID3D11DeviceContext** ppImmediateContext)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ResultCode">
            <summary>	
            D3D11 result codes.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.TooManyUniqueViewObjects">
            <summary>
            D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.TooManyUniqueStateObjects">
            <summary>
            D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.FileNotFound">
            <summary>
            D3D11_ERROR_FILE_NOT_FOUND
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.DeferredContextMapWithoutInitialDiscard">
            <summary>
            D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.CannotModifyIndexBuffer">
            <summary>
            D3DX11_ERR_CANNOT_MODIFY_INDEX_BUFFER
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.CannotAttrSort">
            <summary>
            D3DX11_ERR_CANNOT_ATTR_SORT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.SkinningNotSupported">
            <summary>
            D3DX11_ERR_SKINNING_NOT_SUPPORTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.LoadedMeshHasNoData">
            <summary>
            D3DX11_ERR_LOADED_MESH_HAS_NO_DATA
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.CannotRemoveLastItem">
            <summary>
            D3DX11_ERR_CANNOT_REMOVE_LAST_ITEM
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.DuplicateNamedFragment">
            <summary>
            D3DX11_ERR_DUPLICATE_NAMED_FRAGMENT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.InvalidMesh">
            <summary>
            D3DX11_ERR_INVALID_MESH
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.InvalidData">
            <summary>
            D3DX11_ERR_INVALID_DATA
            </summary>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResultCode.TooManyInfluences">
            <summary>
            D3DX11_ERR_TOO_MANY_INFLUENCES
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Blob">
            <summary>	
            ID3D10Blob	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Blob.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Blob"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Blob.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.Blob">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.Blob"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Blob.GetBufferPointer">
            <summary>	
            void* ID3D10Blob::GetBufferPointer()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Blob.GetBufferSize">
            <summary>	
            SIZE_T ID3D10Blob::GetBufferSize()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CommandList">
            <summary>	
            ID3D11CommandList	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommandList.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.CommandList"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommandList.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.CommandList">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.CommandList"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.CommandList.GetContextFlags">
            <summary>	
            unsigned int ID3D11CommandList::GetContextFlags()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceContext2">
            <summary>	
            ID3D11DeviceContext2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DeviceContext2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DeviceContext2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DeviceContext2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.UpdateTileMappings(C1.Util.DX.Direct3D11.Resource,System.Int32,C1.Util.DX.Direct3D11.TiledResourceCoordinate[],C1.Util.DX.Direct3D11.TileRegionSize[],C1.Util.DX.Direct3D11.Buffer,System.Int32,C1.Util.DX.Direct3D11.TileRangeFlags[],System.Int32[],System.Int32[],C1.Util.DX.Direct3D11.TileMappingFlags)">
            <summary>	
            HRESULT ID3D11DeviceContext2::UpdateTileMappings([In] ID3D11Resource* pTiledResource,[In] unsigned int NumTiledResourceRegions,[In, Buffer, Optional] const D3D11_TILED_RESOURCE_COORDINATE* pTiledResourceRegionStartCoordinates,[In, Buffer, Optional] const D3D11_TILE_REGION_SIZE* pTiledResourceRegionSizes,[In, Optional] ID3D11Buffer* pTilePool,[In] unsigned int NumRanges,[In, Buffer, Optional] const D3D11_TILE_RANGE_FLAG* pRangeFlags,[In, Buffer, Optional] const unsigned int* pTilePoolStartOffsets,[In, Buffer, Optional] const unsigned int* pRangeTileCounts,[In] D3D11_TILE_MAPPING_FLAG Flags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.CopyTileMappings(C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.TiledResourceCoordinate,C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.TiledResourceCoordinate,C1.Util.DX.Direct3D11.TileRegionSize,C1.Util.DX.Direct3D11.TileMappingFlags)">
            <summary>	
            HRESULT ID3D11DeviceContext2::CopyTileMappings([In] ID3D11Resource* pDestTiledResource,[In] const D3D11_TILED_RESOURCE_COORDINATE* pDestRegionStartCoordinate,[In] ID3D11Resource* pSourceTiledResource,[In] const D3D11_TILED_RESOURCE_COORDINATE* pSourceRegionStartCoordinate,[In] const D3D11_TILE_REGION_SIZE* pTileRegionSize,[In] D3D11_TILE_MAPPING_FLAG Flags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.CopyTiles(C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.TiledResourceCoordinate,C1.Util.DX.Direct3D11.TileRegionSize,C1.Util.DX.Direct3D11.Buffer,System.Int64,C1.Util.DX.Direct3D11.TileMappingFlags)">
            <summary>	
            void ID3D11DeviceContext2::CopyTiles([In] ID3D11Resource* pTiledResource,[In] const D3D11_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate,[In] const D3D11_TILE_REGION_SIZE* pTileRegionSize,[In] ID3D11Buffer* pBuffer,[In] unsigned longlong BufferStartOffsetInBytes,[In] D3D11_TILE_MAPPING_FLAG Flags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.UpdateTiles(C1.Util.DX.Direct3D11.Resource,C1.Util.DX.Direct3D11.TiledResourceCoordinate,C1.Util.DX.Direct3D11.TileRegionSize,System.IntPtr,C1.Util.DX.Direct3D11.TileMappingFlags)">
            <summary>	
            void ID3D11DeviceContext2::UpdateTiles([In] ID3D11Resource* pDestTiledResource,[In] const D3D11_TILED_RESOURCE_COORDINATE* pDestTileRegionStartCoordinate,[In] const D3D11_TILE_REGION_SIZE* pDestTileRegionSize,[In] const void* pSourceTileData,[In] D3D11_TILE_MAPPING_FLAG Flags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.ResizeTilePool(C1.Util.DX.Direct3D11.Buffer,System.Int64)">
            <summary>	
            HRESULT ID3D11DeviceContext2::ResizeTilePool([In] ID3D11Buffer* pTilePool,[In] unsigned longlong NewSizeInBytes)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.TiledResourceBarrier(C1.Util.DX.Direct3D11.DeviceChild,C1.Util.DX.Direct3D11.DeviceChild)">
            <summary>	
            void ID3D11DeviceContext2::TiledResourceBarrier([In, Optional] ID3D11DeviceChild* pTiledResourceOrViewAccessBeforeBarrier,[In, Optional] ID3D11DeviceChild* pTiledResourceOrViewAccessAfterBarrier)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.IsAnnotationEnabled">
            <summary>	
            BOOL ID3D11DeviceContext2::IsAnnotationEnabled()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.SetMarkerInt(System.String,System.Int32)">
            <summary>	
            void ID3D11DeviceContext2::SetMarkerInt([In] const wchar_t* pLabel,[In] int Data)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.BeginEventInt(System.String,System.Int32)">
            <summary>	
            void ID3D11DeviceContext2::BeginEventInt([In] const wchar_t* pLabel,[In] int Data)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContext2.EndEvent">
            <summary>	
            void ID3D11DeviceContext2::EndEvent()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceContextState">
            <summary>	
            ID3DDeviceContextState	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContextState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DeviceContextState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceContextState.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DeviceContextState">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DeviceContextState"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DeviceMultithread">
            <summary>	
            ID3D10Multithread	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceMultithread.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DeviceMultithread"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceMultithread.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DeviceMultithread">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DeviceMultithread"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceMultithread.Enter">
            <summary>	
            void ID3D10Multithread::Enter()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceMultithread.Leave">
            <summary>	
            void ID3D10Multithread::Leave()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceMultithread.SetMultithreadProtected(C1.Util.DX.Bool)">
            <summary>	
            BOOL ID3D10Multithread::SetMultithreadProtected([In] BOOL bMTProtect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DeviceMultithread.GetMultithreadProtected">
            <summary>	
            BOOL ID3D10Multithread::GetMultithreadProtected()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DomainShaderStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.DomainShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.DomainShaderStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.DomainShaderStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.SetShaderResources(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::DSSetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[In, Buffer, Optional] const void** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.SetShader(C1.Util.DX.Direct3D11.DomainShader,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DSSetShader([In, Optional] ID3D11DomainShader* pDomainShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.SetShader(C1.Util.DX.Direct3D11.DomainShader,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ClassInstance},System.Int32)">
            <summary>	
            void ID3D11DeviceContext::DSSetShader([In, Optional] ID3D11DomainShader* pDomainShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.SetSamplers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::DSSetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[In, Buffer, Optional] const void** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.SetConstantBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::DSSetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const void** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.GetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>	
            void ID3D11DeviceContext::DSGetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[Out, Buffer, Optional] ID3D11ShaderResourceView** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.GetShader(C1.Util.DX.Direct3D11.DomainShader@,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::DSGetShader([Out] ID3D11DomainShader** ppDomainShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] unsigned int* pNumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.GetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>	
            void ID3D11DeviceContext::DSGetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[Out, Buffer, Optional] ID3D11SamplerState** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DomainShaderStage.GetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>	
            void ID3D11DeviceContext::DSGetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.GeometryShaderStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.GeometryShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.GeometryShaderStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.GeometryShaderStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.SetConstantBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::GSSetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const void** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.SetShader(C1.Util.DX.Direct3D11.GeometryShader,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext::GSSetShader([In, Optional] ID3D11GeometryShader* pShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.SetShader(C1.Util.DX.Direct3D11.GeometryShader,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ClassInstance},System.Int32)">
            <summary>	
            void ID3D11DeviceContext::GSSetShader([In, Optional] ID3D11GeometryShader* pShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.SetShaderResources(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::GSSetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[In, Buffer, Optional] const void** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.SetSamplers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::GSSetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[In, Buffer, Optional] const void** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.GetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>	
            void ID3D11DeviceContext::GSGetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.GetShader(C1.Util.DX.Direct3D11.GeometryShader@,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::GSGetShader([Out] ID3D11GeometryShader** ppGeometryShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] unsigned int* pNumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.GetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>	
            void ID3D11DeviceContext::GSGetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[Out, Buffer, Optional] ID3D11ShaderResourceView** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.GeometryShaderStage.GetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>	
            void ID3D11DeviceContext::GSGetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[Out, Buffer, Optional] ID3D11SamplerState** ppSamplers)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.HullShaderStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.HullShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.HullShaderStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.HullShaderStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.SetShaderResources(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::HSSetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[In, Buffer, Optional] const void** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.SetShader(C1.Util.DX.Direct3D11.HullShader,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext::HSSetShader([In, Optional] ID3D11HullShader* pHullShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.SetShader(C1.Util.DX.Direct3D11.HullShader,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ClassInstance},System.Int32)">
            <summary>	
            void ID3D11DeviceContext::HSSetShader([In, Optional] ID3D11HullShader* pHullShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.SetSamplers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::HSSetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[In, Buffer, Optional] const void** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.SetConstantBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::HSSetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const void** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.GetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>	
            void ID3D11DeviceContext::HSGetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[Out, Buffer, Optional] ID3D11ShaderResourceView** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.GetShader(C1.Util.DX.Direct3D11.HullShader@,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::HSGetShader([Out] ID3D11HullShader** ppHullShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] unsigned int* pNumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.GetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>	
            void ID3D11DeviceContext::HSGetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[Out, Buffer, Optional] ID3D11SamplerState** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.HullShaderStage.GetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>	
            void ID3D11DeviceContext::HSGetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.PixelShaderStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.InputRegisterComponentBitCount">
            <summary>Constant InputRegisterComponentBitCount.</summary>
            <unmanaged>D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputRegisterComponentBitCount">
            <summary>Constant OutputRegisterComponentBitCount.</summary>
            <unmanaged>D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.PixelCenterFractionalComponent">
            <summary>Constant PixelCenterFractionalComponent.</summary>
            <unmanaged>D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputRegisterComponents">
            <summary>Constant OutputRegisterComponents.</summary>
            <unmanaged>D3D11_PS_OUTPUT_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputMaskRegisterComponents">
            <summary>Constant OutputMaskRegisterComponents.</summary>
            <unmanaged>D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.InputRegisterComponents">
            <summary>Constant InputRegisterComponents.</summary>
            <unmanaged>D3D11_PS_INPUT_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.LegacyPixelCenterFractionalComponent">
            <summary>Constant LegacyPixelCenterFractionalComponent.</summary>
            <unmanaged>D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputMaskRegisterComponentBitCount">
            <summary>Constant OutputMaskRegisterComponentBitCount.</summary>
            <unmanaged>D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputMaskRegisterCount">
            <summary>Constant OutputMaskRegisterCount.</summary>
            <unmanaged>D3D11_PS_OUTPUT_MASK_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.FrontfacingDefaultValue">
            <summary>Constant FrontfacingDefaultValue.</summary>
            <unmanaged>D3D11_PS_FRONTFACING_DEFAULT_VALUE</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.FrontfacingTrueValue">
            <summary>Constant FrontfacingTrueValue.</summary>
            <unmanaged>D3D11_PS_FRONTFACING_TRUE_VALUE</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.InputRegisterReadsPerInst">
            <summary>Constant InputRegisterReadsPerInst.</summary>
            <unmanaged>D3D11_PS_INPUT_REGISTER_READS_PER_INST</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputDepthRegisterCount">
            <summary>Constant OutputDepthRegisterCount.</summary>
            <unmanaged>D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputDepthRegisterComponents">
            <summary>Constant OutputDepthRegisterComponents.</summary>
            <unmanaged>D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputRegisterCount">
            <summary>Constant OutputRegisterCount.</summary>
            <unmanaged>D3D11_PS_OUTPUT_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.FrontfacingFalseValue">
            <summary>Constant FrontfacingFalseValue.</summary>
            <unmanaged>D3D11_PS_FRONTFACING_FALSE_VALUE</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.InputRegisterCount">
            <summary>Constant InputRegisterCount.</summary>
            <unmanaged>D3D11_PS_INPUT_REGISTER_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.OutputDepthRegisterComponentBitCount">
            <summary>Constant OutputDepthRegisterComponentBitCount.</summary>
            <unmanaged>D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT</unmanaged>
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PixelShaderStage.InputRegisterReadPorts">
            <summary>Constant InputRegisterReadPorts.</summary>
            <unmanaged>D3D11_PS_INPUT_REGISTER_READ_PORTS</unmanaged>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.PixelShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.PixelShaderStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.PixelShaderStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.SetShaderResources(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::PSSetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[In, Buffer, Optional] const void** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.SetShader(C1.Util.DX.Direct3D11.PixelShader,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext::PSSetShader([In, Optional] ID3D11PixelShader* pPixelShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.SetShader(C1.Util.DX.Direct3D11.PixelShader,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ClassInstance},System.Int32)">
            <summary>	
            void ID3D11DeviceContext::PSSetShader([In, Optional] ID3D11PixelShader* pPixelShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.SetSamplers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::PSSetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[In, Buffer, Optional] const void** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.SetConstantBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::PSSetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const void** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.GetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>	
            void ID3D11DeviceContext::PSGetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[Out, Buffer, Optional] ID3D11ShaderResourceView** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.GetShader(C1.Util.DX.Direct3D11.PixelShader@,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::PSGetShader([Out] ID3D11PixelShader** ppPixelShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] unsigned int* pNumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.GetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>	
            void ID3D11DeviceContext::PSGetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[Out, Buffer, Optional] ID3D11SamplerState** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.PixelShaderStage.GetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>	
            void ID3D11DeviceContext::PSGetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UserDefinedAnnotation">
            <summary>	
            ID3DUserDefinedAnnotation	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UserDefinedAnnotation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.UserDefinedAnnotation"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UserDefinedAnnotation.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.UserDefinedAnnotation">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.UserDefinedAnnotation"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UserDefinedAnnotation.BeginEvent(System.String)">
            <summary>	
            int ID3DUserDefinedAnnotation::BeginEvent([In] const wchar_t* Name)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UserDefinedAnnotation.EndEvent">
            <summary>	
            int ID3DUserDefinedAnnotation::EndEvent()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UserDefinedAnnotation.SetMarker(System.String)">
            <summary>	
            void ID3DUserDefinedAnnotation::SetMarker([In] const wchar_t* Name)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.UserDefinedAnnotation.GetStatus">
            <summary>	
            BOOL ID3DUserDefinedAnnotation::GetStatus()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.VertexShaderStage">
            <summary>	
            ID3D11DeviceContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.VertexShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.op_Explicit(System.IntPtr)~C1.Util.DX.Direct3D11.VertexShaderStage">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Direct3D11.VertexShaderStage"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.SetConstantBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::VSSetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer, Optional] const void** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.SetShader(C1.Util.DX.Direct3D11.VertexShader,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            void ID3D11DeviceContext::VSSetShader([In, Optional] ID3D11VertexShader* pVertexShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.SetShader(C1.Util.DX.Direct3D11.VertexShader,C1.Util.DX.ComArray{C1.Util.DX.Direct3D11.ClassInstance},System.Int32)">
            <summary>	
            void ID3D11DeviceContext::VSSetShader([In, Optional] ID3D11VertexShader* pVertexShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[In] unsigned int NumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.SetShaderResources(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::VSSetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[In, Buffer, Optional] const void** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.SetSamplers(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            void ID3D11DeviceContext::VSSetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[In, Buffer, Optional] const void** ppSamplers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.GetConstantBuffers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.Buffer[])">
            <summary>	
            void ID3D11DeviceContext::VSGetConstantBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppConstantBuffers)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.GetShader(C1.Util.DX.Direct3D11.VertexShader@,C1.Util.DX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            void ID3D11DeviceContext::VSGetShader([Out] ID3D11VertexShader** ppVertexShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] unsigned int* pNumClassInstances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.GetShaderResources(System.Int32,System.Int32,C1.Util.DX.Direct3D11.ShaderResourceView[])">
            <summary>	
            void ID3D11DeviceContext::VSGetShaderResources([In] unsigned int StartSlot,[In] unsigned int NumViews,[Out, Buffer, Optional] ID3D11ShaderResourceView** ppShaderResourceViews)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexShaderStage.GetSamplers(System.Int32,System.Int32,C1.Util.DX.Direct3D11.SamplerState[])">
            <summary>	
            void ID3D11DeviceContext::VSGetSamplers([In] unsigned int StartSlot,[In] unsigned int NumSamplers,[Out, Buffer, Optional] ID3D11SamplerState** ppSamplers)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BlendStateDescription">
            <summary>	
            D3D11_BLEND_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendStateDescription.AlphaToCoverageEnable">
            <summary>	
            BOOL AlphaToCoverageEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendStateDescription.IndependentBlendEnable">
            <summary>	
            BOOL IndependentBlendEnable	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendStateDescription.Default">
            <summary>
            Returns default values for <see cref="T:C1.Util.DX.Direct3D11.BlendStateDescription"/>. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendStateDescription.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A copy of this instance.</returns>
            <remarks>
            Because this structure contains an array, it is not possible to modify it without making an explicit clone method.
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.BlendStateDescription.RenderTarget">
            <summary>	
            D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8]	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BlendStateDescription1">
            <summary>	
            D3D11_BLEND_DESC1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendStateDescription1.AlphaToCoverageEnable">
            <summary>	
            BOOL AlphaToCoverageEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BlendStateDescription1.IndependentBlendEnable">
            <summary>	
            BOOL IndependentBlendEnable	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendStateDescription1.Default">
            <summary>
            Returns default values for <see cref="T:C1.Util.DX.Direct3D11.BlendStateDescription1"/>. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BlendStateDescription1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A copy of this instance.</returns>
            <remarks>
            Because this structure contains an array, it is not possible to modify it without making an explicit clone method.
            </remarks>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.BlendStateDescription1.RenderTarget">
            <summary>	
            D3D11_RENDER_TARGET_BLEND_DESC1 RenderTarget[8]	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.BufferDescription">
            <summary>	
            D3D11_BUFFER_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BufferDescription.SizeInBytes">
            <summary>	
            unsigned int ByteWidth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BufferDescription.Usage">
            <summary>	
            D3D11_USAGE Usage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BufferDescription.BindFlags">
            <summary>	
            D3D11_BIND_FLAG BindFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BufferDescription.CpuAccessFlags">
            <summary>	
            D3D11_CPU_ACCESS_FLAG CPUAccessFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BufferDescription.MiscFlags">
            <summary>	
            D3D11_RESOURCE_MISC_FLAG MiscFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.BufferDescription.StructureByteStride">
            <summary>	
            unsigned int StructureByteStride	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.BufferDescription.#ctor(System.Int32,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.BindFlags,C1.Util.DX.Direct3D11.CpuAccessFlags,C1.Util.DX.Direct3D11.ResourceMiscFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.BufferDescription"/> struct.
            </summary>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <param name="bindFlags">The bind flags.</param>
            <param name="cpuAccessFlags">The CPU access flags.</param>
            <param name="miscFlags">The option flags.</param>
            <param name="structureByteStride">The structure byte stride.</param>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ClassInstanceDescription">
            <summary>	
            D3D11_CLASS_INSTANCE_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.InstanceId">
            <summary>	
            unsigned int InstanceId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.InstanceIndex">
            <summary>	
            unsigned int InstanceIndex	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.TypeId">
            <summary>	
            unsigned int TypeId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.ConstantBuffer">
            <summary>	
            unsigned int ConstantBuffer	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.BaseConstantBufferOffset">
            <summary>	
            unsigned int BaseConstantBufferOffset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.BaseTexture">
            <summary>	
            unsigned int BaseTexture	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.BaseSampler">
            <summary>	
            unsigned int BaseSampler	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ClassInstanceDescription.IsCreated">
            <summary>	
            BOOL Created	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CounterCapabilities">
            <summary>	
            D3D11_COUNTER_INFO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterCapabilities.LastDeviceDependentCounter">
            <summary>	
            D3D11_COUNTER LastDeviceDependentCounter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterCapabilities.SimultaneousCounterCount">
            <summary>	
            unsigned int NumSimultaneousCounters	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterCapabilities.DetectableParallelUnitCount">
            <summary>	
            unsigned char NumDetectableParallelUnits	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.CounterDescription">
            <summary>	
            D3D11_COUNTER_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterDescription.Counter">
            <summary>	
            D3D11_COUNTER Counter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.CounterDescription.MiscFlags">
            <summary>	
            unsigned int MiscFlags	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilOperationDescription">
            <summary>	
            D3D11_DEPTH_STENCILOP_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilOperationDescription.FailOperation">
            <summary>	
            D3D11_STENCIL_OP StencilFailOp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilOperationDescription.DepthFailOperation">
            <summary>	
            D3D11_STENCIL_OP StencilDepthFailOp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilOperationDescription.PassOperation">
            <summary>	
            D3D11_STENCIL_OP StencilPassOp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilOperationDescription.Comparison">
            <summary>	
            D3D11_COMPARISON_FUNC StencilFunc	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilStateDescription">
            <summary>	
            D3D11_DEPTH_STENCIL_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.IsDepthEnabled">
            <summary>	
            BOOL DepthEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.DepthWriteMask">
            <summary>	
            D3D11_DEPTH_WRITE_MASK DepthWriteMask	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.DepthComparison">
            <summary>	
            D3D11_COMPARISON_FUNC DepthFunc	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.IsStencilEnabled">
            <summary>	
            BOOL StencilEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.StencilReadMask">
            <summary>	
            unsigned char StencilReadMask	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.StencilWriteMask">
            <summary>	
            unsigned char StencilWriteMask	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.FrontFace">
            <summary>	
            D3D11_DEPTH_STENCILOP_DESC FrontFace	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilStateDescription.BackFace">
            <summary>	
            D3D11_DEPTH_STENCILOP_DESC BackFace	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.DepthStencilStateDescription.Default">
            <summary>
            Returns default values for <see cref="T:C1.Util.DX.Direct3D11.DepthStencilStateDescription"/>. 
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDescription">
            <summary>	
            D3D11_DEPTH_STENCIL_VIEW_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Dimension">
            <summary>	
            D3D11_DSV_DIMENSION ViewDimension	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Flags">
            <summary>	
            D3D11_DSV_FLAG Flags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1D">
            <summary>	
            D3D11_TEX1D_DSV Texture1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1DArray">
            <summary>	
            D3D11_TEX1D_ARRAY_DSV Texture1DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2D">
            <summary>	
            D3D11_TEX2D_DSV Texture2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DArray">
            <summary>	
            D3D11_TEX2D_ARRAY_DSV Texture2DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DMS">
            <summary>	
            D3D11_TEX2DMS_DSV Texture2DMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DMSArray">
            <summary>	
            D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DResource">
            <summary>	
            D3D11_TEX2D_DSV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource">
            <summary>	
            D3D11_TEX1D_ARRAY_DSV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1DResource">
            <summary>	
            D3D11_TEX1D_DSV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture1DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource">
            <summary>	
            D3D11_TEX2D_ARRAY_DSV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource">
            <summary>	
            D3D11_TEX2DMS_DSV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            unsigned int UnusedField_NothingToDefine	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            D3D11_TEX2DMS_ARRAY_DSV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataArchitectureInformation">
            <summary>	
            D3D11_FEATURE_DATA_ARCHITECTURE_INFO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataArchitectureInformation.TileBasedDeferredRenderer">
            <summary>	
            BOOL TileBasedDeferredRenderer	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataD3D10XHardwareOptions">
            <summary>	
            D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D10XHardwareOptions.ComputeShadersPlusRawAndStructuredBuffersViaShader4X">
            <summary>	
            BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataD3D11Options">
            <summary>	
            D3D11_FEATURE_DATA_D3D11_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.OutputMergerLogicOp">
            <summary>	
            BOOL OutputMergerLogicOp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.UAVOnlyRenderingForcedSampleCount">
            <summary>	
            BOOL UAVOnlyRenderingForcedSampleCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.DiscardAPIsSeenByDriver">
            <summary>	
            BOOL DiscardAPIsSeenByDriver	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.FlagsForUpdateAndCopySeenByDriver">
            <summary>	
            BOOL FlagsForUpdateAndCopySeenByDriver	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.ClearView">
            <summary>	
            BOOL ClearView	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.CopyWithOverlap">
            <summary>	
            BOOL CopyWithOverlap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.ConstantBufferPartialUpdate">
            <summary>	
            BOOL ConstantBufferPartialUpdate	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.ConstantBufferOffsetting">
            <summary>	
            BOOL ConstantBufferOffsetting	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.MapNoOverwriteOnDynamicConstantBuffer">
            <summary>	
            BOOL MapNoOverwriteOnDynamicConstantBuffer	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.MapNoOverwriteOnDynamicBufferSRV">
            <summary>	
            BOOL MapNoOverwriteOnDynamicBufferSRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.MultisampleRTVWithForcedSampleCountOne">
            <summary>	
            BOOL MultisampleRTVWithForcedSampleCountOne	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.SAD4ShaderInstructions">
            <summary>	
            BOOL SAD4ShaderInstructions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.ExtendedDoublesShaderInstructions">
            <summary>	
            BOOL ExtendedDoublesShaderInstructions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options.ExtendedResourceSharing">
            <summary>	
            BOOL ExtendedResourceSharing	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataD3D11Options1">
            <summary>	
            D3D11_FEATURE_DATA_D3D11_OPTIONS1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options1.TiledResourcesTier">
            <summary>	
            D3D11_TILED_RESOURCES_TIER TiledResourcesTier	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options1.MinMaxFiltering">
            <summary>	
            BOOL MinMaxFiltering	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options1.ClearViewAlsoSupportsDepthOnlyFormats">
            <summary>	
            BOOL ClearViewAlsoSupportsDepthOnlyFormats	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D11Options1.MapOnDefaultBuffers">
            <summary>	
            BOOL MapOnDefaultBuffers	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataD3D9Options">
            <summary>	
            D3D11_FEATURE_DATA_D3D9_OPTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D9Options.FullNonPow2TextureSupport">
            <summary>	
            BOOL FullNonPow2TextureSupport	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataD3D9Options1">
            <summary>	
            D3D11_FEATURE_DATA_D3D9_OPTIONS1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D9Options1.FullNonPow2TextureSupported">
            <summary>	
            BOOL FullNonPow2TextureSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D9Options1.DepthAsTextureWithLessEqualComparisonFilterSupported">
            <summary>	
            BOOL DepthAsTextureWithLessEqualComparisonFilterSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D9Options1.SimpleInstancingSupported">
            <summary>	
            BOOL SimpleInstancingSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D9Options1.TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported">
            <summary>	
            BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataD3D9ShadowSupport">
            <summary>	
            D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D9ShadowSupport.SupportsDepthAsTextureWithLessEqualComparisonFilter">
            <summary>	
            BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataD3D9SimpleInstancingSupport">
            <summary>	
            D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataD3D9SimpleInstancingSupport.SimpleInstancingSupported">
            <summary>	
            BOOL SimpleInstancingSupported	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataDoubles">
            <summary>	
            D3D11_FEATURE_DATA_DOUBLES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataDoubles.DoublePrecisionFloatShaderOps">
            <summary>	
            BOOL DoublePrecisionFloatShaderOps	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataFormatSupport">
            <summary>	
            D3D11_FEATURE_DATA_FORMAT_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataFormatSupport.InFormat">
            <summary>	
            DXGI_FORMAT InFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataFormatSupport.OutFormatSupport">
            <summary>	
            D3D11_FORMAT_SUPPORT OutFormatSupport	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataFormatSupport2">
            <summary>	
            D3D11_FEATURE_DATA_FORMAT_SUPPORT2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataFormatSupport2.InFormat">
            <summary>	
            DXGI_FORMAT InFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataFormatSupport2.OutFormatSupport2">
            <summary>	
            D3D11_FORMAT_SUPPORT2 OutFormatSupport2	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataMarkerSupport">
            <summary>	
            D3D11_FEATURE_DATA_MARKER_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataMarkerSupport.Profile">
            <summary>	
            BOOL Profile	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataShaderMinimumPrecisionSupport">
            <summary>	
            D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataShaderMinimumPrecisionSupport.PixelShaderMinPrecision">
            <summary>	
            unsigned int PixelShaderMinPrecision	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataShaderMinimumPrecisionSupport.AllOtherShaderStagesMinPrecision">
            <summary>	
            unsigned int AllOtherShaderStagesMinPrecision	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.FeatureDataThreading">
            <summary>	
            D3D11_FEATURE_DATA_THREADING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataThreading.DriverConcurrentCreates">
            <summary>	
            BOOL DriverConcurrentCreates	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.FeatureDataThreading.DriverCommandLists">
            <summary>	
            BOOL DriverCommandLists	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.InputElement">
            <summary>	
            D3D11_INPUT_ELEMENT_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputElement.SemanticName">
            <summary>	
            const char* SemanticName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputElement.SemanticIndex">
            <summary>	
            unsigned int SemanticIndex	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputElement.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputElement.Slot">
            <summary>	
            unsigned int InputSlot	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputElement.AlignedByteOffset">
            <summary>	
            unsigned int AlignedByteOffset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputElement.Classification">
            <summary>	
            D3D11_INPUT_CLASSIFICATION InputSlotClass	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.InputElement.InstanceDataStepRate">
            <summary>	
            unsigned int InstanceDataStepRate	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.#ctor(System.String,System.Int32,C1.Util.DX.DXGI.Format,System.Int32,System.Int32,C1.Util.DX.Direct3D11.InputClassification,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "offset">Offset (in bytes) between each element. Use AppendAligned for convenience to define the current element directly after the previous one, including any packing if necessary.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
            <param name = "slotClass">Identifies the input data class for a single input slot.</param>
            <param name = "stepRate">The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.#ctor(System.String,System.Int32,C1.Util.DX.DXGI.Format,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "offset">Offset (in bytes) between each element. Use AppendAligned for convenience to define the current element directly after the previous one, including any packing if necessary.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.#ctor(System.String,System.Int32,C1.Util.DX.DXGI.Format,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.Equals(C1.Util.DX.Direct3D11.InputElement)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.Direct3D11.InputElement"/> is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.op_Equality(C1.Util.DX.Direct3D11.InputElement,C1.Util.DX.Direct3D11.InputElement)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.InputElement.op_Inequality(C1.Util.DX.Direct3D11.InputElement,C1.Util.DX.Direct3D11.InputElement)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.InputElement.AppendAligned">
            <summary>
            Returns a value that can be used for the offset parameter of an InputElement to indicate that the element
            should be aligned directly after the previous element, including any packing if neccessary.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.PackedMipDescription">
            <summary>	
            D3D11_PACKED_MIP_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PackedMipDescription.StandardMipCount">
            <summary>	
            unsigned char NumStandardMips	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PackedMipDescription.PackedMipCount">
            <summary>	
            unsigned char NumPackedMips	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PackedMipDescription.TilesForPackedMipCount">
            <summary>	
            unsigned int NumTilesForPackedMips	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.PackedMipDescription.StartTileIndexInOverallResource">
            <summary>	
            unsigned int StartTileIndexInOverallResource	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics">
            <summary>	
            D3D11_QUERY_DATA_PIPELINE_STATISTICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.IAVerticeCount">
            <summary>	
            unsigned longlong IAVertices	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.IAPrimitiveCount">
            <summary>	
            unsigned longlong IAPrimitives	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.VSInvocationCount">
            <summary>	
            unsigned longlong VSInvocations	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.GSInvocationCount">
            <summary>	
            unsigned longlong GSInvocations	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.GSPrimitiveCount">
            <summary>	
            unsigned longlong GSPrimitives	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.CInvocationCount">
            <summary>	
            unsigned longlong CInvocations	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.CPrimitiveCount">
            <summary>	
            unsigned longlong CPrimitives	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.PSInvocationCount">
            <summary>	
            unsigned longlong PSInvocations	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.HSInvocationCount">
            <summary>	
            unsigned longlong HSInvocations	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.DSInvocationCount">
            <summary>	
            unsigned longlong DSInvocations	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataPipelineStatistics.CSInvocationCount">
            <summary>	
            unsigned longlong CSInvocations	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.QueryDataTimestampDisjoint">
            <summary>	
            D3D11_QUERY_DATA_TIMESTAMP_DISJOINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataTimestampDisjoint.Frequency">
            <summary>	
            unsigned longlong Frequency	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDataTimestampDisjoint.Disjoint">
            <summary>	
            BOOL Disjoint	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.QueryDescription">
            <summary>	
            D3D11_QUERY_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDescription.Type">
            <summary>	
            D3D11_QUERY Query	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.QueryDescription.Flags">
            <summary>	
            D3D11_QUERY_MISC_FLAG MiscFlags	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RasterizerStateDescription">
            <summary>	
            D3D11_RASTERIZER_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.FillMode">
            <summary>	
            D3D11_FILL_MODE FillMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.CullMode">
            <summary>	
            D3D11_CULL_MODE CullMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.IsFrontCounterClockwise">
            <summary>	
            BOOL FrontCounterClockwise	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.DepthBias">
            <summary>	
            int DepthBias	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.DepthBiasClamp">
            <summary>	
            float DepthBiasClamp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.SlopeScaledDepthBias">
            <summary>	
            float SlopeScaledDepthBias	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.IsDepthClipEnabled">
            <summary>	
            BOOL DepthClipEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.IsScissorEnabled">
            <summary>	
            BOOL ScissorEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.IsMultisampleEnabled">
            <summary>	
            BOOL MultisampleEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription.IsAntialiasedLineEnabled">
            <summary>	
            BOOL AntialiasedLineEnable	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStateDescription.Default">
            <summary>
            Returns default values for <see cref="T:C1.Util.DX.Direct3D11.RasterizerStateDescription"/>. 
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RasterizerStateDescription1">
            <summary>	
            D3D11_RASTERIZER_DESC1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.FillMode">
            <summary>	
            D3D11_FILL_MODE FillMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.CullMode">
            <summary>	
            D3D11_CULL_MODE CullMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.IsFrontCounterClockwise">
            <summary>	
            BOOL FrontCounterClockwise	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.DepthBias">
            <summary>	
            int DepthBias	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.DepthBiasClamp">
            <summary>	
            float DepthBiasClamp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.SlopeScaledDepthBias">
            <summary>	
            float SlopeScaledDepthBias	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.IsDepthClipEnabled">
            <summary>	
            BOOL DepthClipEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.IsScissorEnabled">
            <summary>	
            BOOL ScissorEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.IsMultisampleEnabled">
            <summary>	
            BOOL MultisampleEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.IsAntialiasedLineEnabled">
            <summary>	
            BOOL AntialiasedLineEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RasterizerStateDescription1.ForcedSampleCount">
            <summary>	
            unsigned int ForcedSampleCount	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RasterizerStateDescription1.Default">
            <summary>
            Returns default values for <see cref="T:C1.Util.DX.Direct3D11.RasterizerStateDescription1"/>. 
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetBlendDescription">
            <summary>	
            D3D11_RENDER_TARGET_BLEND_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.IsBlendEnabled">
            <summary>	
            BOOL BlendEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.SourceBlend">
            <summary>	
            D3D11_BLEND SrcBlend	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.DestinationBlend">
            <summary>	
            D3D11_BLEND DestBlend	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.BlendOperation">
            <summary>	
            D3D11_BLEND_OP BlendOp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.SourceAlphaBlend">
            <summary>	
            D3D11_BLEND SrcBlendAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.DestinationAlphaBlend">
            <summary>	
            D3D11_BLEND DestBlendAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.AlphaBlendOperation">
            <summary>	
            D3D11_BLEND_OP BlendOpAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.RenderTargetWriteMask">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE RenderTargetWriteMask	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.#ctor(System.Boolean,C1.Util.DX.Direct3D11.BlendOption,C1.Util.DX.Direct3D11.BlendOption,C1.Util.DX.Direct3D11.BlendOperation,C1.Util.DX.Direct3D11.BlendOption,C1.Util.DX.Direct3D11.BlendOption,C1.Util.DX.Direct3D11.BlendOperation,C1.Util.DX.Direct3D11.ColorWriteMaskFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.RenderTargetBlendDescription"/> struct.
            </summary>
            <param name="isBlendEnabled">The is blend enabled.</param>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
            <param name="blendOperation">The blend operation.</param>
            <param name="sourceAlphaBlend">The source alpha blend.</param>
            <param name="destinationAlphaBlend">The destination alpha blend.</param>
            <param name="alphaBlendOperation">The alpha blend operation.</param>
            <param name="renderTargetWriteMask">The render target write mask.</param>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.RenderTargetBlendDescription.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1">
            <summary>	
            D3D11_RENDER_TARGET_BLEND_DESC1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.IsBlendEnabled">
            <summary>	
            BOOL BlendEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.IsLogicOperationEnabled">
            <summary>	
            BOOL LogicOpEnable	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.SourceBlend">
            <summary>	
            D3D11_BLEND SrcBlend	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.DestinationBlend">
            <summary>	
            D3D11_BLEND DestBlend	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.BlendOperation">
            <summary>	
            D3D11_BLEND_OP BlendOp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.SourceAlphaBlend">
            <summary>	
            D3D11_BLEND SrcBlendAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.DestinationAlphaBlend">
            <summary>	
            D3D11_BLEND DestBlendAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.AlphaBlendOperation">
            <summary>	
            D3D11_BLEND_OP BlendOpAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.LogicOperation">
            <summary>	
            D3D11_LOGIC_OP LogicOp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetBlendDescription1.RenderTargetWriteMask">
            <summary>	
            D3D11_COLOR_WRITE_ENABLE RenderTargetWriteMask	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription">
            <summary>	
            D3D11_RENDER_TARGET_VIEW_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Dimension">
            <summary>	
            D3D11_RTV_DIMENSION ViewDimension	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Buffer">
            <summary>	
            D3D11_BUFFER_RTV Buffer	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1D">
            <summary>	
            D3D11_TEX1D_RTV Texture1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1DArray">
            <summary>	
            D3D11_TEX1D_ARRAY_RTV Texture1DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2D">
            <summary>	
            D3D11_TEX2D_RTV Texture2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DArray">
            <summary>	
            D3D11_TEX2D_ARRAY_RTV Texture2DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DMS">
            <summary>	
            D3D11_TEX2DMS_RTV Texture2DMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DMSArray">
            <summary>	
            D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture3D">
            <summary>	
            D3D11_TEX3D_RTV Texture3D	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            D3D11_TEX2DMS_ARRAY_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1DResource">
            <summary>	
            D3D11_TEX1D_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource">
            <summary>	
            D3D11_TEX2DMS_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            unsigned int UnusedField_NothingToDefine	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DResource">
            <summary>	
            D3D11_TEX2D_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource">
            <summary>	
            D3D11_TEX1D_ARRAY_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture3DResource">
            <summary>	
            D3D11_TEX3D_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture3DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture3DResource.FirstDepthSlice">
            <summary>	
            unsigned int FirstWSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture3DResource.DepthSliceCount">
            <summary>	
            unsigned int WSize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource">
            <summary>	
            D3D11_TEX2D_ARRAY_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.RenderTargetViewDescription.BufferResource">
            <summary>	
            D3D11_BUFFER_RTV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.BufferResource.FirstElement">
            <summary>	
            unsigned int FirstElement	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.BufferResource.ElementOffset">
            <summary>	
            unsigned int ElementOffset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.BufferResource.ElementCount">
            <summary>	
            unsigned int NumElements	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.RenderTargetViewDescription.BufferResource.ElementWidth">
            <summary>	
            unsigned int ElementWidth	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ResourceRegion">
            <summary>	
            D3D11_BOX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceRegion.Left">
            <summary>	
            unsigned int left	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceRegion.Top">
            <summary>	
            unsigned int top	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceRegion.Front">
            <summary>	
            unsigned int front	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceRegion.Right">
            <summary>	
            unsigned int right	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceRegion.Bottom">
            <summary>	
            unsigned int bottom	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ResourceRegion.Back">
            <summary>	
            unsigned int back	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.ResourceRegion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:C1.Util.DX.Direct3D11.ResourceRegion"/> struct.
            </summary>
            <param name="left">Left coordinates (inclusive)</param>
            <param name="top">Top coordinates (inclusive)</param>
            <param name="front">Front coordinates (inclusive)</param>
            <param name="right">Right coordinates (exclusive)</param>
            <param name="bottom">Bottom coordinates (exclusive)</param>
            <param name="back">Back coordinates (exclusive)</param>
            <remarks>
            <ul>
            <li>For a Width of 1 pixels, (right - left) = 1. If left = 0, right = Width. </li>
            <li>For a Height of 1 pixels, (bottom - top) = 1. If top = 0, bottom = Height.</li>
            <li>For a Depth of 1 pixels, (back - front) = 1. If front = 0, back = Depth. </li>
            </ul>
            </remarks>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.SamplerStateDescription">
            <summary>	
            D3D11_SAMPLER_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.Filter">
            <summary>	
            D3D11_FILTER Filter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.AddressU">
            <summary>	
            D3D11_TEXTURE_ADDRESS_MODE AddressU	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.AddressV">
            <summary>	
            D3D11_TEXTURE_ADDRESS_MODE AddressV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.AddressW">
            <summary>	
            D3D11_TEXTURE_ADDRESS_MODE AddressW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.MipLodBias">
            <summary>	
            float MipLODBias	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.MaximumAnisotropy">
            <summary>	
            unsigned int MaxAnisotropy	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.ComparisonFunction">
            <summary>	
            D3D11_COMPARISON_FUNC ComparisonFunc	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.BorderColor">
            <summary>	
            SHARPDX_COLOR4 BorderColor	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.MinimumLod">
            <summary>	
            float MinLOD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SamplerStateDescription.MaximumLod">
            <summary>	
            float MaxLOD	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.SamplerStateDescription.Default">
            <summary>
            Returns default values for <see cref="T:C1.Util.DX.Direct3D11.SamplerStateDescription"/>. 
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription">
            <summary>	
            D3D11_SHADER_RESOURCE_VIEW_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Dimension">
            <summary>	
            D3D_SRV_DIMENSION ViewDimension	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Buffer">
            <summary>	
            D3D11_BUFFER_SRV Buffer	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1D">
            <summary>	
            D3D11_TEX1D_SRV Texture1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DArray">
            <summary>	
            D3D11_TEX1D_ARRAY_SRV Texture1DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2D">
            <summary>	
            D3D11_TEX2D_SRV Texture2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DArray">
            <summary>	
            D3D11_TEX2D_ARRAY_SRV Texture2DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DMS">
            <summary>	
            D3D11_TEX2DMS_SRV Texture2DMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DMSArray">
            <summary>	
            D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture3D">
            <summary>	
            D3D11_TEX3D_SRV Texture3D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCube">
            <summary>	
            D3D11_TEXCUBE_SRV TextureCube	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeArray">
            <summary>	
            D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.BufferEx">
            <summary>	
            D3D11_BUFFEREX_SRV BufferEx	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.BufferResource">
            <summary>	
            D3D11_BUFFER_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.BufferResource.FirstElement">
            <summary>	
            unsigned int FirstElement	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.BufferResource.ElementOffset">
            <summary>	
            unsigned int ElementOffset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.BufferResource.ElementCount">
            <summary>	
            unsigned int NumElements	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.BufferResource.ElementWidth">
            <summary>	
            unsigned int ElementWidth	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource">
            <summary>	
            D3D11_TEXCUBE_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource.MostDetailedMip">
            <summary>	
            unsigned int MostDetailedMip	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DResource">
            <summary>	
            D3D11_TEX1D_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DResource.MostDetailedMip">
            <summary>	
            unsigned int MostDetailedMip	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DResource.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource">
            <summary>	
            D3D11_BUFFEREX_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource.FirstElement">
            <summary>	
            unsigned int FirstElement	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource.ElementCount">
            <summary>	
            unsigned int NumElements	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource.Flags">
            <summary>	
            D3D11_BUFFEREX_SRV_FLAG Flags	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource">
            <summary>	
            D3D11_TEX2DMS_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            unsigned int UnusedField_NothingToDefine	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource">
            <summary>	
            D3D11_TEXCUBE_ARRAY_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.MostDetailedMip">
            <summary>	
            unsigned int MostDetailedMip	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.First2DArrayFace">
            <summary>	
            unsigned int First2DArrayFace	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.CubeCount">
            <summary>	
            unsigned int NumCubes	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture3DResource">
            <summary>	
            D3D11_TEX3D_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture3DResource.MostDetailedMip">
            <summary>	
            unsigned int MostDetailedMip	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture3DResource.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DResource">
            <summary>	
            D3D11_TEX2D_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DResource.MostDetailedMip">
            <summary>	
            unsigned int MostDetailedMip	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DResource.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource">
            <summary>	
            D3D11_TEX1D_ARRAY_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.MostDetailedMip">
            <summary>	
            unsigned int MostDetailedMip	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource">
            <summary>	
            D3D11_TEX2D_ARRAY_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.MostDetailedMip">
            <summary>	
            unsigned int MostDetailedMip	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            D3D11_TEX2DMS_ARRAY_SRV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.StreamOutputElement">
            <summary>	
            D3D11_SO_DECLARATION_ENTRY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputElement.Stream">
            <summary>	
            unsigned int Stream	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputElement.SemanticName">
            <summary>	
            const char* SemanticName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputElement.SemanticIndex">
            <summary>	
            unsigned int SemanticIndex	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputElement.StartComponent">
            <summary>	
            unsigned char StartComponent	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputElement.ComponentCount">
            <summary>	
            unsigned char ComponentCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputElement.OutputSlot">
            <summary>	
            unsigned char OutputSlot	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputElement.#ctor(System.Int32,System.String,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.StreamOutputElement"/> struct.
            </summary>
            <param name="streamIndex">Zero-based, stream number</param>
            <param name="semanticName">Name of the semantic.</param>
            <param name="semanticIndex">Index of the semantic.</param>
            <param name="startComponent">The start component.</param>
            <param name="componentCount">The component count.</param>
            <param name="outputSlot">The output slot.</param>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.StreamOutputBufferBinding">
            <summary>
            Properties defining the way a buffer is bound to the pipeline as a target for stream output operations.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.StreamOutputBufferBinding.#ctor(C1.Util.DX.Direct3D11.Buffer,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.StreamOutputBufferBinding" /> struct.
            </summary>
            <param name = "buffer">The buffer being bound.</param>
            <param name = "offset">The offset to the first vertex (in bytes).</param>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.StreamOutputBufferBinding.Buffer">
            <summary>
              Gets or sets the buffer being bound.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.StreamOutputBufferBinding.Offset">
            <summary>
              Gets or sets the offset from the start of the buffer of the first vertex to use (in bytes).
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.StreamOutputStatistics">
            <summary>	
            D3D11_QUERY_DATA_SO_STATISTICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputStatistics.NumPrimitivesWritten">
            <summary>	
            unsigned longlong NumPrimitivesWritten	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.StreamOutputStatistics.PrimitivesStorageNeeded">
            <summary>	
            unsigned longlong PrimitivesStorageNeeded	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.SubResourceTiling">
            <summary>	
            D3D11_SUBRESOURCE_TILING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SubResourceTiling.WidthInTiles">
            <summary>	
            unsigned int WidthInTiles	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SubResourceTiling.HeightInTiles">
            <summary>	
            unsigned short HeightInTiles	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SubResourceTiling.DepthInTiles">
            <summary>	
            unsigned short DepthInTiles	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.SubResourceTiling.StartTileIndexInOverallResource">
            <summary>	
            unsigned int StartTileIndexInOverallResource	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Texture1DDescription">
            <summary>	
            D3D11_TEXTURE1D_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.Usage">
            <summary>	
            D3D11_USAGE Usage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.BindFlags">
            <summary>	
            D3D11_BIND_FLAG BindFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.CpuAccessFlags">
            <summary>	
            D3D11_CPU_ACCESS_FLAG CPUAccessFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture1DDescription.MiscFlags">
            <summary>	
            D3D11_RESOURCE_MISC_FLAG MiscFlags	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture1DDescription.#ctor(C1.Util.DX.DXGI.Format,System.Int32,System.Int32,System.Int32,C1.Util.DX.Direct3D11.BindFlags,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.CpuAccessFlags,C1.Util.DX.Direct3D11.ResourceMiscFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Texture1DDescription"/> struct.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Texture2DDescription">
            <summary>	
            D3D11_TEXTURE2D_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.SampleDesc">
            <summary>	
            DXGI_SAMPLE_DESC SampleDesc	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.Usage">
            <summary>	
            D3D11_USAGE Usage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.BindFlags">
            <summary>	
            D3D11_BIND_FLAG BindFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.CpuAccessFlags">
            <summary>	
            D3D11_CPU_ACCESS_FLAG CPUAccessFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture2DDescription.MiscFlags">
            <summary>	
            D3D11_RESOURCE_MISC_FLAG MiscFlags	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture2DDescription.#ctor(C1.Util.DX.DXGI.Format,System.Int32,System.Int32,System.Int32,System.Int32,C1.Util.DX.Direct3D11.BindFlags,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.CpuAccessFlags,System.Int32,System.Int32,C1.Util.DX.Direct3D11.ResourceMiscFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Texture2DDescription"/> struct.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.Texture3DDescription">
            <summary>	
            D3D11_TEXTURE3D_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.Depth">
            <summary>	
            unsigned int Depth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.Usage">
            <summary>	
            D3D11_USAGE Usage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.BindFlags">
            <summary>	
            D3D11_BIND_FLAG BindFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.CpuAccessFlags">
            <summary>	
            D3D11_CPU_ACCESS_FLAG CPUAccessFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.Texture3DDescription.MiscFlags">
            <summary>	
            D3D11_RESOURCE_MISC_FLAG MiscFlags	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Direct3D11.Texture3DDescription.#ctor(C1.Util.DX.DXGI.Format,System.Int32,System.Int32,System.Int32,System.Int32,C1.Util.DX.Direct3D11.BindFlags,C1.Util.DX.Direct3D11.ResourceUsage,C1.Util.DX.Direct3D11.CpuAccessFlags,C1.Util.DX.Direct3D11.ResourceMiscFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Direct3D11.Texture3DDescription"/> struct.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TiledResourceCoordinate">
            <summary>	
            D3D11_TILED_RESOURCE_COORDINATE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TiledResourceCoordinate.X">
            <summary>	
            unsigned int X	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TiledResourceCoordinate.Y">
            <summary>	
            unsigned int Y	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TiledResourceCoordinate.Z">
            <summary>	
            unsigned int Z	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TiledResourceCoordinate.Subresource">
            <summary>	
            unsigned int Subresource	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TileRegionSize">
            <summary>	
            D3D11_TILE_REGION_SIZE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRegionSize.TileCount">
            <summary>	
            unsigned int NumTiles	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRegionSize.BUseBox">
            <summary>	
            BOOL bUseBox	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRegionSize.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRegionSize.Height">
            <summary>	
            unsigned short Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileRegionSize.Depth">
            <summary>	
            unsigned short Depth	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.TileShape">
            <summary>	
            D3D11_TILE_SHAPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileShape.WidthInTexels">
            <summary>	
            unsigned int WidthInTexels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileShape.HeightInTexels">
            <summary>	
            unsigned int HeightInTexels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.TileShape.DepthInTexels">
            <summary>	
            unsigned int DepthInTexels	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription">
            <summary>	
            D3D11_UNORDERED_ACCESS_VIEW_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Dimension">
            <summary>	
            D3D11_UAV_DIMENSION ViewDimension	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Buffer">
            <summary>	
            D3D11_BUFFER_UAV Buffer	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1D">
            <summary>	
            D3D11_TEX1D_UAV Texture1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1DArray">
            <summary>	
            D3D11_TEX1D_ARRAY_UAV Texture1DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2D">
            <summary>	
            D3D11_TEX2D_UAV Texture2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2DArray">
            <summary>	
            D3D11_TEX2D_ARRAY_UAV Texture2DArray	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture3D">
            <summary>	
            D3D11_TEX3D_UAV Texture3D	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource">
            <summary>	
            D3D11_TEX1D_UAV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource">
            <summary>	
            D3D11_TEX1D_ARRAY_UAV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2DResource">
            <summary>	
            D3D11_TEX2D_UAV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.BufferResource">
            <summary>	
            D3D11_BUFFER_UAV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.BufferResource.FirstElement">
            <summary>	
            unsigned int FirstElement	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.BufferResource.ElementCount">
            <summary>	
            unsigned int NumElements	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.BufferResource.Flags">
            <summary>	
            D3D11_BUFFER_UAV_FLAG Flags	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource">
            <summary>	
            D3D11_TEX3D_UAV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource.FirstWSlice">
            <summary>	
            unsigned int FirstWSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource.WSize">
            <summary>	
            unsigned int WSize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource">
            <summary>	
            D3D11_TEX2D_ARRAY_UAV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            unsigned int MipSlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            unsigned int FirstArraySlice	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Direct3D11.VertexBufferBinding">
            <summary>
            Properties defining the way a buffer (containing vertex data) is bound to the pipeline for rendering.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Direct3D11.VertexBufferBinding.#ctor(C1.Util.DX.Direct3D11.Buffer,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Util.DX.Direct3D11.VertexBufferBinding" /> struct.
            </summary>
            <param name = "buffer">The buffer being bound.</param>
            <param name = "stride">The stride between vertex element (in bytes).</param>
            <param name = "offset">The offset to the first vertex (in bytes).</param>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.VertexBufferBinding.Buffer">
            <summary>
              Gets or sets the buffer being bound.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.VertexBufferBinding.Stride">
            <summary>
              Gets or sets the stride between vertex elements in the buffer (in bytes).
            </summary>
        </member>
        <member name="P:C1.Util.DX.Direct3D11.VertexBufferBinding.Offset">
            <summary>
              Gets or sets the offset from the start of the buffer of the first vertex to use (in bytes).
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.BitmapRenderTarget">
            <summary>	
            IDWriteBitmapRenderTarget	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.RenderingParams,System.Int32)">
            <summary>	
            Draws a run of glyphs to a bitmap target at the specified position.	
            </summary>	
            <param name="baselineOriginX">The horizontal position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="baselineOriginY">The vertical position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="measuringMode">The measuring method for glyphs in the run, used with the other properties to determine the rendering mode. </param>
            <param name="glyphRun">The structure containing the properties of the glyph run. </param>
            <param name="renderingParams">The object that controls rendering behavior. </param>
            <param name="textColor">The foreground color of the text. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.BitmapRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.BitmapRenderTarget">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.BitmapRenderTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.RenderingParams,System.Int32,C1.Util.DX.RectL@)">
            <summary>	
            HRESULT IDWriteBitmapRenderTarget::DrawGlyphRun([In] float baselineOriginX,[In] float baselineOriginY,[In] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] IDWriteRenderingParams* renderingParams,[In] COLORREF textColor,[Out, Optional] RECT* blackBoxRect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.GetMemoryDC">
            <summary>	
            HDC IDWriteBitmapRenderTarget::GetMemoryDC()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.GetPixelsPerDip">
            <summary>	
            float IDWriteBitmapRenderTarget::GetPixelsPerDip()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.SetPixelsPerDip(System.Single)">
            <summary>	
            HRESULT IDWriteBitmapRenderTarget::SetPixelsPerDip([In] float pixelsPerDip)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.GetCurrentTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            HRESULT IDWriteBitmapRenderTarget::GetCurrentTransform([Out] DWRITE_MATRIX* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.SetCurrentTransform(System.Nullable{C1.Util.DX.Matrix3x2})">
            <summary>	
            HRESULT IDWriteBitmapRenderTarget::SetCurrentTransform([In, Optional] const DWRITE_MATRIX* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.GetSize">
            <summary>	
            HRESULT IDWriteBitmapRenderTarget::GetSize([Out] SIZE* size)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget.Resize(System.Int32,System.Int32)">
            <summary>	
            HRESULT IDWriteBitmapRenderTarget::Resize([In] unsigned int width,[In] unsigned int height)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.BitmapRenderTarget.CurrentTransform">
            <summary>	
            GetCurrentTransform / SetCurrentTransform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.EllipsisTrimming">
            <summary>
            An inline object for trimming, using an ellipsis as the omission sign.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.InlineObjectNative">
            <summary>	
            IDWriteInlineObject	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.InlineObject">
            <summary>	
            IDWriteInlineObject	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObject.Draw(System.Object,C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
            The application implemented rendering callback (<see cref="M:C1.Util.DX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.InlineObject,System.Boolean,System.Boolean,System.IntPtr)"/>) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.  This parameter may be NULL. </param>
            <param name="renderer">The same renderer passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> as the object's containing parent.  This is useful if the inline object is recursive such as a nested layout. </param>
            <param name="originX">The x-coordinate at the upper-left corner of the inline object. </param>
            <param name="originY">The y-coordinate at the upper-left corner of the inline object. </param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line. </param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context and should be drawn flipped. </param>
            <param name="clientDrawingEffectPtr">The drawing effect set in TextLayout.SetDrawingEffect. Usually this effect is a foreground brush that  is used in glyph drawing. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObject.GetBreakConditions(C1.Util.DX.DirectWrite.BreakCondition@,C1.Util.DX.DirectWrite.BreakCondition@)">
            <summary>	
            Layout uses this to determine the line-breaking behavior of the inline object among the text. 	
            </summary>	
            <param name="breakConditionBefore">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately preceding it. </param>
            <param name="breakConditionAfter">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately following it. </param>
        </member>
        <member name="P:C1.Util.DX.DirectWrite.InlineObject.Metrics">
            <summary>	
            <see cref="T:C1.Util.DX.DirectWrite.TextLayout"/> calls this callback function to get the measurement of the inline object. 	
            </summary>	
            <returns>a structure describing the geometric measurement of anapplication-defined inline object.  These metrics are in relation to the baseline of the adjacent text. </returns>
        </member>
        <member name="P:C1.Util.DX.DirectWrite.InlineObject.OverhangMetrics">
            <summary>	
            TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object. In the case of a simple bitmap, with no padding and no overhang, all the overhangs will simply be zeroes.	
            </summary>	
            <returns>Overshoot of visible extents (in DIPs) outside the object. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.Draw(System.Object,C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
            The application implemented rendering callback (<see cref="M:C1.Util.DX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.InlineObject,System.Boolean,System.Boolean,System.IntPtr)"/>) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.  This parameter may be NULL. </param>
            <param name="renderer">The same renderer passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> as the object's containing parent.  This is useful if the inline object is recursive such as a nested layout. </param>
            <param name="originX">The x-coordinate at the upper-left corner of the inline object. </param>
            <param name="originY">The y-coordinate at the upper-left corner of the inline object. </param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line. </param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context and should be drawn flipped. </param>
            <param name="clientDrawingEffectPtr">The drawing effect set in TextLayout.SetDrawingEffect. Usually this effect is a foreground brush that  is used in glyph drawing. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.GetBreakConditions(C1.Util.DX.DirectWrite.BreakCondition@,C1.Util.DX.DirectWrite.BreakCondition@)">
            <summary>	
            Layout uses this to determine the line-breaking behavior of the inline object among the text. 	
            </summary>	
            <param name="breakConditionBefore">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately preceding it. </param>
            <param name="breakConditionAfter">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately following it. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.InlineObjectNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.InlineObjectNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.InlineObjectNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.Draw__(System.IntPtr,System.IntPtr,System.Single,System.Single,C1.Util.DX.Bool,C1.Util.DX.Bool,System.IntPtr)">
            <summary>	
            HRESULT IDWriteInlineObject::Draw([In, Optional] void* clientDrawingContext,[In] IDWriteTextRenderer* renderer,[In] float originX,[In] float originY,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In, Optional] void* clientDrawingEffect)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.GetMetrics_(C1.Util.DX.DirectWrite.InlineObjectMetrics@)">
            <summary>	
            HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.GetOverhangMetrics_(C1.Util.DX.DirectWrite.OverhangMetrics@)">
            <summary>	
            HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectNative.GetBreakConditions_(C1.Util.DX.DirectWrite.BreakCondition@,C1.Util.DX.DirectWrite.BreakCondition@)">
            <summary>	
            HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.InlineObjectNative.Metrics">
            <summary>	
            <see cref="T:C1.Util.DX.DirectWrite.TextLayout"/> calls this callback function to get the measurement of the inline object. 	
            </summary>	
            <returns>a structure describing the geometric measurement of anapplication-defined inline object.  These metrics are in relation to the baseline of the adjacent text. </returns>
        </member>
        <member name="P:C1.Util.DX.DirectWrite.InlineObjectNative.OverhangMetrics">
            <summary>	
            TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object. In the case of a simple bitmap, with no padding and no overhang, all the overhangs will simply be zeroes.	
            </summary>	
            <returns>Overshoot of visible extents (in DIPs) outside the object. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.EllipsisTrimming.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.EllipsisTrimming"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.EllipsisTrimming.Create(C1.Util.DX.DirectWrite.Factory,C1.Util.DX.DirectWrite.TextFormat)">
            <summary>	
            Creates an inline object for trimming, using an ellipsis as the omission sign. 	
            </summary>	
            <param name="factory">a <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="textFormat">A text format object used for text layout. </param>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Factory">
            <summary>	
            IDWriteFactory
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.Create(C1.Util.DX.DirectWrite.FactoryType)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Factory"/> class.
            </summary>
            <param name="factoryType">The factory type.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.RegisterFontCollectionLoader(C1.Util.DX.DirectWrite.FontCollectionLoader)">
            <summary>	
            Registers a custom font collection loader with the factory object. 	
            </summary>	
            <remarks>	
            This function registers a font collection loader with DirectWrite. The font collection loader interface, which should be implemented by a singleton object, handles enumerating font files in a font collection given a particular type of key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation. 	
            </remarks>	
            <param name="fontCollectionLoader">Reference to a <see cref="T:C1.Util.DX.DirectWrite.FontCollectionLoader"/> object to be registered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.UnregisterFontCollectionLoader(C1.Util.DX.DirectWrite.FontCollectionLoader)">
            <summary>	
            Unregisters a custom font collection loader that was previously registered using {{RegisterFontCollectionLoader}}. 	
            </summary>	
            <param name="fontCollectionLoader">Pointer to a <see cref="T:C1.Util.DX.DirectWrite.FontCollectionLoader"/> object to be unregistered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.RegisterFontFileLoader(C1.Util.DX.DirectWrite.FontFileLoader)">
            <summary>	
            Registers a font file loader with DirectWrite. 	
            </summary>	
            <remarks>	
            This function registers a font file loader with DirectWrite. The font file loader interface, which should be implemented   by a singleton object, handles loading font file resources of a particular type from a key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to a <see cref="T:C1.Util.DX.DirectWrite.FontFileLoader"/> object for a particular file resource type. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.UnregisterFontFileLoader(C1.Util.DX.DirectWrite.FontFileLoader)">
            <summary>	
            Unregisters a font file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. 	
            </summary>	
            <remarks>	
            This function unregisters font file loader callbacks with the DirectWrite font system. You should implement the font file loader interface by a singleton object. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors and must not unregister themselves in their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration of font file loaders with DirectWrite should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to the file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.Factory">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.Factory"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.GetSystemFontCollection(C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDWriteFactory::GetSystemFontCollection([Out] IDWriteFontCollection** fontCollection,[In] BOOL checkForUpdates)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateCustomFontCollection_(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteFactory::CreateCustomFontCollection([In] IDWriteFontCollectionLoader* collectionLoader,[In, Buffer] const void* collectionKey,[In] unsigned int collectionKeySize,[Out, Fast] IDWriteFontCollection** fontCollection)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.RegisterFontCollectionLoader_(System.IntPtr)">
            <summary>	
            HRESULT IDWriteFactory::RegisterFontCollectionLoader([In] IDWriteFontCollectionLoader* fontCollectionLoader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.UnregisterFontCollectionLoader_(System.IntPtr)">
            <summary>	
            HRESULT IDWriteFactory::UnregisterFontCollectionLoader([In] IDWriteFontCollectionLoader* fontCollectionLoader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateFontFileReference(System.String,System.Nullable{System.Int64})">
            <summary>	
            HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const FILETIME* lastWriteTime,[Out, Fast] IDWriteFontFile** fontFile)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateCustomFontFileReference_(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IDWriteFactory::CreateCustomFontFileReference([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[In] IDWriteFontFileLoader* fontFileLoader,[Out, Fast] IDWriteFontFile** fontFile)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateFontFace(C1.Util.DX.DirectWrite.FontFaceType,System.Int32,C1.Util.DX.DirectWrite.FontFile[],System.Int32,C1.Util.DX.DirectWrite.FontSimulations)">
            <summary>	
            HRESULT IDWriteFactory::CreateFontFace([In] DWRITE_FONT_FACE_TYPE fontFaceType,[In] unsigned int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[In] unsigned int faceIndex,[In] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out, Fast] IDWriteFontFace** fontFace)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateFontFace(C1.Util.DX.DirectWrite.FontFaceType,System.Int32,C1.Util.DX.ComArray{C1.Util.DX.DirectWrite.FontFile},System.Int32,C1.Util.DX.DirectWrite.FontSimulations)">
            <summary>	
            HRESULT IDWriteFactory::CreateFontFace([In] DWRITE_FONT_FACE_TYPE fontFaceType,[In] unsigned int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[In] unsigned int faceIndex,[In] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out, Fast] IDWriteFontFace** fontFace)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateRenderingParams">
            <summary>	
            HRESULT IDWriteFactory::CreateRenderingParams([Out, Fast] IDWriteRenderingParams** renderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateMonitorRenderingParams(System.IntPtr)">
            <summary>	
            HRESULT IDWriteFactory::CreateMonitorRenderingParams([In] HMONITOR monitor,[Out, Fast] IDWriteRenderingParams** renderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateCustomRenderingParams(System.Single,System.Single,System.Single,C1.Util.DX.DirectWrite.PixelGeometry,C1.Util.DX.DirectWrite.RenderingMode)">
            <summary>	
            HRESULT IDWriteFactory::CreateCustomRenderingParams([In] float gamma,[In] float enhancedContrast,[In] float clearTypeLevel,[In] DWRITE_PIXEL_GEOMETRY pixelGeometry,[In] DWRITE_RENDERING_MODE renderingMode,[Out, Fast] IDWriteRenderingParams** renderingParams)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.RegisterFontFileLoader_(System.IntPtr)">
            <summary>	
            HRESULT IDWriteFactory::RegisterFontFileLoader([In] IDWriteFontFileLoader* fontFileLoader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.UnregisterFontFileLoader_(System.IntPtr)">
            <summary>	
            HRESULT IDWriteFactory::UnregisterFontFileLoader([In] IDWriteFontFileLoader* fontFileLoader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateTextFormat(System.String,C1.Util.DX.DirectWrite.FontCollection,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.FontStretch,System.Single,System.String)">
            <summary>	
            HRESULT IDWriteFactory::CreateTextFormat([In] const wchar_t* fontFamilyName,[In, Optional] IDWriteFontCollection* fontCollection,[In] DWRITE_FONT_WEIGHT fontWeight,[In] DWRITE_FONT_STYLE fontStyle,[In] DWRITE_FONT_STRETCH fontStretch,[In] float fontSize,[In] const wchar_t* localeName,[Out, Fast] IDWriteTextFormat** textFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateTypography">
            <summary>	
            HRESULT IDWriteFactory::CreateTypography([Out, Fast] IDWriteTypography** typography)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.GetGdiInterop">
            <summary>	
            HRESULT IDWriteFactory::GetGdiInterop([Out] IDWriteGdiInterop** gdiInterop)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single)">
            <summary>	
            HRESULT IDWriteFactory::CreateTextLayout([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] float maxWidth,[In] float maxHeight,[Out, Fast] IDWriteTextLayout** textLayout)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateTextLayout1(System.String,System.Int32,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single)">
            <summary>	
            HRESULT IDWriteFactory::CreateTextLayout([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] float maxWidth,[In] float maxHeight,[Out, Fast] IDWriteTextLayout** textLayout)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateGdiCompatibleTextLayout(System.String,System.Int32,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] float layoutWidth,[In] float layoutHeight,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[Out, Fast] IDWriteTextLayout** textLayout)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateGdiCompatibleTextLayout1(System.String,System.Int32,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] float layoutWidth,[In] float layoutHeight,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[Out, Fast] IDWriteTextLayout** textLayout)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateEllipsisTrimmingSign(C1.Util.DX.DirectWrite.TextFormat)">
            <summary>	
            HRESULT IDWriteFactory::CreateEllipsisTrimmingSign([In] IDWriteTextFormat* textFormat,[Out, Fast] IDWriteInlineObject** trimmingSign)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateTextAnalyzer">
            <summary>	
            HRESULT IDWriteFactory::CreateTextAnalyzer([Out, Fast] IDWriteTextAnalyzer** textAnalyzer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateNumberSubstitution(C1.Util.DX.DirectWrite.NumberSubstitutionMethod,System.String,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDWriteFactory::CreateNumberSubstitution([In] DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,[In] const wchar_t* localeName,[In] BOOL ignoreUserOverride,[Out, Fast] IDWriteNumberSubstitution** numberSubstitution)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory.CreateGlyphRunAnalysis(C1.Util.DX.DirectWrite.GlyphRun,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.DirectWrite.RenderingMode,C1.Util.DX.DirectWrite.MeasuringMode,System.Single,System.Single)">
            <summary>	
            HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] DWRITE_RENDERING_MODE renderingMode,[In] DWRITE_MEASURING_MODE measuringMode,[In] float baselineOriginX,[In] float baselineOriginY,[Out, Fast] IDWriteGlyphRunAnalysis** glyphRunAnalysis)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Factory1">
            <summary>	
            IDWriteFactory1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory1.Create(C1.Util.DX.DirectWrite.FactoryType)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Factory1"/> class.
            </summary>
            <param name="factoryType">The factory type.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Factory1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory1.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.Factory1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.Factory1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory1.GetEudcFontCollection(System.Boolean)">
            <summary>	
            HRESULT IDWriteFactory1::GetEudcFontCollection([out] IDWriteFontCollection **fontCollection, BOOL checkForUpdates = FALSE)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory1.CreateCustomRenderingParams1(System.Single,System.Single,System.Single,System.Single,C1.Util.DX.DirectWrite.PixelGeometry,C1.Util.DX.DirectWrite.RenderingMode)">
            <summary>	
            HRESULT IDWriteFactory1::CreateCustomRenderingParams([In] float gamma,[In] float enhancedContrast,[In] float enhancedContrastGrayscale,[In] float clearTypeLevel,[In] DWRITE_PIXEL_GEOMETRY pixelGeometry,[In] DWRITE_RENDERING_MODE renderingMode,[Out] IDWriteRenderingParams1** renderingParams)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Factory2">
            <summary>	
            IDWriteFactory2
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.Create(C1.Util.DX.DirectWrite.FactoryType)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Factory2"/> class.
            </summary>
            <param name="factoryType">The factory type.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Factory2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.Factory2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.Factory2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.GetSystemFontFallback">
            <summary>
            HRESULT IDWriteFactory2::GetSystemFontFallback([out] IDWriteFontFallback** fontFallback)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.CreateFontFallbackBuilder">
            <summary>
            HRESULT IDWriteFactory2::CreateFontFallbackBuilder([out] IDWriteFontFallbackBuilder** fontFallbackBuilder)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.TranslateColorGlyphRun(System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,C1.Util.DX.DirectWrite.MeasuringMode,System.Nullable{C1.Util.DX.Matrix3x2},System.Int32)">
            <summary>
            HRESULT IDWriteFactory2::TranslateColorGlyphRun(FLOAT baselineOriginX, FLOAT baselineOriginY, [in] DWRITE_GLYPH_RUN* glyphRun, [in, optional] DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, [in, optional] DWRITE_MATRIX* worldToDeviceTransform, UINT32 colorPaletteIndex, [out] IDWriteColorGlyphRunEnumerator** colorLayers)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.CreateCustomRenderingParams2(System.Single,System.Single,System.Single,System.Single,C1.Util.DX.DirectWrite.PixelGeometry,C1.Util.DX.DirectWrite.RenderingMode,C1.Util.DX.DirectWrite.GridFitMode)">
            <summary>
            HRESULT IDWriteFactory2::CreateCustomRenderingParams(FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, [out] IDWriteRenderingParams2** renderingParams)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Factory2.CreateGlyphRunAnalysis(C1.Util.DX.DirectWrite.GlyphRun,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.DirectWrite.RenderingMode,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GridFitMode,C1.Util.DX.DirectWrite.TextAntialiasMode,System.Single,System.Single)">
            <summary>
            HRESULT IDWriteFactory2::CreateGlyphRunAnalysis([in] DWRITE_GLYPH_RUN* glyphRun, [in, optional] DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, [out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontCollection">
            <summary>	
            IDWriteFontCollection	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollection.Create(C1.Util.DX.DirectWrite.Factory,C1.Util.DX.DirectWrite.FontCollectionLoader,C1.Util.DX.DataPointer)">
            <summary>	
            Creates a font collection using a custom font collection loader. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="collectionLoader">An application-defined font collection loader, which must have been previously registered using <see cref="M:C1.Util.DX.DirectWrite.Factory.RegisterFontCollectionLoader_(System.IntPtr)"/>. </param>
            <param name="collectionKey">The key used by the loader to identify a collection of font files.  The buffer allocated for this key should at least be the size of collectionKeySize. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontCollection"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollection.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontCollection"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollection.GetFontFamilyCount">
            <summary>	
            unsigned int IDWriteFontCollection::GetFontFamilyCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollection.GetFontFamily(System.Int32)">
            <summary>	
            HRESULT IDWriteFontCollection::GetFontFamily([In] unsigned int index,[Out] IDWriteFontFamily** fontFamily)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollection.FindFamilyName(System.String,System.Int32@)">
            <summary>	
            HRESULT IDWriteFontCollection::FindFamilyName([In] const wchar_t* familyName,[Out] unsigned int* index,[Out] BOOL* exists)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollection.GetFontFromFontFace(C1.Util.DX.DirectWrite.FontFace)">
            <summary>	
            HRESULT IDWriteFontCollection::GetFontFromFontFace([In] IDWriteFontFace* fontFace,[Out] IDWriteFont** font)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontCollectionLoaderShadow">
            <summary>
            Internal FontCollectionLoader Callback
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFace">
            <summary>	
            IDWriteFontFace	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.Create(C1.Util.DX.DirectWrite.Factory,C1.Util.DX.DirectWrite.FontFaceType,C1.Util.DX.DirectWrite.FontFile[],System.Int32,C1.Util.DX.DirectWrite.FontSimulations)">
            <summary>	
            Creates an object that represents a font face. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="fontFaceType">A value that indicates the type of file format of the font face. </param>
            <param name="fontFiles">A font file object representing the font face. Because<see cref="T:C1.Win.DX.DirectWrite.FontFace"/> maintains its own references to the input font file objects, you may release them after this call. </param>
            <param name="faceIndex">The zero-based index of a font face, in cases when the font files contain a collection of font faces. If the font files contain a single face, this value should be zero. </param>
            <param name="fontFaceSimulationFlags">A value that indicates which, if any, font face simulation flags for algorithmic means of making text bold or italic are applied to the current font face. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.Create(C1.Util.DX.DirectWrite.Font)">
            <summary>	
            Creates a font face object for the font. 	
            </summary>	
            <param name="font">the <see cref="T:C1.Util.DX.DirectWrite.Font"/> to create the FontFace from.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetDesignGlyphMetrics(System.Int16[],System.Boolean)">
            <summary>	
            Obtains ideal (resolution-independent) glyph metrics in font design units.  	
            </summary>	
            <remarks>	
            Design glyph metrics are used for glyph positioning. 	
            </remarks>	
            <param name="glyphIndices">An array of glyph indices for which to compute  metrics. The array must contain at least as many elements as specified by glyphCount. </param>
            <param name="isSideways">Indicates whether the font is being used in a sideways run. This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation </param>
            <returns>an array of <see cref="T:C1.Util.DX.DirectWrite.GlyphMetrics"/> structures. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGdiCompatibleGlyphMetrics(System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},System.Boolean,System.Int16[],System.Boolean)">
            <summary>	
            Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.	
            </summary>	
            <param name="fontSize">The ogical size of the font in DIP units. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP. </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and pixelsPerDip. </param>
            <param name="useGdiNatural">When set to FALSE, the metrics are the same as the metrics of GDI aliased text.  When set to TRUE, the metrics are the same as the metrics of text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY. </param>
            <param name="glyphIndices">An array of glyph indices for which to compute the metrics. </param>
            <param name="isSideways">A BOOL value that indicates whether the font is being used in a sideways run.  This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation. </param>
            <returns>An array of <see cref="T:C1.Win.DX.DirectWrite.GlyphMetrics" /> structures filled by this function. The metrics are in font design units. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGlyphIndices(System.Int32[])">
            <summary>	
            Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table. 	
            </summary>	
            <remarks>	
            Note that this mapping is primarily provided for line layout engines built on top of the physical font API. Because of OpenType glyph substitution and line layout character substitution, the nominal conversion does not always correspond to how a Unicode string will map to glyph indices when rendering using a particular font face. Also, note that Unicode variant selectors provide for alternate mappings for character to glyph. This call will always return the default variant.  	
            </remarks>	
            <param name="codePoints">An array of USC4 code points from which to obtain nominal glyph indices. The array must be allocated and be able to contain the number of elements specified by codePointCount. </param>
            <returns>a reference to an array of nominal glyph indices filled by this function.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetFiles">
            <summary>	
            Obtains the font files representing a font face. 	
            </summary>	
            <remarks>	
            The IDWriteFontFace::GetFiles method should be called twice.  The first time you call GetFilesfontFiles should be NULL. When the method returns, numberOfFiles receives the number of font files that represent the font face. Then, call the method a second time, passing the numberOfFiles value that was output the first call, and a non-null buffer of the correct size to store the <see cref="T:C1.Util.DX.DirectWrite.FontFile"/> references. 	
            </remarks>	
            <returns>An array that stores references to font files representing the font face. This parameter can be NULL if the user wants only the number of files representing the font face. This API increments reference count of the font file references returned according to COM conventions, and the client should release them when finished. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.TryGetFontTable(System.Int32,C1.Util.DX.DataPointer@,System.IntPtr@)">
            <summary>	
            Finds the specified OpenType font table if it exists and returns a reference to it. The function accesses the underlying font data through the <see cref="T:C1.Win.DX.DirectWrite.FontFileStream" /> interface implemented by the font file loader. 	
            </summary>	
            <remarks>	
            The context for the same tag may be different for each call, so each one must be held and released separately.  	
            </remarks>	
            <param name="openTypeTableTag">The four-character tag of a OpenType font table to find. Use the DWRITE_MAKE_OPENTYPE_TAG macro to create it as an UINT32. Unlike GDI, it does not support the special TTCF and null tags to access the whole font. </param>
            <param name="tableData">When this method returns, contains the address of  a reference to the base of the table in memory. The reference is valid only as long as the font face used to get the font table still exists; (not any other font face, even if it actually refers to the same physical font).</param>
            <param name="tableContext">When this method returns, the address of a reference to  the opaque context, which must be freed by calling {{ReleaseFontTable}}. The context actually comes from the lower-level <see cref="T:C1.Win.DX.DirectWrite.FontFileStream" />, which may be implemented by the application or DWrite itself. It is possible for a NULL tableContext to be returned, especially if the implementation performs direct memory mapping on the whole file. Nevertheless, always release it later, and do not use it as a test for function success. The same table can be queried multiple times, but because each returned context can be different, you must release each context separately.  </param>
            <returns>TRUE if the font table exists; otherwise, FALSE. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGlyphRunOutline(System.Single,System.Int16[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[],System.Boolean,System.Boolean,C1.Util.DX.Direct2D.SimplifiedGeometrySink)">
            <summary>	
            Computes the outline of a run of glyphs by calling back to the outline sink interface. 	
            </summary>	
            <param name="emSize">The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch. </param>
            <param name="glyphIndices">An array of glyph indices. The glyphs are in logical order and the advance direction depends on the isRightToLeft parameter. The array must be allocated and be able to contain the number of elements specified by glyphCount. </param>
            <param name="glyphAdvances">An optional array of glyph advances in DIPs. The advance of a glyph is the amount to advance the position (in the direction of the baseline) after drawing the glyph. glyphAdvances contains the number of elements specified by glyphIndices.Length. </param>
            <param name="glyphOffsets">An optional array of glyph offsets, each of which specifies the offset along the baseline and offset perpendicular to the baseline of a glyph relative to the current pen position.   glyphOffsets contains the number of elements specified by glyphIndices.Length. </param>
            <param name="isSideways">If TRUE, the ascender of the glyph runs alongside the baseline. If FALSE, the glyph ascender runs perpendicular to the baseline. For example, an English alphabet on a vertical baseline would have isSideways set to FALSE. A client can render a vertical run by setting isSideways to TRUE and rotating the resulting geometry 90 degrees to the right using a transform. The isSideways and isRightToLeft parameters cannot both be true. </param>
            <param name="isRightToLeft">The visual order of the glyphs. If this parameter is FALSE, then glyph advances are from left to right. If TRUE, the advance direction is right to left. By default, the advance direction is left to right. </param>
            <param name="geometrySink">A reference to the interface that is called back to perform outline drawing operations. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFace"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFace">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFace"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetFaceType">
            <summary>	
            DWRITE_FONT_FACE_TYPE IDWriteFontFace::GetType()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetFiles(System.Int32@,C1.Util.DX.DirectWrite.FontFile[])">
            <summary>	
            HRESULT IDWriteFontFace::GetFiles([InOut] unsigned int* numberOfFiles,[Out, Buffer, Optional] IDWriteFontFile** fontFiles)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetIndex">
            <summary>	
            unsigned int IDWriteFontFace::GetIndex()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetSimulations">
            <summary>	
            DWRITE_FONT_SIMULATIONS IDWriteFontFace::GetSimulations()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.IsSymbolFont">
            <summary>	
            BOOL IDWriteFontFace::IsSymbolFont()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetMetrics(C1.Util.DX.DirectWrite.FontMetrics@)">
            <summary>	
            void IDWriteFontFace::GetMetrics([Out] DWRITE_FONT_METRICS* fontFaceMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGlyphCount">
            <summary>	
            unsigned short IDWriteFontFace::GetGlyphCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetDesignGlyphMetrics(System.Int16[],System.Int32,C1.Util.DX.DirectWrite.GlyphMetrics[],C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDWriteFontFace::GetDesignGlyphMetrics([In, Buffer] const unsigned short* glyphIndices,[In] unsigned int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[In] BOOL isSideways)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGlyphIndices(System.Int32[],System.Int32,System.Int16[])">
            <summary>	
            HRESULT IDWriteFontFace::GetGlyphIndices([In, Buffer] const unsigned int* codePoints,[In] unsigned int codePointCount,[Out, Buffer] unsigned short* glyphIndices)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.TryGetFontTable(System.Int32,System.IntPtr,System.Int32@,System.IntPtr@)">
            <summary>	
            HRESULT IDWriteFontFace::TryGetFontTable([In] unsigned int openTypeTableTag,[Out, Buffer] const void** tableData,[Out] unsigned int* tableSize,[Out] void** tableContext,[Out] BOOL* exists)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.ReleaseFontTable(System.IntPtr)">
            <summary>	
            void IDWriteFontFace::ReleaseFontTable([In] void* tableContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGlyphRunOutline_(System.Single,System.Int16[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[],System.Int32,C1.Util.DX.Bool,C1.Util.DX.Bool,System.IntPtr)">
            <summary>	
            HRESULT IDWriteFontFace::GetGlyphRunOutline([In] float emSize,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer, Optional] const float* glyphAdvances,[In, Buffer, Optional] const DWRITE_GLYPH_OFFSET* glyphOffsets,[In] unsigned int glyphCount,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] ID2D1SimplifiedGeometrySink* geometrySink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetRecommendedRenderingMode(System.Single,System.Single,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.RenderingParams)">
            <summary>	
            HRESULT IDWriteFontFace::GetRecommendedRenderingMode([In] float emSize,[In] float pixelsPerDip,[In] DWRITE_MEASURING_MODE measuringMode,[In] IDWriteRenderingParams* renderingParams,[Out] DWRITE_RENDERING_MODE* renderingMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGdiCompatibleMetrics(System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2})">
            <summary>	
            HRESULT IDWriteFontFace::GetGdiCompatibleMetrics([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[Out] DWRITE_FONT_METRICS* fontFaceMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace.GetGdiCompatibleGlyphMetrics(System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.Bool,System.Int16[],System.Int32,C1.Util.DX.DirectWrite.GlyphMetrics[],C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDWriteFontFace::GetGdiCompatibleGlyphMetrics([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[In, Buffer] const unsigned short* glyphIndices,[In] unsigned int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[In] BOOL isSideways)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.FontFace.Metrics">
            <summary>	
            GetMetrics	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFallback">
            <summary>	
            IDWriteFontFallback	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallback.MapCharacters(C1.Util.DX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.FontCollection,System.String,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.FontStretch,System.Int32@,System.Single@)">
            <summary>
            Determines an appropriate font to use to render the range of text.
            </summary>
            <param name="source">The text source implementation holds the text and locale.</param>
            <param name="textPosition">Starting position to analyze.</param>
            <param name="textLength">Length of the text to analyze.</param>
            <param name="baseFontCollection">Default font collection to use.</param>
            <param name="baseFamilyName">Family name of the base font. If you pass null, no matching will be done against the family.</param>
            <param name="baseWeight">Desired weight.</param>
            <param name="baseStyle">Desired style.</param>
            <param name="baseStretch">Desired stretch.</param>
            <param name="mappedLength">Length of text mapped to the mapped font. This will always be less or equal to the input text length and greater than zero (if the text length is non-zero) so that the caller advances at least one character each call.</param>
            <param name="scale">Scale factor to multiply the em size of the returned font by.</param>
            <returns>The font that should be used to render the first mappedLength characters of the text. If it returns NULL, then no known font can render the text, and mappedLength is the number of unsupported characters to skip.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallback.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFallback"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallback.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFallback">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFallback"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallback.MapCharacters(System.IntPtr,System.Int32,System.Int32,C1.Util.DX.DirectWrite.FontCollection,System.String,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.FontStretch,System.Int32@,System.Single@)">
            <summary>
            HRESULT IDWriteFontFallback::MapCharacters(IDWriteTextAnalysisSource* source, UINT32 textPosition, UINT32 textLength, [in, optional] IDWriteFontCollection* baseFontCollection, [in, optional] wchar_t* baseFamilyName, DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, DWRITE_FONT_STRETCH baseStretch, [out] UINT32* mappedLength, [out] IDWriteFont** mappedFont, [out] FLOAT* scale)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallback.MapCharacters(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.IntPtr,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.FontStretch,System.Int32@,System.Single@)">
            <summary>
            HRESULT IDWriteFontFallback::MapCharacters(IDWriteTextAnalysisSource* source, UINT32 textPosition, UINT32 textLength, [in, optional] IDWriteFontCollection* baseFontCollection, [in, optional] wchar_t* baseFamilyName, DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, DWRITE_FONT_STRETCH baseStretch, [out] UINT32* mappedLength, [out] IDWriteFont** mappedFont, [out] FLOAT* scale)
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFallbackBuilder">
            <summary>
            IDWriteFontFallbackBuilder
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallbackBuilder.AddMapping(C1.Util.DX.DirectWrite.UnicodeRange[],System.String[],C1.Util.DX.DirectWrite.FontCollection,System.String,System.String,System.Single)">
            <summary>
            Appends a single mapping to the list. Call this once for each additional mapping.
            </summary>
            <param name="ranges">Unicode ranges that apply to this mapping.</param>
            <param name="targetFamilyNames">List of target family name strings.</param>
            <param name="fontCollection">Optional explicit font collection for this mapping.</param>
            <param name="localeName">Locale of the context.</param>
            <param name="baseFamilyName">Base family name to match against, if applicable.</param>
            <param name="scale">Scale factor to multiply the result target font by.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallbackBuilder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFallbackBuilder"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallbackBuilder.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFallbackBuilder">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFallbackBuilder"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallbackBuilder.AddMapping(C1.Util.DX.DirectWrite.UnicodeRange[],System.IntPtr[],C1.Util.DX.DirectWrite.FontCollection,System.String,System.String,System.Single)">
            <summary>
            HRESULT AddMapping(DWRITE_UNICODE_RANGE* ranges, UINT32 rangesCount, [in] WCHAR** targetFamilyNames, UINT32 targetFamilyNamesCount, [in, optional] IDWriteFontCollection fontCollection, [in, optional] WCHAR* localeName, [in, optional] WCHAR* baseFamilyName, FLOAT scale)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallbackBuilder.AddMapping(C1.Util.DX.DirectWrite.UnicodeRange[],System.IntPtr[],System.IntPtr,System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            HRESULT AddMapping(DWRITE_UNICODE_RANGE* ranges, UINT32 rangesCount, [in] WCHAR** targetFamilyNames, UINT32 targetFamilyNamesCount, [in, optional] IDWriteFontCollection fontCollection, [in, optional] WCHAR* localeName, [in, optional] WCHAR* baseFamilyName, FLOAT scale)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallbackBuilder.AddMappings(C1.Util.DX.DirectWrite.FontFallback)">
            <summary>
            HRESULT AddMappings(IDWriteFontFallback* fontFallback)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFallbackBuilder.CreateFontFallback">
            <summary>
            HRESULT CreateFontFallback([out] IDWriteFontFallback** fontFallback)
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFile">
            <summary>	
            IDWriteFontFile	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.Create(C1.Util.DX.DirectWrite.Factory,System.String)">
            <summary>	
            Creates a font file reference object from a local font file. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="filePath">An array of characters that contains the absolute file path for the font file. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.Create(C1.Util.DX.DirectWrite.Factory,System.String,System.Nullable{System.Int64})">
            <summary>	
            Creates a font file reference object from a local font file. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="filePath">An array of characters that contains the absolute file path for the font file. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. </param>
            <param name="lastWriteTime">The last modified time of the input file path. If the parameter is omitted, the function will access the font file to obtain its last write time. You should specify this value to avoid extra disk access. Subsequent operations on the constructed object may fail if the user provided lastWriteTime doesn't match the file on the disk. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.Create(C1.Util.DX.DirectWrite.Factory,System.IntPtr,System.Int32,C1.Util.DX.DirectWrite.FontFileLoader)">
            <summary>
            Creates a reference to an application-specific font file resource.
            </summary>
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="fontFileReferenceKey">A font file reference key that uniquely identifies the font file resource during the lifetime of fontFileLoader.</param>
            <param name="fontFileReferenceKeySize">The size of the font file reference key in bytes.</param>
            <param name="fontFileLoader">The font file loader that will be used by the font system to load data from the file identified by fontFileReferenceKey.</param>
            <remarks>
            This function is provided for cases when an application or a document needs to use a private font without having to install it on the system. fontFileReferenceKey has to be unique only in the scope of the fontFileLoader used in this call.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.GetReferenceKey">
            <summary>	
            Obtains the reference to the reference key of a font file. The returned reference is valid until the font file object is released.  	
            </summary>	
            <returns>the reference to the reference key of a font file. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFile"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFile">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFile"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.GetReferenceKey(System.IntPtr)">
            <summary>	
            HRESULT IDWriteFontFile::GetReferenceKey([Out, Buffer] const void** fontFileReferenceKey,[Out] unsigned int* fontFileReferenceKeySize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.GetLoader">
            <summary>	
            HRESULT IDWriteFontFile::GetLoader([Out] IDWriteFontFileLoader** fontFileLoader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFile.Analyze(C1.Util.DX.Bool@,C1.Util.DX.DirectWrite.FontFileType@,C1.Util.DX.DirectWrite.FontFaceType@,System.Int32@)">
            <summary>	
            HRESULT IDWriteFontFile::Analyze([Out] BOOL* isSupportedFontType,[Out] DWRITE_FONT_FILE_TYPE* fontFileType,[Out, Optional] DWRITE_FONT_FACE_TYPE* fontFaceType,[Out] unsigned int* numberOfFaces)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.FontFile.Loader">
            <summary>	
            Obtains the file loader associated with a font file object. 	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileEnumeratorShadow">
            <summary>
            Internal FontFileEnumerator Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileEnumeratorShadow.ToIntPtr(C1.Util.DX.DirectWrite.FontFileEnumerator)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileEnumeratorShadow.FontFileEnumeratorVtbl.MoveNextDelegate">
            <summary>	
            Advances to the next font file in the collection. When it is first created, the enumerator is positioned before the first element of the collection and the first call to MoveNext advances to the first file. 	
            </summary>	
            <returns>the value TRUE if the enumerator advances to a file; otherwise, FALSE if the enumerator advances past the last file in the collection.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileEnumeratorShadow.FontFileEnumeratorVtbl.GetCurrentFontFileDelegate">
            <summary>	
            Gets a reference to the current font file. 	
            </summary>	
            <returns>a reference to the newly created <see cref="T:C1.Util.DX.DirectWrite.FontFile"/> object.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileLoaderNative">
            <summary>	
            IDWriteFontFileLoader	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileLoader">
            <summary>	
            IDWriteFontFileLoader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileLoader.CreateStreamFromKey(C1.Util.DX.DataPointer)">
            <summary>	
            Creates a font file stream object that encapsulates an open file resource. 	
            </summary>	
            <remarks>	
            The resource is closed when the last reference to fontFileStream is released.  	
            </remarks>	
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize. </param>
            <returns>a reference to the newly created <see cref="T:C1.Util.DX.DirectWrite.FontFileStream"/> object. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileLoaderNative.CreateStreamFromKey(C1.Util.DX.DataPointer)">
            <summary>	
            Creates a font file stream object that encapsulates an open file resource. 	
            </summary>	
            <remarks>	
            The resource is closed when the last reference to fontFileStream is released.  	
            </remarks>	
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize. </param>
            <returns>a reference to the newly created <see cref="T:C1.Util.DX.DirectWrite.FontFileStream"/> object. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileLoaderNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFileLoaderNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileLoaderNative.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFileLoaderNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFileLoaderNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileLoaderNative.CreateStreamFromKey_(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileLoaderShadow">
            <summary>
            Internal FontFileLoader Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileLoaderShadow.ToIntPtr(C1.Util.DX.DirectWrite.FontFileLoader)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileStreamNative">
            <summary>	
            IDWriteFontFileStream	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileStream">
            <summary>	
            IDWriteFontFileStream	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStream.ReadFileFragment(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            Reads a fragment from a font file. 	
            </summary>	
            <remarks>	
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:C1.Util.DX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section. 	
            </remarks>	
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized. </param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file. </param>
            <param name="fragmentSize">The size of the file fragment, in bytes. </param>
            <param name="fragmentContext">When this method returns, contains the address of  </param>
            <returns>a reference to a reference to the client-defined context to be passed to {{ReleaseFileFragment}}. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStream.ReleaseFileFragment(System.IntPtr)">
            <summary>	
            Releases a fragment from a file. 	
            </summary>	
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStream.GetFileSize">
            <summary>	
            Obtains the total size of a file. 	
            </summary>	
            <remarks>	
            Implementing GetFileSize() for asynchronously loaded font files may require downloading the complete file contents. Therefore, this method should be used only for operations that either require a complete font file to be loaded (for example, copying a font file) or that need to make decisions based on the value of the file size (for example, validation against a persisted file size).  	
            </remarks>	
            <returns>the total size of the file. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStream.GetLastWriteTime">
            <summary>	
            Obtains the last modified time of the file.  	
            </summary>	
            <remarks>	
            The "last modified time" is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one. 	
            </remarks>	
            <returns>the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.ReadFileFragment(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            Reads a fragment from a font file. 	
            </summary>	
            <remarks>	
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:C1.Util.DX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section. 	
            </remarks>	
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized. </param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file. </param>
            <param name="fragmentSize">The size of the file fragment, in bytes. </param>
            <param name="fragmentContext">When this method returns, contains the address of  </param>
            <returns>a reference to a reference to the client-defined context to be passed to {{ReleaseFileFragment}}. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.ReleaseFileFragment(System.IntPtr)">
            <summary>	
            Releases a fragment from a file. 	
            </summary>	
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFileStreamNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFileStreamNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFileStreamNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.ReadFileFragment_(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            HRESULT IDWriteFontFileStream::ReadFileFragment([Out] const void** fragmentStart,[In] unsigned longlong fileOffset,[In] unsigned longlong fragmentSize,[Out] void** fragmentContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.ReleaseFileFragment_(System.IntPtr)">
            <summary>	
            void IDWriteFontFileStream::ReleaseFileFragment([In] void* fragmentContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.GetFileSize">
            <summary>	
            HRESULT IDWriteFontFileStream::GetFileSize([Out] unsigned longlong* fileSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamNative.GetLastWriteTime">
            <summary>	
            HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] unsigned longlong* lastWriteTime)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileStreamShadow">
            <summary>
            Internal FontFileStream Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileStreamShadow.ToIntPtr(C1.Util.DX.DirectWrite.FontFileStream)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.LogFont">
            <summary>
            Defines the attributes of a GDI-compatible font.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfHeight">
            <summary>
            The height, in logical units, of the font's character cell or character.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfWidth">
            <summary>
            The average width, in logical units, of characters in the font.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfEscapement">
            <summary>
            The angle, in tenths of degrees, between the escapement vector and the x-axis of the device.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfOrientation">
            <summary>
            The angle, in tenths of degrees, between each character's base line and the x-axis of the device.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfWeight">
            <summary>
            The weight of the font in the range 0 through 1000.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfItalic">
            <summary>
            An italic font if set to TRUE.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfUnderline">
            <summary>
            An underlined font if set to TRUE.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfStrikeOut">
            <summary>
            A strikeout font if set to TRUE.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfCharSet">
            <summary>
            The character set.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfOutPrecision">
            <summary>
            The output precision.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfClipPrecision">
            <summary>
            The clipping precision.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfQuality">
            <summary>
            The output quality.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfPitchAndFamily">
            <summary>
            The pitch and family of the font.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LogFont.lfFaceName">
            <summary>
            A string that specifies the typeface name of the font.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GdiInterop">
            <summary>	
            IDWriteGdiInterop	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.FromLogFont(System.Object)">
            <summary>	
            Creates a font object that matches the properties specified by the LOGFONT structure. 	
            </summary>	
            <param name="logFont">A structure containing a GDI-compatible font description. </param>
            <returns>a reference to a newly created <see cref="T:C1.Util.DX.DirectWrite.Font"/>. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.ToLogFont(C1.Util.DX.DirectWrite.Font,System.Object)">
            <summary>	
            Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font. 	
            </summary>	
            <remarks>	
            The conversion to a  LOGFONT by using ConvertFontToLOGFONT operates at the logical font level and does not guarantee that it will map to a specific physical font. It is not guaranteed that GDI will select the same physical font for displaying  text formatted by a LOGFONT as the <see cref="T:C1.Util.DX.DirectWrite.Font"/> object that was converted. 	
            </remarks>	
            <param name="font">An <see cref="T:C1.Util.DX.DirectWrite.Font"/> object to be converted into a GDI-compatible LOGFONT structure. </param>
            <param name="logFont">When this method returns, contains a structure that receives a GDI-compatible font description. </param>
            <returns> TRUE if the specified font object is part of the system font collection; otherwise, FALSE. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.FromSystemDrawingFont(System.Drawing.Font)">
            <summary>	
            Creates a font object that matches the properties specified by the LOGFONT structure. 	
            </summary>	
            <param name="font">A <see cref="T:System.Drawing.Font"/> description. </param>
            <returns>a reference to a newly created <see cref="T:C1.Util.DX.DirectWrite.Font"/>. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.ToSystemDrawingFont(C1.Util.DX.DirectWrite.Font,System.Drawing.Font@)">
            <summary>
            Convert a Direct2D <see cref="T:C1.Util.DX.DirectWrite.Font"/> to a <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="d2dFont">a Direct2D Font</param>
            <param name="font">a <see cref="T:System.Drawing.Font"/></param>
            <returns>true if the specified font object is part of the system font collection; otherwise, false.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.GdiInterop"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.GdiInterop">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.GdiInterop"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.CreateFontFromLOGFONT(System.IntPtr)">
            <summary>	
            HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const void* logFont,[Out] IDWriteFont** font)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.ConvertFontToLOGFONT(C1.Util.DX.DirectWrite.Font,System.IntPtr,C1.Util.DX.Bool@)">
            <summary>	
            HRESULT IDWriteGdiInterop::ConvertFontToLOGFONT([In] IDWriteFont* font,[In] void* logFont,[Out] BOOL* isSystemFont)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.ConvertFontFaceToLOGFONT(C1.Util.DX.DirectWrite.FontFace,System.IntPtr)">
            <summary>	
            HRESULT IDWriteGdiInterop::ConvertFontFaceToLOGFONT([In] IDWriteFontFace* font,[In] void* logFont)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.CreateFontFaceFromHdc(System.IntPtr)">
            <summary>	
            HRESULT IDWriteGdiInterop::CreateFontFaceFromHdc([In] HDC hdc,[Out] IDWriteFontFace** fontFace)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GdiInterop.CreateBitmapRenderTarget(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            HRESULT IDWriteGdiInterop::CreateBitmapRenderTarget([In, Optional] HDC hdc,[In] unsigned int width,[In] unsigned int height,[Out] IDWriteBitmapRenderTarget** renderTarget)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GlyphRunAnalysis">
            <summary>	
            IDWriteGlyphRunAnalysis	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRunAnalysis.Create(C1.Util.DX.DirectWrite.Factory,C1.Util.DX.DirectWrite.GlyphRun,System.Single,C1.Util.DX.DirectWrite.RenderingMode,C1.Util.DX.DirectWrite.MeasuringMode,System.Single,System.Single)">
            <summary>
            Creates a glyph run analysis object, which encapsulates information used to render a glyph run.
            </summary>
            <param name="factory">The factory.</param>
            <param name="glyphRun">A structure that contains the properties of the glyph run (font face, advances, and so on).</param>
            <param name="pixelsPerDip">Number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI bitmap then pixelsPerDip is 1. If rendering onto a 120 DPI bitmap then pixelsPerDip is 1.25.</param>
            <param name="renderingMode">A value that specifies the rendering mode, which must be one of the raster rendering modes (that is, not default and not outline).</param>
            <param name="measuringMode">Specifies the measuring mode to use with glyphs.</param>
            <param name="baselineOriginX">The horizontal position (X-coordinate) of the baseline origin, in DIPs.</param>
            <param name="baselineOriginY">Vertical position (Y-coordinate) of the baseline origin, in DIPs.</param>
            <remarks>
            The glyph run analysis object contains the results of analyzing the glyph run, including the positions of all the glyphs and references to all of the rasterized glyphs in the font cache.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRunAnalysis.Create(C1.Util.DX.DirectWrite.Factory,C1.Util.DX.DirectWrite.GlyphRun,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.DirectWrite.RenderingMode,C1.Util.DX.DirectWrite.MeasuringMode,System.Single,System.Single)">
            <summary>
            Creates a glyph run analysis object, which encapsulates information used to render a glyph run.
            </summary>
            <param name="factory">The factory.</param>
            <param name="glyphRun">A structure that contains the properties of the glyph run (font face, advances, and so on).</param>
            <param name="pixelsPerDip">Number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI bitmap then pixelsPerDip is 1. If rendering onto a 120 DPI bitmap then pixelsPerDip is 1.25.</param>
            <param name="transform">Optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified the emSize and pixelsPerDip.</param>
            <param name="renderingMode">A value that specifies the rendering mode, which must be one of the raster rendering modes (that is, not default and not outline).</param>
            <param name="measuringMode">Specifies the measuring mode to use with glyphs.</param>
            <param name="baselineOriginX">The horizontal position (X-coordinate) of the baseline origin, in DIPs.</param>
            <param name="baselineOriginY">Vertical position (Y-coordinate) of the baseline origin, in DIPs.</param>
            <remarks>
            The glyph run analysis object contains the results of analyzing the glyph run, including the positions of all the glyphs and references to all of the rasterized glyphs in the font cache.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRunAnalysis.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.GlyphRunAnalysis"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRunAnalysis.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.GlyphRunAnalysis">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.GlyphRunAnalysis"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRunAnalysis.GetAlphaTextureBounds(C1.Util.DX.DirectWrite.TextureType)">
            <summary>	
            HRESULT IDWriteGlyphRunAnalysis::GetAlphaTextureBounds([In] DWRITE_TEXTURE_TYPE textureType,[Out] RECT* textureBounds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRunAnalysis.CreateAlphaTexture(C1.Util.DX.DirectWrite.TextureType,C1.Util.DX.RectL,System.Byte[],System.Int32)">
            <summary>	
            HRESULT IDWriteGlyphRunAnalysis::CreateAlphaTexture([In] DWRITE_TEXTURE_TYPE textureType,[In] const RECT* textureBounds,[Out, Buffer] unsigned char* alphaValues,[In] unsigned int bufferSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRunAnalysis.GetAlphaBlendParams(C1.Util.DX.DirectWrite.RenderingParams,System.Single@,System.Single@,System.Single@)">
            <summary>	
            HRESULT IDWriteGlyphRunAnalysis::GetAlphaBlendParams([In] IDWriteRenderingParams* renderingParams,[Out] float* blendGamma,[Out] float* blendEnhancedContrast,[Out] float* blendClearTypeLevel)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.InlineObjectShadow">
            <summary>
            Internal InlineObject Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.InlineObjectShadow.ToIntPtr(C1.Util.DX.DirectWrite.InlineObject)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.LocalFontFileLoader">
            <summary>	
            IDWriteLocalFontFileLoader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalFontFileLoader.GetFilePath(C1.Util.DX.DataPointer)">
            <summary>	
            Obtains the absolute font file path from the font file reference key.
            </summary>	
            <param name="referenceKey">The font file reference key that uniquely identifies the local font file within the scope of the font loader being used.</param>	
            <returns>If this method succeeds, the absolute font file path from the font file reference key.</returns>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalFontFileLoader.GetLastWriteTime(C1.Util.DX.DataPointer)">
            <summary>	
            Obtains the last write time of the file from the font file reference key.
            </summary>	
            <param name="referenceKey">The font file reference key that uniquely identifies the local font file within the scope of the font loader being used.</param>	
            <returns>The time of the last font file modification.</returns>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalFontFileLoader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.LocalFontFileLoader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalFontFileLoader.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.LocalFontFileLoader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.LocalFontFileLoader"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalFontFileLoader.GetFilePathLengthFromKey(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteLocalFontFileLoader::GetFilePathLengthFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] unsigned int* filePathLength)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalFontFileLoader.GetFilePathFromKey(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteLocalFontFileLoader::GetFilePathFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out, Buffer] wchar_t* filePath,[In] unsigned int filePathSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalFontFileLoader.GetLastWriteTimeFromKey(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteLocalFontFileLoader::GetLastWriteTimeFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] FILETIME* lastWriteTime)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.LocalizedStrings">
            <summary>	
            IDWriteLocalizedStrings	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.GetLocaleName(System.Int32)">
            <summary>	
            Get the locale name from the language.	
            </summary>	
            <param name="index">Zero-based index of the locale name to be retrieved. </param>
            <returns>The locale name from the language </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.GetString(System.Int32)">
            <summary>	
            Get the string from the language/string pair.
            </summary>	
            <param name="index">Zero-based index of the string from the language/string pair to be retrieved. </param>
            <returns>The locale name from the language </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.LocalizedStrings"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.LocalizedStrings">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.LocalizedStrings"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.GetCount">
            <summary>	
            unsigned int IDWriteLocalizedStrings::GetCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.FindLocaleName(System.String,System.Int32@)">
            <summary>	
            HRESULT IDWriteLocalizedStrings::FindLocaleName([In] const wchar_t* localeName,[Out] unsigned int* index,[Out] BOOL* exists)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.GetLocaleNameLength(System.Int32)">
            <summary>	
            HRESULT IDWriteLocalizedStrings::GetLocaleNameLength([In] unsigned int index,[Out] unsigned int* length)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.GetLocaleName(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteLocalizedStrings::GetLocaleName([In] unsigned int index,[Out, Buffer] wchar_t* localeName,[In] unsigned int size)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.GetStringLength(System.Int32)">
            <summary>	
            HRESULT IDWriteLocalizedStrings::GetStringLength([In] unsigned int index,[Out] unsigned int* length)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.LocalizedStrings.GetString(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteLocalizedStrings::GetString([In] unsigned int index,[Out, Buffer] wchar_t* stringBuffer,[In] unsigned int size)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.NumberSubstitution">
            <summary>	
            IDWriteNumberSubstitution	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.NumberSubstitution.Create(C1.Util.DX.DirectWrite.Factory,C1.Util.DX.DirectWrite.NumberSubstitutionMethod,System.String,System.Boolean)">
            <summary>	
            Creates a number substitution object using a locale name, substitution method, and an indicator  whether to ignore user overrides (use NLS defaults for the given culture instead). 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="substitutionMethod">A value that specifies how to apply number substitution on digits and related punctuation. </param>
            <param name="localeName">The name of the locale to be used in the numberSubstitution object. </param>
            <param name="ignoreUserOverride">A Boolean flag that indicates whether to ignore user overrides. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.NumberSubstitution.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.NumberSubstitution"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.NumberSubstitution.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.NumberSubstitution">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.NumberSubstitution"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PixelSnappingShadow">
            <summary>
            Internal TessellationSink Callback
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PixelSnappingShadow.PixelSnappingVtbl.IsPixelSnappingDisabledDelegate">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContextPtr">The context passed to IDWriteTextLayout::Draw.</param>
            <param name="isDisabled">Output disabled</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PixelSnappingShadow.PixelSnappingVtbl.GetCurrentTransformDelegate">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContextPtr">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="transform">Matrix transform</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PixelSnappingShadow.PixelSnappingVtbl.GetPixelsPerDipDelegate">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContextPtr">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="pixelPerDip">Dip</param>
            <returns>the number of physical pixels per DIP</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.RenderingParams">
            <summary>	
            IDWriteRenderingParams	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.Create(C1.Util.DX.DirectWrite.Factory)">
            <summary>	
            Creates a rendering parameters object with default settings for the primary monitor. Different monitors may have different rendering parameters, for more information see the {{How to Add Support for Multiple Monitors}} topic.	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.Create(C1.Util.DX.DirectWrite.Factory,System.IntPtr)">
            <summary>	
            Creates a rendering parameters object with default settings for the specified monitor. In most cases, this is the preferred way to create a rendering parameters object.	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="monitorHandle">A handle for the specified monitor. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.Create(C1.Util.DX.DirectWrite.Factory,System.Single,System.Single,System.Single,C1.Util.DX.DirectWrite.PixelGeometry,C1.Util.DX.DirectWrite.RenderingMode)">
            <summary>	
            Creates a rendering parameters object with the specified properties. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="gamma">The gamma level to be set for the new rendering parameters object. </param>
            <param name="enhancedContrast">The enhanced contrast level to be set for the new rendering parameters object. </param>
            <param name="clearTypeLevel">The ClearType level to be set for the new rendering parameters object. </param>
            <param name="pixelGeometry">Represents the internal structure of a device pixel (that is, the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text. </param>
            <param name="renderingMode">A value that represents the method (for example, ClearType natural quality) for rendering glyphs. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.RenderingParams"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.RenderingParams">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.RenderingParams"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.GetGamma">
            <summary>	
            float IDWriteRenderingParams::GetGamma()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.GetEnhancedContrast">
            <summary>	
            float IDWriteRenderingParams::GetEnhancedContrast()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.GetClearTypeLevel">
            <summary>	
            float IDWriteRenderingParams::GetClearTypeLevel()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.GetPixelGeometry">
            <summary>	
            DWRITE_PIXEL_GEOMETRY IDWriteRenderingParams::GetPixelGeometry()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams.GetRenderingMode">
            <summary>	
            DWRITE_RENDERING_MODE IDWriteRenderingParams::GetRenderingMode()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSinkShadow">
            <summary>
            Internal TextAnalysisSink Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSinkShadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSink1Shadow">
            <summary>
            Internal TextAnalysisSink1 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSink1Shadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisSink1)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSinkShadow">
            <summary>
            Internal TextAnalysisQuickSink Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSinkShadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisQuickSink)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSink1Shadow">
            <summary>
            Internal TextAnalysisQuickSink1 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSink1Shadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisQuickSink1)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSourceShadow">
            <summary>
            Internal TextAnalysisSource Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSourceShadow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSourceShadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisSource)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSource1Shadow">
            <summary>
            Internal TextAnalysisSource1 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSource1Shadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisSource1)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSourceShadow">
            <summary>
            Internal TextAnalysisQuickSource Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSourceShadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisQuickSource)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSource1Shadow">
            <summary>
            Internal TextAnalysisQuickSource1 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSource1Shadow.ToIntPtr(C1.Util.DX.DirectWrite.TextAnalysisQuickSource1)">
            <summary>
            Return a pointer to the unmanaged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalyzer">
            <summary>	
            IDWriteTextAnalyzer	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.Create(C1.Util.DX.DirectWrite.Factory)">
            <summary>
            Returns an interface for performing text analysis.
            </summary>
            <param name="factory">A reference to a DirectWrite factory <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeScript(C1.Util.DX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink  callback {{SetScript}}.
            </summary>
            <param name="analysisSource">A reference to the source object to analyze.</param>
            <param name="textPosition">The starting text position within the source object.</param>
            <param name="textLength">The text length to analyze.</param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeScript(C1.Util.DX.DirectWrite.TextAnalysisQuickSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink  callback {{SetScript}}.
            </summary>
            <param name="analysisSource">A reference to the source object to analyze.</param>
            <param name="textPosition">The starting text position within the source object.</param>
            <param name="textLength">The text length to analyze.</param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeBidi(C1.Util.DX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback {{SetBidiLevel}}.
            </summary>
            <param name="analysisSource">A reference to a source object to analyze.</param>
            <param name="textPosition">The starting text position within the source object.</param>
            <param name="textLength">The text length to analyze.</param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis.</param>
            <remarks>
            While the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs. Otherwise, the returned levels may be wrong, because the Bidi algorithm is meant to apply to the paragraph as a whole.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeBidi(C1.Util.DX.DirectWrite.TextAnalysisQuickSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback {{SetBidiLevel}}.
            </summary>
            <param name="analysisSource">A reference to a source object to analyze.</param>
            <param name="textPosition">The starting text position within the source object.</param>
            <param name="textLength">The text length to analyze.</param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis.</param>
            <remarks>
            While the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs. Otherwise, the returned levels may be wrong, because the Bidi algorithm is meant to apply to the paragraph as a whole.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeNumberSubstitution(C1.Util.DX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback {{SetNumberSubstitution}}.
            </summary>
            <param name="analysisSource">The source object to analyze.</param>
            <param name="textPosition">The starting position within the source object.</param>
            <param name="textLength">The length to analyze.</param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis.</param>
            <remarks>
            Although the function can handle multiple ranges of differing number substitutions, the text ranges should not arbitrarily split the middle of numbers. Otherwise, it will treat the numbers separately and will not translate any intervening punctuation.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeNumberSubstitution(C1.Util.DX.DirectWrite.TextAnalysisQuickSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback {{SetNumberSubstitution}}.
            </summary>
            <param name="analysisSource">The source object to analyze.</param>
            <param name="textPosition">The starting position within the source object.</param>
            <param name="textLength">The length to analyze.</param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis.</param>
            <remarks>
            Although the function can handle multiple ranges of differing number substitutions, the text ranges should not arbitrarily split the middle of numbers. Otherwise, it will treat the numbers separately and will not translate any intervening punctuation.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeLineBreakpoints(C1.Util.DX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback {{SetLineBreakpoints}}.
            </summary>
            <param name="analysisSource">A reference to the source object to analyze.</param>
            <param name="textPosition">The starting text position within the source object.</param>
            <param name="textLength">The text length to analyze.</param>
            <param name="analysisSink">A reference to the  sink callback object that receives the text analysis.</param>
            <remarks>
            Although the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs, unless the specified text span is considered a whole unit. Otherwise, the returned properties for the first and last characters will inappropriately allow breaks.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeLineBreakpoints(C1.Util.DX.DirectWrite.TextAnalysisQuickSource,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink)">
            <summary>
            Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback {{SetLineBreakpoints}}.
            </summary>
            <param name="analysisSource">A reference to the source object to analyze.</param>
            <param name="textPosition">The starting text position within the source object.</param>
            <param name="textLength">The text length to analyze.</param>
            <param name="analysisSink">A reference to the  sink callback object that receives the text analysis.</param>
            <remarks>
            Although the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs, unless the specified text span is considered a whole unit. Otherwise, the returned properties for the first and last characters will inappropriately allow breaks.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGlyphs(System.String,System.Int32,C1.Util.DX.DirectWrite.FontFace,System.Boolean,System.Boolean,C1.Util.DX.DirectWrite.ScriptAnalysis,System.String,C1.Util.DX.DirectWrite.NumberSubstitution,C1.Util.DX.DirectWrite.FontFeature[][],System.Int32[],System.Int32,System.Int16[],C1.Util.DX.DirectWrite.ShapingTextProperties[],System.Int16[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[])">
            <summary>
            Gets the glyphs (TODO doc)
            </summary>
            <param name="textString">The text string.</param>
            <param name="textLength">Length of the text.</param>
            <param name="fontFace">The font face.</param>
            <param name="isSideways">if set to <c>true</c> [is sideways].</param>
            <param name="isRightToLeft">if set to <c>true</c> [is right to left].</param>
            <param name="scriptAnalysis">The script analysis.</param>
            <param name="localeName">Name of the locale.</param>
            <param name="numberSubstitution">The number substitution.</param>
            <param name="features">The features.</param>
            <param name="featureRangeLengths">The feature range lengths.</param>
            <param name="maxGlyphCount">The max glyph count.</param>
            <param name="clusterMap">The cluster map.</param>
            <param name="textProps">The text props.</param>
            <param name="glyphIndices">The glyph indices.</param>
            <param name="glyphProps">The glyph props.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGlyphPlacements(System.String,System.Int16[],C1.Util.DX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[],System.Int32,C1.Util.DX.DirectWrite.FontFace,System.Single,System.Boolean,System.Boolean,C1.Util.DX.DirectWrite.ScriptAnalysis,System.String,C1.Util.DX.DirectWrite.FontFeature[][],System.Int32[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[])">
            <summary>
            Gets the glyph placements.
            </summary>
            <param name="textString">The text string.</param>
            <param name="clusterMap">The cluster map.</param>
            <param name="textProps">The text props.</param>
            <param name="textLength">Length of the text.</param>
            <param name="glyphIndices">The glyph indices.</param>
            <param name="glyphProps">The glyph props.</param>
            <param name="glyphCount">The glyph count.</param>
            <param name="fontFace">The font face.</param>
            <param name="fontEmSize">Size of the font in ems.</param>
            <param name="isSideways">if set to <c>true</c> [is sideways].</param>
            <param name="isRightToLeft">if set to <c>true</c> [is right to left].</param>
            <param name="scriptAnalysis">The script analysis.</param>
            <param name="localeName">Name of the locale.</param>
            <param name="features">The features.</param>
            <param name="featureRangeLengths">The feature range lengths.</param>
            <param name="glyphAdvances">The glyph advances.</param>
            <param name="glyphOffsets">The glyph offsets.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGdiCompatibleGlyphPlacements(System.String,System.Int16[],C1.Util.DX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[],System.Int32,C1.Util.DX.DirectWrite.FontFace,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},System.Boolean,System.Boolean,System.Boolean,C1.Util.DX.DirectWrite.ScriptAnalysis,System.String,C1.Util.DX.DirectWrite.FontFeature[][],System.Int32[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[])">
            <summary>
            Gets the GDI compatible glyph placements.
            </summary>
            <param name="textString">The text string.</param>
            <param name="clusterMap">The cluster map.</param>
            <param name="textProps">The text props.</param>
            <param name="textLength">Length of the text.</param>
            <param name="glyphIndices">The glyph indices.</param>
            <param name="glyphProps">The glyph props.</param>
            <param name="glyphCount">The glyph count.</param>
            <param name="fontFace">The font face.</param>
            <param name="fontEmSize">Size of the font in ems.</param>
            <param name="pixelsPerDip">The pixels per dip.</param>
            <param name="transform">The transform.</param>
            <param name="useGdiNatural">if set to <c>true</c> [use GDI natural].</param>
            <param name="isSideways">if set to <c>true</c> [is sideways].</param>
            <param name="isRightToLeft">if set to <c>true</c> [is right to left].</param>
            <param name="scriptAnalysis">The script analysis.</param>
            <param name="localeName">Name of the locale.</param>
            <param name="features">The features.</param>
            <param name="featureRangeLengths">The feature range lengths.</param>
            <param name="glyphAdvances">The glyph advances.</param>
            <param name="glyphOffsets">The glyph offsets.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AllocateFeatures(C1.Util.DX.DirectWrite.FontFeature[][])">
            <summary>
            Allocates the features from the jagged array..
            </summary>
            <param name="features">The features.</param>
            <returns>A pointer to the allocated native features or 0 if features is null or empty.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.TextAnalyzer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.TextAnalyzer">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.TextAnalyzer"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeScript(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer::AnalyzeScript([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeBidi(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer::AnalyzeBidi([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeNumberSubstitution(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer::AnalyzeNumberSubstitution([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.AnalyzeLineBreakpoints(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer::AnalyzeLineBreakpoints([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGlyphs(System.String,System.Int32,C1.Util.DX.DirectWrite.FontFace,C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.DirectWrite.ScriptAnalysis,System.String,C1.Util.DX.DirectWrite.NumberSubstitution,System.IntPtr,System.Int32[],System.Int32,System.Int32,System.Int16[],C1.Util.DX.DirectWrite.ShapingTextProperties[],System.Int16[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[])">
            <summary>	
            HRESULT IDWriteTextAnalyzer::GetGlyphs([In, Buffer] const wchar_t* textString,[In] unsigned int textLength,[In] IDWriteFontFace* fontFace,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] IDWriteNumberSubstitution* numberSubstitution,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[In] unsigned int maxGlyphCount,[Out, Buffer] unsigned short* clusterMap,[Out, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[Out, Buffer] unsigned short* glyphIndices,[Out, Buffer] DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[Out] unsigned int* actualGlyphCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGlyphs(System.IntPtr,System.Int32,System.IntPtr,System.Boolean,System.Boolean,C1.Util.DX.DirectWrite.ScriptAnalysis,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>	
            HRESULT IDWriteTextAnalyzer::GetGlyphs([In, Buffer] const wchar_t* textString,[In] unsigned int textLength,[In] IDWriteFontFace* fontFace,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] IDWriteNumberSubstitution* numberSubstitution,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[In] unsigned int maxGlyphCount,[Out, Buffer] unsigned short* clusterMap,[Out, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[Out, Buffer] unsigned short* glyphIndices,[Out, Buffer] DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[Out] unsigned int* actualGlyphCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGlyphPlacements(System.String,System.Int16[],C1.Util.DX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[],System.Int32,C1.Util.DX.DirectWrite.FontFace,System.Single,C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.DirectWrite.ScriptAnalysis,System.String,System.IntPtr,System.Int32[],System.Int32,System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[])">
            <summary>
            HRESULT IDWriteTextAnalyzer::GetGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[In] unsigned int textLength,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[In] unsigned int glyphCount,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)	
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGlyphPlacements(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Single,C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.DirectWrite.ScriptAnalysis,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            HRESULT IDWriteTextAnalyzer::GetGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[In] unsigned int textLength,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[In] unsigned int glyphCount,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)	
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGdiCompatibleGlyphPlacements(System.String,System.Int16[],C1.Util.DX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[],System.Int32,C1.Util.DX.DirectWrite.FontFace,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.DirectWrite.ScriptAnalysis,System.String,System.IntPtr,System.Int32[],System.Int32,System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[])">
            <summary>	
            HRESULT IDWriteTextAnalyzer::GetGdiCompatibleGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[In] unsigned int textLength,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[In] unsigned int glyphCount,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer.GetGdiCompatibleGlyphPlacements(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.DirectWrite.ScriptAnalysis,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer::GetGdiCompatibleGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[In] unsigned int textLength,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[In] unsigned int glyphCount,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalyzer1">
            <summary>	
            IDWriteTextAnalyzer1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.AnalyzeVerticalGlyphOrientation(C1.Util.DX.DirectWrite.TextAnalysisSource1,System.Int32,System.Int32,C1.Util.DX.DirectWrite.TextAnalysisSink1)">
            <summary>	
            Analyzes a text range for script orientation, reading text and attributes from the source and reporting results to the sink.
            </summary>	
            <param name="analysisSource">Source object to analyze.</param>	
            <param name="textPosition">Starting position within the source object.</param>	
            <param name="textLength">Length to analyze.</param>	
            <param name="analysisSink">Length to analyze.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.TextAnalyzer1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.TextAnalyzer1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.TextAnalyzer1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.ApplyCharacterSpacing(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int16[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[])">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::ApplyCharacterSpacing([In] float leadingSpacing,[In] float trailingSpacing,[In] float minimumAdvanceWidth,[In] unsigned int textLength,[In] unsigned int glyphCount,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] const float* glyphAdvances,[In, Buffer] const DWRITE_GLYPH_OFFSET* glyphOffsets,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties,[Out, Buffer] float* modifiedGlyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetBaseline(C1.Util.DX.DirectWrite.FontFace,C1.Util.DX.DirectWrite.Baseline,C1.Util.DX.Bool,C1.Util.DX.Bool,C1.Util.DX.DirectWrite.ScriptAnalysis,System.String,System.Int32@,C1.Util.DX.Bool@)">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::GetBaseline([In] IDWriteFontFace* fontFace,[In] DWRITE_BASELINE baseline,[In] BOOL isVertical,[In] BOOL isSimulationAllowed,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In, Optional] const wchar_t* localeName,[Out] int* baselineCoordinate,[Out] BOOL* exists)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.AnalyzeVerticalGlyphOrientation(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::AnalyzeVerticalGlyphOrientation([In] IDWriteTextAnalysisSource1* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink1* analysisSink)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetGlyphOrientationTransform(C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.Bool,C1.Util.DX.Matrix3x2@)">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::GetGlyphOrientationTransform([In] DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle,[In] BOOL isSideways,[Out] DWRITE_MATRIX* transform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetScriptProperties(C1.Util.DX.DirectWrite.ScriptAnalysis,C1.Util.DX.DirectWrite.ScriptProperties@)">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::GetScriptProperties([In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[Out] DWRITE_SCRIPT_PROPERTIES* scriptProperties)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetTextComplexity(System.String,System.Int32,C1.Util.DX.DirectWrite.FontFace,C1.Util.DX.Bool@,System.Int32,System.Int16[])">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::GetTextComplexity([In, Buffer] const wchar_t* textString,[In] unsigned int textLength,[In] IDWriteFontFace* fontFace,[Out] BOOL* isTextSimple,[In] unsigned int* textLengthRead,[Out, Buffer, Optional] unsigned short* glyphIndices)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetJustificationOpportunities(C1.Util.DX.DirectWrite.FontFace,System.Single,C1.Util.DX.DirectWrite.ScriptAnalysis,System.Int32,System.Int32,System.String,System.Int16[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[],C1.Util.DX.DirectWrite.JustificationOpportunity[])">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::GetJustificationOpportunities([In, Optional] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In] unsigned int textLength,[In] unsigned int glyphCount,[In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties,[Out, Buffer] DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetJustificationOpportunities(System.IntPtr,System.Single,C1.Util.DX.DirectWrite.ScriptAnalysis,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::GetJustificationOpportunities([In, Optional] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In] unsigned int textLength,[In] unsigned int glyphCount,[In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties,[Out, Buffer] DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.JustifyGlyphAdvances(System.Single,System.Int32,C1.Util.DX.DirectWrite.JustificationOpportunity[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[])">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::JustifyGlyphAdvances([In] float lineWidth,[In] unsigned int glyphCount,[In, Buffer] const DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities,[In, Buffer] const float* glyphAdvances,[In, Buffer] const DWRITE_GLYPH_OFFSET* glyphOffsets,[Out, Buffer] float* justifiedGlyphAdvances,[Out, Buffer, Optional] DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.JustifyGlyphAdvances(System.Single,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::JustifyGlyphAdvances([In] float lineWidth,[In] unsigned int glyphCount,[In, Buffer] const DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities,[In, Buffer] const float* glyphAdvances,[In, Buffer] const DWRITE_GLYPH_OFFSET* glyphOffsets,[Out, Buffer] float* justifiedGlyphAdvances,[Out, Buffer, Optional] DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetJustifiedGlyphs(C1.Util.DX.DirectWrite.FontFace,System.Single,C1.Util.DX.DirectWrite.ScriptAnalysis,System.Int32,System.Int32,System.Int32,System.Int16[],System.Int16[],System.Single[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[],C1.Util.DX.DirectWrite.ShapingGlyphProperties[],System.Int32,System.Int16[],System.Int16[],System.Single[],C1.Util.DX.DirectWrite.GlyphOffset[])">
            <summary>	
            HRESULT IDWriteTextAnalyzer1::GetJustifiedGlyphs([In, Optional] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In] unsigned int textLength,[In] unsigned int glyphCount,[In] unsigned int maxGlyphCount,[In, Buffer, Optional] const unsigned short* clusterMap,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const float* glyphAdvances,[In, Buffer] const float* justifiedGlyphAdvances,[In, Buffer] const DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties,[In] unsigned int* actualGlyphCount,[Out, Buffer, Optional] unsigned short* modifiedClusterMap,[Out, Buffer] unsigned short* modifiedGlyphIndices,[Out, Buffer] float* modifiedGlyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextFormat">
            <summary>	
            IDWriteTextFormat	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.Create(C1.Util.DX.DirectWrite.Factory,System.String,System.Single)">
            <summary>	
             Creates a text format object used for text layout with normal weight, style and stretch.
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,System.Single)">
            <summary>	
             Creates a text format object used for text layout with normal stretch.
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.FontStretch,System.Single)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.FontCollection,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.FontStretch,System.Single)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.FontCollection,C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.FontStretch,System.Single,System.String)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <param name="localeName">An array of characters that contains the locale name.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetTrimming(C1.Util.DX.DirectWrite.Trimming,C1.Util.DX.DirectWrite.InlineObject)">
            <summary>	
            <p> Sets trimming options for text overflowing the layout width. </p>	
            </summary>	
            <param name="trimmingOptions"><dd> <p>Text trimming options.</p> </dd></param>	
            <param name="trimmingSign"><dd> <p>Application-defined omission sign. This parameter may be <strong><c>null</c></strong>. See <strong><see cref="T:C1.Util.DX.DirectWrite.InlineObject"/></strong> for more information.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:C1.Util.DX.HResult.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:C1.Util.DX.HResult"/></strong> error code.</p></returns>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.TextFormat"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.TextFormat">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.TextFormat"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetTextAlignment(C1.Util.DX.DirectWrite.TextAlignment)">
            <summary>	
            HRESULT IDWriteTextFormat::SetTextAlignment([In] DWRITE_TEXT_ALIGNMENT textAlignment)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetParagraphAlignment(C1.Util.DX.DirectWrite.ParagraphAlignment)">
            <summary>	
            HRESULT IDWriteTextFormat::SetParagraphAlignment([In] DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetWordWrapping(C1.Util.DX.DirectWrite.WordWrapping)">
            <summary>	
            HRESULT IDWriteTextFormat::SetWordWrapping([In] DWRITE_WORD_WRAPPING wordWrapping)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetReadingDirection(C1.Util.DX.DirectWrite.ReadingDirection)">
            <summary>	
            HRESULT IDWriteTextFormat::SetReadingDirection([In] DWRITE_READING_DIRECTION readingDirection)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetFlowDirection(C1.Util.DX.DirectWrite.FlowDirection)">
            <summary>	
            HRESULT IDWriteTextFormat::SetFlowDirection([In] DWRITE_FLOW_DIRECTION flowDirection)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetIncrementalTabStop(System.Single)">
            <summary>	
            HRESULT IDWriteTextFormat::SetIncrementalTabStop([In] float incrementalTabStop)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetTrimming_(C1.Util.DX.DirectWrite.Trimming,System.IntPtr)">
            <summary>	
            HRESULT IDWriteTextFormat::SetTrimming([In] const DWRITE_TRIMMING* trimmingOptions,[In, Optional] IDWriteInlineObject* trimmingSign)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.SetLineSpacing(C1.Util.DX.DirectWrite.LineSpacingMethod,System.Single,System.Single)">
            <summary>	
            HRESULT IDWriteTextFormat::SetLineSpacing([In] DWRITE_LINE_SPACING_METHOD lineSpacingMethod,[In] float lineSpacing,[In] float baseline)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetTextAlignment">
            <summary>	
            DWRITE_TEXT_ALIGNMENT IDWriteTextFormat::GetTextAlignment()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetParagraphAlignment">
            <summary>	
            DWRITE_PARAGRAPH_ALIGNMENT IDWriteTextFormat::GetParagraphAlignment()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetWordWrapping">
            <summary>	
            DWRITE_WORD_WRAPPING IDWriteTextFormat::GetWordWrapping()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetReadingDirection">
            <summary>	
            DWRITE_READING_DIRECTION IDWriteTextFormat::GetReadingDirection()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFlowDirection">
            <summary>	
            DWRITE_FLOW_DIRECTION IDWriteTextFormat::GetFlowDirection()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetIncrementalTabStop">
            <summary>	
            float IDWriteTextFormat::GetIncrementalTabStop()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetTrimming(C1.Util.DX.DirectWrite.Trimming@,C1.Util.DX.DirectWrite.InlineObject@)">
            <summary>	
            HRESULT IDWriteTextFormat::GetTrimming([Out] DWRITE_TRIMMING* trimmingOptions,[Out] IDWriteInlineObject** trimmingSign)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetLineSpacing(C1.Util.DX.DirectWrite.LineSpacingMethod@,System.Single@,System.Single@)">
            <summary>	
            HRESULT IDWriteTextFormat::GetLineSpacing([Out] DWRITE_LINE_SPACING_METHOD* lineSpacingMethod,[Out] float* lineSpacing,[Out] float* baseline)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFontCollection">
            <summary>	
            HRESULT IDWriteTextFormat::GetFontCollection([Out] IDWriteFontCollection** fontCollection)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFontFamilyNameLength">
            <summary>	
            unsigned int IDWriteTextFormat::GetFontFamilyNameLength()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFontFamilyName(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteTextFormat::GetFontFamilyName([Out, Buffer] wchar_t* fontFamilyName,[In] unsigned int nameSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFontWeight">
            <summary>	
            DWRITE_FONT_WEIGHT IDWriteTextFormat::GetFontWeight()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFontStyle">
            <summary>	
            DWRITE_FONT_STYLE IDWriteTextFormat::GetFontStyle()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFontStretch">
            <summary>	
            DWRITE_FONT_STRETCH IDWriteTextFormat::GetFontStretch()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetFontSize">
            <summary>	
            float IDWriteTextFormat::GetFontSize()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetLocaleNameLength">
            <summary>	
            unsigned int IDWriteTextFormat::GetLocaleNameLength()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextFormat.GetLocaleName(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDWriteTextFormat::GetLocaleName([Out, Buffer] wchar_t* localeName,[In] unsigned int nameSize)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.TextFormat.FontFamilyName">
            <summary>	
            Gets a copy of the font family name. 	
            </summary>	
            <returns>the current font family name. </returns>
        </member>
        <member name="P:C1.Util.DX.DirectWrite.TextFormat.LocaleName">
            <summary>	
            Gets a copy of the locale name. 	
            </summary>	
            <returns>the current locale name.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextLayout">
            <summary>	
            IDWriteTextLayout	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single)">
            <summary>	
             Takes a string, text format, and associated constraints, and produces an object that represents the fully analyzed and formatted result. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:C1.Util.DX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters.</param>
            <param name="textFormat">A pointer to an object that indicates the format to apply to the string.</param>
            <param name="maxWidth">The width of the layout box.</param>
            <param name="maxHeight">The height of the layout box.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:C1.Win.DX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:C1.Win.DX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specifies the font size and pixels per DIP. </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.Draw(C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single)">
            <summary>	
             Draws text using the specified client drawing context.	
            </summary>	
            <remarks>	
            To draw text with this method, a textLayout object needs to be created by the application using <see cref="M:C1.Util.DX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single)"/>. After the textLayout object is obtained, the application calls the  IDWriteTextLayout::Draw method  to draw the text, decorations, and inline objects. The actual drawing is done through the callback interface passed in as the textRenderer argument; there, the corresponding DrawGlyphRun API is called. 	
            </remarks>	
            <param name="renderer">Pointer to the set of callback functions used to draw parts of a text string.</param>
            <param name="originX">The x-coordinate of the layout's left side.</param>
            <param name="originY">The y-coordinate of the layout's top side.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.Draw(System.Object,C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single)">
            <summary>	
             Draws text using the specified client drawing context.	
            </summary>	
            <remarks>	
            To draw text with this method, a textLayout object needs to be created by the application using <see cref="M:C1.Util.DX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single)"/>. After the textLayout object is obtained, the application calls the  IDWriteTextLayout::Draw method  to draw the text, decorations, and inline objects. The actual drawing is done through the callback interface passed in as the textRenderer argument; there, the corresponding DrawGlyphRun API is called. 	
            </remarks>	
            <param name="clientDrawingContext">An application-defined drawing context. </param>
            <param name="renderer">Pointer to the set of callback functions used to draw parts of a text string.</param>
            <param name="originX">The x-coordinate of the layout's left side.</param>
            <param name="originY">The y-coordinate of the layout's top side.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetClusterMetrics">
            <summary>	
            Retrieves logical properties and measurements of each glyph cluster. 	
            </summary>	
            <remarks>	
            If maxClusterCount is not large enough, then E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and actualClusterCount is set to the number of clusters needed.  	
            </remarks>	
            <returns>Returns metrics, such as line-break or total advance width, for a glyph cluster. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetDrawingEffect(System.Object,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            Sets the application-defined drawing effect. 	
            </summary>	
            <remarks>	
            An <see cref="T:C1.Util.DX.Direct2D.Brush"/>, such as a color or gradient brush, can be set as a drawing effect if you are using the RenderTarget.DrawTextLayout to draw text and that brush will be used to draw the specified range of text.  This drawing effect is associated with the specified range and will be passed back to the application by way of the callback when the range is drawn at drawing time.  	
            </remarks>	
            <param name="drawingEffect">Application-defined drawing effects that apply to the range. This data object will be passed back to the application's drawing callbacks for final rendering. </param>
            <param name="textRange">The text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetDrawingEffect(C1.Util.DX.Direct2D.Brush,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            Sets the application-defined drawing effect. 	
            </summary>	
            <param name="brush">The color or gradient brush.</param>
            <param name="textRange">The text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetDrawingEffect(System.Int32)">
            <summary>	
            Gets the application-defined drawing effect at the specified text position. 	
            </summary>	
            <param name="currentPosition">The position of the text whose drawing effect is to be retrieved. </param>
            <returns>a reference to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetDrawingEffect(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            Gets the application-defined drawing effect at the specified text position. 	
            </summary>	
            <param name="currentPosition">The position of the text whose drawing effect is to be retrieved. </param>
            <param name="textRange">Contains the range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the drawing effect. </param>
            <returns>a reference to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontCollection(System.Int32)">
            <summary>	
            Gets the font collection associated with the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a  reference to the current font collection.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32)">
            <summary>	
            Gets the font family name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to examine. </param>
            <returns>the font family name </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font family name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to examine. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font family name. </param>
            <returns>the font family name </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontSize(System.Int32)">
            <summary>	
            Gets the font em height of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>the size of the font in ems  of the text at the specified position. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontStretch(System.Int32)">
            <summary>	
            Gets the font stretch of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font stretch (also known as width) being applied at the specified position.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontStyle(System.Int32)">
            <summary>	
            Gets the font style (also known as slope) of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font style (also known as slope or incline) being applied at the specified position.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontWeight(System.Int32)">
            <summary>	
            Gets the font weight of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font weight being applied at the specified position.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetInlineObject(System.Int32)">
            <summary>	
            Gets the inline object at the specified position. 	
            </summary>	
            <param name="currentPosition">The specified text position. </param>
            <returns>an application-defined inline object. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetLineMetrics">
            <summary>	
            Retrieves the information about each individual text line of the  text string. 	
            </summary>	
            <remarks>	
            If maxLineCount is not large enough E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and *actualLineCount is set to the number of lines needed.  	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetLocaleName(System.Int32)">
            <summary>	
            Gets the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>the locale name of the text at the specified position. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetLocaleName(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            Gets the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the locale name. </param>
            <returns>the locale name of the text at the specified position. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HasStrikethrough(System.Int32)">
            <summary>	
            Get the strikethrough presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>A Boolean  flag that indicates whether strikethrough is present at the position indicated by currentPosition. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetTypography(System.Int32)">
            <summary>	
            Gets the typography setting of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a  reference to the current typography setting. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HasUnderline(System.Int32)">
            <summary>	
            Gets the underline presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The current text position. </param>
            <returns>A Boolean  flag that indicates whether underline is present at the position indicated by currentPosition. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HitTestTextRange(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>	
            The application calls this function to get a set of hit-test metrics corresponding to a range of text positions. 
            One of the main usages is to implement highlight selection of the text string. 
            The function returns E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), 
            when the buffer size of hitTestMetrics is too small to hold all the regions calculated by the function. 
            In this situation, the function sets the output value *actualHitTestMetricsCount to the number of geometries calculated. 
            The application is responsible for allocating a new buffer of greater size and calling the function again. 
            A good value to use as an initial value for maxHitTestMetricsCount may be calculated from the following equation: 
            maxHitTestMetricsCount = lineCount * maxBidiReorderingDepth where lineCount is obtained from the value of the output argument *actualLineCount (from the function IDWriteTextLayout::GetLineLengths), and the maxBidiReorderingDepth value from the DWRITE_TEXT_METRICS structure of the output argument *textMetrics (from the function IDWriteFactory::CreateTextLayout). 	
            </summary>	
            <param name="textPosition">The first text position of the specified range. </param>
            <param name="textLength">The number of positions of the specified range. </param>
            <param name="originX">The origin pixel location X at the left of the layout box. This offset is added to the hit-test metrics returned. </param>
            <param name="originY">The origin pixel location Y at the top of the layout box. This offset is added to the hit-test metrics returned. </param>
            <returns>a reference to a buffer of the output geometry fully enclosing the specified position range.  The buffer must be at least as large as maxHitTestMetricsCount. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetInlineObject(C1.Util.DX.DirectWrite.InlineObject,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            Sets the inline object. 	
            </summary>	
            <remarks>	
            The application may call this function to specify the set of properties describing an application-defined inline object for specific range.  This inline object applies to the specified range and will be passed back to the application by way of the DrawInlineObject callback when the range is drawn. Any text in that range will be suppressed.  	
            </remarks>	
            <param name="inlineObject">An application-defined inline object.  </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.TextLayout"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.TextLayout">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.TextLayout"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetMaxWidth(System.Single)">
            <summary>	
            HRESULT IDWriteTextLayout::SetMaxWidth([In] float maxWidth)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetMaxHeight(System.Single)">
            <summary>	
            HRESULT IDWriteTextLayout::SetMaxHeight([In] float maxHeight)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetFontCollection(C1.Util.DX.DirectWrite.FontCollection,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetFontCollection([In] IDWriteFontCollection* fontCollection,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetFontFamilyName(System.String,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetFontFamilyName([In] const wchar_t* fontFamilyName,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetFontWeight(C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetFontWeight([In] DWRITE_FONT_WEIGHT fontWeight,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetFontStyle(C1.Util.DX.DirectWrite.FontStyle,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetFontStyle([In] DWRITE_FONT_STYLE fontStyle,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetFontStretch(C1.Util.DX.DirectWrite.FontStretch,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetFontStretch([In] DWRITE_FONT_STRETCH fontStretch,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetFontSize(System.Single,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetFontSize([In] float fontSize,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetUnderline(C1.Util.DX.Bool,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetUnderline([In] BOOL hasUnderline,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetStrikethrough(C1.Util.DX.Bool,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetStrikethrough([In] BOOL hasStrikethrough,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetDrawingEffect_(System.IntPtr,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetDrawingEffect([In] void* drawingEffect,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetInlineObject_(System.IntPtr,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetInlineObject([In] IDWriteInlineObject* inlineObject,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetTypography(C1.Util.DX.DirectWrite.Typography,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetTypography([In] IDWriteTypography* typography,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.SetLocaleName(System.String,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout::SetLocaleName([In] const wchar_t* localeName,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetMaxWidth">
            <summary>	
            float IDWriteTextLayout::GetMaxWidth()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetMaxHeight">
            <summary>	
            float IDWriteTextLayout::GetMaxHeight()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontCollection(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetFontCollection([In] unsigned int currentPosition,[Out] IDWriteFontCollection** fontCollection,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontFamilyNameLength(System.Int32,System.Int32@,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetFontFamilyNameLength([In] unsigned int currentPosition,[Out] unsigned int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32,System.IntPtr,System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetFontFamilyName([In] unsigned int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[In] unsigned int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontWeight(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetFontWeight([In] unsigned int currentPosition,[Out] DWRITE_FONT_WEIGHT* fontWeight,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontStyle(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetFontStyle([In] unsigned int currentPosition,[Out] DWRITE_FONT_STYLE* fontStyle,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontStretch(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetFontStretch([In] unsigned int currentPosition,[Out] DWRITE_FONT_STRETCH* fontStretch,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetFontSize(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetFontSize([In] unsigned int currentPosition,[Out] float* fontSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HasUnderline(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetUnderline([In] unsigned int currentPosition,[Out] BOOL* hasUnderline,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HasStrikethrough(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetStrikethrough([In] unsigned int currentPosition,[Out] BOOL* hasStrikethrough,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetDrawingEffect_(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetDrawingEffect([In] unsigned int currentPosition,[Out] void** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetInlineObject(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetInlineObject([In] unsigned int currentPosition,[Out] IDWriteInlineObject** inlineObject,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetTypography(System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetTypography([In] unsigned int currentPosition,[Out] IDWriteTypography** typography,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetLocaleNameLength(System.Int32,System.Int32@,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetLocaleNameLength([In] unsigned int currentPosition,[Out] unsigned int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetLocaleName(System.Int32,System.IntPtr,System.Int32,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetLocaleName([In] unsigned int currentPosition,[Out, Buffer] wchar_t* localeName,[In] unsigned int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>	
            HRESULT IDWriteTextLayout::Draw([In, Optional] void* clientDrawingContext,[In] IDWriteTextRenderer* renderer,[In] float originX,[In] float originY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetLineMetrics(C1.Util.DX.DirectWrite.LineMetrics[],System.Int32,System.Int32@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetLineMetrics([Out, Buffer, Optional] DWRITE_LINE_METRICS* lineMetrics,[In] unsigned int maxLineCount,[Out] unsigned int* actualLineCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetMetrics(C1.Util.DX.DirectWrite.TextMetrics@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetMetrics([Out] DWRITE_TEXT_METRICS* textMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetOverhangMetrics(C1.Util.DX.DirectWrite.OverhangMetrics@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.GetClusterMetrics(C1.Util.DX.DirectWrite.ClusterMetrics[],System.Int32,System.Int32@)">
            <summary>	
            HRESULT IDWriteTextLayout::GetClusterMetrics([Out, Buffer, Optional] DWRITE_CLUSTER_METRICS* clusterMetrics,[In] unsigned int maxClusterCount,[Out] unsigned int* actualClusterCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.DetermineMinWidth">
            <summary>	
            HRESULT IDWriteTextLayout::DetermineMinWidth([Out] float* minWidth)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HitTestPoint(System.Single,System.Single,C1.Util.DX.Bool@,C1.Util.DX.Bool@)">
            <summary>	
            HRESULT IDWriteTextLayout::HitTestPoint([In] float pointX,[In] float pointY,[Out] BOOL* isTrailingHit,[Out] BOOL* isInside,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HitTestTextPosition(System.Int32,C1.Util.DX.Bool,System.Single@,System.Single@)">
            <summary>	
            HRESULT IDWriteTextLayout::HitTestTextPosition([In] unsigned int textPosition,[In] BOOL isTrailingHit,[Out] float* pointX,[Out] float* pointY,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout.HitTestTextRange(System.Int32,System.Int32,System.Single,System.Single,C1.Util.DX.DirectWrite.HitTestMetrics[],System.Int32,System.Int32@)">
            <summary>	
            HRESULT IDWriteTextLayout::HitTestTextRange([In] unsigned int textPosition,[In] unsigned int textLength,[In] float originX,[In] float originY,[Out, Buffer, Optional] DWRITE_HIT_TEST_METRICS* hitTestMetrics,[In] unsigned int maxHitTestMetricsCount,[Out] unsigned int* actualHitTestMetricsCount)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.TextLayout.Metrics">
            <summary>	
            GetMetrics	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.TextLayout.OverhangMetrics">
            <summary>	
            GetOverhangMetrics	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextLayout1">
            <summary>	
            IDWriteTextLayout1
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single)">
            <summary>	
             Takes a string, text format, and associated constraints, and produces an object that represents the fully analyzed and formatted result. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:C1.Util.DX.DirectWrite.TextLayout1"/> object from. This array must be of length stringLength and can contain embedded NULL characters.</param>
            <param name="textFormat">A pointer to an object that indicates the format to apply to the string.</param>
            <param name="maxWidth">The width of the layout box.</param>
            <param name="maxHeight">The height of the layout box.</param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:C1.Win.DX.DirectWrite.TextLayout1"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.Create(C1.Util.DX.DirectWrite.Factory,System.String,C1.Util.DX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:C1.Win.DX.DirectWrite.TextLayout1"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specifies the font size and pixels per DIP. </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.TextLayout1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.TextLayout1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.TextLayout1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.SetPairKerning(C1.Util.DX.Bool,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout1::SetPairKerning([In] BOOL isPairKerningEnabled,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.GetPairKerning(System.Int32,C1.Util.DX.Bool@,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout1::GetPairKerning([In] unsigned int currentPosition,[Out] BOOL* isPairKerningEnabled,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.SetCharacterSpacing(System.Single,System.Single,System.Single,C1.Util.DX.DirectWrite.TextRange)">
            <summary>	
            HRESULT IDWriteTextLayout1::SetCharacterSpacing([In] float leadingSpacing,[In] float trailingSpacing,[In] float minimumAdvanceWidth,[In] DWRITE_TEXT_RANGE textRange)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextLayout1.GetCharacterSpacing(System.Int32,System.Single@,System.Single@,System.Single@,C1.Util.DX.DirectWrite.TextRange@)">
            <summary>	
            HRESULT IDWriteTextLayout1::GetCharacterSpacing([In] unsigned int currentPosition,[Out] float* leadingSpacing,[Out] float* trailingSpacing,[Out] float* minimumAdvanceWidth,[Out, Optional] DWRITE_TEXT_RANGE* textRange)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextRendererBase">
            <summary>
            Default implementation of TextRenderer. Need to implement at least a DrawXXX method to use it.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextRenderer">
            <summary>	
            IDWriteTextRenderer	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PixelSnapping">
            <summary>	
            IDWritePixelSnapping	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.PixelSnapping.IsPixelSnappingDisabled(System.Object)">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.PixelSnapping.GetCurrentTransform(System.Object)">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.PixelSnapping.GetPixelsPerDip(System.Object)">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>the number of physical pixels per DIP</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer.DrawGlyphRun(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw(System.Object,C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer.DrawUnderline(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.Underline@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffectPtr"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer.DrawStrikethrough(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.Strikethrough@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffectPtr">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.InlineObject,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererBase.IsPixelSnappingDisabled(System.Object)">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererBase.GetCurrentTransform(System.Object)">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>a structure which has transform information for pixel snapping.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererBase.GetPixelsPerDip(System.Object)">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>the number of physical pixels per DIP</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererBase.DrawGlyphRun(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw(System.Object,C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererBase.DrawUnderline(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.Underline@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffectPtr"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererBase.DrawStrikethrough(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.Strikethrough@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffectPtr">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererBase.DrawInlineObject(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.InlineObject,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextRendererShadow">
            <summary>
            Internal TextRenderer Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRendererShadow.ToIntPtr(C1.Util.DX.DirectWrite.TextRenderer)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextRenderer1Base">
            <summary>
            Default implementation of TextRenderer1.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextRenderer1">
            <summary>	
            IDWriteTextRenderer1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1.DrawGlyphRun(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw(System.Object,C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="orientationAngle">Orientation of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1.DrawUnderline(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.Underline@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="orientationAngle">Orientation of the underline.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffectPtr"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1.DrawStrikethrough(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.Strikethrough@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="orientationAngle">Orientation of the strikethrough.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffectPtr">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1.DrawInlineObject(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.InlineObject,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="orientationAngle">Orientation of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawGlyphRun(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawUnderline(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.Underline@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawStrikethrough(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.Strikethrough@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawInlineObject(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.InlineObject,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawGlyphRun(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.MeasuringMode,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to <see cref="M:C1.Util.DX.DirectWrite.TextLayout.Draw(System.Object,C1.Util.DX.DirectWrite.TextRenderer,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="orientationAngle">Orientation of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawUnderline(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.Underline@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="orientationAngle">Orientation of the underline.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffectPtr"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawStrikethrough(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.Strikethrough@,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="orientationAngle">Orientation of the strikethrough.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffectPtr">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Base.DrawInlineObject(System.Object,System.Single,System.Single,C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.DirectWrite.InlineObject,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="orientationAngle">Orientation of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffectPtr">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextRenderer1Shadow">
            <summary>
            Internal TextRenderer1 Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRenderer1Shadow.ToIntPtr(C1.Util.DX.DirectWrite.TextRenderer1)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Typography">
            <summary>	
            IDWriteTypography	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Typography.Create(C1.Util.DX.DirectWrite.Factory)">
            <summary>	
            Creates a typography object for use in a text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:C1.Util.DX.DirectWrite.Factory"/></param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Typography.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Typography"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Typography.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.Typography">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.Typography"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Typography.AddFontFeature(C1.Util.DX.DirectWrite.FontFeature)">
            <summary>	
            HRESULT IDWriteTypography::AddFontFeature([In] DWRITE_FONT_FEATURE fontFeature)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Typography.GetFontFeatureCount">
            <summary>	
            unsigned int IDWriteTypography::GetFontFeatureCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Typography.GetFontFeature(System.Int32)">
            <summary>	
            HRESULT IDWriteTypography::GetFontFeature([In] unsigned int fontFeatureIndex,[Out] DWRITE_FONT_FEATURE* fontFeature)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Baseline">
            <summary>	
            DWRITE_BASELINE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.Default">
            <summary>	
            DWRITE_BASELINE_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.Roman">
            <summary>	
            DWRITE_BASELINE_ROMAN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.Central">
            <summary>	
            DWRITE_BASELINE_CENTRAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.Math">
            <summary>	
            DWRITE_BASELINE_MATH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.Hanging">
            <summary>	
            DWRITE_BASELINE_HANGING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.IdeographicBottom">
            <summary>	
            DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.IdeographicTop">
            <summary>	
            DWRITE_BASELINE_IDEOGRAPHIC_TOP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.Minimum">
            <summary>	
            DWRITE_BASELINE_MINIMUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Baseline.Maximum">
            <summary>	
            DWRITE_BASELINE_MAXIMUM	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.BreakCondition">
            <summary>	
            DWRITE_BREAK_CONDITION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.BreakCondition.Neutral">
            <summary>	
            DWRITE_BREAK_CONDITION_NEUTRAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.BreakCondition.CanBreak">
            <summary>	
            DWRITE_BREAK_CONDITION_CAN_BREAK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.BreakCondition.MayNotBreak">
            <summary>	
            DWRITE_BREAK_CONDITION_MAY_NOT_BREAK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.BreakCondition.MustBreak">
            <summary>	
            DWRITE_BREAK_CONDITION_MUST_BREAK	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FactoryType">
            <summary>	
            DWRITE_FACTORY_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FactoryType.Shared">
            <summary>	
            DWRITE_FACTORY_TYPE_SHARED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FactoryType.Isolated">
            <summary>	
            DWRITE_FACTORY_TYPE_ISOLATED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FlowDirection">
            <summary>	
            DWRITE_FLOW_DIRECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FlowDirection.TopToBottom">
            <summary>	
            DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FlowDirection.BottomToTop">
            <summary>	
            DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FlowDirection.LeftToRight">
            <summary>	
            DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FlowDirection.RightToLeft">
            <summary>	
            DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFaceType">
            <summary>	
            DWRITE_FONT_FACE_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.Cff">
            <summary>	
            DWRITE_FONT_FACE_TYPE_CFF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.Truetype">
            <summary>	
            DWRITE_FONT_FACE_TYPE_TRUETYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.TruetypeCollection">
            <summary>	
            DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.Type1">
            <summary>	
            DWRITE_FONT_FACE_TYPE_TYPE1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.Vector">
            <summary>	
            DWRITE_FONT_FACE_TYPE_VECTOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.Bitmap">
            <summary>	
            DWRITE_FONT_FACE_TYPE_BITMAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.Unknown">
            <summary>	
            DWRITE_FONT_FACE_TYPE_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFaceType.RawCff">
            <summary>	
            DWRITE_FONT_FACE_TYPE_RAW_CFF	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFeatureTag">
            <summary>	
            DWRITE_FONT_FEATURE_TAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.AlternativeFractions">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.PetiteCapitalsFromCapitals">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.SmallCapitalsFromCapitals">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ContextualAlternates">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.CaseSensitiveForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.GlyphCompositionDecomposition">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ContextualLigatures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.CapitalSpacing">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ContextualSwash">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.CursivePositioning">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Default">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.DiscretionaryLigatures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ExpertForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Fractions">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_FRACTIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.FullWidth">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_FULL_WIDTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.HalfForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_HALF_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.HalantForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_HALANT_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.AlternateHalfWidth">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.HistoricalForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.HorizontalKanaAlternates">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.HistoricalLigatures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.HalfWidth">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_HALF_WIDTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.HojoKanjiForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Jis04Forms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_JIS04_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Jis78Forms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_JIS78_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Jis83Forms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_JIS83_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Jis90Forms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_JIS90_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Kerning">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_KERNING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StandardLigatures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.LiningFigures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_LINING_FIGURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.LocalizedForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.MarkPositioning">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.MathematicalGreek">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.MarkToMarkPositioning">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.AlternateAnnotationForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.NlcKanjiForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.OldStyleFigures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Ordinals">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_ORDINALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ProportionalAlternateWidth">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.PetiteCapitals">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ProportionalFigures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ProportionalWidths">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.QuarterWidths">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.RequiredLigatures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.RubyNotationForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticAlternates">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ScientificInferiors">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.SmallCapitals">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.SimplifiedForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet1">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet2">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet3">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet4">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet5">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet6">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet7">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet8">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet9">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet10">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet11">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet12">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet13">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet14">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet15">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet16">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet17">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet18">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet19">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.StylisticSet20">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Subscript">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SUBSCRIPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Superscript">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Swash">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SWASH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Titling">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_TITLING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.TraditionalNameForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.TabularFigures">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.TraditionalForms">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.ThirdWidths">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.Unicase">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_UNICASE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.VerticalWriting">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.VerticalAlternatesAndRotation">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeatureTag.SlashedZero">
            <summary>	
            DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileType">
            <summary>	
            DWRITE_FONT_FILE_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.Unknown">
            <summary>	
            DWRITE_FONT_FILE_TYPE_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.Cff">
            <summary>	
            DWRITE_FONT_FILE_TYPE_CFF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.Truetype">
            <summary>	
            DWRITE_FONT_FILE_TYPE_TRUETYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.TruetypeCollection">
            <summary>	
            DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.Type1Pfm">
            <summary>	
            DWRITE_FONT_FILE_TYPE_TYPE1_PFM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.Type1Pfb">
            <summary>	
            DWRITE_FONT_FILE_TYPE_TYPE1_PFB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.Vector">
            <summary>	
            DWRITE_FONT_FILE_TYPE_VECTOR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFileType.Bitmap">
            <summary>	
            DWRITE_FONT_FILE_TYPE_BITMAP	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontSimulations">
            <summary>	
            DWRITE_FONT_SIMULATIONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontSimulations.None">
            <summary>	
            DWRITE_FONT_SIMULATIONS_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontSimulations.Bold">
            <summary>	
            DWRITE_FONT_SIMULATIONS_BOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontSimulations.Oblique">
            <summary>	
            DWRITE_FONT_SIMULATIONS_OBLIQUE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontStretch">
            <summary>	
            DWRITE_FONT_STRETCH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.Undefined">
            <summary>	
            DWRITE_FONT_STRETCH_UNDEFINED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.UltraCondensed">
            <summary>	
            DWRITE_FONT_STRETCH_ULTRA_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.ExtraCondensed">
            <summary>	
            DWRITE_FONT_STRETCH_EXTRA_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.Condensed">
            <summary>	
            DWRITE_FONT_STRETCH_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.SemiCondensed">
            <summary>	
            DWRITE_FONT_STRETCH_SEMI_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.Normal">
            <summary>	
            DWRITE_FONT_STRETCH_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.Medium">
            <summary>	
            DWRITE_FONT_STRETCH_MEDIUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.SemiExpanded">
            <summary>	
            DWRITE_FONT_STRETCH_SEMI_EXPANDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.Expanded">
            <summary>	
            DWRITE_FONT_STRETCH_EXPANDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.ExtraExpanded">
            <summary>	
            DWRITE_FONT_STRETCH_EXTRA_EXPANDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStretch.UltraExpanded">
            <summary>	
            DWRITE_FONT_STRETCH_ULTRA_EXPANDED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontStyle">
            <summary>	
            DWRITE_FONT_STYLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStyle.Normal">
            <summary>	
            DWRITE_FONT_STYLE_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStyle.Oblique">
            <summary>	
            DWRITE_FONT_STYLE_OBLIQUE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontStyle.Italic">
            <summary>	
            DWRITE_FONT_STYLE_ITALIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontWeight">
            <summary>	
            DWRITE_FONT_WEIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Thin">
            <summary>	
            DWRITE_FONT_WEIGHT_THIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.ExtraLight">
            <summary>	
            DWRITE_FONT_WEIGHT_EXTRA_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.UltraLight">
            <summary>	
            DWRITE_FONT_WEIGHT_ULTRA_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Light">
            <summary>	
            DWRITE_FONT_WEIGHT_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.SemiLight">
            <summary>	
            DWRITE_FONT_WEIGHT_SEMI_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Normal">
            <summary>	
            DWRITE_FONT_WEIGHT_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Regular">
            <summary>	
            DWRITE_FONT_WEIGHT_REGULAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Medium">
            <summary>	
            DWRITE_FONT_WEIGHT_MEDIUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.DemiBold">
            <summary>	
            DWRITE_FONT_WEIGHT_DEMI_BOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.SemiBold">
            <summary>	
            DWRITE_FONT_WEIGHT_SEMI_BOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Bold">
            <summary>	
            DWRITE_FONT_WEIGHT_BOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.ExtraBold">
            <summary>	
            DWRITE_FONT_WEIGHT_EXTRA_BOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.UltraBold">
            <summary>	
            DWRITE_FONT_WEIGHT_ULTRA_BOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Black">
            <summary>	
            DWRITE_FONT_WEIGHT_BLACK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.Heavy">
            <summary>	
            DWRITE_FONT_WEIGHT_HEAVY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.ExtraBlack">
            <summary>	
            DWRITE_FONT_WEIGHT_EXTRA_BLACK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontWeight.UltraBlack">
            <summary>	
            DWRITE_FONT_WEIGHT_ULTRA_BLACK	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GlyphOrientationAngle">
            <summary>	
            DWRITE_GLYPH_ORIENTATION_ANGLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphOrientationAngle.Degrees0">
            <summary>	
            DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphOrientationAngle.Degrees90">
            <summary>	
            DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphOrientationAngle.Degrees180">
            <summary>	
            DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphOrientationAngle.Degrees270">
            <summary>	
            DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GridFitMode">
            <summary>
            DWRITE_GRID_FIT_MODE
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GridFitMode.Default">
            <summary>
            DWRITE_GRID_FIT_MODE_DEFAULT
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GridFitMode.Disabled">
            <summary>
            DWRITE_GRID_FIT_MODE_DISABLED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GridFitMode.Enabled">
            <summary>
            DWRITE_GRID_FIT_MODE_ENABLED
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.InformationalStringId">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_ID	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.None">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.CopyrightNotice">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.VersionStrings">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.Trademark">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_TRADEMARK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.Manufacturer">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_MANUFACTURER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.Designer">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_DESIGNER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.DesignerUrl">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_DESIGNER_URL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.Description">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.FontVendorUrl">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.LicenseDescription">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.LicenseInformationUrl">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.Win32FamilyNames">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.Win32SubFamilyNames">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.PreferRedFamilyNames">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.PreferRedSubFamilyNames">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.SampleText">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.FullName">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_FULL_NAME	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.PostscriptName">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InformationalStringId.PostscriptCidName">
            <summary>	
            DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.LineSpacingMethod">
            <summary>	
            DWRITE_LINE_SPACING_METHOD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineSpacingMethod.Default">
            <summary>	
            DWRITE_LINE_SPACING_METHOD_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineSpacingMethod.Uniform">
            <summary>	
            DWRITE_LINE_SPACING_METHOD_UNIFORM	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.MeasuringMode">
            <summary>	
            DWRITE_MEASURING_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.MeasuringMode.Natural">
            <summary>	
            DWRITE_MEASURING_MODE_NATURAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.MeasuringMode.GdiClassic">
            <summary>	
            DWRITE_MEASURING_MODE_GDI_CLASSIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.MeasuringMode.GdiNatural">
            <summary>	
            DWRITE_MEASURING_MODE_GDI_NATURAL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.NumberSubstitutionMethod">
            <summary>	
            DWRITE_NUMBER_SUBSTITUTION_METHOD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.NumberSubstitutionMethod.FromCulture">
            <summary>	
            DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.NumberSubstitutionMethod.Contextual">
            <summary>	
            DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.NumberSubstitutionMethod.None">
            <summary>	
            DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.NumberSubstitutionMethod.National">
            <summary>	
            DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.NumberSubstitutionMethod.Traditional">
            <summary>	
            DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.OutlineThreshold">
            <summary>	
            DWRITE_OUTLINE_THRESHOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.OutlineThreshold.Antialiased">
            <summary>	
            DWRITE_OUTLINE_THRESHOLD_ANTIALIASED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.OutlineThreshold.Aliased">
            <summary>	
            DWRITE_OUTLINE_THRESHOLD_ALIASED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseArmStyle">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.Any">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.NoFit">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.StraightArmsHorizontal">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.StraightArmsWedge">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.StraightArmsVertical">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.StraightArmsSingleSerif">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.StraightArmsDoubleSerif">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.NonstraightArmsHorizontal">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.NonstraightArmsWedge">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.NonstraightArmsVertical">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.NonstraightArmsSingleSerif">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.NonstraightArmsDoubleSerif">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.StraightArmsHorz">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.StraightArmsVert">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.BentArmsHorz">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.BentArmsWedge">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.BentArmsVert">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.BentArmsSingleSerif">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseArmStyle.BentArmsDoubleSerif">
            <summary>	
            DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseAspect">
            <summary>	
            DWRITE_PANOSE_ASPECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.Any">
            <summary>	
            DWRITE_PANOSE_ASPECT_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.NoFit">
            <summary>	
            DWRITE_PANOSE_ASPECT_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.SuperCondensed">
            <summary>	
            DWRITE_PANOSE_ASPECT_SUPER_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.VeryCondensed">
            <summary>	
            DWRITE_PANOSE_ASPECT_VERY_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.Condensed">
            <summary>	
            DWRITE_PANOSE_ASPECT_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.Normal">
            <summary>	
            DWRITE_PANOSE_ASPECT_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.Extended">
            <summary>	
            DWRITE_PANOSE_ASPECT_EXTENDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.VeryExtended">
            <summary>	
            DWRITE_PANOSE_ASPECT_VERY_EXTENDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.SuperExtended">
            <summary>	
            DWRITE_PANOSE_ASPECT_SUPER_EXTENDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspect.Monospaced">
            <summary>	
            DWRITE_PANOSE_ASPECT_MONOSPACED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseAspectRatio">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspectRatio.Any">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspectRatio.NoFit">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspectRatio.VeryCondensed">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspectRatio.Condensed">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspectRatio.Normal">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspectRatio.Expanded">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO_EXPANDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseAspectRatio.VeryExpanded">
            <summary>	
            DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseCharacterRanges">
            <summary>	
            DWRITE_PANOSE_CHARACTER_RANGES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseCharacterRanges.Any">
            <summary>	
            DWRITE_PANOSE_CHARACTER_RANGES_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseCharacterRanges.NoFit">
            <summary>	
            DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseCharacterRanges.ExtendedCollection">
            <summary>	
            DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseCharacterRanges.Literals">
            <summary>	
            DWRITE_PANOSE_CHARACTER_RANGES_LITERALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseCharacterRanges.NoLowerCase">
            <summary>	
            DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseCharacterRanges.SmallCaps">
            <summary>	
            DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseContrast">
            <summary>	
            DWRITE_PANOSE_CONTRAST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.Any">
            <summary>	
            DWRITE_PANOSE_CONTRAST_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.NoFit">
            <summary>	
            DWRITE_PANOSE_CONTRAST_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.None">
            <summary>	
            DWRITE_PANOSE_CONTRAST_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.VeryLow">
            <summary>	
            DWRITE_PANOSE_CONTRAST_VERY_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.Low">
            <summary>	
            DWRITE_PANOSE_CONTRAST_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.MediumLow">
            <summary>	
            DWRITE_PANOSE_CONTRAST_MEDIUM_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.Medium">
            <summary>	
            DWRITE_PANOSE_CONTRAST_MEDIUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.MediumHigh">
            <summary>	
            DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.High">
            <summary>	
            DWRITE_PANOSE_CONTRAST_HIGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.VeryHigh">
            <summary>	
            DWRITE_PANOSE_CONTRAST_VERY_HIGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.HorizontalLow">
            <summary>	
            DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.HorizontalMedium">
            <summary>	
            DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.HorizontalHigh">
            <summary>	
            DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseContrast.Broken">
            <summary>	
            DWRITE_PANOSE_CONTRAST_BROKEN	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseDecorativeClass">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.Any">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.NoFit">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.Derivative">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.NonStandardTopology">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.NonStandardElements">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.NonStandardAspect">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.Initials">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.Cartoon">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.PictureStems">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.Ornamented">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.TextAndBackground">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.Collage">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeClass.Montage">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseDecorativeTopology">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.Any">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.NoFit">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.Standard">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.Square">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.MultipleSegment">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.ArtDeco">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.UnevenWeighting">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.DiverseArms">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.DiverseForms">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.LombardicForms">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.UpperCaseInLowerCase">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.ImpliedTopology">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.HorseshoeEAndA">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.Cursive">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.Blackletter">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorativeTopology.SwashVariance">
            <summary>	
            DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseFamily">
            <summary>	
            DWRITE_PANOSE_FAMILY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFamily.Any">
            <summary>	
            DWRITE_PANOSE_FAMILY_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFamily.NoFit">
            <summary>	
            DWRITE_PANOSE_FAMILY_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFamily.TextDisplay">
            <summary>	
            DWRITE_PANOSE_FAMILY_TEXT_DISPLAY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFamily.Script">
            <summary>	
            DWRITE_PANOSE_FAMILY_SCRIPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFamily.Decorative">
            <summary>	
            DWRITE_PANOSE_FAMILY_DECORATIVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFamily.Symbol">
            <summary>	
            DWRITE_PANOSE_FAMILY_SYMBOL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFamily.Pictorial">
            <summary>	
            DWRITE_PANOSE_FAMILY_PICTORIAL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseFill">
            <summary>	
            DWRITE_PANOSE_FILL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.Any">
            <summary>	
            DWRITE_PANOSE_FILL_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.NoFit">
            <summary>	
            DWRITE_PANOSE_FILL_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.StandardSolidFill">
            <summary>	
            DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.NoFill">
            <summary>	
            DWRITE_PANOSE_FILL_NO_FILL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.PatternedFill">
            <summary>	
            DWRITE_PANOSE_FILL_PATTERNED_FILL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.ComplexFill">
            <summary>	
            DWRITE_PANOSE_FILL_COMPLEX_FILL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.ShapedFill">
            <summary>	
            DWRITE_PANOSE_FILL_SHAPED_FILL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFill.DrawnDistressed">
            <summary>	
            DWRITE_PANOSE_FILL_DRAWN_DISTRESSED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseFinials">
            <summary>	
            DWRITE_PANOSE_FINIALS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.Any">
            <summary>	
            DWRITE_PANOSE_FINIALS_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.NoFit">
            <summary>	
            DWRITE_PANOSE_FINIALS_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.NoneNoLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.NoneClosedLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.NoneOpenLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.SharpNoLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.SharpClosedLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.SharpOpenLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.TaperedNoLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.TaperedClosedLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.TaperedOpenLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.RoundNoLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.RoundClosedLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseFinials.RoundOpenLoops">
            <summary>	
            DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseLetterform">
            <summary>	
            DWRITE_PANOSE_LETTERFORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.Any">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NoFit">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NormalContact">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NormalWeighted">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NormalBoxed">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NormalFlattened">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NormalRounded">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NormalOffCenter">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.NormalSquare">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.ObliqueContact">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.ObliqueWeighted">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.ObliqueBoxed">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.ObliqueFlattened">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.ObliqueRounded">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.ObliqueOffCenter">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLetterform.ObliqueSquare">
            <summary>	
            DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseLining">
            <summary>	
            DWRITE_PANOSE_LINING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.Any">
            <summary>	
            DWRITE_PANOSE_LINING_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.NoFit">
            <summary>	
            DWRITE_PANOSE_LINING_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.None">
            <summary>	
            DWRITE_PANOSE_LINING_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.Inline">
            <summary>	
            DWRITE_PANOSE_LINING_INLINE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.Outline">
            <summary>	
            DWRITE_PANOSE_LINING_OUTLINE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.Engraved">
            <summary>	
            DWRITE_PANOSE_LINING_ENGRAVED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.Shadow">
            <summary>	
            DWRITE_PANOSE_LINING_SHADOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.Relief">
            <summary>	
            DWRITE_PANOSE_LINING_RELIEF	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseLining.Backdrop">
            <summary>	
            DWRITE_PANOSE_LINING_BACKDROP	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseMidline">
            <summary>	
            DWRITE_PANOSE_MIDLINE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.Any">
            <summary>	
            DWRITE_PANOSE_MIDLINE_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.NoFit">
            <summary>	
            DWRITE_PANOSE_MIDLINE_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.StandardTrimmed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.StandardPointed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_STANDARD_POINTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.StandardSerifed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.HighTrimmed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.HighPointed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_HIGH_POINTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.HighSerifed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_HIGH_SERIFED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.ConstantTrimmed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.ConstantPointed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.ConstantSerifed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.LowTrimmed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_LOW_TRIMMED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.LowPointed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_LOW_POINTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseMidline.LowSerifed">
            <summary>	
            DWRITE_PANOSE_MIDLINE_LOW_SERIFED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseProportion">
            <summary>	
            DWRITE_PANOSE_PROPORTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.Any">
            <summary>	
            DWRITE_PANOSE_PROPORTION_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.NoFit">
            <summary>	
            DWRITE_PANOSE_PROPORTION_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.OldStyle">
            <summary>	
            DWRITE_PANOSE_PROPORTION_OLD_STYLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.Modern">
            <summary>	
            DWRITE_PANOSE_PROPORTION_MODERN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.EvenWidth">
            <summary>	
            DWRITE_PANOSE_PROPORTION_EVEN_WIDTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.Expanded">
            <summary>	
            DWRITE_PANOSE_PROPORTION_EXPANDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.Condensed">
            <summary>	
            DWRITE_PANOSE_PROPORTION_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.VeryExpanded">
            <summary>	
            DWRITE_PANOSE_PROPORTION_VERY_EXPANDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.VeryCondensed">
            <summary>	
            DWRITE_PANOSE_PROPORTION_VERY_CONDENSED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseProportion.Monospaced">
            <summary>	
            DWRITE_PANOSE_PROPORTION_MONOSPACED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseScriptForm">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.Any">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.NoFit">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.UprightNoWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.UprightSomeWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.UprightMoreWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.UprightExtremeWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ObliqueNoWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ObliqueSomeWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ObliqueMoreWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ObliqueExtremeWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ExaggeratedNoWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ExaggeratedSomeWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ExaggeratedMoreWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptForm.ExaggeratedExtremeWrapping">
            <summary>	
            DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseScriptTopology">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.Any">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.NoFit">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.RomanDisconnected">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.RomanTrailing">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.RomanConnected">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.CursiveDisconnected">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.CursiveTrailing">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.CursiveConnected">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.BlackletterDisconnected">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.BlackletterTrailing">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScriptTopology.BlackletterConnected">
            <summary>	
            DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseSerifStyle">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Any">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.NoFit">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Cove">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_COVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.ObtuseCove">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.SquareCove">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.ObtuseSquareCove">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Square">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_SQUARE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Thin">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_THIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Oval">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_OVAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Exaggerated">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Triangle">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_TRIANGLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.NormalSans">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.ObtuseSans">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.PerpendicularSans">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Flared">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_FLARED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Rounded">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_ROUNDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Script">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_SCRIPT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.PerpSans">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_PERP_SANS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSerifStyle.Bone">
            <summary>	
            DWRITE_PANOSE_SERIF_STYLE_BONE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseSpacing">
            <summary>	
            DWRITE_PANOSE_SPACING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSpacing.Any">
            <summary>	
            DWRITE_PANOSE_SPACING_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSpacing.NoFit">
            <summary>	
            DWRITE_PANOSE_SPACING_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSpacing.ProportionalSpaced">
            <summary>	
            DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSpacing.Monospaced">
            <summary>	
            DWRITE_PANOSE_SPACING_MONOSPACED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseStrokeVariation">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.Any">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.NoFit">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.NoVariation">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.GradualDiagonal">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.GradualTransitional">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.GradualVertical">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.GradualHorizontal">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.RapidVertical">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.RapidHorizontal">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.InstantVertical">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseStrokeVariation.InstantHorizontal">
            <summary>	
            DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.Any">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.NoFit">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.NoWidth">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.ExceptionallyWide">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.SuperWide">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.VeryWide">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.Wide">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.Normal">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.Narrow">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolAspectRatio.VeryNarrow">
            <summary>	
            DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseSymbolKind">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Any">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.NoFit">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Montages">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_MONTAGES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Pictures">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_PICTURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Shapes">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_SHAPES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Scientific">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Music">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_MUSIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Expert">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_EXPERT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Patterns">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_PATTERNS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Boarders">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_BOARDERS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Icons">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_ICONS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.Logos">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_LOGOS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbolKind.IndustrySpecific">
            <summary>	
            DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseToolKind">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.Any">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.NoFit">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.FlatNib">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_FLAT_NIB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.PressurePoint">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.Engraved">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_ENGRAVED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.Ball">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_BALL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.Brush">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_BRUSH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.Rough">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_ROUGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.FeltPenBrushTip">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseToolKind.WildBrush">
            <summary>	
            DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseWeight">
            <summary>	
            DWRITE_PANOSE_WEIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Any">
            <summary>	
            DWRITE_PANOSE_WEIGHT_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.NoFit">
            <summary>	
            DWRITE_PANOSE_WEIGHT_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.VeryLight">
            <summary>	
            DWRITE_PANOSE_WEIGHT_VERY_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Light">
            <summary>	
            DWRITE_PANOSE_WEIGHT_LIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Thin">
            <summary>	
            DWRITE_PANOSE_WEIGHT_THIN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Book">
            <summary>	
            DWRITE_PANOSE_WEIGHT_BOOK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Medium">
            <summary>	
            DWRITE_PANOSE_WEIGHT_MEDIUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Demi">
            <summary>	
            DWRITE_PANOSE_WEIGHT_DEMI	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Bold">
            <summary>	
            DWRITE_PANOSE_WEIGHT_BOLD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Heavy">
            <summary>	
            DWRITE_PANOSE_WEIGHT_HEAVY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Black">
            <summary>	
            DWRITE_PANOSE_WEIGHT_BLACK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.ExtraBlack">
            <summary>	
            DWRITE_PANOSE_WEIGHT_EXTRA_BLACK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseWeight.Nord">
            <summary>	
            DWRITE_PANOSE_WEIGHT_NORD	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseXascent">
            <summary>	
            DWRITE_PANOSE_XASCENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXascent.Any">
            <summary>	
            DWRITE_PANOSE_XASCENT_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXascent.NoFit">
            <summary>	
            DWRITE_PANOSE_XASCENT_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXascent.VeryLow">
            <summary>	
            DWRITE_PANOSE_XASCENT_VERY_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXascent.Low">
            <summary>	
            DWRITE_PANOSE_XASCENT_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXascent.Medium">
            <summary>	
            DWRITE_PANOSE_XASCENT_MEDIUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXascent.High">
            <summary>	
            DWRITE_PANOSE_XASCENT_HIGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXascent.VeryHigh">
            <summary>	
            DWRITE_PANOSE_XASCENT_VERY_HIGH	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseXheight">
            <summary>	
            DWRITE_PANOSE_XHEIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.Any">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_ANY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.NoFit">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_NO_FIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.ConstantSmall">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.ConstantStandard">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.ConstantLarge">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.DuckingSmall">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.DuckingStandard">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.DuckingLarge">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.ConstantStd">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_CONSTANT_STD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseXheight.DuckingStd">
            <summary>	
            DWRITE_PANOSE_XHEIGHT_DUCKING_STD	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ParagraphAlignment">
            <summary>	
            DWRITE_PARAGRAPH_ALIGNMENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ParagraphAlignment.Near">
            <summary>	
            DWRITE_PARAGRAPH_ALIGNMENT_NEAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ParagraphAlignment.Far">
            <summary>	
            DWRITE_PARAGRAPH_ALIGNMENT_FAR	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ParagraphAlignment.Center">
            <summary>	
            DWRITE_PARAGRAPH_ALIGNMENT_CENTER	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PixelGeometry">
            <summary>	
            DWRITE_PIXEL_GEOMETRY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PixelGeometry.Flat">
            <summary>	
            DWRITE_PIXEL_GEOMETRY_FLAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PixelGeometry.Rgb">
            <summary>	
            DWRITE_PIXEL_GEOMETRY_RGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PixelGeometry.Bgr">
            <summary>	
            DWRITE_PIXEL_GEOMETRY_BGR	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ReadingDirection">
            <summary>	
            DWRITE_READING_DIRECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ReadingDirection.LeftToRight">
            <summary>	
            DWRITE_READING_DIRECTION_LEFT_TO_RIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ReadingDirection.RightToLeft">
            <summary>	
            DWRITE_READING_DIRECTION_RIGHT_TO_LEFT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ReadingDirection.TopToBottom">
            <summary>	
            DWRITE_READING_DIRECTION_TOP_TO_BOTTOM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ReadingDirection.BottomToTop">
            <summary>	
            DWRITE_READING_DIRECTION_BOTTOM_TO_TOP	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.RenderingMode">
            <summary>	
            DWRITE_RENDERING_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.Default">
            <summary>	
            DWRITE_RENDERING_MODE_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.Aliased">
            <summary>	
            DWRITE_RENDERING_MODE_ALIASED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.GdiClassic">
            <summary>	
            DWRITE_RENDERING_MODE_GDI_CLASSIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.GdiNatural">
            <summary>	
            DWRITE_RENDERING_MODE_GDI_NATURAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.Natural">
            <summary>	
            DWRITE_RENDERING_MODE_NATURAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.NaturalSymmetric">
            <summary>	
            DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.Outline">
            <summary>	
            DWRITE_RENDERING_MODE_OUTLINE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.CleartypeGdiClassic">
            <summary>	
            DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.CleartypeGdiNatural">
            <summary>	
            DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.CleartypeNatural">
            <summary>	
            DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.RenderingMode.CleartypeNaturalSymmetric">
            <summary>	
            DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ScriptJustify">
            <summary>
            Defines glyph characteristic information that an application needs to implement justification.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.None">
            <summary>
            Justification cannot be applied at the glyph.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicBlank">
            <summary>
            The glyph represents a blank in an Arabic run.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.Character">
            <summary>
            An inter-character justification point follows the glyph.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.Blank">
            <summary>
            The glyph represents a blank outside an Arabic run.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicNormal">
            <summary>
            Normal middle-of-word glyph that connects to the right (begin).
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicKashida">
            <summary>
            Kashida (U+0640) in the middle of the word.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicAlef">
            <summary>
            Final form of an alef-like (U+0627, U+0625, U+0623, U+0622).
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicHa">
            <summary>
            Final form of Ha (U+0647).
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicRa">
            <summary>
            Final form of Ra (U+0631).
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicBa">
            <summary>
            Final form of Ba (U+0628).
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicBaRa">
            <summary>
            Ligature of alike (U+0628,U+0631).
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicSeen">
            <summary>
            Highest priority: initial shape of Seen class (U+0633).
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptJustify.ArabicSeenMedial">
            <summary>
            Highest priority: medial shape of Seen class (U+0633).
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ScriptShapes">
            <summary>	
            DWRITE_SCRIPT_SHAPES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptShapes.Default">
            <summary>	
            DWRITE_SCRIPT_SHAPES_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptShapes.NoVisual">
            <summary>	
            DWRITE_SCRIPT_SHAPES_NO_VISUAL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAlignment">
            <summary>	
            DWRITE_TEXT_ALIGNMENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextAlignment.Leading">
            <summary>	
            DWRITE_TEXT_ALIGNMENT_LEADING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextAlignment.Trailing">
            <summary>	
            DWRITE_TEXT_ALIGNMENT_TRAILING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextAlignment.Center">
            <summary>	
            DWRITE_TEXT_ALIGNMENT_CENTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextAlignment.Justified">
            <summary>	
            DWRITE_TEXT_ALIGNMENT_JUSTIFIED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAntialiasMode">
            <summary>	
            DWRITE_TEXT_ANTIALIAS_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextAntialiasMode.Cleartype">
            <summary>	
            DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextAntialiasMode.Grayscale">
            <summary>	
            DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextureType">
            <summary>	
            DWRITE_TEXTURE_TYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextureType.Aliased1x1">
            <summary>	
            DWRITE_TEXTURE_ALIASED_1x1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextureType.Cleartype3x1">
            <summary>	
            DWRITE_TEXTURE_CLEARTYPE_3x1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TrimmingGranularity">
            <summary>	
            DWRITE_TRIMMING_GRANULARITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TrimmingGranularity.None">
            <summary>	
            DWRITE_TRIMMING_GRANULARITY_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TrimmingGranularity.Character">
            <summary>	
            DWRITE_TRIMMING_GRANULARITY_CHARACTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TrimmingGranularity.Word">
            <summary>	
            DWRITE_TRIMMING_GRANULARITY_WORD	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.VerticalGlyphOrientation">
            <summary>	
            DWRITE_VERTICAL_GLYPH_ORIENTATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.VerticalGlyphOrientation.Default">
            <summary>	
            DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.VerticalGlyphOrientation.Stacked">
            <summary>	
            DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.WordWrapping">
            <summary>	
            DWRITE_WORD_WRAPPING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.WordWrapping.Wrap">
            <summary>	
            DWRITE_WORD_WRAPPING_WRAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.WordWrapping.NoWrap">
            <summary>	
            DWRITE_WORD_WRAPPING_NO_WRAP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.WordWrapping.EmergencyBreak">
            <summary>	
            DWRITE_WORD_WRAPPING_EMERGENCY_BREAK	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.WordWrapping.WholeWord">
            <summary>	
            DWRITE_WORD_WRAPPING_WHOLE_WORD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.WordWrapping.Character">
            <summary>	
            DWRITE_WORD_WRAPPING_CHARACTER	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.DWrite">
            <summary>
            DirectWrite functions.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.DWrite.CreateFactory(C1.Util.DX.DirectWrite.FactoryType,System.Guid,C1.Util.DX.ComObject)">
            <summary>	
            HRESULT DWriteCreateFactory([In] DWRITE_FACTORY_TYPE factoryType,[In] const GUID&amp; iid,[Out, Fast] IUnknown** factory)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ResultCode">
            <summary>	
            DirectWrite result codes.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.FileFormat">
            <summary>
            DWRITE_E_FILEFORMAT
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.Unexpected">
            <summary>
            DWRITE_E_UNEXPECTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.NoFont">
            <summary>
            DWRITE_E_NOFONT
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.FileNotFound">
            <summary>
            DWRITE_E_FILENOTFOUND
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.FileAccess">
            <summary>
            DWRITE_E_FILEACCESS
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.FontCollectionObsolete">
            <summary>
            DWRITE_E_FONTCOLLECTIONOBSOLETE
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.AlreadyRegistered">
            <summary>
            DWRITE_E_ALREADYREGISTERED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.CacheFormat">
            <summary>
            DWRITE_E_CACHEFORMAT
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.CacheVersion">
            <summary>
            DWRITE_E_CACHEVERSION
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ResultCode.UnsupportedOperation">
            <summary>
            DWRITE_E_UNSUPPORTEDOPERATION
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.BitmapRenderTarget1">
            <summary>	
            IDWriteBitmapRenderTarget1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.BitmapRenderTarget1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget1.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.BitmapRenderTarget1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.BitmapRenderTarget1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget1.GetTextAntialiasMode">
            <summary>	
            DWRITE_TEXT_ANTIALIAS_MODE IDWriteBitmapRenderTarget1::GetTextAntialiasMode()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.BitmapRenderTarget1.SetTextAntialiasMode(C1.Util.DX.DirectWrite.TextAntialiasMode)">
            <summary>	
            HRESULT IDWriteBitmapRenderTarget1::SetTextAntialiasMode([In] DWRITE_TEXT_ANTIALIAS_MODE antialiasMode)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator">
            <summary>
            IDWriteColorGlyphRunEnumerator
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator.MoveNext">
            <summary>
            HRESULT MoveNext([out] BOOL* haveRun)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.ColorGlyphRunEnumerator.GetCurrentRun">
            <summary>
            HRESULT GetCurrentRun([out] DWRITE_COLOR_GLYPH_RUN** colorGlyphRun)
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Font">
            <summary>	
            IDWriteFont	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Font"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.Font">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.Font"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetFontFamily">
            <summary>	
            HRESULT IDWriteFont::GetFontFamily([Out] IDWriteFontFamily** fontFamily)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetWeight">
            <summary>	
            DWRITE_FONT_WEIGHT IDWriteFont::GetWeight()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetStretch">
            <summary>	
            DWRITE_FONT_STRETCH IDWriteFont::GetStretch()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetStyle">
            <summary>	
            DWRITE_FONT_STYLE IDWriteFont::GetStyle()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.IsSymbolFont">
            <summary>	
            BOOL IDWriteFont::IsSymbolFont()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetFaceNames">
            <summary>	
            HRESULT IDWriteFont::GetFaceNames([Out] IDWriteLocalizedStrings** names)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetInformationalStrings(C1.Util.DX.DirectWrite.InformationalStringId,C1.Util.DX.DirectWrite.LocalizedStrings@)">
            <summary>	
            HRESULT IDWriteFont::GetInformationalStrings([In] DWRITE_INFORMATIONAL_STRING_ID informationalStringID,[Out] IDWriteLocalizedStrings** informationalStrings,[Out] BOOL* exists)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetSimulations">
            <summary>	
            DWRITE_FONT_SIMULATIONS IDWriteFont::GetSimulations()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.GetMetrics(C1.Util.DX.DirectWrite.FontMetrics@)">
            <summary>	
            void IDWriteFont::GetMetrics([Out] DWRITE_FONT_METRICS* fontMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.HasCharacter(System.Int32)">
            <summary>	
            HRESULT IDWriteFont::HasCharacter([In] unsigned int unicodeValue,[Out] BOOL* exists)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font.CreateFontFace">
            <summary>	
            HRESULT IDWriteFont::CreateFontFace([Out, Fast] IDWriteFontFace** fontFace)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.Font.Metrics">
            <summary>	
            GetMetrics	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Font1">
            <summary>	
            IDWriteFont1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.Font1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font1.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.Font1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.Font1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font1.GetMetrics(C1.Util.DX.DirectWrite.FontMetrics1@)">
            <summary>	
            void IDWriteFont1::GetMetrics([Out] DWRITE_FONT_METRICS1* fontMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font1.GetPanose(C1.Util.DX.DirectWrite.Panose@)">
            <summary>	
            void IDWriteFont1::GetPanose([Out] DWRITE_PANOSE* panose)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font1.GetUnicodeRanges(System.Int32,C1.Util.DX.DirectWrite.UnicodeRange[])">
            <summary>	
            HRESULT IDWriteFont1::GetUnicodeRanges([In] unsigned int maxRangeCount,[Out, Buffer, Optional] DWRITE_UNICODE_RANGE* unicodeRanges,[Out] unsigned int* actualRangeCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.Font1.IsMonospacedFont">
            <summary>	
            BOOL IDWriteFont1::IsMonospacedFont()	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.Font1.Metrics">
            <summary>	
            GetMetrics	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.Font1.Panose">
            <summary>	
            GetPanose	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontCollectionLoader">
            <summary>	
            IDWriteFontCollectionLoader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontCollectionLoader.CreateEnumeratorFromKey(C1.Util.DX.DirectWrite.Factory,C1.Util.DX.DataPointer)">
            <summary>	
            Creates a font file enumerator object that encapsulates a collection of font files. The font system calls back to this interface to create a font collection. 	
            </summary>	
            <param name="factory">Pointer to the <see cref="T:C1.Util.DX.DirectWrite.Factory"/> object that was used to create the current font collection. </param>
            <param name="collectionKey">A font collection key that uniquely identifies the collection of font files within the scope of the font collection loader being used. The buffer allocated for this key must be at least  the size, in bytes, specified by collectionKeySize.</param>
            <returns>a reference to the newly created font file enumerator.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFace1">
            <summary>	
            IDWriteFontFace1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFace1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFace1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFace1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetMetrics(C1.Util.DX.DirectWrite.FontMetrics1@)">
            <summary>	
            void IDWriteFontFace1::GetMetrics([Out] DWRITE_FONT_METRICS1* fontMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetGdiCompatibleMetrics(System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.DirectWrite.FontMetrics1@)">
            <summary>	
            HRESULT IDWriteFontFace1::GetGdiCompatibleMetrics([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[Out] DWRITE_FONT_METRICS1* fontMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetCaretMetrics(C1.Util.DX.DirectWrite.CaretMetrics@)">
            <summary>	
            void IDWriteFontFace1::GetCaretMetrics([Out] DWRITE_CARET_METRICS* caretMetrics)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetUnicodeRanges(System.Int32,C1.Util.DX.DirectWrite.UnicodeRange[])">
            <summary>	
            HRESULT IDWriteFontFace1::GetUnicodeRanges([In] unsigned int maxRangeCount,[Out, Buffer, Optional] DWRITE_UNICODE_RANGE* unicodeRanges,[Out] unsigned int* actualRangeCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.IsMonospacedFont">
            <summary>	
            BOOL IDWriteFontFace1::IsMonospacedFont()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetDesignGlyphAdvances(System.Int32,System.Int16[],System.Int32[],C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDWriteFontFace1::GetDesignGlyphAdvances([In] unsigned int glyphCount,[In, Buffer] const unsigned short* glyphIndices,[Out, Buffer] int* glyphAdvances,[In] BOOL isSideways)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetGdiCompatibleGlyphAdvances(System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.Bool,C1.Util.DX.Bool,System.Int32,System.Int16[],System.Int32[])">
            <summary>	
            HRESULT IDWriteFontFace1::GetGdiCompatibleGlyphAdvances([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[In] BOOL isSideways,[In] unsigned int glyphCount,[In, Buffer] const unsigned short* glyphIndices,[Out, Buffer] int* glyphAdvances)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetKerningPairAdjustments(System.Int32,System.Int16[],System.Int32[])">
            <summary>	
            HRESULT IDWriteFontFace1::GetKerningPairAdjustments([In] unsigned int glyphCount,[In, Buffer] const unsigned short* glyphIndices,[Out, Buffer] int* glyphAdvanceAdjustments)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.HasKerningPairs">
            <summary>	
            BOOL IDWriteFontFace1::HasKerningPairs()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFace1.GetRecommendedRenderingMode(System.Single,System.Single,System.Single,System.Nullable{C1.Util.DX.Matrix3x2},C1.Util.DX.Bool,C1.Util.DX.DirectWrite.OutlineThreshold,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>	
            HRESULT IDWriteFontFace1::GetRecommendedRenderingMode([In] float fontEmSize,[In] float dpiX,[In] float dpiY,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL isSideways,[In] DWRITE_OUTLINE_THRESHOLD outlineThreshold,[In] DWRITE_MEASURING_MODE measuringMode,[Out] DWRITE_RENDERING_MODE* renderingMode)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.FontFace1.Metrics">
            <summary>	
            GetMetrics	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.FontFace1.CaretMetrics">
            <summary>	
            GetCaretMetrics	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFamily">
            <summary>	
            IDWriteFontFamily	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontList">
            <summary>	
            IDWriteFontList	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontList.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontList"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontList.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontList">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontList"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontList.GetFontCollection">
            <summary>	
            HRESULT IDWriteFontList::GetFontCollection([Out] IDWriteFontCollection** fontCollection)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontList.GetFontCount">
            <summary>	
            unsigned int IDWriteFontList::GetFontCount()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontList.GetFont(System.Int32)">
            <summary>	
            HRESULT IDWriteFontList::GetFont([In] unsigned int index,[Out] IDWriteFont** font)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFamily.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFamily"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFamily.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.FontFamily">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.FontFamily"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFamily.GetFamilyNames">
            <summary>	
            HRESULT IDWriteFontFamily::GetFamilyNames([Out] IDWriteLocalizedStrings** names)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFamily.GetFirstMatchingFont(C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStretch,C1.Util.DX.DirectWrite.FontStyle)">
            <summary>	
            HRESULT IDWriteFontFamily::GetFirstMatchingFont([In] DWRITE_FONT_WEIGHT weight,[In] DWRITE_FONT_STRETCH stretch,[In] DWRITE_FONT_STYLE style,[Out] IDWriteFont** matchingFont)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFamily.GetMatchingFonts(C1.Util.DX.DirectWrite.FontWeight,C1.Util.DX.DirectWrite.FontStretch,C1.Util.DX.DirectWrite.FontStyle)">
            <summary>	
            HRESULT IDWriteFontFamily::GetMatchingFonts([In] DWRITE_FONT_WEIGHT weight,[In] DWRITE_FONT_STRETCH stretch,[In] DWRITE_FONT_STYLE style,[Out] IDWriteFontList** matchingFonts)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFileEnumerator">
            <summary>	
            IDWriteFontFileEnumerator	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFileEnumerator.MoveNext">
            <summary>	
            Advances to the next font file in the collection. When it is first created, the enumerator is positioned before the first element of the collection and the first call to MoveNext advances to the first file. 	
            </summary>	
            <returns>the value TRUE if the enumerator advances to a file; otherwise, FALSE if the enumerator advances past the last file in the collection.</returns>
        </member>
        <member name="P:C1.Util.DX.DirectWrite.FontFileEnumerator.CurrentFontFile">
            <summary>	
            Gets a reference to the current font file. 	
            </summary>	
            <returns>a reference to the newly created <see cref="T:C1.Util.DX.DirectWrite.FontFile"/> object.</returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.RenderingParams1">
            <summary>	
            IDWriteRenderingParams1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.RenderingParams1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams1.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.RenderingParams1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.RenderingParams1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams1.GetGrayscaleEnhancedContrast">
            <summary>	
            float IDWriteRenderingParams1::GetGrayscaleEnhancedContrast()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.RenderingParams2">
            <summary>
            IDWriteRenderingParams2
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.RenderingParams2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams2.op_Explicit(System.IntPtr)~C1.Util.DX.DirectWrite.RenderingParams2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DirectWrite.RenderingParams2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.RenderingParams2.GetGridFitMode">
            <summary>
            DWRITE_GRID_FIT_MODE GetGridFitMode()
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSink">
            <summary>	
            IDWriteTextAnalysisSink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSink.SetScriptAnalysis(System.Int32,System.Int32,C1.Util.DX.DirectWrite.ScriptAnalysis)">
            <summary>	
            Reports script analysis for the specified text range.	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="scriptAnalysis">A reference to a structure that contains a zero-based index representation of a writing system script and a value indicating whether additional shaping of text is required. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSink.SetLineBreakpoints(System.Int32,System.Int32,C1.Util.DX.DirectWrite.LineBreakpoint[])">
            <summary>	
            Sets line-break opportunities for each character, starting from the specified position.	
            </summary>	
            <param name="textPosition">The starting text position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="lineBreakpoints">A reference to a structure that contains breaking conditions set for each character from the starting position to the end of the specified range. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSink.SetBidiLevel(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>	
            Sets a bidirectional level on the range, which is  called once per  run change (either explicit or resolved implicit).	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="explicitLevel">The explicit level from the paragraph reading direction and any embedded control codes RLE/RLO/LRE/LRO/PDF, which is determined before any additional rules. </param>
            <param name="resolvedLevel">The final implicit level considering the explicit level and characters' natural directionality, after all Bidi rules have been applied. </param>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSink.SetNumberSubstitution(System.Int32,System.Int32,C1.Util.DX.DirectWrite.NumberSubstitution)">
            <summary>	
            Sets the number substitution on the text range affected by the text analysis.	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="numberSubstitution">An object that holds the appropriate digits and numeric punctuation for a given locale. Use <see cref="M:C1.Util.DX.DirectWrite.Factory.CreateNumberSubstitution(C1.Util.DX.DirectWrite.NumberSubstitutionMethod,System.String,C1.Util.DX.Bool)"/> to create this object. </param>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSink1">
            <summary>	
            IDWriteTextAnalysisSink1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSink1.SetGlyphOrientation(System.Int32,System.Int32,C1.Util.DX.DirectWrite.GlyphOrientationAngle,System.Byte,C1.Util.DX.Bool,C1.Util.DX.Bool)">
            <summary>	
            The text analyzer calls back to this to report the actual orientation of each character for shaping and drawing.
            </summary>	
            <param name="textPosition">The starting position to report from.</param>	
            <param name="textLength">Number of UTF-16 units of the reported range.</param>	
            <param name="glyphOrientationAngle">A <strong><see cref="T:C1.Util.DX.DirectWrite.GlyphOrientationAngle"/></strong>-typed value that specifies the angle of the glyphs within the text range (pass to <strong><see cref="M:C1.Util.DX.DirectWrite.TextAnalyzer1.GetGlyphOrientationTransform(C1.Util.DX.DirectWrite.GlyphOrientationAngle,C1.Util.DX.Bool,C1.Util.DX.Matrix3x2@)"/></strong> to get the world relative transform).</param>	
            <param name="adjustedBidiLevel">The adjusted bidi level to be used by the client layout for reordering runs. This will differ from the resolved bidi level retrieved from the source for cases such as Arabic stacked top-to-bottom, where the glyphs are still shaped as RTL, but the runs are TTB along with any CJK or Latin.</param>	
            <param name="isSideways">Whether the glyphs are rotated on their side, which is the default case for CJK and the case stacked Latin</param>	
            <param name="isRightToLeft">Whether the script should be shaped as right-to-left. For Arabic stacked top-to-bottom, even when the adjusted bidi level is coerced to an even level, this will still be true.</param>	
            <returns>Returns a successful code or an error code to abort analysis.</returns>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSink">
            <summary>	
            IDWriteTextAnalysisSink	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSink.SetScriptAnalysis(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            Reports script analysis for the specified text range.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSink.SetLineBreakpoints(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            Sets line-break opportunities for each character, starting from the specified position.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSink.SetBidiLevel(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>	
            Sets a bidirectional level on the range, which is  called once per  run change (either explicit or resolved implicit).	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSink.SetNumberSubstitution(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            Sets the number substitution on the text range affected by the text analysis.	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSink1">
            <summary>	
            IDWriteTextAnalysisSink1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSink1.SetGlyphOrientation(System.Int32,System.Int32,C1.Util.DX.DirectWrite.GlyphOrientationAngle,System.Byte,C1.Util.DX.Bool,C1.Util.DX.Bool)">
            <summary>	
            The text analyzer calls back to this to report the actual orientation of each character for shaping and drawing.
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSource">
            <summary>	
            IDWriteTextAnalysisSource	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSource.GetTextAtPosition(System.Int32)">
            <summary>	
            Gets a block of text starting at the specified text position. 	
            </summary>	
            <remarks>	
            Returning NULL indicates the end of text, which is the position after the last character. This function is called iteratively for each consecutive block, tying together several fragmented blocks in the backing store into a virtual contiguous string. Although applications can implement sparse textual content that  maps only part of the backing store, the application must map any text that is in the range passed to any analysis functions. 	
            </remarks>	
            <param name="textPosition">The first position of the piece to obtain. All positions are in UTF16 code units, not whole characters, which matters when supplementary characters are used. </param>      
            <returns>a block of text </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSource.GetTextBeforePosition(System.Int32)">
            <summary>	
            Gets a block of text immediately preceding the specified position.	
            </summary>	
            <remarks>	
            NULL indicates no chunk available at the specified position, either because textPosition equals 0,  textPosition is greater than the entire text content length, or the queried position is not mapped into the application's backing store. Although applications can implement sparse textual content that  maps only part of the backing store, the application must map any text that is in the range passed to any analysis functions. 	
            </remarks>	
            <param name="textPosition">The position immediately after the last position of the block of text to obtain. </param>
            <returns>text immediately preceding the specified position </returns>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSource.GetLocaleName(System.Int32,System.Int32@)">
            <summary>
            Gets the locale name on the range affected by the text analysis.
            </summary>
            <param name="textPosition">The text position to examine.</param>
            <param name="textLength">Contains the length of the text being affected by the text analysis up to the next differing locale.</param>
            <returns>
            the locale name on the range affected by the text analysis
            </returns>
            <remarks>
            The localeName reference must remain valid until the next call or until the analysis returns.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSource.GetNumberSubstitution(System.Int32,System.Int32@)">
            <summary>	
            Gets the number substitution from the text range affected by the text analysis.	
            </summary>	
            <remarks>	
            Any implementation should return the number substitution with an incremented reference count, and the analysis will release when finished with it (either before the next call or before it returns). However, the sink callback may hold onto it after that. 	
            </remarks>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">Contains the length of the text, in characters, remaining in the text range up to the next differing number substitution. </param>
            <returns>the number substitution from the text range affected by the text analysis.</returns>
        </member>
        <member name="P:C1.Util.DX.DirectWrite.TextAnalysisSource.ReadingDirection">
            <summary>	
            Gets the paragraph reading direction.	
            </summary>	
            <returns>The reading direction of the current paragraph. </returns>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisSource1">
            <summary>	
            IDWriteTextAnalysisSource1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisSource1.GetVerticalGlyphOrientation(System.Int32,System.Int32@,C1.Util.DX.DirectWrite.VerticalGlyphOrientation@,System.Byte@)">
            <summary>	
            Used by the text analyzer to obtain the desired glyph orientation and resolved bidi level.
            </summary>	
            <param name="textPosition">The text position.</param>	
            <param name="textLength">A reference to the text length.</param>	
            <param name="glyphOrientation">A <strong><see cref="T:C1.Util.DX.DirectWrite.VerticalGlyphOrientation"/></strong>-typed value that specifies the desired kind of glyph orientation for the text.</param>	
            <param name="bidiLevel">A reference to the resolved bidi level.</param>	
            <remarks>	
            The text analyzer calls back to this to get the desired glyph orientation and resolved bidi level, which it uses along with the script properties of the text to determine the actual orientation of each character, which it reports back to the client via the sink SetGlyphOrientation method.
            </remarks>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSource">
            <summary>	
            IDWriteTextAnalysisSource	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSource.GetTextAtPosition(System.Int32,System.IntPtr@,System.Int32@)">
            <summary>	
            Gets a block of text starting at the specified text position. 	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSource.GetTextBeforePosition(System.Int32,System.IntPtr@,System.Int32@)">
            <summary>	
            Gets a block of text immediately preceding the specified position.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSource.GetParagraphReadingDirection">
            <summary>	
            Gets the paragraph reading direction.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSource.GetLocaleName(System.Int32,System.Int32@,System.IntPtr@)">
            <summary>
            Gets the locale name on the range affected by the text analysis.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSource.GetNumberSubstitution(System.Int32,System.Int32@,System.IntPtr@)">
            <summary>	
            Gets the number substitution from the text range affected by the text analysis.
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextAnalysisQuickSource1">
            <summary>	
            IDWriteTextAnalysisSource1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextAnalysisQuickSource1.GetVerticalGlyphOrientation(System.Int32,System.Int32@,C1.Util.DX.DirectWrite.VerticalGlyphOrientation@,System.Byte@)">
            <summary>	
            Used by the text analyzer to obtain the desired glyph orientation and resolved bidi level.
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.CaretMetrics">
            <summary>	
            DWRITE_CARET_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.CaretMetrics.SlopeRise">
            <summary>	
            short slopeRise	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.CaretMetrics.SlopeRun">
            <summary>	
            short slopeRun	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.CaretMetrics.Offset">
            <summary>	
            short offset	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ClusterMetrics">
            <summary>	
            DWRITE_CLUSTER_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ClusterMetrics.Width">
            <summary>	
            float width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ClusterMetrics.Length">
            <summary>	
            unsigned short length	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ClusterMetrics.CanWrapLineAfter">
            <summary>	
            unsigned short canWrapLineAfter	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ClusterMetrics.IsWhitespace">
            <summary>	
            unsigned short isWhitespace	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ClusterMetrics.IsNewline">
            <summary>	
            unsigned short isNewline	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ClusterMetrics.IsSoftHyphen">
            <summary>	
            unsigned short isSoftHyphen	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ClusterMetrics.IsRightToLeft">
            <summary>	
            unsigned short isRightToLeft	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ClusterMetrics.Padding">
            <summary>	
            unsigned short padding	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ColorGlyphRun">
            <summary>
            DWRITE_COLOR_GLYPH_RUN
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.FontSize">
            <summary>	
            float fontEmSize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.GlyphCount">
            <summary>	
            unsigned int glyphCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.IsSideways">
            <summary>	
            BOOL isSideways	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.BidiLevel">
            <summary>	
            unsigned int bidiLevel	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.FontFace">
            <summary>
            Gets or sets the <see cref="F:C1.Util.DX.DirectWrite.ColorGlyphRun.FontFace"/> associated with this GlypRun.
            </summary>
            <value>The font face.</value>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.Indices">
            <summary>
            An array of glyph indices. This array contains <see cref="F:C1.Util.DX.DirectWrite.ColorGlyphRun.GlyphCount"/> elements.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.Advances">
            <summary>
            An optional array of glyph advances. This array could be null or contains <see cref="F:C1.Util.DX.DirectWrite.ColorGlyphRun.GlyphCount"/> elements.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.Offsets">
            <summary>
            An optional array of glyph offsets. This array could be null or contains <see cref="F:C1.Util.DX.DirectWrite.ColorGlyphRun.GlyphCount"/> elements.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.GlyphRunDescription">
            <summary>
            Optional glyph run description.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.BaselineOriginX">
            <summary>
            X-coordinate at which to draw this glyph run.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.BaselineOriginY">
            <summary>
            Y-coordinate at which to draw this glyph run.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.RunColor">
            <summary>
            Color to use for this layer, if any.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ColorGlyphRun.PaletteIndex">
            <summary>
            Zero-based index of this layer's color entry in the current color
            palette, or -1 if this layer is to be rendered using 
            the current foreground brush.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.ColorGlyphRun.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontFeature">
            <summary>	
            DWRITE_FONT_FEATURE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeature.NameTag">
            <summary>	
            DWRITE_FONT_FEATURE_TAG nameTag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontFeature.Parameter">
            <summary>	
            unsigned int parameter	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.FontFeature.#ctor(C1.Util.DX.DirectWrite.FontFeatureTag,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.FontFeature"/> struct.
            </summary>
            <param name="nameTag">The name tag.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontMetrics">
            <summary>	
            DWRITE_FONT_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.DesignUnitsPerEm">
            <summary>	
            unsigned short designUnitsPerEm	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.Ascent">
            <summary>	
            unsigned short ascent	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.Descent">
            <summary>	
            unsigned short descent	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.LineGap">
            <summary>	
            short lineGap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.CapHeight">
            <summary>	
            unsigned short capHeight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.XHeight">
            <summary>	
            unsigned short xHeight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.UnderlinePosition">
            <summary>	
            short underlinePosition	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.UnderlineThickness">
            <summary>	
            unsigned short underlineThickness	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.StrikethroughPosition">
            <summary>	
            short strikethroughPosition	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics.StrikethroughThickness">
            <summary>	
            unsigned short strikethroughThickness	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.FontMetrics1">
            <summary>	
            DWRITE_FONT_METRICS1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.GlyphBoxLeft">
            <summary>	
            short glyphBoxLeft	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.GlyphBoxTop">
            <summary>	
            short glyphBoxTop	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.GlyphBoxRight">
            <summary>	
            short glyphBoxRight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.GlyphBoxBottom">
            <summary>	
            short glyphBoxBottom	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SubscriptPositionX">
            <summary>	
            short subscriptPositionX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SubscriptPositionY">
            <summary>	
            short subscriptPositionY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SubscriptSizeX">
            <summary>	
            short subscriptSizeX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SubscriptSizeY">
            <summary>	
            short subscriptSizeY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SuperscriptPositionX">
            <summary>	
            short superscriptPositionX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SuperscriptPositionY">
            <summary>	
            short superscriptPositionY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SuperscriptSizeX">
            <summary>	
            short superscriptSizeX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.SuperscriptSizeY">
            <summary>	
            short superscriptSizeY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.FontMetrics1.HasTypographicMetrics">
            <summary>	
            BOOL hasTypographicMetrics	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GlyphMetrics">
            <summary>	
            DWRITE_GLYPH_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphMetrics.LeftSideBearing">
            <summary>	
            int leftSideBearing	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphMetrics.AdvanceWidth">
            <summary>	
            unsigned int advanceWidth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphMetrics.RightSideBearing">
            <summary>	
            int rightSideBearing	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphMetrics.TopSideBearing">
            <summary>	
            int topSideBearing	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphMetrics.AdvanceHeight">
            <summary>	
            unsigned int advanceHeight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphMetrics.BottomSideBearing">
            <summary>	
            int bottomSideBearing	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphMetrics.VerticalOriginY">
            <summary>	
            int verticalOriginY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GlyphOffset">
            <summary>	
            DWRITE_GLYPH_OFFSET	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphOffset.AdvanceOffset">
            <summary>	
            float advanceOffset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphOffset.AscenderOffset">
            <summary>	
            float ascenderOffset	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GlyphRun">
            <summary>	
            DWRITE_GLYPH_RUN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.FontSize">
            <summary>	
            float fontEmSize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.GlyphCount">
            <summary>	
            unsigned int glyphCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.IsSideways">
            <summary>	
            BOOL isSideways	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.BidiLevel">
            <summary>	
            unsigned int bidiLevel	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.FontFace">
            <summary>
            Gets or sets the <see cref="F:C1.Util.DX.DirectWrite.GlyphRun.FontFace"/> associated with this GlypRun.
            </summary>
            <value>The font face.</value>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.Indices">
            <summary>
            An array of glyph indices. This array contains <see cref="F:C1.Util.DX.DirectWrite.GlyphRun.GlyphCount"/> elements.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.Advances">
            <summary>
            An optional array of glyph advances. This array could be null or contains <see cref="F:C1.Util.DX.DirectWrite.GlyphRun.GlyphCount"/> elements.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRun.Offsets">
            <summary>
            An optional array of glyph offsets. This array could be null or contains <see cref="F:C1.Util.DX.DirectWrite.GlyphRun.GlyphCount"/> elements.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DirectWrite.GlyphRun.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.GlyphRunDescription">
            <summary>	
            DWRITE_GLYPH_RUN_DESCRIPTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRunDescription.LocaleName">
            <summary>	
            const wchar_t* localeName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRunDescription.Text">
            <summary>	
            const wchar_t* string	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRunDescription.TextLength">
            <summary>	
            unsigned int stringLength	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRunDescription.ClusterMap">
            <summary>	
            const unsigned short* clusterMap	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.GlyphRunDescription.TextPosition">
            <summary>	
            unsigned int textPosition	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.HitTestMetrics">
            <summary>	
            DWRITE_HIT_TEST_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.TextPosition">
            <summary>	
            unsigned int textPosition	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.Length">
            <summary>	
            unsigned int length	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.Left">
            <summary>	
            float left	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.Top">
            <summary>	
            float top	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.Width">
            <summary>	
            float width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.Height">
            <summary>	
            float height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.BidiLevel">
            <summary>	
            unsigned int bidiLevel	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.IsText">
            <summary>	
            BOOL isText	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.HitTestMetrics.IsTrimmed">
            <summary>	
            BOOL isTrimmed	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.InlineObjectMetrics">
            <summary>	
            DWRITE_INLINE_OBJECT_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InlineObjectMetrics.Width">
            <summary>	
            float width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InlineObjectMetrics.Height">
            <summary>	
            float height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InlineObjectMetrics.Baseline">
            <summary>	
            float baseline	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.InlineObjectMetrics.SupportsSideways">
            <summary>	
            BOOL supportsSideways	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.JustificationOpportunity">
            <summary>	
            DWRITE_JUSTIFICATION_OPPORTUNITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.JustificationOpportunity.ExpansionMinimum">
            <summary>	
            float expansionMinimum	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.JustificationOpportunity.ExpansionMaximum">
            <summary>	
            float expansionMaximum	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.JustificationOpportunity.CompressionMaximum">
            <summary>	
            float compressionMaximum	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.JustificationOpportunity.ExpansionPriority">
            <summary>	
            unsigned int expansionPriority	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.JustificationOpportunity.CompressionPriority">
            <summary>	
            unsigned int compressionPriority	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.JustificationOpportunity.AllowResidualExpansion">
            <summary>	
            unsigned int allowResidualExpansion	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.JustificationOpportunity.AllowResidualCompression">
            <summary>	
            unsigned int allowResidualCompression	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.JustificationOpportunity.ApplyToLeadingEdge">
            <summary>	
            unsigned int applyToLeadingEdge	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.JustificationOpportunity.ApplyToTrailingEdge">
            <summary>	
            unsigned int applyToTrailingEdge	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.JustificationOpportunity.Reserved">
            <summary>	
            unsigned int reserved	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.LineBreakpoint">
            <summary>	
            DWRITE_LINE_BREAKPOINT	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.LineBreakpoint.BreakConditionBefore">
            <summary>
            Indicates a breaking condition before the character. 	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.LineBreakpoint.BreakConditionAfter">
            <summary>	
            Indicates a breaking condition after the character. 	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.LineBreakpoint.IsWhitespace">
            <summary>	
            unsigned char isWhitespace	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.LineBreakpoint.IsSoftHyphen">
            <summary>	
            unsigned char isSoftHyphen	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.LineBreakpoint.Padding">
            <summary>	
            unsigned char padding	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.LineMetrics">
            <summary>	
            DWRITE_LINE_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineMetrics.Length">
            <summary>	
            unsigned int length	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineMetrics.TrailingWhitespaceLength">
            <summary>	
            unsigned int trailingWhitespaceLength	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineMetrics.NewlineLength">
            <summary>	
            unsigned int newlineLength	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineMetrics.Height">
            <summary>	
            float height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineMetrics.Baseline">
            <summary>	
            float baseline	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.LineMetrics.IsTrimmed">
            <summary>	
            BOOL isTrimmed	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.OverhangMetrics">
            <summary>	
            DWRITE_OVERHANG_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.OverhangMetrics.Left">
            <summary>	
            float left	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.OverhangMetrics.Top">
            <summary>	
            float top	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.OverhangMetrics.Right">
            <summary>	
            float right	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.OverhangMetrics.Bottom">
            <summary>	
            float bottom	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Panose">
            <summary>	
            DWRITE_PANOSE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Panose.FamilyKind">
            <summary>	
            unsigned char familyKind	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Panose.Text">
            <summary>	
            DWRITE_PANOSE_INNER_0 text	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Panose.Script">
            <summary>	
            DWRITE_PANOSE_INNER_1 script	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Panose.Decorative">
            <summary>	
            DWRITE_PANOSE_INNER_2 decorative	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Panose.Symbol">
            <summary>	
            DWRITE_PANOSE_INNER_3 symbol	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.Panose.Values">
            <summary>	
            unsigned char values[10]	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseDecorative">
            <summary>	
            DWRITE_PANOSE_INNER_2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.FamilyKind">
            <summary>	
            unsigned char familyKind	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.DecorativeClass">
            <summary>	
            unsigned char decorativeClass	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.Weight">
            <summary>	
            unsigned char weight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.Aspect">
            <summary>	
            unsigned char aspect	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.Contrast">
            <summary>	
            unsigned char contrast	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.SerifVariant">
            <summary>	
            unsigned char serifVariant	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.Fill">
            <summary>	
            unsigned char fill	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.Lining">
            <summary>	
            unsigned char lining	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.DecorativeTopology">
            <summary>	
            unsigned char decorativeTopology	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseDecorative.CharacterRange">
            <summary>	
            unsigned char characterRange	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseScript">
            <summary>	
            DWRITE_PANOSE_INNER_1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.FamilyKind">
            <summary>	
            unsigned char familyKind	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.ToolKind">
            <summary>	
            unsigned char toolKind	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.Weight">
            <summary>	
            unsigned char weight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.Spacing">
            <summary>	
            unsigned char spacing	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.AspectRatio">
            <summary>	
            unsigned char aspectRatio	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.Contrast">
            <summary>	
            unsigned char contrast	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.ScriptTopology">
            <summary>	
            unsigned char scriptTopology	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.ScriptForm">
            <summary>	
            unsigned char scriptForm	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.Finials">
            <summary>	
            unsigned char finials	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseScript.XAscent">
            <summary>	
            unsigned char xAscent	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseSymbol">
            <summary>	
            DWRITE_PANOSE_INNER_3	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.FamilyKind">
            <summary>	
            unsigned char familyKind	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.SymbolKind">
            <summary>	
            unsigned char symbolKind	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.Weight">
            <summary>	
            unsigned char weight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.Spacing">
            <summary>	
            unsigned char spacing	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.AspectRatioAndContrast">
            <summary>	
            unsigned char aspectRatioAndContrast	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.AspectRatio94">
            <summary>	
            unsigned char aspectRatio94	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.AspectRatio119">
            <summary>	
            unsigned char aspectRatio119	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.AspectRatio157">
            <summary>	
            unsigned char aspectRatio157	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.AspectRatio163">
            <summary>	
            unsigned char aspectRatio163	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseSymbol.AspectRatio211">
            <summary>	
            unsigned char aspectRatio211	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.PanoseText">
            <summary>	
            DWRITE_PANOSE_INNER_0	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.FamilyKind">
            <summary>	
            unsigned char familyKind	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.SerifStyle">
            <summary>	
            unsigned char serifStyle	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.Weight">
            <summary>	
            unsigned char weight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.Proportion">
            <summary>	
            unsigned char proportion	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.Contrast">
            <summary>	
            unsigned char contrast	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.StrokeVariation">
            <summary>	
            unsigned char strokeVariation	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.ArmStyle">
            <summary>	
            unsigned char armStyle	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.Letterform">
            <summary>	
            unsigned char letterform	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.Midline">
            <summary>	
            unsigned char midline	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.PanoseText.XHeight">
            <summary>	
            unsigned char xHeight	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ScriptAnalysis">
            <summary>	
            DWRITE_SCRIPT_ANALYSIS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptAnalysis.Script">
            <summary>	
            unsigned short script	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptAnalysis.Shapes">
            <summary>	
            DWRITE_SCRIPT_SHAPES shapes	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ScriptProperties">
            <summary>	
            DWRITE_SCRIPT_PROPERTIES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptProperties.IsoScriptCode">
            <summary>	
            unsigned int isoScriptCode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptProperties.IsoScriptNumber">
            <summary>	
            unsigned int isoScriptNumber	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptProperties.ClusterLookahead">
            <summary>	
            unsigned int clusterLookahead	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.ScriptProperties.JustificationCharacter">
            <summary>	
            unsigned int justificationCharacter	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.RestrictCaretToClusters">
            <summary>	
            unsigned int restrictCaretToClusters	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.UsesWordDividers">
            <summary>	
            unsigned int usesWordDividers	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.IsDiscreteWriting">
            <summary>	
            unsigned int isDiscreteWriting	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.IsBlockWriting">
            <summary>	
            unsigned int isBlockWriting	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.IsDistributedWithinCluster">
            <summary>	
            unsigned int isDistributedWithinCluster	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.IsConnectedWriting">
            <summary>	
            unsigned int isConnectedWriting	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.IsCursiveWriting">
            <summary>	
            unsigned int isCursiveWriting	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ScriptProperties.Reserved">
            <summary>	
            unsigned int reserved	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ShapingGlyphProperties">
            <summary>	
            DWRITE_SHAPING_GLYPH_PROPERTIES	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ShapingGlyphProperties.Justification">
            <summary>	
            Indicates that the glyph has justification applied. 	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ShapingGlyphProperties.IsClusterStart">
            <summary>	
            unsigned short isClusterStart	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ShapingGlyphProperties.IsDiacritic">
            <summary>	
            unsigned short isDiacritic	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ShapingGlyphProperties.IsZeroWidthSpace">
            <summary>	
            unsigned short isZeroWidthSpace	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ShapingGlyphProperties.Reserved">
            <summary>	
            unsigned short reserved	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.ShapingTextProperties">
            <summary>	
            DWRITE_SHAPING_TEXT_PROPERTIES	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ShapingTextProperties.IsShapedAlone">
            <summary>	
            unsigned short isShapedAlone	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DirectWrite.ShapingTextProperties.Reserved">
            <summary>	
            unsigned short reserved	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Strikethrough">
            <summary>	
            DWRITE_STRIKETHROUGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Strikethrough.Width">
            <summary>	
            float width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Strikethrough.Thickness">
            <summary>	
            float thickness	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Strikethrough.Offset">
            <summary>	
            float offset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Strikethrough.ReadingDirection">
            <summary>	
            DWRITE_READING_DIRECTION readingDirection	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Strikethrough.FlowDirection">
            <summary>	
            DWRITE_FLOW_DIRECTION flowDirection	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Strikethrough.LocaleName">
            <summary>	
            const wchar_t* localeName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Strikethrough.MeasuringMode">
            <summary>	
            DWRITE_MEASURING_MODE measuringMode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextMetrics">
            <summary>	
            DWRITE_TEXT_METRICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.Left">
            <summary>	
            float left	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.Top">
            <summary>	
            float top	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.Width">
            <summary>	
            float width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.WidthIncludingTrailingWhitespace">
            <summary>	
            float widthIncludingTrailingWhitespace	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.Height">
            <summary>	
            float height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.LayoutWidth">
            <summary>	
            float layoutWidth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.LayoutHeight">
            <summary>	
            float layoutHeight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.MaxBidiReorderingDepth">
            <summary>	
            unsigned int maxBidiReorderingDepth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextMetrics.LineCount">
            <summary>	
            unsigned int lineCount	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TextRange">
            <summary>	
            DWRITE_TEXT_RANGE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextRange.StartPosition">
            <summary>	
            unsigned int startPosition	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TextRange.Length">
            <summary>	
            unsigned int length	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DirectWrite.TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DirectWrite.TextRange"/> struct.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="length">The length.</param>
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Trimming">
            <summary>	
            DWRITE_TRIMMING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Trimming.Granularity">
            <summary>	
            DWRITE_TRIMMING_GRANULARITY granularity	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Trimming.Delimiter">
            <summary>	
            unsigned int delimiter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Trimming.DelimiterCount">
            <summary>	
            unsigned int delimiterCount	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.TypographicFeatures">
            <summary>	
            DWRITE_TYPOGRAPHIC_FEATURES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TypographicFeatures.Features">
            <summary>	
            DWRITE_FONT_FEATURE* features	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.TypographicFeatures.FeatureCount">
            <summary>	
            unsigned int featureCount	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.Underline">
            <summary>	
            DWRITE_UNDERLINE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.Width">
            <summary>	
            float width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.Thickness">
            <summary>	
            float thickness	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.Offset">
            <summary>	
            float offset	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.RunHeight">
            <summary>	
            float runHeight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.ReadingDirection">
            <summary>	
            DWRITE_READING_DIRECTION readingDirection	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.FlowDirection">
            <summary>	
            DWRITE_FLOW_DIRECTION flowDirection	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.LocaleName">
            <summary>	
            const wchar_t* localeName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.Underline.MeasuringMode">
            <summary>	
            DWRITE_MEASURING_MODE measuringMode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DirectWrite.UnicodeRange">
            <summary>	
            DWRITE_UNICODE_RANGE
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.UnicodeRange.First">
            <summary>	
            unsigned int first	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DirectWrite.UnicodeRange.Last">
            <summary>	
            unsigned int last	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Adapter">
            <summary>	
            IDXGIAdapter	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DXGIObject">
            <summary>	
            IDXGIObject	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGIObject.GetParent``1">
            <summary>
            Gets the parent of the object.
            </summary>
            <typeparam name="T">Type of the parent object</typeparam>
            <returns>Returns the parent object based on the GUID of the type of the parent object.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGIObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.DXGIObject"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGIObject.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.DXGIObject">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.DXGIObject"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGIObject.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IDXGIObject::SetPrivateData([In] const GUID&amp; Name,[In] unsigned int DataSize,[In, Buffer] const void* pData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGIObject.SetPrivateDataInterface(System.Guid,C1.Util.DX.ComObject)">
            <summary>	
            HRESULT IDXGIObject::SetPrivateDataInterface([In] const GUID&amp; Name,[In] const IUnknown* pUnknown)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGIObject.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            HRESULT IDXGIObject::GetPrivateData([In] const GUID&amp; Name,[InOut] unsigned int* pDataSize,[Out, Buffer] void* pData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGIObject.GetParent(System.Guid)">
            <summary>	
            HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.IsInterfaceSupported(System.Type)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.IsInterfaceSupported``1">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.IsInterfaceSupported``1(System.Int64@)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.IsInterfaceSupported(System.Type,System.Int64@)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID.</param>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.GetOutput(System.Int32)">
            <summary>
            Gets an adapter (video card) outputs.
            </summary>
            <param name="outputIndex">The index of the output.</param>
            <returns>
            An instance of <see cref="T:C1.Util.DX.DXGI.Output"/> 
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.GetOutputCount">
            <summary>
              Return the number of available outputs from this adapter.
            </summary>
            <returns>The number of outputs</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Adapter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Adapter">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Adapter"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.GetOutput(System.Int32,C1.Util.DX.DXGI.Output@)">
            <summary>	
            HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.GetDescription(C1.Util.DX.DXGI.AdapterDescription@)">
            <summary>	
            HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter.CheckInterfaceSupport(System.Guid,System.Int64@)">
            <summary>	
            HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.Adapter.Outputs">
            <summary>
            Gets all outputs from this adapter.
            </summary>
        </member>
        <member name="P:C1.Util.DX.DXGI.Adapter.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Device">
            <summary>	
            IDXGIDevice	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.QueryResourceResidency(C1.Util.DX.ComObject[])">
            <summary>	
            Gets the residency status of an array of resources.	
            </summary>	
            <remarks>	
            The information returned by the pResidencyStatus argument array describes the residency status at the time that the QueryResourceResidency method was called.   Note that the residency status will constantly change. If you call the QueryResourceResidency method during a device removed state, the pResidencyStatus argument will return the DXGI_RESIDENCY_EVICTED_TO_DISK flag. Note??This method should not be called every frame as it incurs a non-trivial amount of overhead. 	
            </remarks>	
            <param name="comObjects">An array of <see cref="T:C1.Util.DX.DXGI.Resource"/> interfaces. </param>
            <returns>Returns an array of <see cref="T:C1.Util.DX.DXGI.Residency"/> flags. Each element describes the residency status for corresponding element in  the ppResources argument array. </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Device">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Device"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.GetAdapter">
            <summary>	
            HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.CreateSurface(C1.Util.DX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{C1.Util.DX.DXGI.SharedResource})">
            <summary>	
            HRESULT IDXGIDevice::CreateSurface([In] const DXGI_SURFACE_DESC* pDesc,[In] unsigned int NumSurfaces,[In] unsigned int Usage,[In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource,[Out] IDXGISurface** ppSurface)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.QueryResourceResidency(C1.Util.DX.ComObject[],C1.Util.DX.DXGI.Residency[],System.Int32)">
            <summary>	
            HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.QueryResourceResidency(C1.Util.DX.ComArray{C1.Util.DX.ComObject},C1.Util.DX.DXGI.Residency[],System.Int32)">
            <summary>	
            HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.SetGPUThreadPriority(System.Int32)">
            <summary>	
            HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device.GetGPUThreadPriority">
            <summary>	
            HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DeviceChild">
            <summary>	
            IDXGIDeviceSubObject	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.DeviceChild.GetDevice``1">
            <summary>
            Retrieves the device.
            </summary>
            <typeparam name="T">The interface that is returned can be any interface published by the device.</typeparam>
            <returns>The associated device. </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.DeviceChild.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.DeviceChild"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.DeviceChild.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.DeviceChild">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.DeviceChild"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.DeviceChild.GetDevice(System.Guid)">
            <summary>	
            HRESULT IDXGIDeviceSubObject::GetDevice([In] const GUID&amp; riid,[Out] void** ppDevice)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.DeviceChild.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
            <value>
            The debug name.
            </value>
        </member>
        <member name="T:C1.Util.DX.DXGI.Factory">
            <summary>	
            IDXGIFactory	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.GetAdapter(System.Int32)">
            <summary>	
            Gets both adapters (video cards) with or without outputs.	
            </summary>	
            <param name="index"><para>The index of the adapter to enumerate.</para></param>	
            <returns>a reference to an <see cref="T:C1.Util.DX.DXGI.Adapter"/> interface at the position specified by the Adapter parameter</returns>
            <remarks>	
            When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:C1.Util.DX.DXGI.Factory"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters then returns other adapters with outputs.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.GetAdapterCount">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Factory">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Factory"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.GetAdapter(System.Int32,C1.Util.DX.DXGI.Adapter@)">
            <summary>	
            HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.MakeWindowAssociation(System.IntPtr,C1.Util.DX.DXGI.WindowAssociationFlags)">
            <summary>	
            HRESULT IDXGIFactory::MakeWindowAssociation([In] HWND WindowHandle,[In] DXGI_MWA_FLAGS Flags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.GetWindowAssociation">
            <summary>	
            HRESULT IDXGIFactory::GetWindowAssociation([Out] HWND* pWindowHandle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.CreateSwapChain(C1.Util.DX.ComObject,C1.Util.DX.DXGI.SwapChainDescription@)">
            <summary>	
            HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)">
            <summary>	
            HRESULT IDXGIFactory::CreateSoftwareAdapter([In] HINSTANCE Module,[Out] IDXGIAdapter** ppAdapter)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.Factory.Adapters">
            <summary>
            Return an array of <see cref="T:C1.Util.DX.DXGI.Adapter"/> available from this factory.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.Factory1">
            <summary>	
            IDXGIFactory1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory1.Create">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.DXGI.Factory1"/> object.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory1.GetAdapter1(System.Int32)">
            <summary>	
            Gets both adapters (video cards) with or without outputs.	
            </summary>	
            <param name="index"><para>The index of the adapter to enumerate.</para></param>	
            <returns>a reference to an <see cref="T:C1.Util.DX.DXGI.Adapter1"/> interface at the position specified by the Adapter parameter</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:C1.Util.DX.DXGI.Factory1"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters1 method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters1 increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters1 first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters1 next returns other adapters with outputs. EnumAdapters1 finally returns adapters without outputs.	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory1.GetAdapterCount1">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Factory1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory1.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Factory1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Factory1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory1.GetAdapter1(System.Int32,C1.Util.DX.DXGI.Adapter1@)">
            <summary>	
            HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory1.IsCurrent">
            <summary>	
            BOOL IDXGIFactory1::IsCurrent()	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.Factory1.Adapters1">
            <summary>
            Return an array of <see cref="T:C1.Util.DX.DXGI.Adapter1"/> available from this factory.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.Factory2">
            <summary>	
            IDXGIFactory2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.Create">
            <summary>	
            Creates an <see cref="T:C1.Util.DX.DXGI.Factory2"/> object.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Factory2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Factory2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Factory2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.IsWindowedStereoEnabled">
            <summary>	
            BOOL IDXGIFactory2::IsWindowedStereoEnabled()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.CreateSwapChain1ForHwnd(C1.Util.DX.ComObject,System.IntPtr,C1.Util.DX.DXGI.SwapChainDescription1@,System.Nullable{C1.Util.DX.DXGI.SwapChainFullScreenDescription},C1.Util.DX.DXGI.Output)">
            <summary>	
            HRESULT IDXGIFactory2::CreateSwapChainForHwnd([In] IUnknown* pDevice,[In] HWND hWnd,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] const DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.CreateSwapChain1ForCoreWindow(C1.Util.DX.ComObject,C1.Util.DX.ComObject,C1.Util.DX.DXGI.SwapChainDescription1@,C1.Util.DX.DXGI.Output)">
            <summary>	
            HRESULT IDXGIFactory2::CreateSwapChainForCoreWindow([In] IUnknown* pDevice,[In] IUnknown* pWindow,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.GetSharedResourceAdapterLuid(System.IntPtr)">
            <summary>	
            HRESULT IDXGIFactory2::GetSharedResourceAdapterLuid([In] void* hResource,[Out] LUID* pLuid)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.RegisterStereoStatusWindow(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDXGIFactory2::RegisterStereoStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.RegisterStereoStatusEvent(System.IntPtr)">
            <summary>	
            HRESULT IDXGIFactory2::RegisterStereoStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.UnregisterStereoStatus(System.Int32)">
            <summary>	
            void IDXGIFactory2::UnregisterStereoStatus([In] unsigned int dwCookie)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.RegisterOcclusionStatusWindow(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IDXGIFactory2::RegisterOcclusionStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.RegisterOcclusionStatusEvent(System.IntPtr)">
            <summary>	
            HRESULT IDXGIFactory2::RegisterOcclusionStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.UnregisterOcclusionStatus(System.Int32)">
            <summary>	
            void IDXGIFactory2::UnregisterOcclusionStatus([In] unsigned int dwCookie)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Factory2.CreateSwapChain1ForComposition(C1.Util.DX.ComObject,C1.Util.DX.DXGI.SwapChainDescription1@,C1.Util.DX.DXGI.Output)">
            <summary>	
            HRESULT IDXGIFactory2::CreateSwapChainForComposition([In] IUnknown* pDevice,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.FormatHelper">
            <summary>
            Helper to use with <see cref="T:C1.Util.DX.DXGI.Format"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.SizeOfInBytes(C1.Util.DX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:C1.Util.DX.DXGI.Format"/> in bytes.
            </summary>
            <param name="format">The dxgi format.</param>
            <returns>size of in bytes</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.SizeOfInBits(C1.Util.DX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:C1.Util.DX.DXGI.Format"/> in bits.
            </summary>
            <param name="format">The dxgi format.</param>
            <returns>size of in bits</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.IsValid(C1.Util.DX.DXGI.Format)">
            <summary>
            Returns true if the <see cref="T:C1.Util.DX.DXGI.Format"/> is valid.
            </summary>
            <param name="format">A format to validate</param>
            <returns>True if the <see cref="T:C1.Util.DX.DXGI.Format"/> is valid.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.IsCompressed(C1.Util.DX.DXGI.Format)">
            <summary>
            Returns true if the <see cref="T:C1.Util.DX.DXGI.Format"/> is a compressed format.
            </summary>
            <param name="fmt">The format to check for compressed.</param>
            <returns>True if the <see cref="T:C1.Util.DX.DXGI.Format"/> is a compressed format</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.IsPacked(C1.Util.DX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is packed.
            </summary>
            <param name="fmt">The DXGI Format.</param>
            <returns><c>true</c> if the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is packed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.IsVideo(C1.Util.DX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is video.
            </summary>
            <param name="fmt">The <see cref="T:C1.Util.DX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is video; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.IsSRgb(C1.Util.DX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is a SRGB format.
            </summary>
            <param name="fmt">The <see cref="T:C1.Util.DX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is a SRGB format; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.IsTypeless(C1.Util.DX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is typeless.
            </summary>
            <param name="fmt">The <see cref="T:C1.Util.DX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:C1.Util.DX.DXGI.Format"/> is typeless; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.ComputeScanlineCount(C1.Util.DX.DXGI.Format,System.Int32)">
            <summary>
            Computes the scanline count (number of scanlines).
            </summary>
            <param name="fmt">The <see cref="T:C1.Util.DX.DXGI.Format"/>.</param>
            <param name="height">The height.</param>
            <returns>The scanline count.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.FormatHelper.#cctor">
            <summary>
            Static initializer to speed up size calculation (not sure the JIT is enough "smart" for this kind of thing).
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory">
            <summary>
            IPrintDocumentPackageTargetFactory
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory.Create">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory.CreateDocumentPackageTargetForPrintJob(System.String,System.String,C1.Util.DX.Storage.ComStream)">
            <summary>
            HRESULT IPrintDocumentPackageTargetFactory::CreateDocumentPackageTargetForPrintJob([In] const wchar_t* printerName,[In] const wchar_t* jobName,[In, Optional] IStream *jobOutputStream,[In] IStream *jobPrintTicketStream,[Out] IPrintDocumentPackageTarget **docPackageTarget)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTargetFactory.CreateDocumentPackageTargetForPrintJob(System.String,System.String,System.IntPtr,C1.Util.DX.Storage.ComStream)">
            <summary>
            HRESULT IPrintDocumentPackageTargetFactory::CreateDocumentPackageTargetForPrintJob([In] const wchar_t* printerName,[In] const wchar_t* jobName,[In, Optional] IStream *jobOutputStream,[In] IStream *jobPrintTicketStream,[Out] IPrintDocumentPackageTarget **docPackageTarget)
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.Output">
            <summary>	
            IDXGIOutput	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.GetClosestMatchingMode(C1.Util.DX.ComObject,C1.Util.DX.DXGI.ModeDescription,C1.Util.DX.DXGI.ModeDescription@)">
            <summary>	
            Find the display mode that most closely matches the requested display mode.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.GetDisplayModeList(C1.Util.DX.DXGI.Format,C1.Util.DX.DXGI.DisplayModeEnumerationFlags)">
            <summary>	
            Gets the display modes that match the requested format and other input options.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Output"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Output">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Output"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.GetDescription(C1.Util.DX.DXGI.OutputDescription@)">
            <summary>	
            HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.GetDisplayModeList(C1.Util.DX.DXGI.Format,System.Int32,System.Int32@,C1.Util.DX.DXGI.ModeDescription[])">
            <summary>	
            HRESULT IDXGIOutput::GetDisplayModeList([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.FindClosestMatchingMode(C1.Util.DX.DXGI.ModeDescription@,C1.Util.DX.DXGI.ModeDescription@,C1.Util.DX.ComObject)">
            <summary>	
            HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.WaitForVBlank">
            <summary>	
            HRESULT IDXGIOutput::WaitForVBlank()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.TakeOwnership(C1.Util.DX.ComObject,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice,[In] BOOL Exclusive)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.ReleaseOwnership">
            <summary>	
            void IDXGIOutput::ReleaseOwnership()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.SetDisplaySurface(C1.Util.DX.DXGI.Surface)">
            <summary>	
            HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.CopyDisplaySurfaceTo(C1.Util.DX.DXGI.Surface)">
            <summary>	
            HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output.GetFrameStatistics(C1.Util.DX.DXGI.FrameStatistics@)">
            <summary>	
            HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.Output.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Output1">
            <summary>	
            IDXGIOutput1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output1.GetDisplayModeList1(C1.Util.DX.DXGI.Format,C1.Util.DX.DXGI.DisplayModeEnumerationFlags)">
            <summary>	
            Gets the display modes that match the requested format and other input options.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Output1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output1.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Output1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Output1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Output1.GetDisplayModeList1(C1.Util.DX.DXGI.Format,System.Int32,System.Int32@,C1.Util.DX.DXGI.ModeDescription1[])">
            <summary>	
            HRESULT IDXGIOutput1::GetDisplayModeList1([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC1* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output1.FindClosestMatchingMode1(C1.Util.DX.DXGI.ModeDescription1@,C1.Util.DX.DXGI.ModeDescription1@,C1.Util.DX.ComObject)">
            <summary>	
            HRESULT IDXGIOutput1::FindClosestMatchingMode1([In] const DXGI_MODE_DESC1* pModeToMatch,[Out] DXGI_MODE_DESC1* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output1.GetDisplaySurfaceData1(C1.Util.DX.DXGI.Resource)">
            <summary>	
            HRESULT IDXGIOutput1::GetDisplaySurfaceData1([In] IDXGIResource* pDestination)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output1.DuplicateOutput(C1.Util.DX.ComObject)">
            <summary>	
            HRESULT IDXGIOutput1::DuplicateOutput([In] IUnknown* pDevice,[Out] void** ppOutputDuplication)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Resource1">
            <summary>	
            IDXGIResource1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Resource">
            <summary>	
            IDXGIResource	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Resource">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Resource"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource.GetSharedHandle">
            <summary>	
            HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource.GetUsage">
            <summary>	
            HRESULT IDXGIResource::GetUsage([Out] unsigned int* pUsage)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource.SetEvictionPriority(System.Int32)">
            <summary>	
            HRESULT IDXGIResource::SetEvictionPriority([In] unsigned int EvictionPriority)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource.GetEvictionPriority">
            <summary>	
            HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource1.CreateSharedHandle(System.String,C1.Util.DX.DXGI.SharedResourceFlags,System.Nullable{C1.Util.DX.Storage.SecurityAttributes})">
            <summary>	
            Creates a handle to a shared resource. You can then use the returned handle with multiple Direct3D devices. 
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Resource1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource1.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Resource1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Resource1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource1.CreateSubresourceSurface2(System.Int32)">
            <summary>	
            HRESULT IDXGIResource1::CreateSubresourceSurface([In] unsigned int index,[Out, Fast] IDXGISurface2** ppSurface)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Resource1.CreateSharedHandle(System.Nullable{C1.Util.DX.Storage.SecurityAttributes},C1.Util.DX.DXGI.SharedResourceFlags,System.String)">
            <summary>	
            HRESULT IDXGIResource1::CreateSharedHandle([In, Optional] const SECURITY_ATTRIBUTES* pAttributes,[In] DXGI_SHARED_RESOURCE_FLAGS dwAccess,[In, Optional] const wchar_t* lpName,[Out] void** pHandle)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Surface">
            <summary>	
            IDXGISurface	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.Map(C1.Util.DX.DXGI.MapFlags)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <returns>A <see cref="T:C1.Win.DX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.Map(C1.Util.DX.DXGI.MapFlags,C1.Util.DX.DataStream@)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <param name="dataStream">A data stream.</param>
            <returns>A <see cref="T:C1.Win.DX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.FromSwapChain(C1.Util.DX.DXGI.SwapChain,System.Int32)">
            <summary>
            Gets a swap chain back buffer.
            </summary>
            <param name="swapChain">The swap chain to get the buffer from.</param>
            <param name="index">The index of the desired buffer.</param>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Surface"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Surface">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Surface"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.GetDescription(C1.Util.DX.DXGI.SurfaceDescription@)">
            <summary>	
            HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.Map(C1.Util.DX.DXGI.MappedRectangle@,System.Int32)">
            <summary>	
            HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect,[In] unsigned int MapFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface.Unmap">
            <summary>	
            HRESULT IDXGISurface::Unmap()	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.Surface.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Surface1">
            <summary>	
            IDXGISurface1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface1.ReleaseDC">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D. The whole surface to be considered dirty.
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface1.ReleaseDC(C1.Util.DX.RectL)">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D.	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Surface1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface1.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Surface1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Surface1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface1.GetDC(C1.Util.DX.Bool)">
            <summary>	
            HRESULT IDXGISurface1::GetDC([In] BOOL Discard,[Out] HDC* phdc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface1.ReleaseDC_(System.Nullable{C1.Util.DX.RectL})">
            <summary>	
            HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Surface2">
            <summary>	
            IDXGISurface2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface2.Create(C1.Util.DX.DXGI.Resource1,System.Int32)">
            <summary>
            Initializes a new sub resource surface instance of <see cref="T:C1.Util.DX.DXGI.Surface2"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Surface2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface2.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Surface2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Surface2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Surface2.GetResource(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>	
            HRESULT IDXGISurface2::GetResource([In] const GUID&amp; riid,[Out] void** ppParentResource,[Out] unsigned int* pSubresourceIndex)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapChain">
            <summary>	
            IDXGISwapChain	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.Create(C1.Util.DX.DXGI.Factory,C1.Util.DX.ComObject,C1.Util.DX.DXGI.SwapChainDescription)">
            <summary>	
            Creates a swap chain.	
            </summary>	
            <param name="factory">a reference to a <see cref="T:C1.Util.DX.DXGI.Factory"/>.</param>
            <param name="device">A reference to the device that will write 2D images to the swap chain. </param>
            <param name="description">A reference to the swap-chain description (see <see cref="T:C1.Util.DX.DXGI.SwapChainDescription"/>).</param>
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.GetBackBuffer``1(System.Int32)">
            <summary>
            Access one of the swap-chain back buffers.
            </summary>
            <typeparam name="T">The interface of the surface to resolve from the back buffer</typeparam>
            <param name="index">A zero-based buffer index. If the swap effect is not DXGI_SWAP_EFFECT_SEQUENTIAL, this method only has access to the first buffer; for this case, set the index to zero.</param>
            <returns>
            Returns a reference to a back-buffer interface.
            </returns>
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.SwapChain"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.SwapChain">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.SwapChain"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.Present(System.Int32,C1.Util.DX.DXGI.PresentFlags)">
            <summary>	
            HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS Flags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.GetBuffer(System.Int32,System.Guid)">
            <summary>	
            HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.SetFullscreenState(C1.Util.DX.Bool,C1.Util.DX.DXGI.Output)">
            <summary>	
            HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.GetFullscreenState(C1.Util.DX.Bool@,C1.Util.DX.DXGI.Output@)">
            <summary>	
            HRESULT IDXGISwapChain::GetFullscreenState([Out, Optional] BOOL* pFullscreen,[Out, Optional] IDXGIOutput** ppTarget)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.GetDescription(C1.Util.DX.DXGI.SwapChainDescription@)">
            <summary>	
            HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,C1.Util.DX.DXGI.Format,C1.Util.DX.DXGI.SwapChainFlags)">
            <summary>	
            HRESULT IDXGISwapChain::ResizeBuffers([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT NewFormat,[In] DXGI_SWAP_CHAIN_FLAG SwapChainFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.ResizeTarget(C1.Util.DX.DXGI.ModeDescription@)">
            <summary>	
            HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.GetContainingOutput">
            <summary>	
            HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.GetFrameStatistics(C1.Util.DX.DXGI.FrameStatistics@)">
            <summary>	
            HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain.GetLastPresentCount">
            <summary>	
            HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.SwapChain.IsFullScreen">
            <summary>
            Gets or sets a value indicating whether the swapchain is in fullscreen.
            </summary>
        </member>
        <member name="P:C1.Util.DX.DXGI.SwapChain.Description">
            <summary>	
            GetDescription	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapChain2">
            <summary>	
            IDXGISwapChain2	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapChain1">
            <summary>	
            IDXGISwapChain1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.SwapChain1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.SwapChain1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.SwapChain1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.GetDescription1(C1.Util.DX.DXGI.SwapChainDescription1@)">
            <summary>	
            HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.GetFullScreenDescription(C1.Util.DX.DXGI.SwapChainFullScreenDescription@)">
            <summary>	
            HRESULT IDXGISwapChain1::GetFullScreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.GetHwnd">
            <summary>	
            HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.GetCoreWindow(System.Guid)">
            <summary>	
            HRESULT IDXGISwapChain1::GetCoreWindow([In] const GUID&amp; refiid,[Out] void** ppUnk)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.Present1(System.Int32,C1.Util.DX.DXGI.PresentFlags,C1.Util.DX.RectL[])">
            <summary>	
            HRESULT IDXGISwapChain1::Present1([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS PresentFlags,[In] const void* pPresentParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.Present1(System.Int32,C1.Util.DX.DXGI.PresentFlags,C1.Util.DX.DXGI.PresentParameters@)">
            <summary>	
            HRESULT IDXGISwapChain1::Present1([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS PresentFlags,[In] const void* pPresentParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.IsTemporaryMonoSupported">
            <summary>	
            BOOL IDXGISwapChain1::IsTemporaryMonoSupported()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.GetRestrictToOutput">
            <summary>	
            HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.SetBackgroundColor(C1.Util.DX.ColorF)">
            <summary>	
            HRESULT IDXGISwapChain1::SetBackgroundColor([In] const D3DCOLORVALUE* pColor)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.GetBackgroundColor">
            <summary>	
            HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.SetRotation(C1.Util.DX.DXGI.DisplayModeRotation)">
            <summary>	
            HRESULT IDXGISwapChain1::SetRotation([In] DXGI_MODE_ROTATION Rotation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain1.GetRotation">
            <summary>	
            HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.SwapChain1.Description1">
            <summary>	
            GetDescription1	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.SwapChain1.FullScreenDescription">
            <summary>	
            GetFullScreenDescription	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.SwapChain2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.SwapChain2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.SwapChain2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.SetSourceSize(System.Int32,System.Int32)">
            <summary>	
            HRESULT IDXGISwapChain2::SetSourceSize([In] unsigned int Width,[In] unsigned int Height)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.GetSourceSize(System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IDXGISwapChain2::GetSourceSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.SetMaximumFrameLatency(System.Int32)">
            <summary>	
            HRESULT IDXGISwapChain2::SetMaximumFrameLatency([In] unsigned int MaxLatency)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.GetMaximumFrameLatency">
            <summary>	
            HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.GetFrameLatencyWaitableObject">
            <summary>	
            void* IDXGISwapChain2::GetFrameLatencyWaitableObject()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.SetMatrixTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            HRESULT IDXGISwapChain2::SetMatrixTransform([In] const DXGI_MATRIX_3X2_F* pMatrix)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SwapChain2.GetMatrixTransform(C1.Util.DX.Matrix3x2@)">
            <summary>	
            HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.SwapChain2.SourceSize">
            <summary>	
            Gets or sets the source region used for the swap chain.
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.SwapChain2.MatrixTransform">
            <summary>	
            GetMatrixTransform / SetMatrixTransform	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.AdapterFlags">
            <summary>	
            DXGI_ADAPTER_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterFlags.None">
            <summary>	
            DXGI_ADAPTER_FLAG_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterFlags.Remote">
            <summary>	
            DXGI_ADAPTER_FLAG_REMOTE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterFlags.Software">
            <summary>	
            DXGI_ADAPTER_FLAG_SOFTWARE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.AlphaMode">
            <summary>	
            DXGI_ALPHA_MODE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AlphaMode.Unspecified">
            <summary>	
            DXGI_ALPHA_MODE_UNSPECIFIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AlphaMode.Premultiplied">
            <summary>	
            DXGI_ALPHA_MODE_PREMULTIPLIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AlphaMode.Straight">
            <summary>	
            DXGI_ALPHA_MODE_STRAIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AlphaMode.Ignore">
            <summary>	
            DXGI_ALPHA_MODE_IGNORE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ComputePreemptionGranularity">
            <summary>	
            DXGI_COMPUTE_PREEMPTION_GRANULARITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ComputePreemptionGranularity.DmaBufferBoundary">
            <summary>	
            DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ComputePreemptionGranularity.DispatchBoundary">
            <summary>	
            DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ComputePreemptionGranularity.ThreadGroupBoundary">
            <summary>	
            DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ComputePreemptionGranularity.ThreadBoundary">
            <summary>	
            DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ComputePreemptionGranularity.InstructionBoundary">
            <summary>	
            DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DisplayModeEnumerationFlags">
            <summary>	
            DXGI_ENUM_MODES_FLAGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeEnumerationFlags.Interlaced">
            <summary>	
            DXGI_ENUM_MODES_INTERLACED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeEnumerationFlags.Scaling">
            <summary>	
            DXGI_ENUM_MODES_SCALING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeEnumerationFlags.Stereo">
            <summary>	
            DXGI_ENUM_MODES_STEREO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeEnumerationFlags.DisabledStereo">
            <summary>	
            DXGI_ENUM_MODES_DISABLED_STEREO	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DisplayModeRotation">
            <summary>	
            DXGI_MODE_ROTATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeRotation.Unspecified">
            <summary>	
            DXGI_MODE_ROTATION_UNSPECIFIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeRotation.Identity">
            <summary>	
            DXGI_MODE_ROTATION_IDENTITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeRotation.Rotate90">
            <summary>	
            DXGI_MODE_ROTATION_ROTATE90	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeRotation.Rotate180">
            <summary>	
            DXGI_MODE_ROTATION_ROTATE180	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeRotation.Rotate270">
            <summary>	
            DXGI_MODE_ROTATION_ROTATE270	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DisplayModeScaling">
            <summary>	
            DXGI_MODE_SCALING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeScaling.Unspecified">
            <summary>	
            DXGI_MODE_SCALING_UNSPECIFIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeScaling.Centered">
            <summary>	
            DXGI_MODE_SCALING_CENTERED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeScaling.Stretched">
            <summary>	
            DXGI_MODE_SCALING_STRETCHED	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DisplayModeScanlineOrder">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeScanlineOrder.Unspecified">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeScanlineOrder.Progressive">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeScanlineOrder.UpperFieldFirst">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DisplayModeScanlineOrder.LowerFieldFirst">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DXGIStatus">
            <summary>	
            DXGI_STATUS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.Occluded">
            <summary>	
            DXGI_STATUS_OCCLUDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.Clipped">
            <summary>	
            DXGI_STATUS_CLIPPED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.NoRedirection">
            <summary>	
            DXGI_STATUS_NO_REDIRECTION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.NoDesktopAccess">
            <summary>	
            DXGI_STATUS_NO_DESKTOP_ACCESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.GraphicsVidpnSourceInUse">
            <summary>	
            DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.ModeChanged">
            <summary>	
            DXGI_STATUS_MODE_CHANGED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.ModeChangeInProgress">
            <summary>	
            DXGI_STATUS_MODE_CHANGE_IN_PROGRESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.Unoccluded">
            <summary>	
            DXGI_STATUS_UNOCCLUDED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGIStatus.DdaWasStillDrawing">
            <summary>	
            DXGI_STATUS_DDA_WAS_STILL_DRAWING	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Format">
            <summary>	
            DXGI_FORMAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.Unknown">
            <summary>	
            DXGI_FORMAT_UNKNOWN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32A32_Typeless">
            <summary>	
            DXGI_FORMAT_R32G32B32A32_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32A32_Float">
            <summary>	
            DXGI_FORMAT_R32G32B32A32_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32A32_UInt">
            <summary>	
            DXGI_FORMAT_R32G32B32A32_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32A32_SInt">
            <summary>	
            DXGI_FORMAT_R32G32B32A32_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32_Typeless">
            <summary>	
            DXGI_FORMAT_R32G32B32_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32_Float">
            <summary>	
            DXGI_FORMAT_R32G32B32_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32_UInt">
            <summary>	
            DXGI_FORMAT_R32G32B32_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32B32_SInt">
            <summary>	
            DXGI_FORMAT_R32G32B32_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16B16A16_Typeless">
            <summary>	
            DXGI_FORMAT_R16G16B16A16_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16B16A16_Float">
            <summary>	
            DXGI_FORMAT_R16G16B16A16_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16B16A16_UNorm">
            <summary>	
            DXGI_FORMAT_R16G16B16A16_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16B16A16_UInt">
            <summary>	
            DXGI_FORMAT_R16G16B16A16_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16B16A16_SNorm">
            <summary>	
            DXGI_FORMAT_R16G16B16A16_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16B16A16_SInt">
            <summary>	
            DXGI_FORMAT_R16G16B16A16_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32_Typeless">
            <summary>	
            DXGI_FORMAT_R32G32_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32_Float">
            <summary>	
            DXGI_FORMAT_R32G32_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32_UInt">
            <summary>	
            DXGI_FORMAT_R32G32_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G32_SInt">
            <summary>	
            DXGI_FORMAT_R32G32_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32G8X24_Typeless">
            <summary>	
            DXGI_FORMAT_R32G8X24_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.D32_Float_S8X24_UInt">
            <summary>	
            DXGI_FORMAT_D32_FLOAT_S8X24_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32_Float_X8X24_Typeless">
            <summary>	
            DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.X32_Typeless_G8X24_UInt">
            <summary>	
            DXGI_FORMAT_X32_TYPELESS_G8X24_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R10G10B10A2_Typeless">
            <summary>	
            DXGI_FORMAT_R10G10B10A2_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R10G10B10A2_UNorm">
            <summary>	
            DXGI_FORMAT_R10G10B10A2_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R10G10B10A2_UInt">
            <summary>	
            DXGI_FORMAT_R10G10B10A2_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R11G11B10_Float">
            <summary>	
            DXGI_FORMAT_R11G11B10_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8B8A8_Typeless">
            <summary>	
            DXGI_FORMAT_R8G8B8A8_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8B8A8_UNorm">
            <summary>	
            DXGI_FORMAT_R8G8B8A8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8B8A8_UNorm_SRgb">
            <summary>	
            DXGI_FORMAT_R8G8B8A8_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8B8A8_UInt">
            <summary>	
            DXGI_FORMAT_R8G8B8A8_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8B8A8_SNorm">
            <summary>	
            DXGI_FORMAT_R8G8B8A8_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8B8A8_SInt">
            <summary>	
            DXGI_FORMAT_R8G8B8A8_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16_Typeless">
            <summary>	
            DXGI_FORMAT_R16G16_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16_Float">
            <summary>	
            DXGI_FORMAT_R16G16_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16_UNorm">
            <summary>	
            DXGI_FORMAT_R16G16_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16_UInt">
            <summary>	
            DXGI_FORMAT_R16G16_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16_SNorm">
            <summary>	
            DXGI_FORMAT_R16G16_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16G16_SInt">
            <summary>	
            DXGI_FORMAT_R16G16_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32_Typeless">
            <summary>	
            DXGI_FORMAT_R32_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.D32_Float">
            <summary>	
            DXGI_FORMAT_D32_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32_Float">
            <summary>	
            DXGI_FORMAT_R32_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32_UInt">
            <summary>	
            DXGI_FORMAT_R32_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R32_SInt">
            <summary>	
            DXGI_FORMAT_R32_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R24G8_Typeless">
            <summary>	
            DXGI_FORMAT_R24G8_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.D24_UNorm_S8_UInt">
            <summary>	
            DXGI_FORMAT_D24_UNORM_S8_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R24_UNorm_X8_Typeless">
            <summary>	
            DXGI_FORMAT_R24_UNORM_X8_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.X24_Typeless_G8_UInt">
            <summary>	
            DXGI_FORMAT_X24_TYPELESS_G8_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8_Typeless">
            <summary>	
            DXGI_FORMAT_R8G8_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8_UNorm">
            <summary>	
            DXGI_FORMAT_R8G8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8_UInt">
            <summary>	
            DXGI_FORMAT_R8G8_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8_SNorm">
            <summary>	
            DXGI_FORMAT_R8G8_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8_SInt">
            <summary>	
            DXGI_FORMAT_R8G8_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16_Typeless">
            <summary>	
            DXGI_FORMAT_R16_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16_Float">
            <summary>	
            DXGI_FORMAT_R16_FLOAT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.D16_UNorm">
            <summary>	
            DXGI_FORMAT_D16_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16_UNorm">
            <summary>	
            DXGI_FORMAT_R16_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16_UInt">
            <summary>	
            DXGI_FORMAT_R16_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16_SNorm">
            <summary>	
            DXGI_FORMAT_R16_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R16_SInt">
            <summary>	
            DXGI_FORMAT_R16_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8_Typeless">
            <summary>	
            DXGI_FORMAT_R8_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8_UNorm">
            <summary>	
            DXGI_FORMAT_R8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8_UInt">
            <summary>	
            DXGI_FORMAT_R8_UINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8_SNorm">
            <summary>	
            DXGI_FORMAT_R8_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8_SInt">
            <summary>	
            DXGI_FORMAT_R8_SINT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.A8_UNorm">
            <summary>	
            DXGI_FORMAT_A8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R1_UNorm">
            <summary>	
            DXGI_FORMAT_R1_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R9G9B9E5_Sharedexp">
            <summary>	
            DXGI_FORMAT_R9G9B9E5_SHAREDEXP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R8G8_B8G8_UNorm">
            <summary>	
            DXGI_FORMAT_R8G8_B8G8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.G8R8_G8B8_UNorm">
            <summary>	
            DXGI_FORMAT_G8R8_G8B8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC1_Typeless">
            <summary>	
            DXGI_FORMAT_BC1_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC1_UNorm">
            <summary>	
            DXGI_FORMAT_BC1_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC1_UNorm_SRgb">
            <summary>	
            DXGI_FORMAT_BC1_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC2_Typeless">
            <summary>	
            DXGI_FORMAT_BC2_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC2_UNorm">
            <summary>	
            DXGI_FORMAT_BC2_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC2_UNorm_SRgb">
            <summary>	
            DXGI_FORMAT_BC2_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC3_Typeless">
            <summary>	
            DXGI_FORMAT_BC3_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC3_UNorm">
            <summary>	
            DXGI_FORMAT_BC3_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC3_UNorm_SRgb">
            <summary>	
            DXGI_FORMAT_BC3_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC4_Typeless">
            <summary>	
            DXGI_FORMAT_BC4_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC4_UNorm">
            <summary>	
            DXGI_FORMAT_BC4_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC4_SNorm">
            <summary>	
            DXGI_FORMAT_BC4_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC5_Typeless">
            <summary>	
            DXGI_FORMAT_BC5_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC5_UNorm">
            <summary>	
            DXGI_FORMAT_BC5_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC5_SNorm">
            <summary>	
            DXGI_FORMAT_BC5_SNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B5G6R5_UNorm">
            <summary>	
            DXGI_FORMAT_B5G6R5_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B5G5R5A1_UNorm">
            <summary>	
            DXGI_FORMAT_B5G5R5A1_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B8G8R8A8_UNorm">
            <summary>	
            DXGI_FORMAT_B8G8R8A8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B8G8R8X8_UNorm">
            <summary>	
            DXGI_FORMAT_B8G8R8X8_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>	
            DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B8G8R8A8_Typeless">
            <summary>	
            DXGI_FORMAT_B8G8R8A8_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B8G8R8A8_UNorm_SRgb">
            <summary>	
            DXGI_FORMAT_B8G8R8A8_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B8G8R8X8_Typeless">
            <summary>	
            DXGI_FORMAT_B8G8R8X8_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B8G8R8X8_UNorm_SRgb">
            <summary>	
            DXGI_FORMAT_B8G8R8X8_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC6H_Typeless">
            <summary>	
            DXGI_FORMAT_BC6H_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC6H_Uf16">
            <summary>	
            DXGI_FORMAT_BC6H_UF16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC6H_Sf16">
            <summary>	
            DXGI_FORMAT_BC6H_SF16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC7_Typeless">
            <summary>	
            DXGI_FORMAT_BC7_TYPELESS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC7_UNorm">
            <summary>	
            DXGI_FORMAT_BC7_UNORM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.BC7_UNorm_SRgb">
            <summary>	
            DXGI_FORMAT_BC7_UNORM_SRGB	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.AYUV">
            <summary>	
            DXGI_FORMAT_AYUV	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.Y410">
            <summary>	
            DXGI_FORMAT_Y410	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.Y416">
            <summary>	
            DXGI_FORMAT_Y416	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.NV12">
            <summary>	
            DXGI_FORMAT_NV12	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.P010">
            <summary>	
            DXGI_FORMAT_P010	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.P016">
            <summary>	
            DXGI_FORMAT_P016	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.Opaque420">
            <summary>	
            DXGI_FORMAT_420_OPAQUE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.YUY2">
            <summary>	
            DXGI_FORMAT_YUY2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.Y210">
            <summary>	
            DXGI_FORMAT_Y210	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.Y216">
            <summary>	
            DXGI_FORMAT_Y216	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.NV11">
            <summary>	
            DXGI_FORMAT_NV11	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.AI44">
            <summary>	
            DXGI_FORMAT_AI44	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.IA44">
            <summary>	
            DXGI_FORMAT_IA44	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.P8">
            <summary>	
            DXGI_FORMAT_P8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.A8P8">
            <summary>	
            DXGI_FORMAT_A8P8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Format.B4G4R4A4_UNorm">
            <summary>	
            DXGI_FORMAT_B4G4R4A4_UNORM	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.GraphicsPreemptionGranularity">
            <summary>	
            DXGI_GRAPHICS_PREEMPTION_GRANULARITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.GraphicsPreemptionGranularity.DmaBufferBoundary">
            <summary>	
            DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.GraphicsPreemptionGranularity.PrimitiveBoundary">
            <summary>	
            DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.GraphicsPreemptionGranularity.TriangleBoundary">
            <summary>	
            DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.GraphicsPreemptionGranularity.PixelBoundary">
            <summary>	
            DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.GraphicsPreemptionGranularity.InstructionBoundary">
            <summary>	
            DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.MapFlags">
            <summary>	
            DXGI_MAP_FLAGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.MapFlags.Read">
            <summary>	
            DXGI_MAP_READ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.MapFlags.Write">
            <summary>	
            DXGI_MAP_WRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.MapFlags.Discard">
            <summary>	
            DXGI_MAP_DISCARD	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.OfferResourcePriority">
            <summary>	
            DXGI_OFFER_RESOURCE_PRIORITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OfferResourcePriority.Low">
            <summary>	
            DXGI_OFFER_RESOURCE_PRIORITY_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OfferResourcePriority.Normal">
            <summary>	
            DXGI_OFFER_RESOURCE_PRIORITY_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OfferResourcePriority.High">
            <summary>	
            DXGI_OFFER_RESOURCE_PRIORITY_HIGH	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.PageCountType">
            <summary>
            PageCountType enumeration
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.PageCountType.FinalPageCount">
            <summary>
            The page count is the final page count.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.PageCountType.IntermediatePageCount">
            <summary>
            The page count is the intermediate page count.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.PresentFlags">
            <summary>	
            DXGI_PRESENT_FLAGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.Test">
            <summary>	
            DXGI_PRESENT_TEST	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.DoNotSequence">
            <summary>	
            DXGI_PRESENT_DO_NOT_SEQUENCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.Restart">
            <summary>	
            DXGI_PRESENT_RESTART	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.DoNotWait">
            <summary>	
            DXGI_PRESENT_DO_NOT_WAIT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.StereoPreferRight">
            <summary>	
            DXGI_PRESENT_STEREO_PREFER_RIGHT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.StereoTemporaryMono">
            <summary>	
            DXGI_PRESENT_STEREO_TEMPORARY_MONO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.RestrictToOutput">
            <summary>	
            DXGI_PRESENT_RESTRICT_TO_OUTPUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.UseDuration">
            <summary>	
            DXGI_PRESENT_USE_DURATION	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Residency">
            <summary>	
            DXGI_RESIDENCY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Residency.FullyResident">
            <summary>	
            DXGI_RESIDENCY_FULLY_RESIDENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Residency.ResidentInSharedMemory">
            <summary>	
            DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Residency.EvictedToDisk">
            <summary>	
            DXGI_RESIDENCY_EVICTED_TO_DISK	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ResourcePriority">
            <summary>	
            DXGI_RESOURCE_PRIORITY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ResourcePriority.Minimum">
            <summary>	
            DXGI_RESOURCE_PRIORITY_MINIMUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ResourcePriority.Low">
            <summary>	
            DXGI_RESOURCE_PRIORITY_LOW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ResourcePriority.Normal">
            <summary>	
            DXGI_RESOURCE_PRIORITY_NORMAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ResourcePriority.High">
            <summary>	
            DXGI_RESOURCE_PRIORITY_HIGH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ResourcePriority.Maximum">
            <summary>	
            DXGI_RESOURCE_PRIORITY_MAXIMUM	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Scaling">
            <summary>	
            DXGI_SCALING	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Scaling.Stretch">
            <summary>	
            DXGI_SCALING_STRETCH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Scaling.None">
            <summary>	
            DXGI_SCALING_NONE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Scaling.AspectRatioStretch">
            <summary>	
            DXGI_SCALING_ASPECT_RATIO_STRETCH	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SharedResourceFlags">
            <summary>	
            DXGI_SHARED_RESOURCE_FLAGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SharedResourceFlags.Read">
            <summary>	
            DXGI_SHARED_RESOURCE_READ	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SharedResourceFlags.Write">
            <summary>	
            DXGI_SHARED_RESOURCE_WRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SharedResourceFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapChainFlags">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.Nonprerotated">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_NONPREROTATED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.AllowModeSwitch">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.GdiCompatible">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.RestrictedContent">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.RestrictSharedResourceDriver">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.DisplayOnly">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.ForegroundLayer">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.FullScreenVideo">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapEffect">
            <summary>	
            DXGI_SWAP_EFFECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapEffect.Discard">
            <summary>	
            DXGI_SWAP_EFFECT_DISCARD	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapEffect.Sequential">
            <summary>	
            DXGI_SWAP_EFFECT_SEQUENTIAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapEffect.FlipSequential">
            <summary>	
            DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Usage">
            <summary>	
            DXGI_USAGE_ENUM	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Usage.ShaderInput">
            <summary>	
            DXGI_USAGE_SHADER_INPUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Usage.RenderTargetOutput">
            <summary>	
            DXGI_USAGE_RENDER_TARGET_OUTPUT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Usage.BackBuffer">
            <summary>	
            DXGI_USAGE_BACK_BUFFER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Usage.Shared">
            <summary>	
            DXGI_USAGE_SHARED	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Usage.ReadOnly">
            <summary>	
            DXGI_USAGE_READ_ONLY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Usage.DiscardOnPresent">
            <summary>	
            DXGI_USAGE_DISCARD_ON_PRESENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Usage.UnorderedAccess">
            <summary>	
            DXGI_USAGE_UNORDERED_ACCESS	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.WindowAssociationFlags">
            <summary>	
            DXGI_MWA_FLAGS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.WindowAssociationFlags.IgnoreAll">
            <summary>	
            DXGI_MWA_NO_WINDOW_CHANGES	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.WindowAssociationFlags.IgnoreAltEnter">
            <summary>	
            DXGI_MWA_NO_ALT_ENTER	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.WindowAssociationFlags.IgnorePrintScreen">
            <summary>	
            DXGI_MWA_NO_PRINT_SCREEN	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.WindowAssociationFlags.Valid">
            <summary>	
            DXGI_MWA_VALID	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.WindowAssociationFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.DXGI">
            <summary>
            DXGI functions.
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.DXGI.CreateFactoryDebug">
            <summary>DXGI_CREATE_FACTORY_DEBUG</summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.DXGI.CreateDXGIFactory1(System.Guid,System.IntPtr@)">
            <summary>	
            HRESULT CreateDXGIFactory1([In] const GUID&amp; riid,[Out] void** ppFactory)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ResultCode">
            <summary>	
            DXGI result codes.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.CannotProtectContent">
            <summary>
            DXGI_ERROR_CANNOT_PROTECT_CONTENT
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.AccessLost">
            <summary>
            DXGI_ERROR_ACCESS_LOST
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.WaitTimeout">
            <summary>
            DXGI_ERROR_WAIT_TIMEOUT
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.FrameStatisticsDisjoint">
            <summary>
            DXGI_ERROR_FRAME_STATISTICS_DISJOINT
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.DeviceHung">
            <summary>
            DXGI_ERROR_DEVICE_HUNG
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.SessionDisconnected">
            <summary>
            DXGI_ERROR_SESSION_DISCONNECTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.Unsupported">
            <summary>
            DXGI_ERROR_UNSUPPORTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.RestrictToOutputStale">
            <summary>
            DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.DeviceReset">
            <summary>
            DXGI_ERROR_DEVICE_RESET
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.DriverInternalError">
            <summary>
            DXGI_ERROR_DRIVER_INTERNAL_ERROR
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.InvalidCall">
            <summary>
            DXGI_ERROR_INVALID_CALL
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.NotFound">
            <summary>
            DXGI_ERROR_NOT_FOUND
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.WasStillDrawing">
            <summary>
            DXGI_ERROR_WAS_STILL_DRAWING
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.NameAlreadyExists">
            <summary>
            DXGI_ERROR_NAME_ALREADY_EXISTS
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.RemoteClientDisconnected">
            <summary>
            DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.DeviceRemoved">
            <summary>
            DXGI_ERROR_DEVICE_REMOVED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.AccessDenied">
            <summary>
            DXGI_ERROR_ACCESS_DENIED
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.RemoteOufOfMemory">
            <summary>
            DXGI_ERROR_REMOTE_OUTOFMEMORY
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.MoreData">
            <summary>
            DXGI_ERROR_MORE_DATA
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.ModeChangeInProgress">
            <summary>
            DXGI_ERROR_MODE_CHANGE_IN_PROGRESS
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.Nonexclusive">
            <summary>
            DXGI_ERROR_NONEXCLUSIVE
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.SdkComponentMissing">
            <summary>
            DXGI_ERROR_SDK_COMPONENT_MISSING
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.GraphicsVidpnSourceInUse">
            <summary>
            DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE
            </summary>
        </member>
        <member name="F:C1.Util.DX.DXGI.ResultCode.NotCurrentlyAvailable">
            <summary>
            DXGI_ERROR_NOT_CURRENTLY_AVAILABLE
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.Adapter1">
            <summary>	
            IDXGIAdapter1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Adapter1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter1.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Adapter1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Adapter1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter1.GetDescription1(C1.Util.DX.DXGI.AdapterDescription1@)">
            <summary>	
            HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.Adapter1.Description1">
            <summary>	
            GetDescription1	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Adapter2">
            <summary>	
            IDXGIAdapter2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Adapter2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter2.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Adapter2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Adapter2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Adapter2.GetDescription2(C1.Util.DX.DXGI.AdapterDescription2@)">
            <summary>	
            HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.DXGI.Adapter2.Description2">
            <summary>	
            GetDescription2	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Device1">
            <summary>	
            IDXGIDevice1	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Device1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device1.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Device1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Device1"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Device1.SetMaximumFrameLatency(System.Int32)">
            <summary>	
            HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] unsigned int MaxLatency)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device1.GetMaximumFrameLatency">
            <summary>	
            HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Device2">
            <summary>	
            IDXGIDevice2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Device2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device2.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Device2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Device2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Device2.OfferResources(System.Int32,C1.Util.DX.DXGI.Resource[],C1.Util.DX.DXGI.OfferResourcePriority)">
            <summary>	
            HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device2.OfferResources(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.DXGI.Resource},C1.Util.DX.DXGI.OfferResourcePriority)">
            <summary>	
            HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device2.ReclaimResources(System.Int32,C1.Util.DX.DXGI.Resource[],C1.Util.DX.Bool[])">
            <summary>	
            HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device2.ReclaimResources(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.DXGI.Resource},C1.Util.DX.Bool[])">
            <summary>	
            HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device2.EnqueueSetEvent(System.IntPtr)">
            <summary>	
            HRESULT IDXGIDevice2::EnqueueSetEvent([In] void* hEvent)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Device3">
            <summary>	
            IDXGIDevice3	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device3.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Device3"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Device3.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Device3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Device3"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Device3.Trim">
            <summary>	
            void IDXGIDevice3::Trim()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.PrintDocumentPackageTarget">
            <summary>
            IPrintDocumentPackageTarget
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.PrintDocumentPackageTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTarget.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.PrintDocumentPackageTarget">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.PrintDocumentPackageTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTarget.GetPackageTargetTypes">
            <summary>
            HRESULT IPrintDocumentPackageTarget::GetPackageTargetTypes([out] UINT32 *targetCount, [out] GUID **targetTypes)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTarget.GetPackageTarget(System.Guid)">
            <summary>
            HRESULT IPrintDocumentPackageTarget::GetPackageTarget([in] REFGUID guidTargetType, [in] REFIID riid, [out] void **ppvTarget)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTarget.GetPackageTarget(System.Guid,System.Guid)">
            <summary>
            HRESULT IPrintDocumentPackageTarget::GetPackageTarget([in] REFGUID guidTargetType, [in] REFIID riid, [out] void **ppvTarget)
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.PrintDocumentPackageTarget.Cancel">
            <summary>
            HRESULT IPrintDocumentPackageTarget::Cancel()
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.ISurfaceImageSourceManagerNative">
            <summary>	
            ISurfaceImageSourceManagerNative	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceManagerNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.ISurfaceImageSourceManagerNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceManagerNative.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.ISurfaceImageSourceManagerNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.ISurfaceImageSourceManagerNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceManagerNative.FlushAllSurfacesWithDevice(C1.Util.DX.ComObject)">
            <summary>	
            HRESULT ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice([In] IUnknown* device)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ISurfaceImageSourceNative">
            <summary>	
            ISurfaceImageSourceNative	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.ISurfaceImageSourceNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNative.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.ISurfaceImageSourceNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.ISurfaceImageSourceNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNative.SetDevice(C1.Util.DX.DXGI.Device)">
            <summary>	
            HRESULT ISurfaceImageSourceNative::SetDevice([In] IDXGIDevice* device)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNative.BeginDraw(C1.Util.DX.RectL,C1.Util.DX.Point2L@,C1.Util.DX.DXGI.Surface@)">
            <summary>	
            HRESULT ISurfaceImageSourceNative::BeginDraw([In] RECT updateRect,[Out] IDXGISurface** surface,[Out] POINT* offset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNative.EndDraw">
            <summary>	
            HRESULT ISurfaceImageSourceNative::EndDraw()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D">
            <summary>	
            ISurfaceImageSourceNativeWithD2D	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D.SetDevice(C1.Util.DX.ComObject)">
            <summary>	
            HRESULT ISurfaceImageSourceNativeWithD2D::SetDevice([In] IUnknown* device)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D.BeginDraw(C1.Util.DX.RectL,System.Guid,System.IntPtr@,C1.Util.DX.Point2L@)">
            <summary>	
            HRESULT ISurfaceImageSourceNativeWithD2D::BeginDraw([In] const RECT&amp; updateRect,[In] const GUID&amp; iid,[Out] void** updateObject,[Out] POINT* offset)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D.EndDraw">
            <summary>	
            HRESULT ISurfaceImageSourceNativeWithD2D::EndDraw()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D.SuspendDraw">
            <summary>	
            HRESULT ISurfaceImageSourceNativeWithD2D::SuspendDraw()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISurfaceImageSourceNativeWithD2D.ResumeDraw">
            <summary>	
            HRESULT ISurfaceImageSourceNativeWithD2D::ResumeDraw()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ISwapChainBackgroundPanelNative">
            <summary>	
            ISwapChainBackgroundPanelNative	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISwapChainBackgroundPanelNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.ISwapChainBackgroundPanelNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISwapChainBackgroundPanelNative.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.ISwapChainBackgroundPanelNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.ISwapChainBackgroundPanelNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.ISwapChainBackgroundPanelNative.SetSwapChain(C1.Util.DX.DXGI.SwapChain)">
            <summary>	
            HRESULT ISwapChainBackgroundPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ISwapChainPanelNative">
            <summary>	
            ISwapChainPanelNative	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISwapChainPanelNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.ISwapChainPanelNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ISwapChainPanelNative.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.ISwapChainPanelNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.ISwapChainPanelNative"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.ISwapChainPanelNative.SetSwapChain(C1.Util.DX.DXGI.SwapChain)">
            <summary>	
            HRESULT ISwapChainPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.KeyedMutex">
            <summary>	
            IDXGIKeyedMutex	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.KeyedMutex.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.KeyedMutex"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.KeyedMutex.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.KeyedMutex">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.KeyedMutex"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)">
            <summary>	
            HRESULT IDXGIKeyedMutex::AcquireSync([In] unsigned longlong Key,[In] unsigned int dwMilliseconds)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.KeyedMutex.Release(System.Int64)">
            <summary>	
            HRESULT IDXGIKeyedMutex::ReleaseSync([In] unsigned longlong Key)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Output2">
            <summary>	
            IDXGIOutput2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.DXGI.Output2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.DXGI.Output2.op_Explicit(System.IntPtr)~C1.Util.DX.DXGI.Output2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.DXGI.Output2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Output2.SupportsOverlays_">
            <summary>	
            BOOL IDXGIOutput2::SupportsOverlays()	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.AdapterDescription">
            <summary>	
            DXGI_ADAPTER_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.Description">
            <summary>	
            wchar_t Description[128]	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.VendorId">
            <summary>	
            unsigned int VendorId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.DeviceId">
            <summary>	
            unsigned int DeviceId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.SubSysId">
            <summary>	
            unsigned int SubSysId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.Revision">
            <summary>	
            unsigned int Revision	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.DedicatedVideoMemory">
            <summary>	
            SIZE_T DedicatedVideoMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.DedicatedSystemMemory">
            <summary>	
            SIZE_T DedicatedSystemMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.SharedSystemMemory">
            <summary>	
            SIZE_T SharedSystemMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription.AdapterLuid">
            <summary>	
            LUID AdapterLuid	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.AdapterDescription1">
            <summary>	
            DXGI_ADAPTER_DESC1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.Description">
            <summary>	
            wchar_t Description[128]	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.VendorId">
            <summary>	
            unsigned int VendorId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.DeviceId">
            <summary>	
            unsigned int DeviceId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.SubSysId">
            <summary>	
            unsigned int SubSysId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.Revision">
            <summary>	
            unsigned int Revision	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.DedicatedVideoMemory">
            <summary>	
            SIZE_T DedicatedVideoMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.DedicatedSystemMemory">
            <summary>	
            SIZE_T DedicatedSystemMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.SharedSystemMemory">
            <summary>	
            SIZE_T SharedSystemMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.AdapterLuid">
            <summary>	
            LUID AdapterLuid	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription1.Flags">
            <summary>	
            DXGI_ADAPTER_FLAG Flags	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.AdapterDescription2">
            <summary>	
            DXGI_ADAPTER_DESC2	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.Description">
            <summary>	
            wchar_t Description[128]	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.VendorId">
            <summary>	
            unsigned int VendorId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.DeviceId">
            <summary>	
            unsigned int DeviceId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.SubSysId">
            <summary>	
            unsigned int SubSysId	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.Revision">
            <summary>	
            unsigned int Revision	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.DedicatedVideoMemory">
            <summary>	
            SIZE_T DedicatedVideoMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.DedicatedSystemMemory">
            <summary>	
            SIZE_T DedicatedSystemMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.SharedSystemMemory">
            <summary>	
            SIZE_T SharedSystemMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.AdapterLuid">
            <summary>	
            LUID AdapterLuid	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.Flags">
            <summary>	
            DXGI_ADAPTER_FLAG Flags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.GraphicsPreemptionGranularity">
            <summary>	
            DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.AdapterDescription2.ComputePreemptionGranularity">
            <summary>	
            DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.FrameStatistics">
            <summary>	
            DXGI_FRAME_STATISTICS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.FrameStatistics.PresentCount">
            <summary>	
            unsigned int PresentCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.FrameStatistics.PresentRefreshCount">
            <summary>	
            unsigned int PresentRefreshCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.FrameStatistics.SyncRefreshCount">
            <summary>	
            unsigned int SyncRefreshCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.FrameStatistics.SyncQPCTime">
            <summary>	
            LARGE_INTEGER SyncQPCTime	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.FrameStatistics.SyncGPUTime">
            <summary>	
            LARGE_INTEGER SyncGPUTime	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.MappedRectangle">
            <summary>	
            DXGI_MAPPED_RECT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.MappedRectangle.Pitch">
            <summary>	
            int Pitch	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.MappedRectangle.PBits">
            <summary>	
            unsigned char* pBits	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.ModeDescription">
            <summary>	
            DXGI_MODE_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription.RefreshRate">
            <summary>	
            DXGI_RATIONAL RefreshRate	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription.ScanlineOrdering">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER ScanlineOrdering	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription.Scaling">
            <summary>	
            DXGI_MODE_SCALING Scaling	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.ModeDescription.#ctor(System.Int32,System.Int32,C1.Util.DX.DXGI.Rational,C1.Util.DX.DXGI.Format)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Win.DX.DXGI.ModeDescription" /> structure.
            </summary>
            <param name = "width">The width.</param>
            <param name = "height">The height.</param>
            <param name = "refreshRate">The refresh rate.</param>
            <param name = "format">The format.</param>
        </member>
        <member name="T:C1.Util.DX.DXGI.ModeDescription1">
            <summary>	
            DXGI_MODE_DESC1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription1.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription1.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription1.RefreshRate">
            <summary>	
            DXGI_RATIONAL RefreshRate	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription1.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription1.ScanlineOrdering">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER ScanlineOrdering	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription1.Scaling">
            <summary>	
            DXGI_MODE_SCALING Scaling	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.ModeDescription1.Stereo">
            <summary>	
            BOOL Stereo	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.OutputDescription">
            <summary>	
            DXGI_OUTPUT_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OutputDescription.DeviceName">
            <summary>	
            wchar_t DeviceName[32]	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OutputDescription.DesktopCoordinates">
            <summary>	
            RECT DesktopCoordinates	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OutputDescription.AttachedToDesktop">
            <summary>	
            BOOL AttachedToDesktop	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OutputDescription.Rotation">
            <summary>	
            DXGI_MODE_ROTATION Rotation	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.OutputDescription.Monitor">
            <summary>	
            HMONITOR Monitor	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.PresentParameters">
            <summary>	
            DXGI_PRESENT_PARAMETERS	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentParameters.DirtyRectangles">
            <summary>	
            A list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame. For more information about updating dirty rectangles, see Remarks. You can set this member to <c>null</c> if DirtyRectsCount is 0. An application must not update any pixel outside of the dirty rectangles.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentParameters.ScrollRectangle">
            <summary>	
            A reference to the scrolled rectangle.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.PresentParameters.ScrollOffset">
            <summary>	
            A reference to the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). You can set this member to <c>null</c> to indicate no offset.
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.Rational">
            <summary>	
            DXGI_RATIONAL	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Rational.Numerator">
            <summary>	
            unsigned int Numerator	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Rational.Denominator">
            <summary>	
            unsigned int Denominator	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.Rational.Empty">
            <summary>
            An empty rational that can be used for comparisons. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:C1.Win.DX.DXGI.Rational" /> structure.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Rational.Equals(C1.Util.DX.DXGI.Rational)">
            <summary>
            Determines whether the specified Rational is equal to the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Rational.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Rational.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Rational.op_Equality(C1.Util.DX.DXGI.Rational,C1.Util.DX.DXGI.Rational)">
            <summary>
            Determines if the specified Rational objects are equal.
            </summary>
        </member>
        <member name="M:C1.Util.DX.DXGI.Rational.op_Inequality(C1.Util.DX.DXGI.Rational,C1.Util.DX.DXGI.Rational)">
            <summary>
            Determines if the specified Rational objects are not equal.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.SampleDescription">
            <summary>	
            DXGI_SAMPLE_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SampleDescription.Count">
            <summary>	
            unsigned int Count	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SampleDescription.Quality">
            <summary>	
            unsigned int Quality	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.DXGI.SampleDescription.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:C1.Win.DX.DXGI.SampleDescription" /> structure.
            </summary>
            <param name = "count">The sample count.</param>
            <param name = "quality">The sample quality.</param>
        </member>
        <member name="M:C1.Util.DX.DXGI.SampleDescription.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:C1.Util.DX.DXGI.SharedResource">
            <summary>	
            DXGI_SHARED_RESOURCE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SharedResource.Handle">
            <summary>	
            void* Handle	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SurfaceDescription">
            <summary>	
            DXGI_SURFACE_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SurfaceDescription.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SurfaceDescription.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SurfaceDescription.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SurfaceDescription.SampleDesc">
            <summary>	
            DXGI_SAMPLE_DESC SampleDesc	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapChainDescription">
            <summary>	
            DXGI_SWAP_CHAIN_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.BufferDesc">
            <summary>	
            DXGI_MODE_DESC BufferDesc	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.SampleDesc">
            <summary>	
            DXGI_SAMPLE_DESC SampleDesc	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.BufferUsage">
            <summary>	
            DXGI_USAGE_ENUM BufferUsage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.BufferCount">
            <summary>	
            unsigned int BufferCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.OutputWindow">
            <summary>	
            HWND OutputWindow	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.Windowed">
            <summary>	
            BOOL Windowed	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.SwapEffect">
            <summary>	
            DXGI_SWAP_EFFECT SwapEffect	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription.Flags">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG Flags	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapChainDescription1">
            <summary>	
            DXGI_SWAP_CHAIN_DESC1	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.Format">
            <summary>	
            DXGI_FORMAT Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.Stereo">
            <summary>	
            BOOL Stereo	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.SampleDesc">
            <summary>	
            DXGI_SAMPLE_DESC SampleDesc	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.BufferUsage">
            <summary>	
            DXGI_USAGE_ENUM BufferUsage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.BufferCount">
            <summary>	
            unsigned int BufferCount	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.Scaling">
            <summary>	
            DXGI_SCALING Scaling	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.SwapEffect">
            <summary>	
            DXGI_SWAP_EFFECT SwapEffect	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.AlphaMode">
            <summary>	
            DXGI_ALPHA_MODE AlphaMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainDescription1.Flags">
            <summary>	
            DXGI_SWAP_CHAIN_FLAG Flags	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.DXGI.SwapChainFullScreenDescription">
            <summary>	
            DXGI_SWAP_CHAIN_FULLSCREEN_DESC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFullScreenDescription.RefreshRate">
            <summary>	
            DXGI_RATIONAL RefreshRate	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFullScreenDescription.ScanlineOrdering">
            <summary>	
            DXGI_MODE_SCANLINE_ORDER ScanlineOrdering	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFullScreenDescription.Scaling">
            <summary>	
            DXGI_MODE_SCALING Scaling	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.DXGI.SwapChainFullScreenDescription.Windowed">
            <summary>	
            BOOL Windowed	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.ComStream">
            <summary>	
            IStream	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.ComStreamBase">
            <summary>	
            ISequentialStream	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.IStreamBase">
            <summary>	
            ISequentialStream	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.IStreamBase.Read(System.IntPtr,System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.
            </summary>
            <param name="buffer">The read buffer.</param>
            <param name="numberOfBytesToRead">The number of bytes to read.</param>
            <returns>The actual number of bytes read from the stream object. </returns>
        </member>
        <member name="M:C1.Util.DX.Storage.IStreamBase.Write(System.IntPtr,System.Int32)">
            <summary>
            Writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="numberOfBytesToRead">The number of bytes to read.</param>
            <returns>The actual number of bytes written to the stream object</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamBase.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Storage.ComStreamBase"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamBase.op_Explicit(System.IntPtr)~C1.Util.DX.Storage.ComStreamBase">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Storage.ComStreamBase"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamBase.Read(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ISequentialStream::Read([Out, Buffer] void* pv,[In] unsigned int cb,[Out, Optional] unsigned int* pcbRead)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamBase.Write(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT ISequentialStream::Write([In, Buffer] const void* pv,[In] unsigned int cb,[Out, Optional] unsigned int* pcbWritten)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.IStream">
            <summary>	
            IStream	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.
            </summary>
            <param name="offset">The offset.</param>
            <param name="origin">The origin.</param>
            <returns>The offset of the seek pointer from the beginning of the stream.</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.SetSize(System.Int64)">
            <summary>
            Changes the size of the stream object.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.CopyTo(C1.Util.DX.Storage.IStream,System.Int64,System.Int64@)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.
            </summary>
            <param name="streamDest">The stream destination.</param>
            <param name="numberOfBytesToCopy">The number of bytes to copy.</param>
            <param name="bytesWritten">The number of bytes written.</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.Commit(C1.Util.DX.Storage.CommitFlags)">
            <summary>
            Commit method ensures that any changes made to a stream object open in transacted mode are reflected in the parent storage. If the stream object is open in direct mode, Commit has no effect other than flushing all memory buffers to the next-level storage object. The COM compound file implementation of streams does not support opening streams in transacted mode.
            </summary>
            <param name="commitFlags">The GRF commit flags.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.Revert">
            <summary>
            Discards all changes that have been made to a transacted stream since the last <see cref="M:C1.Util.DX.Storage.IStream.Commit(C1.Util.DX.Storage.CommitFlags)"/> call. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.LockRegion(System.Int64,System.Int64,C1.Util.DX.Storage.LockType)">
            <summary>
            Restricts access to a specified range of bytes in the stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="numberOfBytesToLock">The number of bytes to lock.</param>
            <param name="dwLockType">Type of the dw lock.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.UnlockRegion(System.Int64,System.Int64,C1.Util.DX.Storage.LockType)">
            <summary>
            Unlocks access to a specified range of bytes in the stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="numberOfBytesToLock">The number of bytes to lock.</param>
            <param name="dwLockType">Type of the dw lock.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.GetStatistics(C1.Util.DX.Storage.StorageStatisticsFlags)">
            <summary>
            Gets the statistics.
            </summary>
            <param name="storageStatisticsFlags">The storage statistics flags.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.IStream.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.CopyTo(C1.Util.DX.Storage.IStream,System.Int64,System.Int64@)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.
            </summary>
            <param name="streamDest">The stream destination.</param>
            <param name="numberOfBytesToCopy">The number of bytes to copy.</param>
            <param name="bytesWritten">The bytes written.</param>
            <returns>The number of bytes read from this instance</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.ToIntPtr(C1.Util.DX.Storage.IStream)">
            <summary>
            Gets a com pointer to the underlying <see cref="T:C1.Util.DX.Storage.IStream"/> object.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A Com pointer</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Storage.ComStream"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.op_Explicit(System.IntPtr)~C1.Util.DX.Storage.ComStream">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.Storage.ComStream"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>	
            HRESULT IStream::Seek([In] LARGE_INTEGER dlibMove,[In] SHARPDX_SEEKORIGIN dwOrigin,[Out, Optional] ULARGE_INTEGER* plibNewPosition)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.SetSize(System.Int64)">
            <summary>	
            HRESULT IStream::SetSize([In] ULARGE_INTEGER libNewSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.CopyTo_(System.IntPtr,System.Int64,System.Int64@)">
            <summary>	
            HRESULT IStream::CopyTo([In] IStream* pstm,[In] ULARGE_INTEGER cb,[Out] ULARGE_INTEGER* pcbRead,[Out] ULARGE_INTEGER* pcbWritten)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.Commit(C1.Util.DX.Storage.CommitFlags)">
            <summary>	
            HRESULT IStream::Commit([In] STGC grfCommitFlags)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.Revert">
            <summary>	
            HRESULT IStream::Revert()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.LockRegion(System.Int64,System.Int64,C1.Util.DX.Storage.LockType)">
            <summary>	
            HRESULT IStream::LockRegion([In] ULARGE_INTEGER libOffset,[In] ULARGE_INTEGER cb,[In] LOCKTYPE dwLockType)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.UnlockRegion(System.Int64,System.Int64,C1.Util.DX.Storage.LockType)">
            <summary>	
            HRESULT IStream::UnlockRegion([In] ULARGE_INTEGER libOffset,[In] ULARGE_INTEGER cb,[In] LOCKTYPE dwLockType)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.GetStatistics(C1.Util.DX.Storage.StorageStatisticsFlags)">
            <summary>	
            HRESULT IStream::Stat([Out] STATSTG* pstatstg,[In] STATFLAG grfStatFlag)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.Storage.ComStream.Clone">
            <summary>	
            HRESULT IStream::Clone([Out] IStream** ppstm)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.ComStreamBaseShadow">
            <summary>
            A ComStream Interface Callback
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.ComStreamProxy">
            <summary>
            An implementation of the IStream interface wrapping up a System.IO.Stream.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.#ctor(System.IO.Stream)">
            <summary>
            Creates an instance of ComStreamProxy for the given sourceStream.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.Read(System.IntPtr,System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.Write(System.IntPtr,System.Int32)">
            <summary>
            Writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.SetSize(System.Int64)">
            <summary>
            Changes the size of the stream object.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.CopyTo(C1.Util.DX.Storage.IStream,System.Int64,System.Int64@)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.Commit(C1.Util.DX.Storage.CommitFlags)">
            <summary>
            Commit method ensures that any changes made to a stream object open in transacted mode are reflected in the parent storage. If the stream object is open in direct mode, Commit has no effect other than flushing all memory buffers to the next-level storage object. The COM compound file implementation of streams does not support opening streams in transacted mode.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.Revert">
            <summary>
            Not implemented. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.LockRegion(System.Int64,System.Int64,C1.Util.DX.Storage.LockType)">
            <summary>
            Not implemented. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.UnlockRegion(System.Int64,System.Int64,C1.Util.DX.Storage.LockType)">
            <summary>
            Not implemented. 
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.GetStatistics(C1.Util.DX.Storage.StorageStatisticsFlags)">
            <summary>
            Gets the statistics.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamProxy.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.ComStreamShadow">
            <summary>
            A ComStream Interface Callback
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStreamShadow.ToIntPtr(C1.Util.DX.Storage.IStream)">
            <summary>
            Callbacks to pointer.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Util.DX.Storage.ComStringEnumerator">
            <summary>
            An enumerator using internally a <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumString"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.ComStringEnumerator.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Storage.ComStringEnumerator"/> class.
            </summary>
            <param name="ptrToIEnumString">The PTR to I enum string.</param>
        </member>
        <member name="T:C1.Util.DX.Storage.PropertyBagKey`2">
            <summary>
            Identifies a typed property in a <see cref="T:C1.Util.DX.Storage.PropertyBag"/>.
            </summary>
            <typeparam name="T1">The public type of this property.</typeparam>
            <typeparam name="T2">The marshaling type of this property.</typeparam>
        </member>
        <member name="M:C1.Util.DX.Storage.PropertyBagKey`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Storage.PropertyBagKey`2"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:C1.Util.DX.Storage.PropertyBagKey`2.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.PropertyBag">
            <summary>
            Implementation of OLE IPropertyBag2.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.PropertyBag.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Storage.PropertyBag"/> class.
            </summary>
            <param name="propertyBagPointer">The property bag pointer.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.PropertyBag.NativePointerUpdated(System.IntPtr)">
            <summary>
            Method called when the <see cref="P:C1.Util.DX.CppObject.NativePointer"/> is updated.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.PropertyBag.Get(System.String)">
            <summary>
            Gets the value of the property with this name.
            </summary>
            <param name="name">The name.</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.PropertyBag.Get``2(C1.Util.DX.Storage.PropertyBagKey{``0,``1})">
            <summary>
            Gets the value of the property by using a <see cref="T:C1.Util.DX.Storage.PropertyBagKey`2"/>
            </summary>
            <typeparam name="T1">The public type of this property.</typeparam>
            <typeparam name="T2">The marshaling type of this property.</typeparam>
            <param name="propertyKey">The property key.</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.PropertyBag.Set(System.String,System.Object)">
            <summary>
            Sets the value of the property with this name
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.PropertyBag.Set``2(C1.Util.DX.Storage.PropertyBagKey{``0,``1},``0)">
            <summary>
            Sets the value of the property by using a <see cref="T:C1.Util.DX.Storage.PropertyBagKey`2"/>
            </summary>
            <typeparam name="T1">The public type of this property.</typeparam>
            <typeparam name="T2">The marshaling type of this property.</typeparam>
            <param name="propertyKey">The property key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:C1.Util.DX.Storage.PropertyBag.Count">
            <summary>
            Gets the number of properties.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Storage.PropertyBag.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.NativeFile">
            <summary>
            Windows File Helper.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.Exists(System.String)">
            <summary>
            Checks if the specified file path exists.
            </summary>
            <param name="filePath">The file path.</param>
            <returns><c>true</c> if the specified file path exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.ReadAllText(System.String,System.Text.Encoding,C1.Util.DX.Storage.NativeFileShare)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding.</param>
            <param name="sharing">The sharing.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time access for the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>The last write time access</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.ReadFile(System.IntPtr,System.IntPtr,System.Int32,System.Int32@,System.IntPtr)">
            <summary>
            Reads to a file.
            </summary>
            <param name="fileHandle">The file handle.</param>
            <param name="buffer">The buffer.</param>
            <param name="numberOfBytesToRead">The number of bytes to read.</param>
            <param name="numberOfBytesRead">The number of bytes read.</param>
            <param name="overlapped">The overlapped.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.WriteFile(System.IntPtr,System.IntPtr,System.Int32,System.Int32@,System.IntPtr)">
            <summary>
            Writes to a file.
            </summary>
            <param name="fileHandle">The file handle.</param>
            <param name="buffer">The buffer.</param>
            <param name="numberOfBytesToRead">The number of bytes to read.</param>
            <param name="numberOfBytesRead">The number of bytes read.</param>
            <param name="overlapped">The overlapped.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.SetFilePointerEx(System.IntPtr,System.Int64,System.Int64@,System.IO.SeekOrigin)">
            <summary>
            Sets the file pointer.
            </summary>
            <param name="handle">The handle.</param>
            <param name="distanceToMove">The distance to move.</param>
            <param name="distanceToMoveHigh">The distance to move high.</param>
            <param name="seekOrigin">The seek origin.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.SetEndOfFile(System.IntPtr)">
            <summary>
            Sets the end of file.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.Create(System.String,C1.Util.DX.Storage.NativeFileAccess,C1.Util.DX.Storage.NativeFileShare,System.IntPtr,C1.Util.DX.Storage.NativeFileMode,C1.Util.DX.Storage.NativeFileOptions,System.IntPtr)">
            <summary>
            Creates the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="desiredAccess">The desired access.</param>
            <param name="shareMode">The share mode.</param>
            <param name="securityAttributes">The security attributes.</param>
            <param name="mode">The creation disposition.</param>
            <param name="flagsAndOptions">The flags and attributes.</param>
            <param name="templateFile">The template file.</param>
            <returns>A handle to the created file. IntPtr.Zero if failed.</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFile.GetFileSizeEx(System.IntPtr,System.Int64@)">
            <summary>
            Gets the size of the file.
            </summary>
            <param name="handle">The handle.</param>
            <param name="fileSize">Size of the file.</param>
        </member>
        <member name="T:C1.Util.DX.Storage.NativeFileStream">
            <summary>
            Windows File Helper.
            </summary>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.#ctor(System.String,C1.Util.DX.Storage.NativeFileMode,C1.Util.DX.Storage.NativeFileAccess,C1.Util.DX.Storage.NativeFileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.Storage.NativeFileStream"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileMode">The file mode.</param>
            <param name="access">The access mode.</param>
            <param name="share">The share mode.</param>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.Read(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified buffer with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The byte offset in array at which the read bytes will be placed. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.Write(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="M:C1.Util.DX.Storage.NativeFileStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Util.DX.Storage.NativeFileStream.Handle">
            <summary>
            Gets the stream handle.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Storage.NativeFileStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:C1.Util.DX.Storage.NativeFileStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:C1.Util.DX.Storage.NativeFileStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:C1.Util.DX.Storage.NativeFileStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:C1.Util.DX.Storage.NativeFileStream.Position">
            <inheritdoc/>
        </member>
        <member name="T:C1.Util.DX.Storage.CommitFlags">
            <summary>	
            STGC	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.CommitFlags.Default">
            <summary>	
            STGC_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.CommitFlags.Overwrite">
            <summary>	
            STGC_OVERWRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.CommitFlags.OnlyCurrent">
            <summary>	
            STGC_ONLYIFCURRENT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.CommitFlags.DangerouslyCommitMerelyToDiskCache">
            <summary>	
            STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.CommitFlags.Consolidate">
            <summary>	
            STGC_CONSOLIDATE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.LockType">
            <summary>	
            LOCKTYPE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.LockType.Write">
            <summary>	
            LOCK_WRITE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.LockType.Exclusive">
            <summary>	
            LOCK_EXCLUSIVE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.LockType.OnlyOnce">
            <summary>	
            LOCK_ONLYONCE	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.NativeFileAccess">
            <summary>
            Native File access flags.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileAccess.Read">
            <summary>
            Read access.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileAccess.Write">
            <summary>
            Write access.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileAccess.ReadWrite">
            <summary>
            Read/Write Access,
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileAccess.Execute">
            <summary>
            Execute access.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileAccess.All">
            <summary>
            All access
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.NativeFileMode">
            <summary>
            Native file creation disposition.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileMode.CreateNew">
            <summary>
            Creates a new file. The function fails if a specified file exists.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileMode.Create">
            <summary>
            Creates a new file, always.
            If a file exists, the function overwrites the file, clears the existing attributes, combines the specified file attributes,
            and flags with FILE_ATTRIBUTE_ARCHIVE, but does not set the security descriptor that the SECURITY_ATTRIBUTES structure specifies.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileMode.Open">
            <summary>
            Opens a file. The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileMode.OpenOrCreate">
            <summary>
            Opens a file, always.
            If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileMode.Truncate">
            <summary>
            Opens a file and truncates it so that its size is 0 (zero) bytes. The function fails if the file does not exist.
            The calling process must open the file with the GENERIC_WRITE access right.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.NativeFileOptions">
            <summary>
            Native file attributes.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.None">
            <summary>
            None attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Readonly">
            <summary>
            Read only attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Hidden">
            <summary>
            Hidden attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.System">
            <summary>
            System attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Directory">
            <summary>
            Directory attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Archive">
            <summary>
            Archive attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Device">
            <summary>
            Device attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Normal">
            <summary>
            Normal attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Temporary">
            <summary>
            Temporary attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.SparseFile">
            <summary>
            Sparse file attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.ReparsePoint">
            <summary>
            ReparsePoint attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Compressed">
            <summary>
            Compressed attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Offline">
            <summary>
            Offline attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.NotContentIndexed">
            <summary>
            Not content indexed attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Encrypted">
            <summary>
            Encrypted attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Write_Through">
            <summary>
            Write through attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.Overlapped">
            <summary>
            Overlapped attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.NoBuffering">
            <summary>
            No buffering attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.RandomAccess">
            <summary>
            Random access attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.SequentialScan">
            <summary>
            Sequential scan attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.DeleteOnClose">
            <summary>
            Delete on close attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.BackupSemantics">
            <summary>
            Backup semantics attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.PosixSemantics">
            <summary>
            Post semantics attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.OpenReparsePoint">
            <summary>
            Open reparse point attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.OpenNoRecall">
            <summary>
            Open no recall attribute.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileOptions.FirstPipeInstance">
            <summary>
            First pipe instance attribute.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.NativeFileShare">
            <summary>
            Native file share.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileShare.None">
            <summary>
            None flag.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileShare.Read">
            <summary>
            Enables subsequent open operations on an object to request read access.
            Otherwise, other processes cannot open the object if they request read access.
            If this flag is not specified, but the object has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileShare.Write">
            <summary>
            Enables subsequent open operations on an object to request write access.
            Otherwise, other processes cannot open the object if they request write access.
            If this flag is not specified, but the object has been opened for write access, the function fails.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileShare.ReadWrite">
            <summary>
            Read and Write flags.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.NativeFileShare.Delete">
            <summary>
            Enables subsequent open operations on an object to request delete access.
            Otherwise, other processes cannot open the object if they request delete access.
            If this flag is not specified, but the object has been opened for delete access, the function fails.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.StorageStatisticsFlags">
            <summary>	
            STATFLAG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatisticsFlags.Default">
            <summary>	
            STATFLAG_DEFAULT	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatisticsFlags.NoName">
            <summary>	
            STATFLAG_NONAME	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatisticsFlags.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.VariantElementType">
            <summary>
            Type of a simple variant value.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Empty">
            <summary>
            VT_EMPTY
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Null">
            <summary>
            VT_NULL
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Short">
            <summary>
            VT_I2
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Int">
            <summary>
            VT_I4
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Float">
            <summary>
            VT_R4
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Double">
            <summary>
            VT_R8
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Currency">
            <summary>
            VT_CY
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Date">
            <summary>
            VT_DATE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.BinaryString">
            <summary>
            VT_BSTR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Dispatch">
            <summary>
            VT_DISPATCH
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Error">
            <summary>
            VT_ERROR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Bool">
            <summary>
            VT_BOOL
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Variant">
            <summary>
            VT_VARIANT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.ComUnknown">
            <summary>
            VT_UNKNOWN
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Decimal">
            <summary>
            VT_DECIMAL
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Byte">
            <summary>
            VT_I1
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.UByte">
            <summary>
            VT_UI1
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.UShort">
            <summary>
            VT_UI2
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.UInt">
            <summary>
            VT_UI4
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Long">
            <summary>
            VT_I8
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.ULong">
            <summary>
            VT_UI8
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Int1">
            <summary>
            VT_INT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.UInt1">
            <summary>
            VT_UINT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Void">
            <summary>
            VT_VOID
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.HResult">
            <summary>
            VT_HRESULT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Pointer">
            <summary>
            VT_PTR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.SafeArray">
            <summary>
            VT_SAFEARRAY
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.ConstantArray">
            <summary>
            VT_CARRAY
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.UserDefined">
            <summary>
            VT_USERDEFINED
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.StringPointer">
            <summary>
            VT_LPSTR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.WStringPointer">
            <summary>
            VT_LPWSTR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Record">
            <summary>
            VT_RECORD
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.IntPointer">
            <summary>
            VT_INT_PTR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.UIntPointer">
            <summary>
            VT_UINT_PTR
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.FileTime">
            <summary>
            VT_FILETIME
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Blob">
            <summary>
            VT_BLOB
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Stream">
            <summary>
            VT_STREAM
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Storage">
            <summary>
            VT_STORAGE
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.StreamedObject">
            <summary>
            VT_STREAMED_OBJECT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.StoredObject">
            <summary>
            VT_STORED_OBJECT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.BlobObject">
            <summary>
            VT_BLOB_OBJECT
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.ClipData">
            <summary>
            VT_CF
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.Clsid">
            <summary>
            VT_CLSID
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.VersionedStream">
            <summary>
            VT_VERSIONED_STREAM
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantElementType.BinaryStringBlob">
            <summary>
            VT_BSTR_BLOB
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.VariantType">
            <summary>
            Type of a variant
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantType.Default">
            <summary>
            Simple value
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantType.Vector">
            <summary>
            Vector value.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantType.Array">
            <summary>
            Array value.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantType.ByRef">
            <summary>
            By reference.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.VariantType.Reserved">
            <summary>
            Reserved value.
            </summary>
        </member>
        <member name="T:C1.Util.DX.Storage.SecurityAttributes">
            <summary>
            Security attributes.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.SecurityAttributes.Length">
            <summary>
            Length.
            </summary>
        </member>
        <member name="F:C1.Util.DX.Storage.SecurityAttributes.Descriptor">
            <summary>
            Descriptor.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Storage.SecurityAttributes.InheritHandle">
            <summary>
            Gets or sets a value indicating whether [inherit handle].
            </summary>
            <value>
              <c>true</c> if [inherit handle]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:C1.Util.DX.Storage.StorageStatistics">
            <summary>	
            STATSTG	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.PwcsName">
            <summary>	
            wchar_t* pwcsName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.Type">
            <summary>	
            unsigned int type	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.CbSize">
            <summary>	
            ULARGE_INTEGER cbSize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.Mtime">
            <summary>	
            FILETIME mtime	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.Ctime">
            <summary>	
            FILETIME ctime	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.Atime">
            <summary>	
            FILETIME atime	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.GrfMode">
            <summary>	
            unsigned int grfMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.GrfLocksSupported">
            <summary>	
            unsigned int grfLocksSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.Clsid">
            <summary>	
            GUID clsid	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.GrfStateBits">
            <summary>	
            unsigned int grfStateBits	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.Storage.StorageStatistics.Reserved">
            <summary>	
            unsigned int reserved	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.Storage.Variant">
            <summary>
            Variant COM.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Storage.Variant.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>
            The type of the element.
            </value>
        </member>
        <member name="P:C1.Util.DX.Storage.Variant.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Storage.Variant.PrimitiveType">
            <summary>
            Gets the primitive Type.
            </summary>
        </member>
        <member name="P:C1.Util.DX.Storage.Variant.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.Bitmap">
            <summary>	
            IWICBitmap	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapSource">
            <summary>	
            IWICBitmapSource	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels(C1.Util.DX.RectL,System.Int32,C1.Util.DX.DataPointer)">
            <summary>	
            <p>Instructs the object to produce pixels.</p>	
            </summary>	
            <param name="rectangle"><dd>  <p>The rectangle to copy. A <strong><c>null</c></strong> value specifies the entire bitmap.</p> </dd></param>	
            <param name="stride"><dd>  <p>The stride of the bitmap</p> </dd></param>	
            <param name="dataPointer"><dd>  <p>A reference to the buffer.</p> </dd></param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels(System.Int32,C1.Util.DX.DataPointer)">
            <summary>	
            <p>Instructs the object to produce pixels.</p>	
            </summary>	
            <param name="stride"><dd>  <p>The stride of the bitmap</p> </dd></param>	
            <param name="dataPointer"><dd>  <p>A reference to the buffer.</p> </dd></param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            <p>Instructs the object to produce pixels.</p>	
            </summary>	
            <param name="stride"><dd>  <p>The stride of the bitmap</p> </dd></param>	
            <param name="dataPointer"><dd>  <p>A reference to the buffer.</p> </dd></param>	
            <param name="size">Size of the buffer in bytes.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels``1(C1.Util.DX.RectL,``0[])">
            <summary>	
            <p>Instructs the object to produce pixels.</p>	
            </summary>	
            <param name="rectangle">The rectangle to copy.</param>	
            <param name="output">The destination array. The size of the array must be sizeof(pixel) * rectangle.Width * rectangle.Height</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels``1(``0[])">
            <summary>	
            <p>Instructs the object to produce pixels.</p>	
            </summary>	
            <param name="output">The destination array. The size of the array must be sizeof(pixel) * Width * Height</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels(C1.Util.DX.RectL,System.Byte[],System.Int32)">
            <summary>
            <p>Instructs the object to produce pixels.</p>
            </summary>
            <param name="rectangle">The rectangle to copy.</param>	
            <param name="output">The destination array. The size of the array must be sizeof(pixel) * Width * Height</param>
            <param name="stride">The stride (number of bytes per row).</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels(System.Byte[],System.Int32)">
            <summary>
            <p>Instructs the object to produce pixels.</p>
            </summary>
            <param name="output">The destination array. The size of the array must be sizeof(pixel) * Width * Height</param>
            <param name="stride">The stride (number of bytes per row).</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapSource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapSource">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapSource"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.GetSize(System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICBitmapSource::GetSize([Out] unsigned int* puiWidth,[Out] unsigned int* puiHeight)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.GetPixelFormat">
            <summary>	
            HRESULT IWICBitmapSource::GetPixelFormat([Out] GUID* pPixelFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.GetResolution(System.Double@,System.Double@)">
            <summary>	
            HRESULT IWICBitmapSource::GetResolution([Out] double* pDpiX,[Out] double* pDpiY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPalette(C1.Util.DX.WIC.Palette)">
            <summary>	
            HRESULT IWICBitmapSource::CopyPalette([In, Optional] IWICPalette* pIPalette)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSource.CopyPixels(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapSource::CopyPixels([In] const void* prc,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In] void* pbBuffer)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapSource.Size">
            <summary>	
            <p>Retrieves the pixel width and height of the bitmap.</p>	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Create(C1.Util.DX.WIC.ImagingFactory,System.Int32,System.Int32,System.Guid,C1.Util.DX.WIC.BitmapCreateCacheOption)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format. <see cref="T:C1.Util.DX.WIC.PixelFormat"/> for a list of valid formats. </param>
            <param name="option">The option.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Create(C1.Util.DX.WIC.ImagingFactory,System.Int32,System.Int32,System.Guid,C1.Util.DX.DataRectangle,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class from a memory location using <see cref="T:C1.Util.DX.DataRectangle"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dataRectangle">The data rectangle.</param>
            <param name="totalSizeInBytes">Size of the buffer in dataRectangle. If == 0, calculate the size automatically based on the height and row pitch.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.BitmapSource,C1.Util.DX.WIC.BitmapCreateCacheOption)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class from a <see cref="T:C1.Util.DX.WIC.BitmapSource"/>
            </summary>
            <param name="factory">The factory.</param>
            <param name="bitmapSource">The bitmap source ref.</param>
            <param name="option">The option.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.BitmapSource,C1.Util.DX.RectL)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class from a <see cref="T:C1.Util.DX.WIC.BitmapSource"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="bitmapSource">The bitmap source.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.New``1(C1.Util.DX.WIC.ImagingFactory,System.Int32,System.Int32,System.Guid,``0[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class from an array of pixel datas.
            </summary>
            <param name="factory">The factory.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="pixelDatas">The pixel datas.</param>
            <param name="stride">Stride of a row of pixels (number of bytes per row). By default the stride is == 0, and calculated by taking the sizeof(T) * width.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Lock(C1.Util.DX.WIC.BitmapLockFlags)">
            <summary>	
            <p>Provides access to a rectangular area of the bitmap.</p>	
            </summary>	
            <param name="flags"><dd>  <p>The access mode you wish to obtain for the lock. This is a bitwise combination of <strong><see cref="T:C1.Util.DX.WIC.BitmapLockFlags"/></strong> for read, write, or read and write access.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="F:C1.Util.DX.WIC.BitmapLockFlags.Read"/></strong></dt> </dl> </td><td> <p>The read access lock.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:C1.Util.DX.WIC.BitmapLockFlags.Write"/></strong></dt> </dl> </td><td> <p>The write access lock.</p> </td></tr> </table> <p>?</p> </dd></param>	
            <returns><dd>  <p>A reference that receives the locked memory location.</p> </dd></returns>	
            <remarks>	
            <p>Locks are exclusive for writing but can be shared for reading. You cannot call <strong>CopyPixels</strong> while the <strong><see cref="T:C1.Util.DX.WIC.Bitmap"/></strong> is locked for writing. Doing so will return an error, since locks are exclusive.</p>	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Lock(C1.Util.DX.RectL,C1.Util.DX.WIC.BitmapLockFlags)">
            <summary>	
            <p>Provides access to a rectangular area of the bitmap.</p>	
            </summary>	
            <param name="rcLockRef"><dd>  <p>The rectangle to be accessed.</p> </dd></param>	
            <param name="flags"><dd>  <p>The access mode you wish to obtain for the lock. This is a bitwise combination of <strong><see cref="T:C1.Util.DX.WIC.BitmapLockFlags"/></strong> for read, write, or read and write access.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="F:C1.Util.DX.WIC.BitmapLockFlags.Read"/></strong></dt> </dl> </td><td> <p>The read access lock.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:C1.Util.DX.WIC.BitmapLockFlags.Write"/></strong></dt> </dl> </td><td> <p>The write access lock.</p> </td></tr> </table> <p>?</p> </dd></param>	
            <returns><dd>  <p>A reference that receives the locked memory location.</p> </dd></returns>	
            <remarks>	
            <p>Locks are exclusive for writing but can be shared for reading. You cannot call <strong>CopyPixels</strong> while the <strong><see cref="T:C1.Util.DX.WIC.Bitmap"/></strong> is locked for writing. Doing so will return an error, since locks are exclusive.</p>	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Create(C1.Util.DX.WIC.ImagingFactory,System.Drawing.Icon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class from a <see cref="T:System.Drawing.Icon"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Create(C1.Util.DX.WIC.ImagingFactory,System.Drawing.Bitmap,C1.Util.DX.WIC.BitmapAlphaChannelOption)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class from a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="bitmap">The bitmap.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Bitmap"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.Bitmap">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.Bitmap"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.Lock(System.IntPtr,C1.Util.DX.WIC.BitmapLockFlags)">
            <summary>	
            HRESULT IWICBitmap::Lock([In] const void* prcLock,[In] WICBitmapLockFlags flags,[Out] IWICBitmapLock** ppILock)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.SetPalette(C1.Util.DX.WIC.Palette)">
            <summary>	
            HRESULT IWICBitmap::SetPalette([In, Optional] IWICPalette* pIPalette)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Bitmap.SetResolution(System.Double,System.Double)">
            <summary>	
            HRESULT IWICBitmap::SetResolution([In] double dpiX,[In] double dpiY)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapClipper">
            <summary>	
            IWICBitmapClipper	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapClipper.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapClipper"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapClipper.Initialize(C1.Util.DX.WIC.BitmapSource,C1.Util.DX.RectL)">
            <summary>	
            <p>Initializes the bitmap clipper with the provided parameters.</p>	
            </summary>	
            <param name="sourceRef"><dd>  <p>he input bitmap source.</p> </dd></param>	
            <param name="rectangleRef"><dd>  <p>The rectangle of the bitmap source to clip.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:C1.Util.DX.HResult.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:C1.Util.DX.HResult"/></strong> error code.</p></returns>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapClipper.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapClipper"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapClipper.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapClipper">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapClipper"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapClipper.Initialize(C1.Util.DX.WIC.BitmapSource,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapClipper::Initialize([In, Optional] IWICBitmapSource* pISource,[In] const void* prc)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapCodecInfo">
            <summary>	
            IWICBitmapCodecInfo	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ComponentInfo">
            <summary>	
            IWICComponentInfo	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ComponentInfo"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="clsidComponent">The CLSID component.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ComponentInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ComponentInfo">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ComponentInfo"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetComponentType">
            <summary>	
            HRESULT IWICComponentInfo::GetComponentType([Out] WICComponentType* pType)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetCLSID">
            <summary>	
            HRESULT IWICComponentInfo::GetCLSID([Out] GUID* pclsid)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetSigningStatus">
            <summary>	
            HRESULT IWICComponentInfo::GetSigningStatus([Out] unsigned int* pStatus)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetAuthor(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICComponentInfo::GetAuthor([In] unsigned int cchAuthor,[In] void* wzAuthor,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetVendorGUID">
            <summary>	
            HRESULT IWICComponentInfo::GetVendorGUID([Out] GUID* pguidVendor)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetVersion(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICComponentInfo::GetVersion([In] unsigned int cchVersion,[In] void* wzVersion,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetSpecVersion(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICComponentInfo::GetSpecVersion([In] unsigned int cchSpecVersion,[In] void* wzSpecVersion,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ComponentInfo.GetFriendlyName(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICComponentInfo::GetFriendlyName([In] unsigned int cchFriendlyName,[In] void* wzFriendlyName,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.ComponentInfo.Author">
            <summary>
            Gets the author.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.ComponentInfo.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.ComponentInfo.SpecVersion">
            <summary>
            Gets the spec version.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.ComponentInfo.FriendlyName">
            <summary>
            Gets the friendly name.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapCodecInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapCodecInfo">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapCodecInfo"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.GetContainerFormat">
            <summary>	
            HRESULT IWICBitmapCodecInfo::GetContainerFormat([Out] GUID* pguidContainerFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.GetPixelFormats(System.Int32,System.Guid[])">
            <summary>	
            HRESULT IWICBitmapCodecInfo::GetPixelFormats([In] unsigned int cFormats,[In, Buffer] GUID* pguidPixelFormats,[Out] unsigned int* pcActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.GetColorManagementVersion(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapCodecInfo::GetColorManagementVersion([In] unsigned int cchColorManagementVersion,[In] void* wzColorManagementVersion,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.GetDeviceManufacturer(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapCodecInfo::GetDeviceManufacturer([In] unsigned int cchDeviceManufacturer,[In] void* wzDeviceManufacturer,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.GetDeviceModels(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapCodecInfo::GetDeviceModels([In] unsigned int cchDeviceModels,[In] void* wzDeviceModels,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.GetMimeTypes(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapCodecInfo::GetMimeTypes([In] unsigned int cchMimeTypes,[In] void* wzMimeTypes,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.GetFileExtensions(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapCodecInfo::GetFileExtensions([In] unsigned int cchFileExtensions,[In] void* wzFileExtensions,[Out] unsigned int* pcchActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.IsAnimationSupported">
            <summary>	
            HRESULT IWICBitmapCodecInfo::DoesSupportAnimation([Out] BOOL* pfSupportAnimation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.IsChromakeySupported">
            <summary>	
            HRESULT IWICBitmapCodecInfo::DoesSupportChromakey([Out] BOOL* pfSupportChromakey)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.IsLosslessSupported">
            <summary>	
            HRESULT IWICBitmapCodecInfo::DoesSupportLossless([Out] BOOL* pfSupportLossless)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.IsMultiframeSupported">
            <summary>	
            HRESULT IWICBitmapCodecInfo::DoesSupportMultiframe([Out] BOOL* pfSupportMultiframe)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecInfo.MatchesMimeType(System.String)">
            <summary>	
            HRESULT IWICBitmapCodecInfo::MatchesMimeType([In] const wchar_t* wzMimeType,[Out] BOOL* pfMatches)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapCodecInfo.PixelFormats">
            <summary>
            Gets the pixel formats the codec supports.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapCodecInfo.ColorManagementVersion">
            <summary>
            Gets the color management version number the codec supports.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapCodecInfo.DeviceManufacturer">
            <summary>
            Gets the name of the device manufacture associated with the codec.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapCodecInfo.DeviceModels">
            <summary>
            Gets a comma delimited list of device models associated with the codec.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapCodecInfo.MimeTypes">
            <summary>
            Gets a comma delimited sequence of mime types associated with the codec.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapCodecInfo.FileExtensions">
            <summary>
            Gets a comma delimited list of the file name extensions associated with the codec.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapDecoder">
            <summary>	
            IWICBitmapDecoder	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.BitmapDecoderInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a <see cref="T:C1.Util.DX.WIC.BitmapDecoderInfo"/>.
            </summary>
            <param name="bitmapDecoderInfo">The bitmap decoder info.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a guid. <see cref="T:C1.Util.DX.WIC.BitmapDecoderGuids"/> for a list of default supported decoder.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.Storage.IStream,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a <see cref="T:C1.Util.DX.Storage.IStream"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="streamRef">The stream ref.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a <see cref="T:C1.Util.DX.Storage.IStream"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="streamRef">The stream ref.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.Storage.IStream,System.Guid,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a <see cref="T:C1.Util.DX.Storage.IStream"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="streamRef">The stream ref.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream,System.Guid,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a <see cref="T:C1.Util.DX.Storage.IStream"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="streamRef">The stream ref.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.String,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a file in read mode.
            </summary>
            <param name="factory">The factory.</param>
            <param name="filename">The filename.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.String,C1.Util.DX.Storage.NativeFileAccess,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a file.
            </summary>
            <param name="factory">The factory.</param>
            <param name="filename">The filename.</param>
            <param name="desiredAccess">The desired access.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.String,System.Nullable{System.Guid},C1.Util.DX.Storage.NativeFileAccess,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a file.
            </summary>
            <param name="factory">The factory.</param>
            <param name="filename">The filename.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="desiredAccess">The desired access.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.FileStream,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a filestream.
            </summary>
            <param name="factory">The factory.</param>
            <param name="fileStream">The filename.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.FileStream,System.Guid,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class from a filestream.
            </summary>
            <param name="factory">The factory.</param>
            <param name="fileStream">The filename.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="metadataOptions">The metadata options.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.QueryCapability(C1.Util.DX.Storage.IStream)">
            <summary>
            Queries the capabilities of the decoder based on the specified stream.
            </summary>
            <param name="stream">The stream to retrieve the decoder capabilities from..</param>
            <returns>Capabilities of the decoder</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Initialize(C1.Util.DX.Storage.IStream,C1.Util.DX.WIC.DecodeOptions)">
            <summary>
            Initializes the decoder with the provided stream.
            </summary>
            <param name="stream">The stream to use for initialization.</param>
            <param name="cacheOptions">The cache options.</param>
            <returns>If the method succeeds, it returns <see cref="F:C1.Util.DX.HResult.Ok"/>. Otherwise, it throws an exception.</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.TryGetColorContexts(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.ColorContext[]@)">
            <summary>
            Get the <see cref="T:C1.Util.DX.WIC.ColorContext"/> of the image (if any)
            </summary>
            <param name="imagingFactory">The factory for creating new color contexts</param>
            <param name="colorContexts">The color context array, or null</param>
            <remarks>
            When the image format does not support color contexts,
            </remarks>
            <unmanaged>HRESULT IWICBitmapDecoder::GetColorContexts([In] unsigned int cCount,[Out, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)</unmanaged>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.TryGetColorContexts(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Get the <see cref="T:C1.Util.DX.WIC.ColorContext"/> of the image (if any)
            </summary>
            <returns>
            null if the decoder does not support color contexts;
            otherwise an array of zero or more ColorContext objects
            </returns>
            <unmanaged>HRESULT IWICBitmapDecoder::GetColorContexts([In] unsigned int cCount,[Out, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] </unmanaged>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapDecoder">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.QueryCapability_(System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapDecoder::QueryCapability([In, Optional] IStream* pIStream,[Out] WICBitmapDecoderCapabilities* pdwCapability)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.Initialize_(System.IntPtr,C1.Util.DX.WIC.DecodeOptions)">
            <summary>	
            HRESULT IWICBitmapDecoder::Initialize([In, Optional] IStream* pIStream,[In] WICDecodeOptions cacheOptions)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetContainerFormat">
            <summary>	
            HRESULT IWICBitmapDecoder::GetContainerFormat([Out] GUID* pguidContainerFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetDecoderInfo">
            <summary>	
            HRESULT IWICBitmapDecoder::GetDecoderInfo([Out] IWICBitmapDecoderInfo** ppIDecoderInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.CopyPalette(C1.Util.DX.WIC.Palette)">
            <summary>	
            HRESULT IWICBitmapDecoder::CopyPalette([In, Optional] IWICPalette* pIPalette)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetMetadataQueryReader">
            <summary>	
            HRESULT IWICBitmapDecoder::GetMetadataQueryReader([Out] IWICMetadataQueryReader** ppIMetadataQueryReader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetPreview">
            <summary>	
            HRESULT IWICBitmapDecoder::GetPreview([Out] IWICBitmapSource** ppIBitmapSource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetColorContexts(System.Int32,C1.Util.DX.WIC.ColorContext[],System.Int32@)">
            <summary>	
            HRESULT IWICBitmapDecoder::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetColorContexts(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.WIC.ColorContext},System.Int32@)">
            <summary>	
            HRESULT IWICBitmapDecoder::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetThumbnail">
            <summary>	
            HRESULT IWICBitmapDecoder::GetThumbnail([Out] IWICBitmapSource** ppIThumbnail)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetFrameCount">
            <summary>	
            HRESULT IWICBitmapDecoder::GetFrameCount([Out] unsigned int* pCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoder.GetFrame(System.Int32)">
            <summary>	
            HRESULT IWICBitmapDecoder::GetFrame([In] unsigned int index,[Out] IWICBitmapFrameDecode** ppIBitmapFrame)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapDecoderInfo">
            <summary>	
            IWICBitmapDecoderInfo	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoderInfo.MatchesPattern(C1.Util.DX.Storage.IStream)">
            <summary>
            Retrieves a value that indicates whether the codec recognizes the pattern within a specified stream.
            </summary>
            <param name="stream">The stream to pattern match within.</param>
            <returns><c>true</c> if the patterns match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoderInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapDecoderInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoderInfo.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapDecoderInfo">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapDecoderInfo"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoderInfo.GetPatterns(System.Int32,C1.Util.DX.WIC.BitmapPattern[],System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICBitmapDecoderInfo::GetPatterns([In] unsigned int cbSizePatterns,[Out, Buffer, Optional] WICBitmapPattern* pPatterns,[Out] unsigned int* pcPatterns,[Out] unsigned int* pcbPatternsActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoderInfo.MatchesPattern_(System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapDecoderInfo::MatchesPattern([In, Optional] IStream* pIStream,[Out] BOOL* pfMatches)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapDecoderInfo.CreateInstance">
            <summary>	
            HRESULT IWICBitmapDecoderInfo::CreateInstance([Out, Fast] IWICBitmapDecoder** ppIBitmapDecoder)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapDecoderInfo.Patterns">
            <summary>
            Gets the file pattern signatures supported by the decoder.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapEncoder">
            <summary>	
            IWICBitmapEncoder	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID. List from <see cref="T:C1.Util.DX.WIC.ContainerFormatGuids"/> </param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID. List from <see cref="T:C1.Util.DX.WIC.ContainerFormatGuids"/></param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID. List from <see cref="T:C1.Util.DX.WIC.ContainerFormatGuids"/> </param>
            <param name="stream">A stream to use as the output of this bitmap encoder.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID. List from <see cref="T:C1.Util.DX.WIC.ContainerFormatGuids"/> </param>
            <param name="stream">A stream to use as the output of this bitmap encoder.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID. List from <see cref="T:C1.Util.DX.WIC.ContainerFormatGuids"/></param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">A stream to use as the output of this bitmap encoder.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="containerFormatGuid">The container format GUID. List from <see cref="T:C1.Util.DX.WIC.ContainerFormatGuids"/></param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">A stream to use as the output of this bitmap encoder.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Initialize(C1.Util.DX.Storage.IStream)">
            <summary>
            Initializes the encoder with the provided stream.
            </summary>
            <param name="stream">The stream to use for initialization.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Initialize(System.IO.Stream)">
            <summary>
            Initializes the encoder with the provided stream.
            </summary>
            <param name="stream">The stream to use for initialization.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.SetColorContexts(C1.Util.DX.WIC.ColorContext[])">
            <summary>
            Sets the <see cref="T:C1.Util.DX.WIC.ColorContext"/> objects for the encoder.
            </summary>
            <param name="colorContextOut">The color contexts to set for the encoder.</param>
            <returns>If the method succeeds, it returns <see cref="F:C1.Util.DX.HResult.Ok"/>. Otherwise, it throws an exception.</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapEncoder">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Initialize_(System.IntPtr,C1.Util.DX.WIC.BitmapEncoderCacheOption)">
            <summary>	
            HRESULT IWICBitmapEncoder::Initialize([In, Optional] IStream* pIStream,[In] WICBitmapEncoderCacheOption cacheOption)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.GetContainerFormat">
            <summary>	
            HRESULT IWICBitmapEncoder::GetContainerFormat([Out] GUID* pguidContainerFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.GetEncoderInfo">
            <summary>	
            HRESULT IWICBitmapEncoder::GetEncoderInfo([Out] IWICBitmapEncoderInfo** ppIEncoderInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.SetColorContexts(System.Int32,C1.Util.DX.WIC.ColorContext[])">
            <summary>	
            HRESULT IWICBitmapEncoder::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.SetColorContexts(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.WIC.ColorContext})">
            <summary>	
            HRESULT IWICBitmapEncoder::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.SetPalette(C1.Util.DX.WIC.Palette)">
            <summary>	
            HRESULT IWICBitmapEncoder::SetPalette([In, Optional] IWICPalette* pIPalette)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.SetThumbnail(C1.Util.DX.WIC.BitmapSource)">
            <summary>	
            HRESULT IWICBitmapEncoder::SetThumbnail([In, Optional] IWICBitmapSource* pIThumbnail)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.SetPreview(C1.Util.DX.WIC.BitmapSource)">
            <summary>	
            HRESULT IWICBitmapEncoder::SetPreview([In, Optional] IWICBitmapSource* pIPreview)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.CreateNewFrame(C1.Util.DX.Storage.PropertyBag)">
            <summary>	
            HRESULT IWICBitmapEncoder::CreateNewFrame([Out, Fast] IWICBitmapFrameEncode** ppIFrameEncode,[Out, Fast] IPropertyBag2** ppIEncoderOptions)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.Commit">
            <summary>	
            HRESULT IWICBitmapEncoder::Commit()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoder.GetMetadataQueryWriter">
            <summary>	
            HRESULT IWICBitmapEncoder::GetMetadataQueryWriter([Out] IWICMetadataQueryWriter** ppIMetadataQueryWriter)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapEncoderOptions">
            <summary>
            BitmapEncoderOptions used for encoding.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoderOptions.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoderOptions"/> class.
            </summary>
            <param name="propertyBagPointer">The property bag pointer.</param>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.ImageQuality">
            <summary>
            Gets or sets the image quality.
            </summary>
            <remarks>
            Range value: 0-1.0f
            Applicable Codecs: JPEG, HDPhoto
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.CompressionQuality">
            <summary>
            Gets or sets the compression quality.
            </summary>
            <remarks>
            Range value: 0-1.0f 
            Applicable Codecs: TIFF
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.LossLess">
            <summary>
            Gets or sets a value indicating whether loss less compression is enabled.
            </summary>
            <remarks>
            Range value: true-false
            Applicable Codecs: HDPhoto
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.BitmapTransform">
            <summary>
            Gets or sets the bitmap transform.
            </summary>
            <remarks>
            Range value: <see cref="T:C1.Util.DX.WIC.BitmapTransformOptions"/>
            Applicable Codecs: JPEG
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.InterlaceOption">
            <summary>
            Gets or sets a value indicating whether [interlace option].
            </summary>
            <remarks>
            Range value: true-false
            Applicable Codecs: PNG
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.FilterOption">
            <summary>
            Gets or sets the filter option.
            </summary>
            <remarks>
            Range value: <see cref="T:C1.Util.DX.WIC.PngFilterOption"/>
            Applicable Codecs: PNG
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.TiffCompressionMethod">
            <summary>
            Gets or sets the TIFF compression method.
            </summary>
            <remarks>
            Range value: <see cref="T:C1.Util.DX.WIC.TiffCompressionOption"/>
            Applicable Codecs: TIFF
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.Luminance">
            <summary>
            Gets or sets the luminance.
            </summary>
            <remarks>
            Range value: 64 Entries (DCT)
            Applicable Codecs: JPEG
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.Chrominance">
            <summary>
            Gets or sets the chrominance.
            </summary>
            <remarks>
            Range value: 64 Entries (DCT)
            Applicable Codecs: JPEG
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.JpegYCrCbSubsampling">
            <summary>
            Gets or sets the JPEG Y cr cb subsampling.
            </summary>
            <remarks>
            Range value: <see cref="T:C1.Util.DX.WIC.JpegYCrCbSubsamplingOption"/>
            Applicable Codecs: JPEG
            </remarks>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapEncoderOptions.SuppressApp0">
            <summary>
            Gets or sets a value indicating whether [suppress app0].
            </summary>
            <remarks>
            Range value: true-false
            Applicable Codecs: JPEG
            </remarks>
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapFlipRotator">
            <summary>	
            IWICBitmapFlipRotator	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFlipRotator.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapFlipRotator"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFlipRotator.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapFlipRotator"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFlipRotator.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapFlipRotator">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapFlipRotator"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFlipRotator.Initialize(C1.Util.DX.WIC.BitmapSource,C1.Util.DX.WIC.BitmapTransformOptions)">
            <summary>	
            HRESULT IWICBitmapFlipRotator::Initialize([In, Optional] IWICBitmapSource* pISource,[In] WICBitmapTransformOptions options)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapFrameDecode">
            <summary>	
            IWICBitmapFrameDecode	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.TryGetColorContexts(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.ColorContext[]@)">
            <summary>
            Get the <see cref="T:C1.Util.DX.WIC.ColorContext"/> of the image (if any)
            </summary>
            <param name="imagingFactory">The factory for creating new color contexts</param>
            <param name="colorContexts">The color context array, or null</param>
            <remarks>
            When the image format does not support color contexts,
            </remarks>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.TryGetColorContexts(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Get the <see cref="T:C1.Util.DX.WIC.ColorContext"/> of the image (if any)
            </summary>
            <returns>
            null if the decoder does not support color contexts;
            otherwise an array of zero or more ColorContext objects
            </returns>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapFrameDecode"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapFrameDecode">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapFrameDecode"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.GetMetadataQueryReader">
            <summary>	
            HRESULT IWICBitmapFrameDecode::GetMetadataQueryReader([Out] IWICMetadataQueryReader** ppIMetadataQueryReader)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.GetColorContexts(System.Int32,C1.Util.DX.WIC.ColorContext[],System.Int32@)">
            <summary>	
            HRESULT IWICBitmapFrameDecode::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.GetColorContexts(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.WIC.ColorContext},System.Int32@)">
            <summary>	
            HRESULT IWICBitmapFrameDecode::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameDecode.GetThumbnail">
            <summary>	
            HRESULT IWICBitmapFrameDecode::GetThumbnail([Out] IWICBitmapSource** ppIThumbnail)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapFrameEncode">
            <summary>	
            IWICBitmapFrameEncode	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.Create(C1.Util.DX.WIC.BitmapEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapFrameEncode"/> class.
            </summary>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetColorContexts(C1.Util.DX.WIC.ColorContext[])">
            <summary>
            Sets the <see cref="T:C1.Util.DX.WIC.ColorContext"/> objects for this frame encoder.
            </summary>
            <param name="colorContextOut">The color contexts to set for the encoder.</param>
            <returns>If the method succeeds, it returns <see cref="F:C1.Util.DX.HResult.Ok"/>. Otherwise, it throws an exception.</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.WritePixels(System.Int32,C1.Util.DX.DataRectangle,System.Int32)">
            <summary>	
            <p>Encodes the frame scanlines.</p>	
            </summary>	
            <param name="lineCount"><dd>  <p>The number of lines to encode.</p> </dd></param>	
            <param name="buffer">A data buffer containing the pixels to copy from.</param>	
            <param name="totalSizeInBytes">Total size in bytes of pixels to write. If == 0, size is calculated with lineCount * rowStride.</param>
            <remarks>	
            <p>Successive <strong>WritePixels</strong> calls are assumed to be sequential scanline access in the output image.</p>	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.WritePixels(System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            <p>Encodes the frame scanlines.</p>	
            </summary>	
            <param name="lineCount"><dd>  <p>The number of lines to encode.</p> </dd></param>	
            <param name="buffer">A data buffer containing the pixels to copy from.</param>
            <param name="rowStride">The stride of one row.</param>
            <param name="totalSizeInBytes">Total size in bytes of pixels to write. If == 0, size is calculated with lineCount * rowStride.</param>
            <remarks>	
            <p>Successive <strong>WritePixels</strong> calls are assumed to be sequential scanline access in the output image.</p>	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.WritePixels``1(System.Int32,System.Int32,``0[])">
            <summary>	
            <p>Encodes the frame scanlines.</p>	
            </summary>	
            <param name="lineCount"><dd>  <p>The number of lines to encode.</p> </dd></param>	
            <param name="stride"><dd>  <p>The <em>stride</em> of the image pixels.</p> </dd></param>	
            <param name="pixelBuffer"><dd>  <p>A reference to the pixel buffer.</p> </dd></param>	
            <remarks>	
            <p>Successive <strong>WritePixels</strong> calls are assumed to be sequential scanline access in the output image.</p>	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.WriteSource(C1.Util.DX.WIC.BitmapSource)">
            <summary>	
            <p>Encodes a bitmap source.</p>	
            </summary>	
            <param name="bitmapSource"><dd>  <p>The bitmap source to encode.</p> </dd></param>	
            <remarks>	
            <p>If <strong>SetSize</strong> is not called prior to calling <strong>WriteSource</strong>, the size given in <em>prc</em> is used if not <strong><c>null</c></strong>. Otherwise, the size of the <strong><see cref="T:C1.Util.DX.WIC.BitmapSource"/></strong> given in <em>pIBitmapSource</em> is used. </p><p>If <strong>SetPixelFormat</strong> is not called prior to calling <strong>WriteSource</strong>, the pixel format of the <strong><see cref="T:C1.Util.DX.WIC.BitmapSource"/></strong> given in <em>pIBitmapSource</em> is used.</p><p>If <strong>SetResolution</strong> is not called prior to calling <strong>WriteSource</strong>, the pixel format of <em>pIBitmapSource</em> is used.</p><p>If <strong>SetPalette</strong> is not called prior to calling <strong>WriteSource</strong>, the target pixel format is indexed, and the pixel format of <em>pIBitmapSource</em> matches the encoder frame's pixel format, then the <em>pIBitmapSource</em> pixel format is used.</p><p>When encoding a GIF image, if the global palette is set and the frame level palette is not set directly by the user or by a custom independent software vendor (ISV) GIF codec, <strong>WriteSource</strong> will use the global palette to encode the frame even when <em>pIBitmapSource</em> has a frame level palette.</p><p><strong>Windows Vista:</strong>The source rect width must match the width set through SetSize. Repeated <strong>WriteSource</strong> calls can be made as long as the total accumulated source rect height is the same as set through SetSize.</p>	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.WriteSource(C1.Util.DX.WIC.BitmapSource,C1.Util.DX.RectL)">
            <summary>	
            <p>Encodes a bitmap source.</p>	
            </summary>	
            <param name="bitmapSourceRef"><dd>  <p>The bitmap source to encode.</p> </dd></param>	
            <param name="rectangleRef"><dd>  <p>The size rectangle of the bitmap source.</p> </dd></param>	
            <remarks>	
            <p>If <strong>SetSize</strong> is not called prior to calling <strong>WriteSource</strong>, the size given in <em>prc</em> is used if not <strong><c>null</c></strong>. Otherwise, the size of the <strong><see cref="T:C1.Util.DX.WIC.BitmapSource"/></strong> given in <em>pIBitmapSource</em> is used. </p><p>If <strong>SetPixelFormat</strong> is not called prior to calling <strong>WriteSource</strong>, the pixel format of the <strong><see cref="T:C1.Util.DX.WIC.BitmapSource"/></strong> given in <em>pIBitmapSource</em> is used.</p><p>If <strong>SetResolution</strong> is not called prior to calling <strong>WriteSource</strong>, the pixel format of <em>pIBitmapSource</em> is used.</p><p>If <strong>SetPalette</strong> is not called prior to calling <strong>WriteSource</strong>, the target pixel format is indexed, and the pixel format of <em>pIBitmapSource</em> matches the encoder frame's pixel format, then the <em>pIBitmapSource</em> pixel format is used.</p><p>When encoding a GIF image, if the global palette is set and the frame level palette is not set directly by the user or by a custom independent software vendor (ISV) GIF codec, <strong>WriteSource</strong> will use the global palette to encode the frame even when <em>pIBitmapSource</em> has a frame level palette.</p><p><strong>Windows Vista:</strong>The source rect width must match the width set through SetSize. Repeated <strong>WriteSource</strong> calls can be made as long as the total accumulated source rect height is the same as set through SetSize.</p>	
            </remarks>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapFrameEncode"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapFrameEncode">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapFrameEncode"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.Initialize(C1.Util.DX.Storage.PropertyBag)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::Initialize([In, Optional] IPropertyBag2* pIEncoderOptions)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetSize(System.Int32,System.Int32)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::SetSize([In] unsigned int uiWidth,[In] unsigned int uiHeight)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetResolution(System.Double,System.Double)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::SetResolution([In] double dpiX,[In] double dpiY)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetPixelFormat(System.Guid@)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::SetPixelFormat([InOut] GUID* pPixelFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetColorContexts(System.Int32,C1.Util.DX.WIC.ColorContext[])">
            <summary>	
            HRESULT IWICBitmapFrameEncode::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetColorContexts(System.Int32,C1.Util.DX.ComArray{C1.Util.DX.WIC.ColorContext})">
            <summary>	
            HRESULT IWICBitmapFrameEncode::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetPalette(C1.Util.DX.WIC.Palette)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::SetPalette([In, Optional] IWICPalette* pIPalette)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.SetThumbnail(C1.Util.DX.WIC.BitmapSource)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::SetThumbnail([In, Optional] IWICBitmapSource* pIThumbnail)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.WritePixels(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::WritePixels([In] unsigned int lineCount,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In, Buffer] void* pbPixels)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.WriteSource(C1.Util.DX.WIC.BitmapSource,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapFrameEncode::WriteSource([In, Optional] IWICBitmapSource* pIBitmapSource,[In] void* prc)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.Commit">
            <summary>	
            HRESULT IWICBitmapFrameEncode::Commit()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapFrameEncode.GetMetadataQueryWriter">
            <summary>	
            HRESULT IWICBitmapFrameEncode::GetMetadataQueryWriter([Out] IWICMetadataQueryWriter** ppIMetadataQueryWriter)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapFrameEncode.Options">
            <summary>
            Gets the properties to setup before <see cref="M:C1.Util.DX.WIC.BitmapFrameEncode.Initialize"/>.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapLock">
            <summary>	
            IWICBitmapLock	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapLock.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapLock"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapLock.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapLock">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapLock"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapLock.GetSize(System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICBitmapLock::GetSize([Out] unsigned int* puiWidth,[Out] unsigned int* puiHeight)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapLock.GetStride">
            <summary>	
            HRESULT IWICBitmapLock::GetStride([Out] unsigned int* pcbStride)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapLock.GetDataPointer(System.Int32@)">
            <summary>	
            HRESULT IWICBitmapLock::GetDataPointer([Out] unsigned int* pcbBufferSize,[Out] void** ppbData)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapLock.GetPixelFormat">
            <summary>	
            HRESULT IWICBitmapLock::GetPixelFormat([Out] GUID* pPixelFormat)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapLock.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.BitmapLock.Data">
            <summary>
            Gets a pointer to the data.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapScaler">
            <summary>	
            IWICBitmapScaler	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapScaler.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapScaler"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapScaler.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapScaler"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapScaler.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapScaler">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapScaler"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapScaler.Initialize(C1.Util.DX.WIC.BitmapSource,System.Int32,System.Int32,C1.Util.DX.WIC.BitmapInterpolationMode)">
            <summary>	
            HRESULT IWICBitmapScaler::Initialize([In, Optional] IWICBitmapSource* pISource,[In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] WICBitmapInterpolationMode mode)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapSourceTransform">
            <summary>	
            IWICBitmapSourceTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.CopyPixels(System.Int32,System.Int32,System.Int32,C1.Util.DX.DataStream)">
            <summary>
            Copies pixel data using the supplied input parameters.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.CopyPixels(System.Int32,System.Int32,C1.Util.DX.WIC.BitmapTransformOptions,System.Int32,C1.Util.DX.DataStream)">
            <summary>
            Copies pixel data using the supplied input parameters.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="dstTransform">The DST transform.</param>
            <param name="stride">The stride.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.CopyPixels(System.Int32,System.Int32,System.Guid,C1.Util.DX.WIC.BitmapTransformOptions,System.Int32,C1.Util.DX.DataStream)">
            <summary>
            Copies pixel data using the supplied input parameters.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="guidDstFormat">The GUID DST format.</param>
            <param name="dstTransform">The DST transform.</param>
            <param name="stride">The stride.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.CopyPixels(C1.Util.DX.RectL,System.Int32,System.Int32,System.Guid,C1.Util.DX.WIC.BitmapTransformOptions,System.Int32,C1.Util.DX.DataStream)">
            <summary>
            Copies pixel data using the supplied input parameters.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="guidDstFormat">The GUID DST format.</param>
            <param name="dstTransform">The DST transform.</param>
            <param name="stride">The stride.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.GetClosestSize(C1.Util.DX.Size2L@)">
            <summary>
            Returns the closest dimensions the implementation can natively scale to given the desired dimensions.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapSourceTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapSourceTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapSourceTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.CopyPixels(System.IntPtr,System.Int32,System.Int32,System.Nullable{System.Guid},C1.Util.DX.WIC.BitmapTransformOptions,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICBitmapSourceTransform::CopyPixels([In] const void* prc,[In] unsigned int uiWidth,[In] unsigned int uiHeight,[In, Optional] GUID* pguidDstFormat,[In] WICBitmapTransformOptions dstTransform,[In] unsigned int nStride,[In] unsigned int cbBufferSize,[In] void* pbBuffer)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.GetClosestSize(System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICBitmapSourceTransform::GetClosestSize([InOut] unsigned int* puiWidth,[InOut] unsigned int* puiHeight)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.GetClosestPixelFormat(System.Guid@)">
            <summary>	
            HRESULT IWICBitmapSourceTransform::GetClosestPixelFormat([InOut] GUID* pguidDstFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapSourceTransform.IsSupportingTransform(C1.Util.DX.WIC.BitmapTransformOptions)">
            <summary>	
            HRESULT IWICBitmapSourceTransform::DoesSupportTransform([In] WICBitmapTransformOptions dstTransform,[Out] BOOL* pfIsSupported)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BmpBitmapDecoder">
            <summary>
            Bmp bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Bmp"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapDecoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.BmpBitmapEncoder">
            <summary>
            Bmp bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Bmp"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapEncoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.BmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.ColorContext">
            <summary>	
            IWICColorContext	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ColorContext"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.InitializeFromMemory(C1.Util.DX.DataPointer)">
            <summary>
            Initializes from memory.
            </summary>
            <param name="dataPointer">The data pointer.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ColorContext"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ColorContext">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ColorContext"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.InitializeFromFilename(System.String)">
            <summary>	
            HRESULT IWICColorContext::InitializeFromFilename([In] const wchar_t* wzFilename)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.InitializeFromMemory(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IWICColorContext::InitializeFromMemory([In] const void* pbBuffer,[In] unsigned int cbBufferSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.InitializeFromExifColorSpace(System.Int32)">
            <summary>	
            HRESULT IWICColorContext::InitializeFromExifColorSpace([In] unsigned int value)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.GetTypeInfo">
            <summary>	
            HRESULT IWICColorContext::GetType([Out] WICColorContextType* pType)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.GetProfileBytes(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICColorContext::GetProfileBytes([In] unsigned int cbBuffer,[In] void* pbBuffer,[Out] unsigned int* pcbActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorContext.GetExifColorSpace">
            <summary>	
            HRESULT IWICColorContext::GetExifColorSpace([Out] unsigned int* pValue)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.ColorContext.Profile">
            <summary>
            Gets the color context profile.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.ColorTransform">
            <summary>	
            IWICColorTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorTransform.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ColorTransform"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.ColorTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ColorTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ColorTransform.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ColorTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ColorTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ColorTransform.Initialize(C1.Util.DX.WIC.BitmapSource,C1.Util.DX.WIC.ColorContext,C1.Util.DX.WIC.ColorContext,System.Guid)">
            <summary>	
            HRESULT IWICColorTransform::Initialize([In, Optional] IWICBitmapSource* pIBitmapSource,[In, Optional] IWICColorContext* pIContextSource,[In, Optional] IWICColorContext* pIContextDest,[In] const GUID&amp; pixelFmtDest)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DdsFrameDecode">
            <summary>	
            IWICDdsFrameDecode	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsFrameDecode.CopyBlocks(System.Nullable{C1.Util.DX.RectL},System.Int32,C1.Util.DX.DataStream)">
            <summary>	
            Requests pixel data as it is natively stored within the DDS file.
            </summary>	
            <param name="boundsInBlocks">The rectangle to copy from the source. A <c>null</c> value specifies the entire texture. If the texture uses a block-compressed <strong><see cref="T:C1.Util.DX.DXGI.Format"/></strong>, all values of the rectangle are expressed in number of blocks, not pixels.</param>
            <param name="stride">The stride, in bytes, of the destination buffer. This represents the number of bytes from the buffer reference to the next row of data. If the texture uses a block-compressed <strong><see cref="T:C1.Util.DX.DXGI.Format"/></strong>, a "row of data" is defined as a row of blocks which contains multiple pixel scanlines.</param>	
            <param name="destination">A reference to the destination buffer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsFrameDecode.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.DdsFrameDecode"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsFrameDecode.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.DdsFrameDecode">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.DdsFrameDecode"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.DdsFrameDecode.GetSizeInBlocks(System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICDdsFrameDecode::GetSizeInBlocks([Out] unsigned int* pWidthInBlocks,[Out] unsigned int* pHeightInBlocks)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsFrameDecode.GetFormatInfo(C1.Util.DX.WIC.DdsFormatInfo@)">
            <summary>	
            HRESULT IWICDdsFrameDecode::GetFormatInfo([Out] WICDdsFormatInfo* pFormatInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsFrameDecode.CopyBlocks(System.Nullable{C1.Util.DX.RectL},System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICDdsFrameDecode::CopyBlocks([In, Optional] const WICRect* prcBoundsInBlocks,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In] void* pbBuffer)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.DdsFrameDecode.SizeInBlocks">
            <summary>	
            Gets the width and height, in blocks, of the DDS image.
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.DdsFrameDecode.FormatInfo">
            <summary>	
            GetFormatInfo	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.FastMetadataEncoder">
            <summary>	
            IWICFastMetadataEncoder	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.FastMetadataEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.BitmapDecoder)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.FastMetadataEncoder"/> class from a <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/>
            </summary>
            <param name="factory">The factory.</param>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.FastMetadataEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.BitmapFrameDecode)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.FastMetadataEncoder"/> class from a <see cref="T:C1.Util.DX.WIC.BitmapFrameDecode"/>
            </summary>
            <param name="factory">The factory.</param>
            <param name="frameDecoder">The frame decoder.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.FastMetadataEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.FastMetadataEncoder"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.FastMetadataEncoder.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.FastMetadataEncoder">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.FastMetadataEncoder"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.FastMetadataEncoder.Commit">
            <summary>	
            HRESULT IWICFastMetadataEncoder::Commit()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.FastMetadataEncoder.GetMetadataQueryWriter">
            <summary>	
            HRESULT IWICFastMetadataEncoder::GetMetadataQueryWriter([Out] IWICMetadataQueryWriter** ppIMetadataQueryWriter)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.FormatConverter">
            <summary>	
            IWICFormatConverter	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverter.Create(C1.Util.DX.WIC.FormatConverterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.FormatConverter"/> class.
            </summary>
            <param name="converterInfo">The converter info.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverter.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.FormatConverter"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverter.Initialize(C1.Util.DX.WIC.BitmapSource,System.Guid)">
            <summary>
            Initializes this instance with the specified bitmap source and format
            </summary>
            <param name="sourceRef">The source ref.</param>
            <param name="dstFormat">The destination format.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.FormatConverter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverter.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.FormatConverter">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.FormatConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverter.Initialize(C1.Util.DX.WIC.BitmapSource,System.Guid,C1.Util.DX.WIC.BitmapDitherType,C1.Util.DX.WIC.Palette,System.Double,C1.Util.DX.WIC.BitmapPaletteType)">
            <summary>	
            HRESULT IWICFormatConverter::Initialize([In, Optional] IWICBitmapSource* pISource,[In] const GUID&amp; dstFormat,[In] WICBitmapDitherType dither,[In, Optional] IWICPalette* pIPalette,[In] double alphaThresholdPercent,[In] WICBitmapPaletteType paletteTranslate)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverter.CanConvert(System.Guid,System.Guid)">
            <summary>	
            HRESULT IWICFormatConverter::CanConvert([In] const GUID&amp; srcPixelFormat,[In] const GUID&amp; dstPixelFormat,[Out] BOOL* pfCanConvert)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.FormatConverterInfo">
            <summary>	
            IWICFormatConverterInfo	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverterInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.FormatConverterInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverterInfo.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.FormatConverterInfo">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.FormatConverterInfo"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverterInfo.GetPixelFormats(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICFormatConverterInfo::GetPixelFormats([In] unsigned int cFormats,[In] void* pPixelFormatGUIDs,[Out] unsigned int* pcActual)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.FormatConverterInfo.CreateInstance">
            <summary>	
            HRESULT IWICFormatConverterInfo::CreateInstance([Out, Fast] IWICFormatConverter** ppIConverter)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.FormatConverterInfo.PixelFormats">
            <summary>
            Gets the supported pixel formats.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.GifBitmapDecoder">
            <summary>
            Gif bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Gif"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapDecoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.GifBitmapEncoder">
            <summary>
            Gif bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Gif"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapEncoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.GifBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.GifBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.ImageEncoder">
            <summary>	
            IWICImageEncoder	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.Create(C1.Util.DX.WIC.ImagingFactory2,C1.Util.DX.Direct2D.Device)">
            <summary>
            Creates a new image encoder object.
            </summary>
            <param name="factory">The WIC factory.</param>
            <param name="d2dDevice">The <see cref="T:C1.Util.DX.Direct2D.Device"/> object on which the corresponding image encoder is created.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ImageEncoder"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ImageEncoder">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ImageEncoder"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.WriteFrame(C1.Util.DX.Direct2D.Image,C1.Util.DX.WIC.BitmapFrameEncode,C1.Util.DX.WIC.ImageParameters)">
            <summary>	
            HRESULT IWICImageEncoder::WriteFrame([In] ID2D1Image* pImage,[In] IWICBitmapFrameEncode* pFrameEncode,[In, Value] const WICImageParameters* pImageParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.WriteFrame(C1.Util.DX.Direct2D.Image,C1.Util.DX.WIC.BitmapFrameEncode)">
            <summary>	
            HRESULT IWICImageEncoder::WriteFrame([In] ID2D1Image* pImage,[In] IWICBitmapFrameEncode* pFrameEncode,[In, Value] const WICImageParameters* pImageParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.WriteFrameThumbnail(C1.Util.DX.Direct2D.Image,C1.Util.DX.WIC.BitmapFrameEncode,C1.Util.DX.WIC.ImageParameters)">
            <summary>	
            HRESULT IWICImageEncoder::WriteFrameThumbnail([In] ID2D1Image* pImage,[In] IWICBitmapFrameEncode* pFrameEncode,[In, Value] const WICImageParameters* pImageParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.WriteFrameThumbnail(C1.Util.DX.Direct2D.Image,C1.Util.DX.WIC.BitmapFrameEncode)">
            <summary>	
            HRESULT IWICImageEncoder::WriteFrameThumbnail([In] ID2D1Image* pImage,[In] IWICBitmapFrameEncode* pFrameEncode,[In, Value] const WICImageParameters* pImageParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.WriteThumbnail(C1.Util.DX.Direct2D.Image,C1.Util.DX.WIC.BitmapEncoder,C1.Util.DX.WIC.ImageParameters)">
            <summary>	
            HRESULT IWICImageEncoder::WriteThumbnail([In] ID2D1Image* pImage,[In] IWICBitmapEncoder* pEncoder,[In, Value] const WICImageParameters* pImageParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageEncoder.WriteThumbnail(C1.Util.DX.Direct2D.Image,C1.Util.DX.WIC.BitmapEncoder)">
            <summary>	
            HRESULT IWICImageEncoder::WriteThumbnail([In] ID2D1Image* pImage,[In] IWICBitmapEncoder* pEncoder,[In, Value] const WICImageParameters* pImageParameters)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ImagingFactory">
            <summary>	
            IWICImagingFactory	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.Create">
            <summary>
            Creates a new instance of the <see cref="T:C1.Util.DX.WIC.ImagingFactory"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ImagingFactory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ImagingFactory">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ImagingFactory"/>.
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ImagingFactory.WICImagingFactoryClsid">
            <summary>Constant WICImagingFactoryClsid.</summary>
            <unmanaged>CLSID_WICImagingFactory</unmanaged>
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateDecoderFromFilename(System.String,System.Nullable{System.Guid},System.Int32,C1.Util.DX.WIC.DecodeOptions)">
            <summary>	
            HRESULT IWICImagingFactory::CreateDecoderFromFilename([In] const wchar_t* wzFilename,[In, Optional] const GUID* pguidVendor,[In] unsigned int dwDesiredAccess,[In] WICDecodeOptions metadataOptions,[Out, Fast] IWICBitmapDecoder** ppIDecoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateDecoderFromStream_(System.IntPtr,System.Nullable{System.Guid},C1.Util.DX.WIC.DecodeOptions)">
            <summary>	
            HRESULT IWICImagingFactory::CreateDecoderFromStream([In, Optional] IStream* pIStream,[In, Optional] const GUID* pguidVendor,[In] WICDecodeOptions metadataOptions,[Out, Fast] IWICBitmapDecoder** ppIDecoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateDecoderFromFileHandle(System.IntPtr,System.Nullable{System.Guid},C1.Util.DX.WIC.DecodeOptions)">
            <summary>	
            HRESULT IWICImagingFactory::CreateDecoderFromFileHandle([In] ULONG_PTR hFile,[In, Optional] const GUID* pguidVendor,[In] WICDecodeOptions metadataOptions,[Out, Fast] IWICBitmapDecoder** ppIDecoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateComponentInfo(System.Guid)">
            <summary>	
            HRESULT IWICImagingFactory::CreateComponentInfo([In] const GUID&amp; clsidComponent,[Out, Fast] IWICComponentInfo** ppIInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateDecoder(System.Guid,System.Nullable{System.Guid})">
            <summary>	
            HRESULT IWICImagingFactory::CreateDecoder([In] const GUID&amp; guidContainerFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICBitmapDecoder** ppIDecoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateDecoder_(System.Guid,System.Nullable{System.Guid},C1.Util.DX.WIC.BitmapDecoder)">
            <summary>	
            HRESULT IWICImagingFactory::CreateDecoder([In] const GUID&amp; guidContainerFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICBitmapDecoder** ppIDecoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateEncoder(System.Guid,System.Nullable{System.Guid})">
            <summary>	
            HRESULT IWICImagingFactory::CreateEncoder([In] const GUID&amp; guidContainerFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICBitmapEncoder** ppIEncoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateEncoder_(System.Guid,System.Nullable{System.Guid},C1.Util.DX.WIC.BitmapEncoder)">
            <summary>	
            HRESULT IWICImagingFactory::CreateEncoder([In] const GUID&amp; guidContainerFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICBitmapEncoder** ppIEncoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreatePalette">
            <summary>	
            HRESULT IWICImagingFactory::CreatePalette([Out, Fast] IWICPalette** ppIPalette)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateFormatConverter">
            <summary>	
            HRESULT IWICImagingFactory::CreateFormatConverter([Out, Fast] IWICFormatConverter** ppIFormatConverter)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapScaler">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapScaler([Out, Fast] IWICBitmapScaler** ppIBitmapScaler)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapClipper">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapClipper([Out, Fast] IWICBitmapClipper** ppIBitmapClipper)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapFlipRotator">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapFlipRotator([Out, Fast] IWICBitmapFlipRotator** ppIBitmapFlipRotator)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateStream">
            <summary>	
            HRESULT IWICImagingFactory::CreateStream([Out, Fast] IWICStream** ppIWICStream)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateColorContext">
            <summary>	
            HRESULT IWICImagingFactory::CreateColorContext([Out, Fast] IWICColorContext** ppIWICColorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateColorTransformer">
            <summary>	
            HRESULT IWICImagingFactory::CreateColorTransformer([Out, Fast] IWICColorTransform** ppIWICColorTransform)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmap(System.Int32,System.Int32,System.Guid,C1.Util.DX.WIC.BitmapCreateCacheOption)">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmap([In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] const GUID&amp; pixelFormat,[In] WICBitmapCreateCacheOption option,[Out, Fast] IWICBitmap** ppIBitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapFromSource(C1.Util.DX.WIC.BitmapSource,C1.Util.DX.WIC.BitmapCreateCacheOption)">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapFromSource([In, Optional] IWICBitmapSource* pIBitmapSource,[In] WICBitmapCreateCacheOption option,[Out, Fast] IWICBitmap** ppIBitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapFromSourceRect(C1.Util.DX.WIC.BitmapSource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapFromSourceRect([In, Optional] IWICBitmapSource* pIBitmapSource,[In] unsigned int x,[In] unsigned int y,[In] unsigned int width,[In] unsigned int height,[Out, Fast] IWICBitmap** ppIBitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapFromMemory(System.Int32,System.Int32,System.Guid,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapFromMemory([In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] const GUID&amp; pixelFormat,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In] void* pbBuffer,[Out, Fast] IWICBitmap** ppIBitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapFromHBITMAP(System.IntPtr,System.IntPtr,C1.Util.DX.WIC.BitmapAlphaChannelOption)">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapFromHBITMAP([In] HBITMAP hBitmap,[In, Optional] HPALETTE hPalette,[In] WICBitmapAlphaChannelOption options,[Out, Fast] IWICBitmap** ppIBitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateBitmapFromHICON(System.IntPtr)">
            <summary>	
            HRESULT IWICImagingFactory::CreateBitmapFromHICON([In] HICON hIcon,[Out, Fast] IWICBitmap** ppIBitmap)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateComponentEnumerator(System.Int32,System.Int32)">
            <summary>	
            HRESULT IWICImagingFactory::CreateComponentEnumerator([In] unsigned int componentTypes,[In] unsigned int options,[Out, Fast] IEnumUnknown** ppIEnumUnknown)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateFastMetadataEncoderFromDecoder(C1.Util.DX.WIC.BitmapDecoder)">
            <summary>	
            HRESULT IWICImagingFactory::CreateFastMetadataEncoderFromDecoder([In, Optional] IWICBitmapDecoder* pIDecoder,[Out, Fast] IWICFastMetadataEncoder** ppIFastEncoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateFastMetadataEncoderFromFrameDecode(C1.Util.DX.WIC.BitmapFrameDecode)">
            <summary>	
            HRESULT IWICImagingFactory::CreateFastMetadataEncoderFromFrameDecode([In, Optional] IWICBitmapFrameDecode* pIFrameDecoder,[Out, Fast] IWICFastMetadataEncoder** ppIFastEncoder)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateQueryWriter(System.Guid,System.Nullable{System.Guid})">
            <summary>	
            HRESULT IWICImagingFactory::CreateQueryWriter([In] const GUID&amp; guidMetadataFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICMetadataQueryWriter** ppIQueryWriter)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory.CreateQueryWriterFromReader(C1.Util.DX.WIC.MetadataQueryReader,System.Nullable{System.Guid})">
            <summary>	
            HRESULT IWICImagingFactory::CreateQueryWriterFromReader([In, Optional] IWICMetadataQueryReader* pIQueryReader,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICMetadataQueryWriter** ppIQueryWriter)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ImagingFactory2">
            <summary>	
            IWICImagingFactory2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory2.Create">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ImagingFactory2"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ImagingFactory2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory2.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ImagingFactory2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ImagingFactory2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ImagingFactory2.CreateImageEncoder(C1.Util.DX.Direct2D.Device)">
            <summary>	
            HRESULT IWICImagingFactory2::CreateImageEncoder([In] ID2D1Device* pD2DDevice,[Out, Fast] IWICImageEncoder** ppWICImageEncoder)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.JpegBitmapDecoder">
            <summary>
            Tiff bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Jpeg"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapDecoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.JpegBitmapEncoder">
            <summary>
            Tiff bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Jpeg"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapEncoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.JpegBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.JpegBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.MetadataQueryReader">
            <summary>	
            IWICMetadataQueryReader	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.TryGetMetadataByName(System.String,System.Object@)">
            <summary>
            Try to get the metadata value by name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The metadata value, or null if the metadata was not found or an error occurred</param>
            <returns>The WIC error code</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.TryGetMetadataByName(System.String)">
            <summary>
            Try to get the metadata value by name.
            </summary>
            <param name="name">The name.</param>
            <returns>the metadata value, or null if the metadata was not found</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.GetMetadataByName(System.String)">
            <summary>
            Gets the metadata value by name.
            </summary>
            <param name="name">The name.</param>
            <returns>Value of the metadata</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.Dump(System.IO.TextWriter,System.Int32)">
            <summary>
            Dumps all metadata.
            </summary>
            <param name="writer">The text writer output.</param>
            <param name="level">The level of tabulations.</param>
            <remarks>
            This is a simple helper method to dump metadata stored in this instance.
            </remarks>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.MetadataQueryReader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.MetadataQueryReader">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.MetadataQueryReader"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.GetContainerFormat">
            <summary>	
            HRESULT IWICMetadataQueryReader::GetContainerFormat([Out] GUID* pguidContainerFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.GetLocation(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICMetadataQueryReader::GetLocation([In] unsigned int cchMaxLength,[In] void* wzNamespace,[Out] unsigned int* pcchActualLength)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.GetMetadataByName(System.String,System.IntPtr)">
            <summary>	
            HRESULT IWICMetadataQueryReader::GetMetadataByName([In] const wchar_t* wzName,[In] void* pvarValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryReader.GetEnumerator">
            <summary>	
            HRESULT IWICMetadataQueryReader::GetEnumerator([Out] void** ppIEnumString)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.MetadataQueryReader.Enumerator">
            <summary>
            Gets the enumerator on the metadata names.
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.MetadataQueryReader.QueryPaths">
            <summary>
            Gets the enumerator on all the metadata query paths.
            http://msdn.microsoft.com/en-us/library/windows/desktop/ee719796(v=vs.85).aspx#expressionanatomy
            </summary>
        </member>
        <member name="P:C1.Util.DX.WIC.MetadataQueryReader.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.MetadataQueryWriter">
            <summary>	
            IWICMetadataQueryWriter	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.MetadataQueryWriter"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidMetadataFormat">The GUID metadata format.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.MetadataQueryWriter"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidMetadataFormat">The GUID metadata format.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.MetadataQueryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.MetadataQueryWriter"/> class from a <see cref="T:C1.Util.DX.WIC.MetadataQueryReader"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="metadataQueryReader">The metadata query reader.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.MetadataQueryReader,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.MetadataQueryWriter"/> class from a <see cref="T:C1.Util.DX.WIC.MetadataQueryReader"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="metadataQueryReader">The metadata query reader.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.SetMetadataByName(System.String,System.Object)">
            <summary>
            Sets the value for a metadata name
            </summary>
            <param name="name">The name of the metadata.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.MetadataQueryWriter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.MetadataQueryWriter">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.MetadataQueryWriter"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.SetMetadataByName(System.String,System.IntPtr)">
            <summary>	
            HRESULT IWICMetadataQueryWriter::SetMetadataByName([In] const wchar_t* wzName,[In] const void* pvarValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.MetadataQueryWriter.RemoveMetadataByName(System.String)">
            <summary>	
            HRESULT IWICMetadataQueryWriter::RemoveMetadataByName([In] const wchar_t* wzName)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.Palette">
            <summary>	
            IWICPalette	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Palette"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.Initialize(System.Int32[])">
            <summary>
            Initializes with the specified colors.
            </summary>
            <param name="colors">The colors.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.Initialize(C1.Util.DX.ColorF[])">
            <summary>
            Initializes with the specified colors.
            </summary>
            <param name="colors">The colors.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.Palette"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.Palette">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.Palette"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.Initialize(C1.Util.DX.WIC.BitmapPaletteType,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IWICPalette::InitializePredefined([In] WICBitmapPaletteType ePaletteType,[In] BOOL fAddTransparentColor)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.Initialize(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IWICPalette::InitializeCustom([In, Buffer] void* pColors,[In] unsigned int cCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.Initialize(C1.Util.DX.WIC.BitmapSource,System.Int32,C1.Util.DX.Bool)">
            <summary>	
            HRESULT IWICPalette::InitializeFromBitmap([In, Optional] IWICBitmapSource* pISurface,[In] unsigned int cCount,[In] BOOL fAddTransparentColor)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.Initialize(C1.Util.DX.WIC.Palette)">
            <summary>	
            HRESULT IWICPalette::InitializeFromPalette([In, Optional] IWICPalette* pIPalette)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.GetTypeInfo">
            <summary>	
            HRESULT IWICPalette::GetType([Out] WICBitmapPaletteType* pePaletteType)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.GetColorCount">
            <summary>	
            HRESULT IWICPalette::GetColorCount([Out] unsigned int* pcCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.GetColors(System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICPalette::GetColors([In] unsigned int cCount,[Out, Buffer] void* pColors,[Out] unsigned int* pcActualColors)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.IsBlackWhite">
            <summary>	
            HRESULT IWICPalette::IsBlackWhite([Out] BOOL* pfIsBlackWhite)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.IsGrayscale">
            <summary>	
            HRESULT IWICPalette::IsGrayscale([Out] BOOL* pfIsGrayscale)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.Palette.HasAlpha">
            <summary>	
            HRESULT IWICPalette::HasAlpha([Out] BOOL* pfHasAlpha)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.Palette.Colors">
            <summary>
            Gets the colors.
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.PixelFormat">
            <summary>
            WIC pixel format Guids and helper functions.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormat.GetBitsPerPixel(System.Guid)">
            <summary>
            Gets the number of bits per pixel for a particular pixel format.
            </summary>
            <param name="guid">The pixel format guid.</param>
            <returns>The number of bits per pixel. If the pixel format guid is invalid, returns 0</returns>
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormat.GetStride(System.Guid,System.Int32)">
            <summary>
            Gets the stride in bytes from a pixel format and a width..
            </summary>
            <param name="guid">The pixel format guid.</param>
            <param name="width">The width.</param>
            <returns>The number of bytes per row.</returns>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppBGR101010">
            <summary>GUID_WICPixelFormat32bppBGR101010</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format72bpp8ChannelsAlpha">
            <summary>GUID_WICPixelFormat72bpp8ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format2bppIndexed">
            <summary>GUID_WICPixelFormat2bppIndexed</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppGrayFixedPoint">
            <summary>GUID_WICPixelFormat32bppGrayFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format1bppIndexed">
            <summary>GUID_WICPixelFormat1bppIndexed</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bpp8Channels">
            <summary>GUID_WICPixelFormat64bpp8Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format16bppBGR555">
            <summary>GUID_WICPixelFormat16bppBGR555</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format16bppBGR565">
            <summary>GUID_WICPixelFormat16bppBGR565</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppRGBA1010102XR">
            <summary>GUID_WICPixelFormat32bppRGBA1010102XR</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppRGB">
            <summary>GUID_WICPixelFormat64bppRGB</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format112bpp7Channels">
            <summary>GUID_WICPixelFormat112bpp7Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format128bppRGBFloat">
            <summary>GUID_WICPixelFormat128bppRGBFloat</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.FormatDontCare">
            <summary>GUID_WICPixelFormatDontCare</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bppBGRFixedPoint">
            <summary>GUID_WICPixelFormat48bppBGRFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format24bppRGB">
            <summary>GUID_WICPixelFormat24bppRGB</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format96bppRGBFloat">
            <summary>GUID_WICPixelFormat96bppRGBFloat</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format24bpp3Channels">
            <summary>GUID_WICPixelFormat24bpp3Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppBGR">
            <summary>GUID_WICPixelFormat32bppBGR</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bppBGR">
            <summary>GUID_WICPixelFormat48bppBGR</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bppRGBFixedPoint">
            <summary>GUID_WICPixelFormat48bppRGBFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppBGRA">
            <summary>GUID_WICPixelFormat64bppBGRA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format96bpp6Channels">
            <summary>GUID_WICPixelFormat96bpp6Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.FormatBlackWhite">
            <summary>GUID_WICPixelFormatBlackWhite</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format112bpp6ChannelsAlpha">
            <summary>GUID_WICPixelFormat112bpp6ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppPBGRA">
            <summary>GUID_WICPixelFormat32bppPBGRA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bppRGBHalf">
            <summary>GUID_WICPixelFormat48bppRGBHalf</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format96bpp5ChannelsAlpha">
            <summary>GUID_WICPixelFormat96bpp5ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format80bppCMYKAlpha">
            <summary>GUID_WICPixelFormat80bppCMYKAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format16bppGrayFixedPoint">
            <summary>GUID_WICPixelFormat16bppGrayFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format128bpp8Channels">
            <summary>GUID_WICPixelFormat128bpp8Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppRGBAFixedPoint">
            <summary>GUID_WICPixelFormat64bppRGBAFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format144bpp8ChannelsAlpha">
            <summary>GUID_WICPixelFormat144bpp8ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format16bppGrayHalf">
            <summary>GUID_WICPixelFormat16bppGrayHalf</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bpp6Channels">
            <summary>GUID_WICPixelFormat48bpp6Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bpp7ChannelsAlpha">
            <summary>GUID_WICPixelFormat64bpp7ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format128bppRGBAFixedPoint">
            <summary>GUID_WICPixelFormat128bppRGBAFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppRGB">
            <summary>GUID_WICPixelFormat32bppRGB</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format8bppIndexed">
            <summary>GUID_WICPixelFormat8bppIndexed</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bppRGB">
            <summary>GUID_WICPixelFormat48bppRGB</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bpp3ChannelsAlpha">
            <summary>GUID_WICPixelFormat32bpp3ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppCMYK">
            <summary>GUID_WICPixelFormat64bppCMYK</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format4bppIndexed">
            <summary>GUID_WICPixelFormat4bppIndexed</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format40bpp4ChannelsAlpha">
            <summary>GUID_WICPixelFormat40bpp4ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format8bppY">
            <summary>GUID_WICPixelFormat8bppY</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppRGBFixedPoint">
            <summary>GUID_WICPixelFormat64bppRGBFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppPBGRA">
            <summary>GUID_WICPixelFormat64bppPBGRA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format16bppGray">
            <summary>GUID_WICPixelFormat16bppGray</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format16bppBGRA5551">
            <summary>GUID_WICPixelFormat16bppBGRA5551</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppBGRA">
            <summary>GUID_WICPixelFormat32bppBGRA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format128bpp7ChannelsAlpha">
            <summary>GUID_WICPixelFormat128bpp7ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format80bpp4ChannelsAlpha">
            <summary>GUID_WICPixelFormat80bpp4ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppPRGBAHalf">
            <summary>GUID_WICPixelFormat64bppPRGBAHalf</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppRGBA">
            <summary>GUID_WICPixelFormat64bppRGBA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppBGRAFixedPoint">
            <summary>GUID_WICPixelFormat64bppBGRAFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppPRGBA">
            <summary>GUID_WICPixelFormat32bppPRGBA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format16bppCbCr">
            <summary>GUID_WICPixelFormat16bppCbCr</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format96bppRGBFixedPoint">
            <summary>GUID_WICPixelFormat96bppRGBFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppGrayFloat">
            <summary>GUID_WICPixelFormat32bppGrayFloat</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bpp3Channels">
            <summary>GUID_WICPixelFormat48bpp3Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppRGBAHalf">
            <summary>GUID_WICPixelFormat64bppRGBAHalf</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format80bpp5Channels">
            <summary>GUID_WICPixelFormat80bpp5Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format40bppCMYKAlpha">
            <summary>GUID_WICPixelFormat40bppCMYKAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format8bppCb">
            <summary>GUID_WICPixelFormat8bppCb</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format8bppCr">
            <summary>GUID_WICPixelFormat8bppCr</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format8bppAlpha">
            <summary>GUID_WICPixelFormat8bppAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format56bpp7Channels">
            <summary>GUID_WICPixelFormat56bpp7Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format128bppRGBFixedPoint">
            <summary>GUID_WICPixelFormat128bppRGBFixedPoint</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bpp4Channels">
            <summary>GUID_WICPixelFormat64bpp4Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format40bpp5Channels">
            <summary>GUID_WICPixelFormat40bpp5Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format8bppGray">
            <summary>GUID_WICPixelFormat8bppGray</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppCMYK">
            <summary>GUID_WICPixelFormat32bppCMYK</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format24bppBGR">
            <summary>GUID_WICPixelFormat24bppBGR</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppRGBA1010102">
            <summary>GUID_WICPixelFormat32bppRGBA1010102</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format4bppGray">
            <summary>GUID_WICPixelFormat4bppGray</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppPRGBA">
            <summary>GUID_WICPixelFormat64bppPRGBA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format2bppGray">
            <summary>GUID_WICPixelFormat2bppGray</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format128bppRGBAFloat">
            <summary>GUID_WICPixelFormat128bppRGBAFloat</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format48bpp5ChannelsAlpha">
            <summary>GUID_WICPixelFormat48bpp5ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppRGBA">
            <summary>GUID_WICPixelFormat32bppRGBA</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bppRGBE">
            <summary>GUID_WICPixelFormat32bppRGBE</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format32bpp4Channels">
            <summary>GUID_WICPixelFormat32bpp4Channels</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format56bpp6ChannelsAlpha">
            <summary>GUID_WICPixelFormat56bpp6ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format128bppPRGBAFloat">
            <summary>GUID_WICPixelFormat128bppPRGBAFloat</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bpp3ChannelsAlpha">
            <summary>GUID_WICPixelFormat64bpp3ChannelsAlpha</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormat.Format64bppRGBHalf">
            <summary>GUID_WICPixelFormat64bppRGBHalf</summary>
        </member>
        <member name="T:C1.Util.DX.WIC.PixelFormatInfo">
            <summary>	
            IWICPixelFormatInfo	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.GetChannelMask(System.Int32)">
            <summary>
            Gets the channel mask.
            </summary>
            <param name="channelIndex">Index of the channel.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PixelFormatInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.PixelFormatInfo">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.PixelFormatInfo"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.GetFormatGUID">
            <summary>	
            HRESULT IWICPixelFormatInfo::GetFormatGUID([Out] GUID* pFormat)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.GetColorContext">
            <summary>	
            HRESULT IWICPixelFormatInfo::GetColorContext([Out] IWICColorContext** ppIColorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.GetBitsPerPixel">
            <summary>	
            HRESULT IWICPixelFormatInfo::GetBitsPerPixel([Out] unsigned int* puiBitsPerPixel)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.GetChannelCount">
            <summary>	
            HRESULT IWICPixelFormatInfo::GetChannelCount([Out] unsigned int* puiChannelCount)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo.GetChannelMask(System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            HRESULT IWICPixelFormatInfo::GetChannelMask([In] unsigned int uiChannelIndex,[In] unsigned int cbMaskBuffer,[In] void* pbMaskBuffer,[Out] unsigned int* pcbActual)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngBitmapDecoder">
            <summary>
            Png bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Png"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapDecoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.PngBitmapEncoder">
            <summary>
            Png bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Png"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapEncoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.PngBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PngBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.TiffBitmapDecoder">
            <summary>
            Tiff bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Tiff"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapDecoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.TiffBitmapEncoder">
            <summary>
            Tiff bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Tiff"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapEncoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.TiffBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.TiffBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.WicStream">
            <summary>	
            IWICStream	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.Create(C1.Util.DX.WIC.ImagingFactory,System.String,C1.Util.DX.Storage.NativeFileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WicStream"/> class from a file.
            </summary>
            <param name="factory">The factory.</param>
            <param name="fileName">Name of the file.</param>
            <param name="fileAccess">The file access.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WicStream"/> class from a <see cref="T:C1.Util.DX.Storage.IStream"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.DataPointer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WicStream"/> class from an unmanaged memory through a <see cref="T:C1.Util.DX.DataStream"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="dataStream">The unmanaged memory stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WicStream"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.WicStream">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.WicStream"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.InitializeFromIStream_(System.IntPtr)">
            <summary>	
            HRESULT IWICStream::InitializeFromIStream([In, Optional] IStream* pIStream)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.InitializeFromFilename(System.String,System.Int32)">
            <summary>	
            HRESULT IWICStream::InitializeFromFilename([In] const wchar_t* wzFileName,[In] unsigned int dwDesiredAccess)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.InitializeFromMemory(System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IWICStream::InitializeFromMemory([In] void* pbBuffer,[In] unsigned int cbBufferSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.WicStream.InitializeFromIStreamRegion_(System.IntPtr,System.Int64,System.Int64)">
            <summary>	
            HRESULT IWICStream::InitializeFromIStreamRegion([In, Optional] IStream* pIStream,[In] ULARGE_INTEGER ulOffset,[In] ULARGE_INTEGER ulMaxSize)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.WmpBitmapDecoder">
            <summary>
            Wmp bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapDecoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Wmp"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapDecoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapDecoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapDecoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.WmpBitmapEncoder">
            <summary>
            Wmp bitmap encoder using <see cref="T:C1.Util.DX.WIC.BitmapEncoder"/> initialized with default guid <see cref="F:C1.Util.DX.WIC.ContainerFormatGuids.Wmp"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapEncoder"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Util.DX.WIC.WmpBitmapEncoder.Create(C1.Util.DX.WIC.ImagingFactory,System.Guid,C1.Util.DX.WIC.WicStream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.WmpBitmapEncoder"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="guidVendorRef">The GUID vendor ref.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.BIMIptcDigestProperties">
            <summary>	
            WIC8BIMIptcDigestProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMIptcDigestProperties.PString">
            <summary>	
            WIC8BIMIptcDigestPString	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMIptcDigestProperties.IptcDigest">
            <summary>	
            WIC8BIMIptcDigestIptcDigest	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BIMIptcProperties">
            <summary>	
            WIC8BIMIptcProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMIptcProperties.PString">
            <summary>	
            WIC8BIMIptcPString	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMIptcProperties.EmbeddedIPTC">
            <summary>	
            WIC8BIMIptcEmbeddedIPTC	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BIMResolutionInfoProperties">
            <summary>	
            WIC8BIMResolutionInfoProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMResolutionInfoProperties.PString">
            <summary>	
            WIC8BIMResolutionInfoPString	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMResolutionInfoProperties.HResolution">
            <summary>	
            WIC8BIMResolutionInfoHResolution	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMResolutionInfoProperties.HResolutionUnit">
            <summary>	
            WIC8BIMResolutionInfoHResolutionUnit	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMResolutionInfoProperties.WidthUnit">
            <summary>	
            WIC8BIMResolutionInfoWidthUnit	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMResolutionInfoProperties.VResolution">
            <summary>	
            WIC8BIMResolutionInfoVResolution	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMResolutionInfoProperties.VResolutionUnit">
            <summary>	
            WIC8BIMResolutionInfoVResolutionUnit	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BIMResolutionInfoProperties.HeightUnit">
            <summary>	
            WIC8BIMResolutionInfoHeightUnit	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapAlphaChannelOption">
            <summary>	
            WICBitmapAlphaChannelOption	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapAlphaChannelOption.UseAlpha">
            <summary>	
            WICBitmapUseAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapAlphaChannelOption.UsePremultipliedAlpha">
            <summary>	
            WICBitmapUsePremultipliedAlpha	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapAlphaChannelOption.IgnoreAlpha">
            <summary>	
            WICBitmapIgnoreAlpha	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapCreateCacheOption">
            <summary>	
            WICBitmapCreateCacheOption	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapCreateCacheOption.NoCache">
            <summary>	
            WICBitmapNoCache	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapCreateCacheOption.CacheOnDemand">
            <summary>	
            WICBitmapCacheOnDemand	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapCreateCacheOption.CacheOnLoad">
            <summary>	
            WICBitmapCacheOnLoad	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapDecoderCapabilities">
            <summary>	
            WICBitmapDecoderCapabilities	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderCapabilities.SameEncoder">
            <summary>	
            WICBitmapDecoderCapabilitySameEncoder	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderCapabilities.CanDecodeAllImages">
            <summary>	
            WICBitmapDecoderCapabilityCanDecodeAllImages	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderCapabilities.CanDecodeSomeImages">
            <summary>	
            WICBitmapDecoderCapabilityCanDecodeSomeImages	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderCapabilities.CanEnumerateMetadata">
            <summary>	
            WICBitmapDecoderCapabilityCanEnumerateMetadata	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderCapabilities.CanDecodeThumbnail">
            <summary>	
            WICBitmapDecoderCapabilityCanDecodeThumbnail	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderCapabilities.None">
            <summary>	
            None	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapDitherType">
            <summary>	
            WICBitmapDitherType	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.None">
            <summary>	
            WICBitmapDitherTypeNone	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.Solid">
            <summary>	
            WICBitmapDitherTypeSolid	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.Ordered4x4">
            <summary>	
            WICBitmapDitherTypeOrdered4x4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.Ordered8x8">
            <summary>	
            WICBitmapDitherTypeOrdered8x8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.Ordered16x16">
            <summary>	
            WICBitmapDitherTypeOrdered16x16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.Spiral4x4">
            <summary>	
            WICBitmapDitherTypeSpiral4x4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.Spiral8x8">
            <summary>	
            WICBitmapDitherTypeSpiral8x8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.DualSpiral4x4">
            <summary>	
            WICBitmapDitherTypeDualSpiral4x4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.DualSpiral8x8">
            <summary>	
            WICBitmapDitherTypeDualSpiral8x8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDitherType.ErrorDiffusion">
            <summary>	
            WICBitmapDitherTypeErrorDiffusion	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapEncoderCacheOption">
            <summary>	
            WICBitmapEncoderCacheOption	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderCacheOption.InMemory">
            <summary>	
            WICBitmapEncoderCacheInMemory	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderCacheOption.TempFile">
            <summary>	
            WICBitmapEncoderCacheTempFile	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderCacheOption.NoCache">
            <summary>	
            WICBitmapEncoderNoCache	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapInterpolationMode">
            <summary>	
            WICBitmapInterpolationMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapInterpolationMode.NearestNeighbor">
            <summary>	
            WICBitmapInterpolationModeNearestNeighbor	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapInterpolationMode.Linear">
            <summary>	
            WICBitmapInterpolationModeLinear	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapInterpolationMode.Cubic">
            <summary>	
            WICBitmapInterpolationModeCubic	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapInterpolationMode.Fant">
            <summary>	
            WICBitmapInterpolationModeFant	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapLockFlags">
            <summary>	
            WICBitmapLockFlags	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapLockFlags.Read">
            <summary>	
            WICBitmapLockRead	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapLockFlags.Write">
            <summary>	
            WICBitmapLockWrite	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapPaletteType">
            <summary>	
            WICBitmapPaletteType	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.Custom">
            <summary>	
            WICBitmapPaletteTypeCustom	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.MedianCut">
            <summary>	
            WICBitmapPaletteTypeMedianCut	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedBW">
            <summary>	
            WICBitmapPaletteTypeFixedBW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedHalftone8">
            <summary>	
            WICBitmapPaletteTypeFixedHalftone8	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedHalftone27">
            <summary>	
            WICBitmapPaletteTypeFixedHalftone27	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedHalftone64">
            <summary>	
            WICBitmapPaletteTypeFixedHalftone64	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedHalftone125">
            <summary>	
            WICBitmapPaletteTypeFixedHalftone125	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedHalftone216">
            <summary>	
            WICBitmapPaletteTypeFixedHalftone216	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedWebPalette">
            <summary>	
            WICBitmapPaletteTypeFixedWebPalette	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedHalftone252">
            <summary>	
            WICBitmapPaletteTypeFixedHalftone252	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedHalftone256">
            <summary>	
            WICBitmapPaletteTypeFixedHalftone256	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedGray4">
            <summary>	
            WICBitmapPaletteTypeFixedGray4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedGray16">
            <summary>	
            WICBitmapPaletteTypeFixedGray16	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPaletteType.FixedGray256">
            <summary>	
            WICBitmapPaletteTypeFixedGray256	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapTransformOptions">
            <summary>	
            WICBitmapTransformOptions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapTransformOptions.Rotate0">
            <summary>	
            WICBitmapTransformRotate0	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapTransformOptions.Rotate90">
            <summary>	
            WICBitmapTransformRotate90	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapTransformOptions.Rotate180">
            <summary>	
            WICBitmapTransformRotate180	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapTransformOptions.Rotate270">
            <summary>	
            WICBitmapTransformRotate270	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapTransformOptions.FlipHorizontal">
            <summary>	
            WICBitmapTransformFlipHorizontal	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapTransformOptions.FlipVertical">
            <summary>	
            WICBitmapTransformFlipVertical	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ColorContextType">
            <summary>	
            WICColorContextType	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ColorContextType.Uninitialized">
            <summary>	
            WICColorContextUninitialized	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ColorContextType.Profile">
            <summary>	
            WICColorContextProfile	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ColorContextType.ExifColorSpace">
            <summary>	
            WICColorContextExifColorSpace	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ComponentEnumerateOptions">
            <summary>	
            WICComponentEnumerateOptions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentEnumerateOptions.Default">
            <summary>	
            WICComponentEnumerateDefault	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentEnumerateOptions.Refresh">
            <summary>	
            WICComponentEnumerateRefresh	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentEnumerateOptions.Disabled">
            <summary>	
            WICComponentEnumerateDisabled	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentEnumerateOptions.Unsigned">
            <summary>	
            WICComponentEnumerateUnsigned	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentEnumerateOptions.BuiltInOnly">
            <summary>	
            WICComponentEnumerateBuiltInOnly	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ComponentSigning">
            <summary>	
            WICComponentSigning	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentSigning.Signed">
            <summary>	
            WICComponentSigned	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentSigning.Unsigned">
            <summary>	
            WICComponentUnsigned	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentSigning.Safe">
            <summary>	
            WICComponentSafe	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentSigning.Disabled">
            <summary>	
            WICComponentDisabled	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ComponentType">
            <summary>	
            WICComponentType	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentType.Decoder">
            <summary>	
            WICDecoder	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentType.Encoder">
            <summary>	
            WICEncoder	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentType.PixelFormatConverter">
            <summary>	
            WICPixelFormatConverter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentType.MetadataReader">
            <summary>	
            WICMetadataReader	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentType.MetadataWriter">
            <summary>	
            WICMetadataWriter	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentType.PixelFormat">
            <summary>	
            WICPixelFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ComponentType.AllComponents">
            <summary>	
            WICAllComponents	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DdsAlphaMode">
            <summary>	
            WICDdsAlphaMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsAlphaMode.DdsAlphaModeUnknown">
            <summary>	
            WICDdsAlphaModeUnknown	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsAlphaMode.DdsAlphaModeStraight">
            <summary>	
            WICDdsAlphaModeStraight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsAlphaMode.DdsAlphaModePremultiplied">
            <summary>	
            WICDdsAlphaModePremultiplied	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsAlphaMode.DdsAlphaModeOpaque">
            <summary>	
            WICDdsAlphaModeOpaque	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsAlphaMode.DdsAlphaModeCustom">
            <summary>	
            WICDdsAlphaModeCustom	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DdsDimension">
            <summary>	
            WICDdsDimension	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsDimension.DdsTexture1D">
            <summary>	
            WICDdsTexture1D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsDimension.DdsTexture2D">
            <summary>	
            WICDdsTexture2D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsDimension.DdsTexture3D">
            <summary>	
            WICDdsTexture3D	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsDimension.DdsTextureCube">
            <summary>	
            WICDdsTextureCube	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DecodeOptions">
            <summary>	
            WICDecodeOptions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DecodeOptions.CacheOnDemand">
            <summary>	
            WICDecodeMetadataCacheOnDemand	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DecodeOptions.CacheOnLoad">
            <summary>	
            WICDecodeMetadataCacheOnLoad	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.GifApplicationExtensionProperties">
            <summary>	
            WICGifApplicationExtensionProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifApplicationExtensionProperties.Application">
            <summary>	
            WICGifApplicationExtensionApplication	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifApplicationExtensionProperties.Data">
            <summary>	
            WICGifApplicationExtensionData	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.GifCommentExtensionProperties">
            <summary>	
            WICGifCommentExtensionProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifCommentExtensionProperties.Text">
            <summary>	
            WICGifCommentExtensionText	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.GifGraphicControlExtensionProperties">
            <summary>	
            WICGifGraphicControlExtensionProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifGraphicControlExtensionProperties.Disposal">
            <summary>	
            WICGifGraphicControlExtensionDisposal	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifGraphicControlExtensionProperties.UserInputFlag">
            <summary>	
            WICGifGraphicControlExtensionUserInputFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifGraphicControlExtensionProperties.TransparencyFlag">
            <summary>	
            WICGifGraphicControlExtensionTransparencyFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifGraphicControlExtensionProperties.Delay">
            <summary>	
            WICGifGraphicControlExtensionDelay	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifGraphicControlExtensionProperties.TransparentColorIndex">
            <summary>	
            WICGifGraphicControlExtensionTransparentColorIndex	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.GifImageDescriptorProperties">
            <summary>	
            WICGifImageDescriptorProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.Left">
            <summary>	
            WICGifImageDescriptorLeft	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.Top">
            <summary>	
            WICGifImageDescriptorTop	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.Width">
            <summary>	
            WICGifImageDescriptorWidth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.Height">
            <summary>	
            WICGifImageDescriptorHeight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.LocalColorTableFlag">
            <summary>	
            WICGifImageDescriptorLocalColorTableFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.InterlaceFlag">
            <summary>	
            WICGifImageDescriptorInterlaceFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.SortFlag">
            <summary>	
            WICGifImageDescriptorSortFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifImageDescriptorProperties.LocalColorTableSize">
            <summary>	
            WICGifImageDescriptorLocalColorTableSize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties">
            <summary>	
            WICGifLogicalScreenDescriptorProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.Signature">
            <summary>	
            WICGifLogicalScreenSignature	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.Width">
            <summary>	
            WICGifLogicalScreenDescriptorWidth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.Height">
            <summary>	
            WICGifLogicalScreenDescriptorHeight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.GlobalColorTableFlag">
            <summary>	
            WICGifLogicalScreenDescriptorGlobalColorTableFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.ColorResolution">
            <summary>	
            WICGifLogicalScreenDescriptorColorResolution	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.SortFlag">
            <summary>	
            WICGifLogicalScreenDescriptorSortFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.GlobalColorTableSize">
            <summary>	
            WICGifLogicalScreenDescriptorGlobalColorTableSize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.BackgroundColorIndex">
            <summary>	
            WICGifLogicalScreenDescriptorBackgroundColorIndex	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.GifLogicalScreenDescriptorProperties.PixelAspectRatio">
            <summary>	
            WICGifLogicalScreenDescriptorPixelAspectRatio	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.JpegChrominanceProperties">
            <summary>	
            WICJpegChrominanceProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegChrominanceProperties.Table">
            <summary>	
            WICJpegChrominanceTable	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.JpegCommentProperties">
            <summary>	
            WICJpegCommentProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegCommentProperties.Text">
            <summary>	
            WICJpegCommentText	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.JpegLuminanceProperties">
            <summary>	
            WICJpegLuminanceProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegLuminanceProperties.Table">
            <summary>	
            WICJpegLuminanceTable	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.JpegYCrCbSubsamplingOption">
            <summary>	
            WICJpegYCrCbSubsamplingOption	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegYCrCbSubsamplingOption.Default">
            <summary>	
            WICJpegYCrCbSubsamplingDefault	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegYCrCbSubsamplingOption.Mode420">
            <summary>	
            WICJpegYCrCbSubsampling420	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegYCrCbSubsamplingOption.Mode422">
            <summary>	
            WICJpegYCrCbSubsampling422	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegYCrCbSubsamplingOption.Mode444">
            <summary>	
            WICJpegYCrCbSubsampling444	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.JpegYCrCbSubsamplingOption.Mode440">
            <summary>	
            WICJpegYCrCbSubsampling440	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.NamedWhitePoint">
            <summary>	
            WICNamedWhitePoint	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Default">
            <summary>	
            WICWhitePointDefault	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Daylight">
            <summary>	
            WICWhitePointDaylight	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Cloudy">
            <summary>	
            WICWhitePointCloudy	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Shade">
            <summary>	
            WICWhitePointShade	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Tungsten">
            <summary>	
            WICWhitePointTungsten	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Fluorescent">
            <summary>	
            WICWhitePointFluorescent	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Flash">
            <summary>	
            WICWhitePointFlash	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Underwater">
            <summary>	
            WICWhitePointUnderwater	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.Custom">
            <summary>	
            WICWhitePointCustom	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.AutoWhiteBalance">
            <summary>	
            WICWhitePointAutoWhiteBalance	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.NamedWhitePoint.AsShot">
            <summary>	
            WICWhitePointAsShot	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PixelFormatNumericRepresentation">
            <summary>	
            WICPixelFormatNumericRepresentation	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormatNumericRepresentation.Unspecified">
            <summary>	
            WICPixelFormatNumericRepresentationUnspecified	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormatNumericRepresentation.Indexed">
            <summary>	
            WICPixelFormatNumericRepresentationIndexed	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormatNumericRepresentation.UnsignedInteger">
            <summary>	
            WICPixelFormatNumericRepresentationUnsignedInteger	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormatNumericRepresentation.SignedInteger">
            <summary>	
            WICPixelFormatNumericRepresentationSignedInteger	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormatNumericRepresentation.Fixed">
            <summary>	
            WICPixelFormatNumericRepresentationFixed	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PixelFormatNumericRepresentation.Float">
            <summary>	
            WICPixelFormatNumericRepresentationFloat	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PlanarOptions">
            <summary>	
            WICPlanarOptions	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PlanarOptions.PlanarOptionsDefault">
            <summary>	
            WICPlanarOptionsDefault	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PlanarOptions.PlanarOptionsPreserveSubsampling">
            <summary>	
            WICPlanarOptionsPreserveSubsampling	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngBkgdProperties">
            <summary>	
            WICPngBkgdProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngBkgdProperties.Color">
            <summary>	
            WICPngBkgdBackgroundColor	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngChrmProperties">
            <summary>	
            WICPngChrmProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.WhitePointX">
            <summary>	
            WICPngChrmWhitePointX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.WhitePointY">
            <summary>	
            WICPngChrmWhitePointY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.RedX">
            <summary>	
            WICPngChrmRedX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.RedY">
            <summary>	
            WICPngChrmRedY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.GreenX">
            <summary>	
            WICPngChrmGreenX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.GreenY">
            <summary>	
            WICPngChrmGreenY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.BlueX">
            <summary>	
            WICPngChrmBlueX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngChrmProperties.BlueY">
            <summary>	
            WICPngChrmBlueY	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngFilterOption">
            <summary>	
            WICPngFilterOption	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngFilterOption.Unspecified">
            <summary>	
            WICPngFilterUnspecified	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngFilterOption.None">
            <summary>	
            WICPngFilterNone	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngFilterOption.Sub">
            <summary>	
            WICPngFilterSub	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngFilterOption.Up">
            <summary>	
            WICPngFilterUp	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngFilterOption.Average">
            <summary>	
            WICPngFilterAverage	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngFilterOption.Paeth">
            <summary>	
            WICPngFilterPaeth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngFilterOption.Adaptive">
            <summary>	
            WICPngFilterAdaptive	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngGamaProperties">
            <summary>	
            WICPngGamaProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngGamaProperties.Gamma">
            <summary>	
            WICPngGamaGamma	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngHistProperties">
            <summary>	
            WICPngHistProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngHistProperties.Frequencies">
            <summary>	
            WICPngHistFrequencies	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngIccpProperties">
            <summary>	
            WICPngIccpProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngIccpProperties.ProfileName">
            <summary>	
            WICPngIccpProfileName	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngIccpProperties.ProfileData">
            <summary>	
            WICPngIccpProfileData	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngItxtProperties">
            <summary>	
            WICPngItxtProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngItxtProperties.Keyword">
            <summary>	
            WICPngItxtKeyword	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngItxtProperties.CompressionFlag">
            <summary>	
            WICPngItxtCompressionFlag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngItxtProperties.LanguageTag">
            <summary>	
            WICPngItxtLanguageTag	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngItxtProperties.TranslatedKeyword">
            <summary>	
            WICPngItxtTranslatedKeyword	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngItxtProperties.Text">
            <summary>	
            WICPngItxtText	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngSrgbProperties">
            <summary>	
            WICPngSrgbProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngSrgbProperties.RenderingIntent">
            <summary>	
            WICPngSrgbRenderingIntent	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PngTimeProperties">
            <summary>	
            WICPngTimeProperties	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngTimeProperties.Year">
            <summary>	
            WICPngTimeYear	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngTimeProperties.Month">
            <summary>	
            WICPngTimeMonth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngTimeProperties.Day">
            <summary>	
            WICPngTimeDay	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngTimeProperties.Hour">
            <summary>	
            WICPngTimeHour	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngTimeProperties.Minute">
            <summary>	
            WICPngTimeMinute	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.PngTimeProperties.Second">
            <summary>	
            WICPngTimeSecond	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ProgressNotification">
            <summary>	
            WICProgressNotification	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ProgressNotification.Begin">
            <summary>	
            WICProgressNotificationBegin	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ProgressNotification.End">
            <summary>	
            WICProgressNotificationEnd	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ProgressNotification.Frequent">
            <summary>	
            WICProgressNotificationFrequent	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ProgressNotification.All">
            <summary>	
            WICProgressNotificationAll	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ProgressOperation">
            <summary>	
            WICProgressOperation	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ProgressOperation.CopyPixels">
            <summary>	
            WICProgressOperationCopyPixels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ProgressOperation.WritePixels">
            <summary>	
            WICProgressOperationWritePixels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ProgressOperation.All">
            <summary>	
            WICProgressOperationAll	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.RawCapabilities">
            <summary>	
            WICRawCapabilities	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilities.NotSupported">
            <summary>	
            WICRawCapabilityNotSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilities.GetSupported">
            <summary>	
            WICRawCapabilityGetSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilities.FullySupported">
            <summary>	
            WICRawCapabilityFullySupported	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.RawParameterSet">
            <summary>	
            WICRawParameterSet	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawParameterSet.AsShot">
            <summary>	
            WICAsShotParameterSet	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawParameterSet.UserAdjusted">
            <summary>	
            WICUserAdjustedParameterSet	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawParameterSet.AutoAdjusted">
            <summary>	
            WICAutoAdjustedParameterSet	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.RawRenderMode">
            <summary>	
            WICRawRenderMode	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawRenderMode.Draft">
            <summary>	
            WICRawRenderModeDraft	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawRenderMode.Normal">
            <summary>	
            WICRawRenderModeNormal	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawRenderMode.BestQuality">
            <summary>	
            WICRawRenderModeBestQuality	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.RawRotationCapabilities">
            <summary>	
            WICRawRotationCapabilities	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawRotationCapabilities.NotSupported">
            <summary>	
            WICRawRotationCapabilityNotSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawRotationCapabilities.GetSupported">
            <summary>	
            WICRawRotationCapabilityGetSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawRotationCapabilities.NinetyDegreesSupported">
            <summary>	
            WICRawRotationCapabilityNinetyDegreesSupported	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawRotationCapabilities.FullySupported">
            <summary>	
            WICRawRotationCapabilityFullySupported	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.SectionAccessLevel">
            <summary>	
            WICSectionAccessLevel	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.SectionAccessLevel.Read">
            <summary>	
            WICSectionAccessLevelRead	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.SectionAccessLevel.ReadWrite">
            <summary>	
            WICSectionAccessLevelReadWrite	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.TiffCompressionOption">
            <summary>	
            WICTiffCompressionOption	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.DontCare">
            <summary>	
            WICTiffCompressionDontCare	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.None">
            <summary>	
            WICTiffCompressionNone	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.CCITT3">
            <summary>	
            WICTiffCompressionCCITT3	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.CCITT4">
            <summary>	
            WICTiffCompressionCCITT4	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.LZW">
            <summary>	
            WICTiffCompressionLZW	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.RLE">
            <summary>	
            WICTiffCompressionRLE	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.ZIP">
            <summary>	
            WICTiffCompressionZIP	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.TiffCompressionOption.LZWHDifferencing">
            <summary>	
            WICTiffCompressionLZWHDifferencing	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapDecoderGuids">
            <summary>
            WIC decoders guids.
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Gif">
            <summary>CLSID_WICGifDecoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Jpeg">
            <summary>CLSID_WICJpegDecoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Png">
            <summary>CLSID_WICPngDecoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Tiff">
            <summary>CLSID_WICTiffDecoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Dds">
            <summary>CLSID_WICDdsDecoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Wmp">
            <summary>CLSID_WICWmpDecoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Bmp">
            <summary>CLSID_WICBmpDecoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapDecoderGuids.Ico">
            <summary>CLSID_WICIcoDecoder</summary>
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapEncoderGuids">
            <summary>
            WIC encoder guids.
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderGuids.Wmp">
            <summary>CLSID_WICWmpEncoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderGuids.Gif">
            <summary>CLSID_WICGifEncoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderGuids.Jpeg">
            <summary>CLSID_WICJpegEncoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderGuids.Png">
            <summary>CLSID_WICPngEncoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderGuids.Bmp">
            <summary>CLSID_WICBmpEncoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderGuids.Tiff">
            <summary>CLSID_WICTiffEncoder</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapEncoderGuids.Dds">
            <summary>CLSID_WICDdsEncoder</summary>
        </member>
        <member name="T:C1.Util.DX.WIC.ContainerFormatGuids">
            <summary>
            WIC container format guids.
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Dds">
            <summary>GUID_ContainerFormatDds</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Ico">
            <summary>GUID_ContainerFormatIco</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Gif">
            <summary>GUID_ContainerFormatGif</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Jpeg">
            <summary>GUID_ContainerFormatJpeg</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Wmp">
            <summary>GUID_ContainerFormatWmp</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Tiff">
            <summary>GUID_ContainerFormatTiff</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Png">
            <summary>GUID_ContainerFormatPng</summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ContainerFormatGuids.Bmp">
            <summary>GUID_ContainerFormatBmp</summary>
        </member>
        <member name="T:C1.Util.DX.WIC.ResultCode">
            <summary>	
            WIC result codes.
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.BadHeader">
            <summary>
            WINCODEC_ERR_BADHEADER
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.UnexpectedMetadataType">
            <summary>
            WINCODEC_ERR_UNEXPECTEDMETADATATYPE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.InvalidQueryCharacter">
            <summary>
            WINCODEC_ERR_INVALIDQUERYCHARACTER
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.InvalidParameter">
            <summary>
            WINCODEC_ERR_INVALIDPARAMETER
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.ValueOutOfRange">
            <summary>
            WINCODEC_ERR_VALUEOUTOFRANGE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.CodecTooManyScanLines">
            <summary>
            WINCODEC_ERR_CODECTOOMANYSCANLINES
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.PropertySize">
            <summary>
            WINCODEC_ERR_PROPERTYSIZE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.OufOfMemory">
            <summary>
            WINCODEC_ERR_OUTOFMEMORY
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.CodecPresent">
            <summary>
            WINCODEC_ERR_CODECPRESENT
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.NotInitializeD">
            <summary>
            WINCODEC_ERR_NOTINITIALIZED
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.ValueOverflow">
            <summary>
            WINCODEC_ERR_VALUEOVERFLOW
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.PaletteUnavailable">
            <summary>
            WINCODEC_ERR_PALETTEUNAVAILABLE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.BadStreamData">
            <summary>
            WINCODEC_ERR_BADSTREAMDATA
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.ComponentInitializeFailure">
            <summary>
            WINCODEC_ERR_COMPONENTINITIALIZEFAILURE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.ImageSizeOutOfRange">
            <summary>
            WINCODEC_ERR_IMAGESIZEOUTOFRANGE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.UnsupportedPixelFormat">
            <summary>
            WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.ComponentNotFound">
            <summary>
            WINCODEC_ERR_COMPONENTNOTFOUND
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.InvalidRegistration">
            <summary>
            WINCODEC_ERR_INVALIDREGISTRATION
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.UnexpectedSize">
            <summary>
            WINCODEC_ERR_UNEXPECTEDSIZE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.InternalError">
            <summary>
            WINCODEC_ERR_INTERNALERROR
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.WrongState">
            <summary>
            WINCODEC_ERR_WRONGSTATE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.BadMetadataHeader">
            <summary>
            WINCODEC_ERR_BADMETADATAHEADER
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.Aborted">
            <summary>
            WINCODEC_ERR_ABORTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.NotImplemented">
            <summary>
            WINCODEC_ERR_NOTIMPLEMENTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.StreamWrite">
            <summary>
            WINCODEC_ERR_STREAMWRITE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.Base">
            <summary>
            WINCODEC_ERR_BASE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.RequestOnlyValidAtMetadataRoot">
            <summary>
            WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.SourceRectangleDoesNotMatchDimensions">
            <summary>
            WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.StreamNotAvailable">
            <summary>
            WINCODEC_ERR_STREAMNOTAVAILABLE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.InvalidQueryRequest">
            <summary>
            WINCODEC_ERR_INVALIDQUERYREQUEST
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.UnknownImageFormat">
            <summary>
            WINCODEC_ERR_UNKNOWNIMAGEFORMAT
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.GenericError">
            <summary>
            WINCODEC_ERR_GENERIC_ERROR
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.InvalidProgressivelevel">
            <summary>
            WINCODEC_ERR_INVALIDPROGRESSIVELEVEL
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.StreamRead">
            <summary>
            WINCODEC_ERR_STREAMREAD
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.InsufficientBuffer">
            <summary>
            WINCODEC_ERR_INSUFFICIENTBUFFER
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.FrameMissing">
            <summary>
            WINCODEC_ERR_FRAMEMISSING
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.UnsupportedVersion">
            <summary>
            WINCODEC_ERR_UNSUPPORTEDVERSION
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.AlreadyLocked">
            <summary>
            WINCODEC_ERR_ALREADYLOCKED
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.CodecNoThumbnail">
            <summary>
            WINCODEC_ERR_CODECNOTHUMBNAIL
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.TooMuchMetadata">
            <summary>
            WINCODEC_ERR_TOOMUCHMETADATA
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.BadImage">
            <summary>
            WINCODEC_ERR_BADIMAGE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.PropertyNotSupported">
            <summary>
            WINCODEC_ERR_PROPERTYNOTSUPPORTED
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.UnsupportedOperation">
            <summary>
            WINCODEC_ERR_UNSUPPORTEDOPERATION
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.Win32error">
            <summary>
            WINCODEC_ERR_WIN32ERROR
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.AccessDenied">
            <summary>
            WINCODEC_ERR_ACCESSDENIED
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.Duplicatemetadatapresent">
            <summary>
            WINCODEC_ERR_DUPLICATEMETADATAPRESENT
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.Propertyunexpectedtype">
            <summary>
            WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE
            </summary>
        </member>
        <member name="F:C1.Util.DX.WIC.ResultCode.PropertyNotFound">
            <summary>
            WINCODEC_ERR_PROPERTYNOTFOUND
            </summary>
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapCodecProgressNotification">
            <summary>	
            IWICBitmapCodecProgressNotification	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecProgressNotification.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapCodecProgressNotification"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecProgressNotification.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapCodecProgressNotification">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapCodecProgressNotification"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapCodecProgressNotification.RegisterProgressNotification(C1.Util.DX.FunctionCallback,System.IntPtr,System.Int32)">
            <summary>	
            HRESULT IWICBitmapCodecProgressNotification::RegisterProgressNotification([In, Optional] __function__stdcall* pfnProgressNotification,[In, Optional] void* pvData,[In] unsigned int dwProgressFlags)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapEncoderInfo">
            <summary>	
            IWICBitmapEncoderInfo	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoderInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.BitmapEncoderInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoderInfo.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.BitmapEncoderInfo">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.BitmapEncoderInfo"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.BitmapEncoderInfo.CreateInstance">
            <summary>	
            HRESULT IWICBitmapEncoderInfo::CreateInstance([Out] IWICBitmapEncoder** ppIBitmapEncoder)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DdsDecoder">
            <summary>	
            IWICDdsDecoder	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsDecoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.DdsDecoder"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsDecoder.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.DdsDecoder">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.DdsDecoder"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.DdsDecoder.GetParameters(C1.Util.DX.WIC.DdsParameters@)">
            <summary>	
            HRESULT IWICDdsDecoder::GetParameters([Out] WICDdsParameters* pParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsDecoder.GetFrame(System.Int32,System.Int32,System.Int32)">
            <summary>	
            HRESULT IWICDdsDecoder::GetFrame([In] unsigned int arrayIndex,[In] unsigned int mipLevel,[In] unsigned int sliceIndex,[Out] IWICBitmapFrameDecode** ppIBitmapFrame)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.DdsDecoder.Parameters">
            <summary>	
            GetParameters	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DdsEncoder">
            <summary>	
            IWICDdsEncoder	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsEncoder.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.DdsEncoder"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsEncoder.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.DdsEncoder">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.DdsEncoder"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.DdsEncoder.SetParameters(C1.Util.DX.WIC.DdsParameters@)">
            <summary>	
            HRESULT IWICDdsEncoder::SetParameters([In] WICDdsParameters* pParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsEncoder.GetParameters(C1.Util.DX.WIC.DdsParameters@)">
            <summary>	
            HRESULT IWICDdsEncoder::GetParameters([Out] WICDdsParameters* pParameters)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DdsEncoder.CreateNewFrame(C1.Util.DX.WIC.BitmapFrameEncode@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICDdsEncoder::CreateNewFrame([Out] IWICBitmapFrameEncode** ppIFrameEncode,[Out] unsigned int* pArrayIndex,[Out] unsigned int* pMipLevel,[Out] unsigned int* pSliceIndex)	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.DdsEncoder.Parameters">
            <summary>	
            GetParameters / SetParameters	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DevelopRaw">
            <summary>	
            IWICDevelopRaw	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.DevelopRaw"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.DevelopRaw">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.DevelopRaw"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.QueryRawCapabilitiesInfo(C1.Util.DX.WIC.RawCapabilitiesInfo@)">
            <summary>	
            HRESULT IWICDevelopRaw::QueryRawCapabilitiesInfo([In] WICRawCapabilitiesInfo* pInfo)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.LoadParameterSet(C1.Util.DX.WIC.RawParameterSet)">
            <summary>	
            HRESULT IWICDevelopRaw::LoadParameterSet([In] WICRawParameterSet ParameterSet)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetCurrentParameterSet">
            <summary>	
            HRESULT IWICDevelopRaw::GetCurrentParameterSet([Out] IPropertyBag2** ppCurrentParameterSet)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetExposureCompensation(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetExposureCompensation([In] double ev)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetExposureCompensation">
            <summary>	
            HRESULT IWICDevelopRaw::GetExposureCompensation([Out] double* pEV)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetWhitePointRGB(System.Int32,System.Int32,System.Int32)">
            <summary>	
            HRESULT IWICDevelopRaw::SetWhitePointRGB([In] unsigned int Red,[In] unsigned int Green,[In] unsigned int Blue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetWhitePointRGB(System.Int32@,System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICDevelopRaw::GetWhitePointRGB([Out] unsigned int* pRed,[Out] unsigned int* pGreen,[Out] unsigned int* pBlue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetNamedWhitePoint(C1.Util.DX.WIC.NamedWhitePoint)">
            <summary>	
            HRESULT IWICDevelopRaw::SetNamedWhitePoint([In] WICNamedWhitePoint WhitePoint)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetNamedWhitePoint">
            <summary>	
            HRESULT IWICDevelopRaw::GetNamedWhitePoint([Out] WICNamedWhitePoint* pWhitePoint)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetWhitePointKelvin(System.Int32)">
            <summary>	
            HRESULT IWICDevelopRaw::SetWhitePointKelvin([In] unsigned int WhitePointKelvin)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetWhitePointKelvin">
            <summary>	
            HRESULT IWICDevelopRaw::GetWhitePointKelvin([Out] unsigned int* pWhitePointKelvin)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetKelvinRangeInfo(System.Int32@,System.Int32@,System.Int32@)">
            <summary>	
            HRESULT IWICDevelopRaw::GetKelvinRangeInfo([Out] unsigned int* pMinKelvinTemp,[Out] unsigned int* pMaxKelvinTemp,[Out] unsigned int* pKelvinTempStepValue)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetContrast(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetContrast([In] double Contrast)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetContrast">
            <summary>	
            HRESULT IWICDevelopRaw::GetContrast([Out] double* pContrast)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetGamma(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetGamma([In] double Gamma)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetGamma">
            <summary>	
            HRESULT IWICDevelopRaw::GetGamma([Out] double* pGamma)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetSharpness(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetSharpness([In] double Sharpness)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetSharpness">
            <summary>	
            HRESULT IWICDevelopRaw::GetSharpness([Out] double* pSharpness)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetSaturation(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetSaturation([In] double Saturation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetSaturation">
            <summary>	
            HRESULT IWICDevelopRaw::GetSaturation([Out] double* pSaturation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetTint(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetTint([In] double Tint)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetTint">
            <summary>	
            HRESULT IWICDevelopRaw::GetTint([Out] double* pTint)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetNoiseReduction(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetNoiseReduction([In] double NoiseReduction)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetNoiseReduction">
            <summary>	
            HRESULT IWICDevelopRaw::GetNoiseReduction([Out] double* pNoiseReduction)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetDestinationColorContext(C1.Util.DX.WIC.ColorContext)">
            <summary>	
            HRESULT IWICDevelopRaw::SetDestinationColorContext([In, Optional] IWICColorContext* pColorContext)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetToneCurve(System.Int32,C1.Util.DX.WIC.RawToneCurve[])">
            <summary>	
            HRESULT IWICDevelopRaw::SetToneCurve([In] unsigned int cbToneCurveSize,[In, Buffer] const WICRawToneCurve* pToneCurve)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetToneCurve(System.Int32,C1.Util.DX.WIC.RawToneCurve[],System.IntPtr)">
            <summary>	
            HRESULT IWICDevelopRaw::GetToneCurve([In] unsigned int cbToneCurveBufferSize,[Out, Buffer, Optional] WICRawToneCurve* pToneCurve,[InOut, Optional] unsigned int* pcbActualToneCurveBufferSize)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetRotation(System.Double)">
            <summary>	
            HRESULT IWICDevelopRaw::SetRotation([In] double Rotation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetRotation">
            <summary>	
            HRESULT IWICDevelopRaw::GetRotation([Out] double* pRotation)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetRenderMode(C1.Util.DX.WIC.RawRenderMode)">
            <summary>	
            HRESULT IWICDevelopRaw::SetRenderMode([In] WICRawRenderMode RenderMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.GetRenderMode">
            <summary>	
            HRESULT IWICDevelopRaw::GetRenderMode([Out] WICRawRenderMode* pRenderMode)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRaw.SetNotificationCallback(C1.Util.DX.WIC.DevelopRawNotificationCallback)">
            <summary>	
            HRESULT IWICDevelopRaw::SetNotificationCallback([In, Optional] IWICDevelopRawNotificationCallback* pCallback)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DevelopRawNotificationCallback">
            <summary>	
            IWICDevelopRawNotificationCallback	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRawNotificationCallback.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.DevelopRawNotificationCallback"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRawNotificationCallback.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.DevelopRawNotificationCallback">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.DevelopRawNotificationCallback"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.DevelopRawNotificationCallback.Notify(System.Int32)">
            <summary>	
            HRESULT IWICDevelopRawNotificationCallback::Notify([In] unsigned int NotificationMask)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.EnumMetadataItem">
            <summary>	
            IWICEnumMetadataItem	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.EnumMetadataItem.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.EnumMetadataItem"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.EnumMetadataItem.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.EnumMetadataItem">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.EnumMetadataItem"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.EnumMetadataItem.Skip(System.Int32)">
            <summary>	
            HRESULT IWICEnumMetadataItem::Skip([In] unsigned int celt)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.EnumMetadataItem.Reset">
            <summary>	
            HRESULT IWICEnumMetadataItem::Reset()	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.EnumMetadataItem.Clone">
            <summary>	
            HRESULT IWICEnumMetadataItem::Clone([Out] IWICEnumMetadataItem** ppIEnumMetadataItem)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PixelFormatInfo2">
            <summary>	
            IWICPixelFormatInfo2	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PixelFormatInfo2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo2.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.PixelFormatInfo2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.PixelFormatInfo2"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo2.IsSupportingTransparency">
            <summary>	
            HRESULT IWICPixelFormatInfo2::SupportsTransparency([Out] BOOL* pfSupportsTransparency)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PixelFormatInfo2.GetNumericRepresentation">
            <summary>	
            HRESULT IWICPixelFormatInfo2::GetNumericRepresentation([Out] WICPixelFormatNumericRepresentation* pNumericRepresentation)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PlanarBitmapFrameEncode">
            <summary>	
            IWICPlanarBitmapFrameEncode	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapFrameEncode.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PlanarBitmapFrameEncode"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapFrameEncode.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.PlanarBitmapFrameEncode">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.PlanarBitmapFrameEncode"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapFrameEncode.WritePixels(System.Int32,C1.Util.DX.WIC.BitmapPlane[],System.Int32)">
            <summary>	
            HRESULT IWICPlanarBitmapFrameEncode::WritePixels([In] unsigned int lineCount,[In, Buffer] WICBitmapPlane* pPlanes,[In] unsigned int cPlanes)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapFrameEncode.WriteSource(C1.Util.DX.WIC.BitmapSource[],System.Int32,System.Nullable{C1.Util.DX.RectL})">
            <summary>	
            HRESULT IWICPlanarBitmapFrameEncode::WriteSource([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In, Optional] WICRect* prcSource)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapFrameEncode.WriteSource(C1.Util.DX.ComArray{C1.Util.DX.WIC.BitmapSource},System.Int32,System.Nullable{C1.Util.DX.RectL})">
            <summary>	
            HRESULT IWICPlanarBitmapFrameEncode::WriteSource([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In, Optional] WICRect* prcSource)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PlanarBitmapSourceTransform">
            <summary>	
            IWICPlanarBitmapSourceTransform	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapSourceTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PlanarBitmapSourceTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapSourceTransform.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.PlanarBitmapSourceTransform">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.PlanarBitmapSourceTransform"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapSourceTransform.DoesSupportTransform(System.Int32@,System.Int32@,C1.Util.DX.WIC.BitmapTransformOptions,C1.Util.DX.WIC.PlanarOptions,System.Guid[],C1.Util.DX.WIC.BitmapPlaneDescription[],System.Int32)">
            <summary>	
            HRESULT IWICPlanarBitmapSourceTransform::DoesSupportTransform([InOut] unsigned int* puiWidth,[InOut] unsigned int* puiHeight,[In] WICBitmapTransformOptions dstTransform,[In] WICPlanarOptions dstPlanarOptions,[In, Buffer] const GUID* pguidDstFormats,[Out, Buffer] WICBitmapPlaneDescription* pPlaneDescriptions,[In] unsigned int cPlanes,[Out] BOOL* pfIsSupported)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarBitmapSourceTransform.CopyPixels(System.Nullable{C1.Util.DX.RectL},System.Int32,System.Int32,C1.Util.DX.WIC.BitmapTransformOptions,C1.Util.DX.WIC.PlanarOptions,C1.Util.DX.WIC.BitmapPlane[],System.Int32)">
            <summary>	
            HRESULT IWICPlanarBitmapSourceTransform::CopyPixels([In, Optional] const WICRect* prcSource,[In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] WICBitmapTransformOptions dstTransform,[In] WICPlanarOptions dstPlanarOptions,[In, Buffer] const WICBitmapPlane* pDstPlanes,[In] unsigned int cPlanes)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.PlanarFormatConverter">
            <summary>	
            IWICPlanarFormatConverter	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarFormatConverter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.PlanarFormatConverter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarFormatConverter.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.PlanarFormatConverter">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.PlanarFormatConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarFormatConverter.Initialize(C1.Util.DX.WIC.BitmapSource[],System.Int32,System.Guid,C1.Util.DX.WIC.BitmapDitherType,C1.Util.DX.WIC.Palette,System.Double,C1.Util.DX.WIC.BitmapPaletteType)">
            <summary>	
            HRESULT IWICPlanarFormatConverter::Initialize([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In] const GUID&amp; dstFormat,[In] WICBitmapDitherType dither,[In, Optional] IWICPalette* pIPalette,[In] double alphaThresholdPercent,[In] WICBitmapPaletteType paletteTranslate)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarFormatConverter.Initialize(C1.Util.DX.ComArray{C1.Util.DX.WIC.BitmapSource},System.Int32,System.Guid,C1.Util.DX.WIC.BitmapDitherType,C1.Util.DX.WIC.Palette,System.Double,C1.Util.DX.WIC.BitmapPaletteType)">
            <summary>	
            HRESULT IWICPlanarFormatConverter::Initialize([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In] const GUID&amp; dstFormat,[In] WICBitmapDitherType dither,[In, Optional] IWICPalette* pIPalette,[In] double alphaThresholdPercent,[In] WICBitmapPaletteType paletteTranslate)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.PlanarFormatConverter.CanConvert(System.Guid[],System.Int32,System.Guid)">
            <summary>	
            HRESULT IWICPlanarFormatConverter::CanConvert([In, Buffer] const GUID* pSrcPixelFormats,[In] unsigned int cSrcPlanes,[In] const GUID&amp; dstPixelFormat,[Out] BOOL* pfCanConvert)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ProgressCallback">
            <summary>	
            IWICProgressCallback	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressCallback.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ProgressCallback"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressCallback.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ProgressCallback">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ProgressCallback"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressCallback.Notify(System.Int32,C1.Util.DX.WIC.ProgressOperation,System.Double)">
            <summary>	
            HRESULT IWICProgressCallback::Notify([In] unsigned int uFrameNum,[In] WICProgressOperation operation,[In] double dblProgress)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ProgressiveLevelControl">
            <summary>	
            IWICProgressiveLevelControl	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressiveLevelControl.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ProgressiveLevelControl"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressiveLevelControl.op_Explicit(System.IntPtr)~C1.Util.DX.WIC.ProgressiveLevelControl">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:C1.Util.DX.WIC.ProgressiveLevelControl"/>.
            </summary>
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressiveLevelControl.GetLevelCount">
            <summary>	
            HRESULT IWICProgressiveLevelControl::GetLevelCount([Out] unsigned int* pcLevels)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressiveLevelControl.GetCurrentLevel">
            <summary>	
            HRESULT IWICProgressiveLevelControl::GetCurrentLevel([Out] unsigned int* pnLevel)	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ProgressiveLevelControl.SetCurrentLevel(System.Int32)">
            <summary>	
            HRESULT IWICProgressiveLevelControl::SetCurrentLevel([In] unsigned int nLevel)	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapPattern">
            <summary>	
            WICBitmapPattern	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPattern.Position">
            <summary>	
            ULARGE_INTEGER Position	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPattern.Length">
            <summary>	
            unsigned int Length	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPattern.Pattern">
            <summary>	
            unsigned char* Pattern	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPattern.Mask">
            <summary>	
            unsigned char* Mask	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPattern.EndOfStream">
            <summary>	
            BOOL EndOfStream	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapPlane">
            <summary>	
            WICBitmapPlane	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPlane.Format">
            <summary>	
            GUID Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPlane.PbBuffer">
            <summary>	
            unsigned char* pbBuffer	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPlane.CbStride">
            <summary>	
            unsigned int cbStride	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPlane.CbBufferSize">
            <summary>	
            unsigned int cbBufferSize	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.BitmapPlaneDescription">
            <summary>	
            WICBitmapPlaneDescription	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPlaneDescription.Format">
            <summary>	
            GUID Format	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPlaneDescription.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.BitmapPlaneDescription.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DdsFormatInfo">
            <summary>	
            WICDdsFormatInfo	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsFormatInfo.DxgiFormat">
            <summary>	
            DXGI_FORMAT DxgiFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsFormatInfo.BytesPerBlock">
            <summary>	
            unsigned int BytesPerBlock	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsFormatInfo.BlockWidth">
            <summary>	
            unsigned int BlockWidth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsFormatInfo.BlockHeight">
            <summary>	
            unsigned int BlockHeight	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.DdsParameters">
            <summary>	
            WICDdsParameters	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.Width">
            <summary>	
            unsigned int Width	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.Height">
            <summary>	
            unsigned int Height	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.Depth">
            <summary>	
            unsigned int Depth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.MipLevels">
            <summary>	
            unsigned int MipLevels	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.ArraySize">
            <summary>	
            unsigned int ArraySize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.DxgiFormat">
            <summary>	
            DXGI_FORMAT DxgiFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.Dimension">
            <summary>	
            WICDdsDimension Dimension	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.DdsParameters.AlphaMode">
            <summary>	
            WICDdsAlphaMode AlphaMode	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.ImageParameters">
            <summary>	
            WICImageParameters	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ImageParameters.PixelFormat">
            <summary>	
            D2D1_PIXEL_FORMAT PixelFormat	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ImageParameters.DpiX">
            <summary>	
            float DpiX	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ImageParameters.DpiY">
            <summary>	
            float DpiY	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ImageParameters.Top">
            <summary>	
            float Top	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ImageParameters.Left">
            <summary>	
            float Left	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ImageParameters.PixelWidth">
            <summary>	
            unsigned int PixelWidth	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.ImageParameters.PixelHeight">
            <summary>	
            unsigned int PixelHeight	
            </summary>	
        </member>
        <member name="M:C1.Util.DX.WIC.ImageParameters.#ctor(C1.Util.DX.Direct2D.PixelFormat,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Util.DX.WIC.ImageParameters"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
            <param name="top">The top.</param>
            <param name="left">The left.</param>
            <param name="pixelWidth">Width in pixel.</param>
            <param name="pixelHeight">Height in pixel.</param>
        </member>
        <member name="T:C1.Util.DX.WIC.RawCapabilitiesInfo">
            <summary>	
            WICRawCapabilitiesInfo	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.CbSize">
            <summary>	
            unsigned int cbSize	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.CodecMajorVersion">
            <summary>	
            unsigned int CodecMajorVersion	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.CodecMinorVersion">
            <summary>	
            unsigned int CodecMinorVersion	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.ExposureCompensationSupport">
            <summary>	
            WICRawCapabilities ExposureCompensationSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.ContrastSupport">
            <summary>	
            WICRawCapabilities ContrastSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.RGBWhitePointSupport">
            <summary>	
            WICRawCapabilities RGBWhitePointSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.NamedWhitePointSupport">
            <summary>	
            WICRawCapabilities NamedWhitePointSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.NamedWhitePointSupportMask">
            <summary>	
            unsigned int NamedWhitePointSupportMask	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.KelvinWhitePointSupport">
            <summary>	
            WICRawCapabilities KelvinWhitePointSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.GammaSupport">
            <summary>	
            WICRawCapabilities GammaSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.TintSupport">
            <summary>	
            WICRawCapabilities TintSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.SaturationSupport">
            <summary>	
            WICRawCapabilities SaturationSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.SharpnessSupport">
            <summary>	
            WICRawCapabilities SharpnessSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.NoiseReductionSupport">
            <summary>	
            WICRawCapabilities NoiseReductionSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.DestinationColorProfileSupport">
            <summary>	
            WICRawCapabilities DestinationColorProfileSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.ToneCurveSupport">
            <summary>	
            WICRawCapabilities ToneCurveSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.RotationSupport">
            <summary>	
            WICRawRotationCapabilities RotationSupport	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawCapabilitiesInfo.RenderModeSupport">
            <summary>	
            WICRawCapabilities RenderModeSupport	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.RawToneCurve">
            <summary>	
            WICRawToneCurve	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawToneCurve.CPoints">
            <summary>	
            unsigned int cPoints	
            </summary>	
        </member>
        <member name="P:C1.Util.DX.WIC.RawToneCurve.APoints">
            <summary>	
            WICRawToneCurvePoint aPoints[1]	
            </summary>	
        </member>
        <member name="T:C1.Util.DX.WIC.RawToneCurvePoint">
            <summary>	
            WICRawToneCurvePoint	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawToneCurvePoint.Input">
            <summary>	
            double Input	
            </summary>	
        </member>
        <member name="F:C1.Util.DX.WIC.RawToneCurvePoint.Output">
            <summary>	
            double Output	
            </summary>	
        </member>
    </members>
</doc>
