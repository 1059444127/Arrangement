<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1Document.4</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1Document.C1Document">
            <summary>
            Represents a ComponentOne Document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IRenderObjectOwner">
            <summary>
            This interface must be implemented by object which works as owner 
            for the RenderObject objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IDocumentObjectOwner">
            <summary>
            Should be implemented by object owning <see cref="T:C1.Win.C1Document.DocumentObject"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IStyleOwner">
            <summary>
            Defines a class that can expose a <b>Style</b> property (of the type <see cref="P:C1.Win.C1Document.IStyleOwner.Style"/>).
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IStyleOwner.GetAmbientParentStyle">
            <summary>
            Gets the parent style for ambient properties
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IStyleOwner.Style">
            <summary>
            Gets <see cref="P:C1.Win.C1Document.IStyleOwner.Style"/> owned by object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Document"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Document.FindRenderObject(System.String)">
            <summary>
            Finds a render object by name.
            </summary>
            <param name="name">The name to find.</param>
            <returns>The found object, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1Document.Clear">
            <summary>
            Clears the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.MeasurementUnits">
            <summary>
            Gets or sets the units of measurement used to define coordinates and sizes of objects in the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.Style">
            <summary>
            Gets the main (root) <see cref="P:C1.Win.C1Document.C1Document.Style"/> of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.Body">
            <summary>
            Gets the document body.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.DocumentInfo">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.C1Document.DocumentInfo"/> object containing information
            about the current document (such as author, company, and so on).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.CompatibilityOptions">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.C1Document.CompatibilityOptions"/> object which determines compatibility
            with the legacy C1PrintDocument component.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.Dictionary">
            <summary>
            Gets the current document's dictionary.
            The dictionary can be used to hold reusable resources
            (e.g. images used in multiple places in the document).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.Outlines">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNodeCollection"/> representing the collection of
            <see cref="T:C1.Win.C1Document.OutlineNode"/> objects in the current document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1HighlightAttrs">
            <summary>
            Defines attributes used to highlight content of document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FragmentHighlight">
            <summary>
            Defines highlighting in the block of text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1FragmentHighlight.#ctor(System.Object,C1.Win.C1Document.C1HighlightAttrs)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1FragmentHighlight"/> class.
            </summary>
            <param name="range">The object defining the content which should be highlighted.</param>
            <param name="attrs">The highlighting attributes.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1FragmentHighlight.Range">
            <summary>
            Gets the object defining the content which should be highlighted.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FragmentHighlight.Attrs">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1HighlightAttrs"/> structure defining highlighting attributes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentLocation">
            <summary>
            Represents a location within a document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1LinkTargetBase">
            <summary>
            Abstract base class for classes defining a link target.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1LinkTargetBase.DocumentLocation">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1DocumentLocation"/> object defining the location of document linked with this object.
            Can be null, in this case <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> points to the some position
            in the current document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1RenderObjectLinkTarget">
            <summary>
            Defines a link to a <see cref="P:C1.Win.C1Document.C1RenderObjectLinkTarget.RenderObject"/> in the current document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1RenderObjectLinkTarget.#ctor(C1.Win.C1Document.RenderObject)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1RenderObjectLinkTarget"/> class.
            </summary>
            <param name="renderObject">The <see cref="P:C1.Win.C1Document.C1RenderObjectLinkTarget.RenderObject"/> object which is target.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1RenderObjectLinkTarget.RenderObject">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.C1RenderObjectLinkTarget.RenderObject"/> object defined as target of this <see cref="T:C1.Win.C1Document.C1RenderObjectLinkTarget"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1LinkTarget">
            <summary>
            Defines a link to another document or a location within the same document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1LinkTarget.#ctor(C1.Win.C1Document.C1DocumentLocation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1LinkTarget"/> class.
            </summary>
            <param name="documentLocation">The <see cref="T:C1.Win.C1Document.C1DocumentLocation"/> object defining location of document.</param>
            <param name="bookmark">The string defining bookmark in the document.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1LinkTarget.Bookmark">
            <summary>
            Gets the bookmark within document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1LinkTargetFile">
            <summary>
            Describes a <see cref="T:C1.Win.C1Document.C1LinkTarget"/> pointing to an external document, file or URL.
            The hyperlink jump is performed using the <b>ShellExecute</b> OS shell API, so the result
            depends on the operating system and installed programs.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1LinkTargetFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1LinkTargetFile"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1LinkTargetFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1LinkTargetFile"/> class.
            </summary>
            <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
        </member>
        <member name="M:C1.Win.C1Document.C1LinkTargetFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1LinkTargetFile"/> class.
            </summary>
            <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
            <param name="command">The shell command to execute (see <see cref="P:C1.Win.C1Document.C1LinkTargetFile.Command"/> for details).</param>
        </member>
        <member name="M:C1.Win.C1Document.C1LinkTargetFile.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1LinkTargetFile"/> class.
            </summary>
            <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
            <param name="command">The shell command to execute (see <see cref="P:C1.Win.C1Document.C1LinkTargetFile.Command"/> for details).</param>
            <param name="parameters">The command parameters.</param>
            <param name="directory">The directory where the command is executed.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1LinkTargetFile.Open">
            <summary>
            Opens specified document using parameters defined by this <see cref="T:C1.Win.C1Document.C1LinkTargetFile"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1LinkTargetFile.FileName">
            <summary>
            Specifies the file or object on which to execute the specified verb.
            </summary>
            <remarks>
            To specify a Shell namespace object, pass the fully qualified parse name.
            Note that not all verbs are supported on all objects. 
            For example, not all document types support the "print" verb.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.C1LinkTargetFile.Command">
            <summary>
            Gets the command (verb) specifying the action to perform when the link is clicked.
            </summary>
            <remarks>
            <para>The set of available verbs depends on the particular file or folder. 
            Generally, the actions available from an object's shortcut menu are 
            available verbs.</para>
            <para>For more information about verbs and their availability, see Object Verbs. 
            See Extending Shortcut Menus for further discussion of shortcut menus.</para>
            <para>The following verbs are commonly used.</para>
            <list type="table">
            <item><term>edit</term>
            Launches an editor and opens the document for editing. If FileName is not a document file, the function will fail.
            </item>
            <item><term>explore</term>
            <description>Explores the folder specified by FileName.</description>
            </item>
            <item><term>find</term>
            <description>Initiates a search starting from the specified directory.</description>
            </item>
            <item><term>open</term>
            <description>Opens the file specified by the FileName parameter.
            The file can be an executable file, a document file, or a folder.</description>
            </item>
            <item><term>print</term>
            <description>Prints the document file specified by FileName.
            If FileName is not a document file, the function will fail.</description>
            </item>
            <item><term>Empty string</term>
            <description>For systems prior to Microsoft? Windows? 2000, the default verb is used 
            if it is valid and available in the registry. If not, the "open" verb is used.
            For Windows 2000 and later systems, the default verb is used if available. 
            If not, the "open" verb is used. If neither verb is available, 
            the system uses the first verb listed in the registry.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.C1LinkTargetFile.Parameters">
            <summary>
            If the <see cref="P:C1.Win.C1Document.C1LinkTargetFile.FileName"/> parameter specifies an executable file, this is a string 
            specifying the parameters to be passed to the application. 
            The format of this string is determined by the verb that is to be invoked. 
            If <see cref="P:C1.Win.C1Document.C1LinkTargetFile.FileName"/> specifies a document file, this should be an empty string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1LinkTargetFile.Directory">
            <summary>
            Gets the default directory.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1LinkTargetCustomAction">
            <summary>
            Describes a <see cref="T:C1.Win.C1Document.C1LinkTarget"/> associated with some custom action
            which can be performed with document via <see cref="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomAction(C1.Win.C1Document.CustomAction)"/> method.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1LinkTargetCustomAction.#ctor(C1.Win.C1Document.CustomAction)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1LinkTargetCustomAction"/> class.
            </summary>
            <param name="customAction"><see cref="P:C1.Win.C1Document.C1LinkTargetCustomAction.CustomAction"/> object associated with this link target.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1LinkTargetCustomAction.CustomAction">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.C1LinkTargetCustomAction.CustomAction"/> object associated with this link taget.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1HyperlinkStateEnum">
            <summary>
            Represents the state of a <see cref="T:C1.Win.C1Document.C1Hyperlink"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Normal">
            <summary>
            An unvisited hyperlink.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Visited">
            <summary>
            A hyperlink that has been visited.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Hover">
            <summary>
            A hyperlink under the mouse pointer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Active">
            <summary>
            A hyperlink that has been clicked, but not yet visited.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1Hyperlink">
            <summary>
            Represents a hyperlink in a document.
            A hyperlink may be assigned to a <see cref="T:C1.Win.C1Document.RenderObject"/>'s <see cref="P:C1.Win.C1Document.RenderObject.Hyperlink"/>,
            or a <see cref="T:C1.Win.C1Document.RenderParagraphObject"/>'s <see cref="P:C1.Win.C1Document.RenderParagraphObject.Hyperlink"/> property.
            In that case clicking on that object in a viewer will jump to the hyperlink's <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTargetBase)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> to set as the target of the current hyperlink.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTargetBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> to set as the target of the current hyperlink.</param>
            <param name="statusText">The string to assign to <see cref="P:C1.Win.C1Document.C1Hyperlink.StatusText"/> of the current hyperlink.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTargetBase,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> to set as the target of the current hyperlink.</param>
            <param name="statusText">The string to assign to <see cref="P:C1.Win.C1Document.C1Hyperlink.StatusText"/> of the current hyperlink.</param>
            <param name="tag">Arbitrary value to assign to <see cref="P:C1.Win.C1Document.C1Hyperlink.Tag"/> of the current hyperlink.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.AssignFrom(C1.Win.C1Document.C1Hyperlink)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.Clone">
            <summary>
            Creates a copy of the current object.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.StatusText">
            <summary>
            Text shown in the status line when the mouse is over the link
            (when the document is viewed in a <b>C1PrintPreview</b>).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.LinkTarget">
            <summary>
            Determines the target of the current hyperlink.
            </summary>
            <remarks>
            <para>The hyperlink target is described by an instance of a class derived from <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/>,
            and can be of one of the following types:</para>
            <list type="bullet">
            <item><term><see cref="T:C1.Win.C1Document.C1LinkTarget"/></term>
                <description>An anchor defined within the current or external document.</description></item>
            <item><term><see cref="T:C1.Win.C1Document.C1LinkTargetFile"/></term>
                <description>An external document, program or URL. The ShellExecute API is used to invoke the link.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.Tag">
            <summary>
            Gets or sets arbitrary data associated with the current hyperlink.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.State">
            <summary>
            Gets or sets the state of the current hyperlink.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DrawAttrs">
            <summary>
            Structure specifies attributes used to draw <see cref="T:C1.Win.C1Document.C1Page"/>, <see cref="T:C1.Win.C1Document.RenderFragment"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IC1HighlightingManager">
            <summary>
            This interface used by <see cref="T:C1.Win.C1Document.C1Page"/> and <see cref="T:C1.Win.C1Document.RenderFragment"/> objects
            to determine highlighted regions.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IC1HighlightingManager.GetFragmentHighlight(C1.Win.C1Document.RenderFragment)">
            <summary>
            Returns highlighting area for render fragment.
            </summary>
            <param name="fragment"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.EnumerateFragmentsCallback`1">
            <summary>
            Callback function called from <see cref="M:C1.Win.C1Document.C1Page.EnumerateFragments``1(C1.Win.Interop.Rect,C1.Win.C1Document.EnumerateFragmentsCallback{``0})"/>
            </summary>
            <typeparam name="TFragment">The type or interface which should be supported by the render fragment.</typeparam>
            <param name="fragment">The <see cref="T:C1.Win.C1Document.RenderTextFragment"/> object.</param>
            <param name="offsX">X offset of the fragment from the left edge of the page.</param>
            <param name="offsY">Y offset of the fragment from the top edge of the page.</param>
            <returns>Returns false if enumeration should be stopped, true otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Document.IPageObject">
            <summary>
            Defines common interface for all objects representing content of the page of the generated document.
            This interface implemented by the <see cref="T:C1.Win.C1Document.C1Page"/>, <see cref="T:C1.Win.C1Document.RenderFragment"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ICloneableObject">
            <summary>
            Represents cloneable object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ICloneableObject.CreateSame">
            <summary>
            Creates a clone.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.ICloneableObject.AssignFrom(System.Object)">
            <summary>
            Assigns all from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="T:C1.Win.C1Document.C1Page">
            <summary>
            Represents a single page of the C1Document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Page.EnumerateFragments``1(C1.Win.C1Document.RenderFragmentCollection,C1.Win.Interop.Rect,System.Double,System.Double,C1.Win.C1Document.EnumerateFragmentsCallback{``0})">
            <summary>
            Enumerates all text blocks in the <see cref="T:C1.Win.C1Document.RenderFragmentCollection"/> collection
            intersect with specified bounds.
            </summary>
            <param name="bounds"></param>
            <param name="offsX"></param>
            <param name="offsY"></param>
            <param name="callback"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1Page.EnumerateFragments``1(C1.Win.Interop.Rect,C1.Win.C1Document.EnumerateFragmentsCallback{``0})">
            <summary>
            Enumerates all render fragments intersecting with specified rectangle.
            Rectangle specified relative to the top-left corner of the page.
            </summary>
            <param name="bounds"></param>
            <param name="callback"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1Page.Draw(C1.Win.C1Document.Util.C1Graphics,C1.Win.Interop.Point,System.Nullable{C1.Win.Interop.Rect},C1.Win.C1Document.IC1HighlightingManager,C1.Win.C1Document.DrawAttrs)">
            <summary>
            Draws this <see cref="T:C1.Win.C1Document.C1Page"/> on specified graphics.
            </summary>
            <param name="graphics"><see cref="T:C1.Win.C1Document.Util.C1Graphics"/> to draw to.</param>
            <param name="pointPx">The point represents the location of the upper-left corner of the drawn page in pixels of <paramref name="graphics"/>.</param>
            <param name="visibilityRectPx">The rect defines the visibility area of the page, only fragments which intersects with this rect are drawn.</param>
            <param name="highlightingManager">Provides information about highlighted content.</param>
            <param name="drawAttrs">The <see cref="T:C1.Win.C1Document.DrawAttrs"/> structure defines addition drawing parameters.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Page.HitTest(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.Interop.Point)">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.HitTestInfo"/> object containing information about a specific
            point within a <see cref="T:C1.Win.C1Document.C1Page"/>. 
            </summary>
            <param name="tmc">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> interface which can be used in text processing.</param>
            <param name="point">Specifying test point coordinates relative to the page top-left corner, in <see cref="!:Document.MeasurementUnits"/>.</param>
            <returns>A <see cref="T:C1.Win.C1Document.HitTestInfo"/> object that contains information about elements located at the test point.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1Page.Document">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.C1Document"/> object the page of which represents this <see cref="T:C1.Win.C1Document.C1Page"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Page.PageIndex">
            <summary>
            Gets the logical index of the page in the generated document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Page.HasFragments">
            <summary>
            Gets a value indicating whether <see cref="P:C1.Win.C1Document.C1Page.Fragments"/> collection is not empty.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Page.Fragments">
            <summary>
            Gets collection of <see cref="T:C1.Win.C1Document.RenderFragment"/> object containing on this <see cref="T:C1.Win.C1Document.C1Page"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1PageSettings">
            <summary>
            Represents the page settings of a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1PageSettings"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.FindRealPaperSize(System.Drawing.Printing.PrinterSettings.PaperSizeCollection,System.Boolean@)">
            <summary>
            Looks for a matching paper size among papers supported by a specific printer.
            First, an attempt is made to find an exact paper kind match.
            If that fails, a size match is attempted, both "as is" and with the paper rotated.
            If that fails, null is returned.
            </summary>
            <param name="paperSizes">The collection of paper sizes supported by the printer.</param>
            <param name="landscape">IN/OUT: orientation; may be changed.</param>
            <returns>The matching real paper size, or null.
            This value should be used together with <paramref name="landscape"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.IsLayoutEqual(C1.Win.C1Document.C1PageSettings)">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.C1PageSettings"/> object has
            same layout as another <see cref="T:C1.Win.C1Document.C1PageSettings"/> object, i.e. it has
            same paper size and margins.
            </summary>
            <param name="pageSettings">C1PageSettings object to compare with.</param>
            <returns><b>true</b> if layouts are same, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.IsLayoutEqual(System.Drawing.Printing.PageSettings)">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.C1PageSettings"/> object has
            same layout as specified <see cref="T:System.Drawing.Printing.PageSettings"/> object, i.e. it has
            same paper size and margins.
            </summary>
            <param name="pageSettings">PageSettings object to compare with.</param>
            <returns><b>true</b> if layouts are same, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.AssignFrom(System.Drawing.Printing.PageSettings)">
            <summary>
            Assigns (copies) properties from a <see cref="T:System.Drawing.Printing.PageSettings"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.ToPageSettings(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings"/> class,
            and initializes it with the properties of the current <see cref="T:C1.Win.C1Document.C1PageSettings"/> object.
            </summary>
            <param name="printerSettings">A <see cref="T:System.Drawing.Printing.PrinterSettings"/> object
            used to create the resulting <see cref="T:System.Drawing.Printing.PageSettings"/>.
            If null, the default printer is used.</param>
            <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings"/> object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.Landscape">
            <summary>
            Gets or sets a value indicating whether to use landscape orientation.
            Changing this property swaps height and width of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.PaperSize">
            <summary>
            Gets or sets the paper kind.
            Changing of this property may change <see cref="P:C1.Win.C1Document.C1PageSettings.Width"/> and/or <see cref="P:C1.Win.C1Document.C1PageSettings.Height"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.Width">
            <summary>
            Gets or sets the width of the paper.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.Height">
            <summary>
            Gets or sets the height of the paper.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1PageSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BordersModeEnum">
            <summary>
            Specifies the various modes of accounting for border thickness when
            laying out the objects in a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersModeEnum.Default">
            <summary>
            Whole border is considered to be part of the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersModeEnum.C1Report">
            <summary>
            The inner 1/2 of border thickness is considered to be part of the object,
            the outer 1/2 of border is considered to be outside of the object's space.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersModeEnum.Rdl">
            <summary>
            Border thickness is not taken into account at all when calculating objects'
            sizes and layout. Borders are drawn centered on objects' bounds.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.CompatibilityOptions">
            <summary>
            Defines the compatibility options for C1PrintDocument.
            Contains properties specifying compatibility with
            previous versions of C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.CompatibilityOptions.AssignFrom(C1.Win.C1Document.CompatibilityOptions)">
            <summary>
            Copies properties from another object into this object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="M:C1.Win.C1Document.CompatibilityOptions.Reset">
            <summary>
            Resets properties of this object to default values.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.BordersMode">
            <summary>
            Gets or sets a valud specifying how borders affect the layout of objects in a document.
            <para>See <see cref="T:C1.Win.C1Document.BordersModeEnum"/> for details.</para>
            <para>
            The default value is <see cref="F:C1.Win.C1Document.BordersModeEnum.Default"/>.
            </para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.KeepImages">
            <summary>
            Specifies whether images in a document dictionary are kept as <b>Image</b> objects.
            Set this property to <b>false</b> to save images as raw data to optimize memory usage.
            </summary>
            <para>
            The default value is <b>true</b>.
            </para>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.StretchBarCodesAsImages">
            <summary>
            Gets or sets a value indicating whether to stretch barcodes as images.
            <para>The default value is false, which is compatible with previous versions.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.UseGdiLinesInPdfExport">
            <summary>
            Gets or sets a value indicating whether GDI functions should be used to draw lines when rendering for output to PDF.
            The default value is false. Setting this property to true may result in much smaller file sizes in documents
            containing many dashed/dotted lines.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.ClipPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.UseGdiCompatibleTextLayout">
            <summary>
            Indicates whether to use direct write gdi compatible text layout  to render the text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryItem">
            <summary>
            The base class for types of objects that can be inserted in a <see cref="T:C1.Win.C1Document.C1Document"/>'s <see cref="T:C1.Win.C1Document.Dictionary"/>.
            Derived classes include <see cref="T:C1.Win.C1Document.DictionaryImage"/>.
            </summary>
            <seealso cref="P:C1.Win.C1Document.C1Document.Dictionary"/>
        </member>
        <member name="T:C1.Win.C1Document.NamedObject">
            <summary>
            Represents a named object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OwnedObject">
            <summary>
            Abstract base class representing an object with an owner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IOwnedObject">
            <summary>
            Represents interface which should be implemented by object owned by another object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IOwnedObject.Owner">
            <summary>
            Gets or sets the owner object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OwnedObject.SetOwner(System.Object)">
            <summary>
            Sets the owner of the current object.
            </summary>
            <param name="value">The owner to set.</param>
        </member>
        <member name="M:C1.Win.C1Document.OwnedObject.CreateSame">
            <summary>
            Creates a new instance of the same class as this one.
            </summary>
            <returns>The newly created clone.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OwnedObject.AssignFrom(System.Object)">
            <summary>
            Assigns all from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="P:C1.Win.C1Document.OwnedObject.Owner">
            <summary>
            Gets an owner of this object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.INamedObject">
            <summary>
            Represents an object with a unique name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.INamedObject.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.NamedObject.SetName(System.String)">
            <summary>
            Sets the name of the current object.
            </summary>
            <param name="value">The new name for the object.</param>
        </member>
        <member name="M:C1.Win.C1Document.NamedObject.Clone">
            <summary>
            Clones the current object.
            </summary>
            <returns>The newly created clone.</returns>
        </member>
        <member name="P:C1.Win.C1Document.NamedObject.Name">
            <summary>
            Gets or sets the unique name of the current object.
            If an item with the specified name already exists in the owner,
            an exception is thrown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryItem"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:C1.Win.C1Document.DictionaryItem"/>.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItem.SetName(System.String)">
            <summary>
            Overridden. Sets the name of the current item.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItem.Owner">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Dictionary"/> object that is the owner of the current item.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Dictionary">
            <summary>
            Represents a dictionary within a <see cref="T:C1.Win.C1Document.C1Document"/>.
            The dictionary allows to store an object such as an image or an icon once,
            and reuse it throughout the document.
            Items contained in the dictionary must have types derived from <see cref="T:C1.Win.C1Document.DictionaryItem"/>
            (e.g. <see cref="T:C1.Win.C1Document.DictionaryImage"/>).
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NamedCollection`1">
            <summary>
            Represents an <see cref="T:C1.Win.C1Document.OwnedCollection`1"/> of uniquely-named elements.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OwnedCollection`1">
            <summary>
            Base class for collection containing items supporting IOwnedObject interface.
            Collection updates Owner property of items.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:C1.Win.C1Document.OwnedCollectionBase`1">
            <summary>
            Base collection implementing IOwnedObject interface.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:C1.Win.C1Document.OwnedCollectionBase`1.SetOwner(System.Object)">
            <summary>
            Sets the owner of the current object.
            </summary>
            <param name="value">The owner to set.</param>
        </member>
        <member name="P:C1.Win.C1Document.OwnedCollectionBase`1.Owner">
            <summary>
            Gets a collection owner.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OwnedCollection`1.CreateSame">
            <summary>
            Creates a clone of the current object.
            </summary>
            <returns>The newly created clone.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OwnedCollection`1.AssignFrom(C1.Win.C1Document.OwnedCollection{`0})">
            <summary>
            Copies all from another object.
            </summary>
            <param name="source">The source to copy from.</param>
        </member>
        <member name="T:C1.Win.C1Document.INamedObjectOwner">
            <summary>
            This interface should be implemented by object if it wants to receive notifications 
            about name changing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.INamedObjectOwner.CheckName(C1.Win.C1Document.INamedObject,System.String,System.String)">
            <summary>
            Checks new name for specified object.
            </summary>
            <param name="obj"></param>
            <param name="newName"></param>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.CheckName(C1.Win.C1Document.INamedObject,System.String,System.String)">
            <summary>
            Throws an exception if collection already contains item with specified name.
            </summary>
            <param name="item"></param>
            <param name="newName"></param>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.IndexOfName(System.String)">
            <summary>
            Returns the 0-based index of a INamedObject
            with specified name in the current <see cref="T:C1.Win.C1Document.NamedCollection`1"/>.
            </summary>
            <param name="name">The name of the item to locate. </param>
            <returns>The 0-based index of the specified item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.FindByName(System.String)">
            <summary>
            Returns item with specified name.
            </summary>
            <param name="name">The name of the item to locate.</param>
            <returns>The specified item</returns>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.AssignFrom(C1.Win.C1Document.OwnedCollection{`0})">
            <summary>
            Copies all from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="P:C1.Win.C1Document.NamedCollection`1.Item(System.String)">
            <summary>
            Gets the item with the specified name.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Dictionary.GetUniqueName(System.String)">
            <summary>
            Gets the unique name for the dictionary item.
            Returns <paramref name="prefix"/> if item with this name does not exist and
            returns name like "prefix_XXX".
            </summary>
            <param name="prefix">The prefix for the dictionary item.</param>
            <returns>The unique name.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Dictionary.Document">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Document"/> object that is the owner of the current dictionary.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryImage">
            <summary>
            Represents an image stored in a <see cref="T:C1.Win.C1Document.Dictionary"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.#ctor(System.String,C1.Win.C1Document.C1Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
            <param name="image">The image to store in the current item.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.CreateSame">
            <summary>
            Creates new empty instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.AssignFrom(System.Object)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.DictionaryImage"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryImage.Image">
            <summary>
            Gets or sets the image stored by the current <see cref="T:C1.Win.C1Document.DictionaryImage"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IDictionaryItemLinkOwner">
            <summary>
            <para>For internal use only.</para>
            This interface should be implemented by a class if it needs to hold a link (reference)
            to an object in a <see cref="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary"/> where the <see cref="T:C1.Win.C1Document.DictionaryItem"/> is stored.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryItemLink`1">
            <summary>
            The base class describing a link (reference) to a <see cref="T:C1.Win.C1Document.DictionaryItem"/>.
            Provides the base functionality, derived classes such as <see cref="T:C1.Win.C1Document.DictionaryImageLink"/>
            represent links to specific type of dictionary items.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItemLink`1.#ctor(C1.Win.C1Document.IDictionaryItemLinkOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> class.
            </summary>
            <param name="owner">The owner of this instance.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItemLink`1.GetItemData">
            <summary>
            Gets the data representing the item.
            </summary>
            <returns>The data representing the item.</returns>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItemLink`1.AssignFrom(C1.Win.C1Document.DictionaryItemLink{`0})">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> to the current object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.DataInt">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Owner">
            <summary>
            Gets the owner of the current dictionary item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Document">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.C1Document"/> object containing the curret dictionary item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Data">
            <summary>
            Gets or sets data representing the object stored in the dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.ItemName">
            <summary>
            Gets or sets the name of the item in the dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.HasData">
            <summary>
            Gets a value indicating whether <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> contains data.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryImageLink">
            <summary>
            Specializes the <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> class to represent a link to an image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImageLink.#ctor(C1.Win.C1Document.IDictionaryItemLinkOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImageLink"/> class.
            </summary>
            <param name="owner">The owner of this instance.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImageLink.GetItemData">
            <summary>
            Gets the data representing the item.
            </summary>
            <returns>The data representing the item.</returns>
        </member>
        <member name="T:C1.Win.C1Document.DocumentBody">
            <summary>
            Represents content of <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderObject">
            <summary>
            The abstract base class for all render objects representing content of a <see cref="!:C1PrintDocument"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentObject">
            <summary>
            Base class representing content in <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DocumentObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.RenderObject"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObject.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.DocumentObject"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObject.Owner">
            <summary>
            The owner object containing this <see cref="T:C1.Win.C1Document.DocumentObject"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObject.Style">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.DocumentObject.Style"/> of the current object.
            This property cannot be assigned to. To use another style as the base
            for the current object's style, set the Style.Parent to that other style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.RenderObject.FindChildObject(System.String)">
            <summary>
            Searches <see cref="T:C1.Win.C1Document.RenderObject"/> with specified name.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>Found <see cref="T:C1.Win.C1Document.RenderObject"/> or null if not found.</returns>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.HasChildObjects">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.RenderObject"/> contains child objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.ChildObjects">
            <summary>
            Gets a collection of the child <see cref="T:C1.Win.C1Document.RenderObject"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Document">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Document"/> object containing this render object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Owner">
            <summary>
            The owner object containing this <see cref="T:C1.Win.C1Document.RenderObject"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Position">
            <summary>
            Gets or sets the position of this <see cref="T:C1.Win.C1Document.RenderObject"/> in the parent.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.BordersSplitVertMode">
            <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too high and is split between pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.BordersSplitHorzMode">
            <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too wide and is split between horizontal pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Tag">
            <summary>
            Gets or sets custom user defined data associated with this <see cref="T:C1.Win.C1Document.RenderObject"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.ToolTip">
            <summary>
            Gets or sets tooltip associated with this <see cref="T:C1.Win.C1Document.RenderObject"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Hyperlink">
            <summary>
            Gets or sets the hyperlink (see <see cref="T:C1.Win.C1Document.C1Hyperlink"/>) associated with the current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Bookmark">
            <summary>
            Gets or sets the bookmark associated with the current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.ZOrder">
            <summary>
            Gets or sets the Z-order of the current object.
            Objects with smaller Z-order values are drawn under objects with larger Z-order values.
            By default, this property is zero.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Parent">
            <summary>
            Gets the parent <see cref="T:C1.Win.C1Document.RenderObject"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentBody.Owner">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.DocumentBody"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentBody.Sections">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.RenderSectionCollection"/> which represents content of document body.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentInfoFields">
            <summary>
            Enumerates the fields stored by the <see cref="T:C1.Win.C1Document.DocumentInfo"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.None">
            <summary>
            No fields.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Title">
            <summary>
            The title of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Author">
            <summary>
            The author of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Operator">
            <summary>
            The person who last made changes to the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Manager">
            <summary>
            The manager of the author.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Company">
            <summary>
            The company of the author.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Subject">
            <summary>
            The subject of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Comment">
            <summary>
            The document comments.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.CreationTime">
            <summary>
            The date and time when the document was created.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.RevisionTime">
            <summary>
            The date and time when the document was last modified.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Creator">
            <summary>
            The application that created the original document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Keywords">
            <summary>
            The keywords for the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Producer">
            <summary>
            The application that created the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.All">
            <summary>
            All fields.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentInfo">
            <summary>
            Represents general information about a <see cref="T:C1.Win.C1Document.C1Document"/>,
            such as author, subject, creation date and time, and so on.
            Can be accessed via the <see cref="P:C1.Win.C1Document.C1Document.DocumentInfo"/> property on a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DocumentInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.AssignFrom(C1.Win.C1Document.DocumentInfo)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.DocumentInfo"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.Win.C1Document.DocumentInfo"/> object.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.DocumentInfo"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.GetKeywordsAsText">
            <summary>
            Returns the <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords"/> collection of the current object
            as a single space-delimited string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.SetKeywordsAsText(System.String)">
            <summary>
            Assigns the <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords"/> collection on the current object
            from a single string containing the space-delimited list of keywords.
            (Note that the <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords"/> collection is cleared by this method prior to assignment.)
            </summary>
            <param name="value">The space-delimited list of keywords.</param>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Title">
            <summary>
            Gets or sets the title of a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Author">
            <summary>
            Gets or sets the author of a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Operator">
            <summary>
            Gets or sets the person who last made changes to a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.CreationTime">
            <summary>
            Gets or sets the date and time when a document was created.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.RevisionTime">
            <summary>
            Gets or sets the date and time when a document was last modified.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Subject">
            <summary>
            Gets or sets the subject of a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Producer">
            <summary>
            Gets or sets the application that created a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Creator">
            <summary>
            Gets or sets the application that created the original document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Company">
            <summary>
            Gets or sets the company of a document's author.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Keywords">
            <summary>
            Gets or sets the keywords for a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Manager">
            <summary>
            Gets or sets the manager of the author.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.UserData">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/> of custom user defined string keys and strings associated with a document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentObjectCollection`1">
            <summary>
            Represents the collection of DocumentObject objects.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObjectCollection`1.Owner">
            <summary>
            The owner object containing the current collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentRange">
            <summary>
            Base class defines the range of document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentRange.GetFragmentRange(C1.Win.C1Document.RenderFragment)">
            <summary>
            Returns the object defining the part of <paramref name="fragment"/> belongs to this <see cref="T:C1.Win.C1Document.C1DocumentRange"/>.
            The type of object depends on type of <paramref name="fragment"/>, for example,
            <see cref="T:C1.Win.C1Document.RenderTextFragment"/> descendats return <see cref="T:C1.Win.C1Document.C1TextBlockRange"/> object.
            </summary>
            <param name="fragment"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentRange.GetText">
            <summary>
            Returns the string containing the document's text defining by this <see cref="T:C1.Win.C1Document.C1DocumentRange"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentRange.GetPositions(C1.Win.C1Document.C1DocumentTextPosition@,C1.Win.C1Document.C1DocumentTextPosition@)">
            <summary>
            Returns two <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> objects defining
            the start and end of the range.
            </summary>
            <param name="start">The <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> defining start of the range.</param>
            <param name="end">The <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> defining end of the range.</param>
        </member>
        <member name="T:C1.Win.C1Document.C1FreeLayoutDocumentRange">
            <summary>
            Represents the document range used to select a text in the unstructured document.
            Selection defined by the two <see cref="T:C1.Win.C1Document.C1TextFragmentTextPosition"/> objects,
            one represents start of range and second represents end of range,
            those positions belong to different <see cref="T:C1.Win.C1Document.RenderTextFragment"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.IC1TextSelectionBuilder.AddTextBlock(System.String,C1.Win.Interop.Rect)">
            <summary>
            Should be called by the <see cref="T:C1.Win.C1Document.IC1TextFragment"/> for each separate text block
            which should be selected.
            </summary>
            <param name="text">The text of text block.</param>
            <param name="boundsInFragmentContentAreaPx">The bounds of the text in pixels of <see cref="P:C1.Win.C1Document.Util.IC1TextSelectionBuilder.TextMeasurementContext"/> relative to the top-left corner of the fragment's content area.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.IC1TextSelectionBuilder.AddHighlight(System.Object)">
            <summary>
            Should be called once, <paramref name="highlightInfo"/> object will be passed back to the 
            fragment in Draw() method to highlight selection.
            </summary>
            <param name="highlightInfo">The object which indetifiing highlighted area.</param>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.Fragment">
            <summary>
            Currently processed text fragment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.FragmentSizePx">
            <summary>
            Size of currently processed fragment content area in pixels of <see cref="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.TextMeasurementContext"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.FragmentOffs">
            <summary>
            Offset of content area of the currently processed fragment from top-left corner of the page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.RectSelectionContext.PageSelectionArea">
            <summary>
            Selection rectangle relative to top-left page corner.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.RectSelectionContext.FragmentSelectionAreaPx">
            <summary>
            Selection area relative to top-left corner of paragraph content area in pixels of <see cref="!:TextMeasurementContext"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.ComplexSelectionContext.PageSelectionArea">
            <summary>
            Selection area relative to top-left page corner.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.ComplexSelectionContext.ParagraphSelectionAreaPx">
            <summary>
            Selection area relative to top-left corner of paragraph content area in pixels of <see cref="!:TextMeasurementContext"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1FreeLayoutDocumentRange.ComplexSelectionContext.SelectionArea.GetPointPositionCode(C1.Win.Interop.Point)">
            <summary>
            0 - above area.
            1 - inside area.
            2 - below area.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.C1CaretCoords">
            <summary>
            Defines position of caret within a text.
            Position defined via 2 points: <see cref="F:C1.Win.C1Document.C1CaretCoords.Min"/> - position on the top of the text line,
            <see cref="F:C1.Win.C1Document.C1CaretCoords.Max"/> - position on the bottom of the text line.
            For normal horizontal english text Min.X == Max.X and Max.Y == Min.Y + HeightOfTheTextLine.
            For text rotated on 90 degrees Max.X == Min.X + HeightOfTheTextLine, Min.Y == Max.Y.
            If text is rotated on some NOT right angle then Min.X != Max.X and Min.Y != Max.Y.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1CaretCoords.Min">
            <summary>
            The position on the top of the line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1CaretCoords.Max">
            <summary>
            The position on the bottom of the line.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1CaretCoords.#ctor(C1.Win.Interop.Point,C1.Win.Interop.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1CaretCoords"/> structure.
            </summary>
            <param name="min">The value of the <see cref="F:C1.Win.C1Document.C1CaretCoords.Min"/> property.</param>
            <param name="max">The value of the <see cref="F:C1.Win.C1Document.C1CaretCoords.Max"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1CaretCoords.GetBounds(C1.Win.C1Document.C1CaretCoords,C1.Win.C1Document.C1CaretCoords)">
            <summary>
            Returns rectagle containing both <see cref="T:C1.Win.C1Document.C1CaretCoords"/>.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.C1TextBlockCoords">
            <summary>
            Defines coordinates of the text block.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextBlockCoords.TL">
            <summary>
            The coordinates of the top-left corner.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextBlockCoords.TR">
            <summary>
            The coordinates of the top-right corner.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextBlockCoords.BR">
            <summary>
            The coordinates of the bottom-right corner.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextBlockCoords.BL">
            <summary>
            The coordinates of the bottom-left corner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentTextPosition">
            <summary>
            Base class describes the text position within <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentTextPosition.op_Equality(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentTextPosition.op_Inequality(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentTextPosition.PageCoords">
            <summary>
            Gets the coordinates of this <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> on the <see cref="T:C1.Win.C1Document.C1Page"/>
            relative to the top-left corner of the page.
            </summary>
            <returns><see cref="T:C1.Win.C1Document.C1CaretCoords"/> structure containing coordinates of the text position.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentTextPosition.RenderFragment">
            <summary>
            Gets the <see cref="T:RenderFragment"/> to which belongs this <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1TextBlockRange">
            <summary>
            Defines the range of text  within text block, represented as list of <see cref="T:C1.Win.C1Document.C1TextRange"/> structures.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1TextBlockRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1TextBlockRange"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1TextBlockRange.#ctor(System.Collections.Generic.IList{C1.Win.C1Document.C1TextRange})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1TextBlockRange"/> class.
            <see cref="T:C1.Win.C1Document.C1TextBlockRange"/> will use passed list of text ranges, i.e. it will not create own copy.
            </summary>
            <param name="textRanges">List of <see cref="T:C1.Win.C1Document.C1TextRange"/> structures.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1TextBlockRange.#ctor(C1.Win.C1Document.C1TextRange[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1TextBlockRange"/> class.
            <see cref="T:C1.Win.C1Document.C1TextBlockRange"/> will use passed list of text ranges, i.e. it will not create own copy.
            </summary>
            <param name="textRanges">List of <see cref="T:C1.Win.C1Document.C1TextRange"/> structures.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1TextBlockRange.Count">
            <summary>
            Gets the count of text ranges.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextBlockRange.Item(System.Int32)">
            <summary>
            Gets the text range with specified index.
            </summary>
            <param name="index">Index of the text range.</param>
            <returns><see cref="T:C1.Win.C1Document.C1TextRange"/> structure defining text range.</returns>
        </member>
        <member name="T:C1.Win.C1Document.C1TextRange">
            <summary>
            Represents a continuous range of text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextRange.Full">
            <summary>
            Represents the full (all-inclusive) range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1TextRange"/> struct.
            </summary>
            <param name="startIndex">Index of the first char in text interval.</param>
            <param name="length">Length of the text interval.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1TextRange.Contains(System.Int32)">
            <summary>
            Tests whether a specified position is contained within the current range.
            </summary>
            <param name="position">The position to test.</param>
            <returns>True if the current range includes the specified position, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1TextRange.StartPosition">
            <summary>
            Gets or sets the 0-based start position in the text range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextRange.Length">
            <summary>
            Gets or sets the length of the text range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextRange.EndPosition">
            <summary>
            Gets or sets the end position (inclusive) of the text range.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PagesLoadedEventArgs">
            <summary>
            Contains event data for events fired when some pages have been loaded and their content became available.
            Represents a contiguous range of pages defined by the first page's index, and the number of pages in the range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PagesLoadedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PagesLoadedEventArgs class
            with a specified page index, and one page.
            </summary>
            <param name="startIndex">0-based start page index.</param>
        </member>
        <member name="M:C1.Win.C1Document.PagesLoadedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PagesLoadedEventArgs class
            with a specified page index and page count.
            </summary>
            <param name="startIndex">0-based start page index.</param>
            <param name="count">The number of loaded pages.</param>
        </member>
        <member name="P:C1.Win.C1Document.PagesLoadedEventArgs.StartIndex">
            <summary>
            Gets the 0-based index of the first page in the range represented by the current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PagesLoadedEventArgs.Count">
            <summary>
            Gets the number of pages in the range represented by the current object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PagesLoadedEventHandler">
            <summary>
            Defines a handler for the event fired when some pages have been loaded and their content is available.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">Data describing the event.</param>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSourceException">
            <summary>
            Represents an exception that occurred in a <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1DocumentSourceException"/> class 
            with a specified error message.
            </summary>
            <param name="message">The exception error message.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSourceException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1DocumentSourceException"/> class 
            with a formatted error message.
            </summary>
            <param name="format">The exception message formatting string.</param>
            <param name="args">The list of parameters supplied to the formatting string.</param>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSourceFeatures">
            <summary>
            Represents a set of features which are supported by a specific instance of the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> class.
            A client using that instance can analyse the properties exposed by this type, and enable or disable the UI elements accordingly.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsPaginated">
            <summary>
            Indicates whether the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> supports paginated mode of document generation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsNonPaginated">
            <summary>
            Indicates whether the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> supports non paginated mode of document generation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsTextSearchInPaginatedMode">
            <summary>
            Indicates whether the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> supports text searching in paginated mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsTextSelectionInPaginatedMode">
            <summary>
            Indicates whether the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> supports text selection in paginated mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsPageSettings">
            <summary>
            Indicates whether the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> supports custom page settings.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParameterValidationError">
            <summary>
            Represents an error which occured while validating parameters of a <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ParameterValidationError.#ctor(C1.Win.C1Document.Parameter,System.Object,System.String)">
            <summary>
            Initializes a new instance of the ParameterValidationError class.
            </summary>
            <param name="parameter">The parameter associated with the error.</param>
            <param name="value">The erroneous value.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:C1.Win.C1Document.ParameterValidationError.Parameter">
            <summary>
            Gets the parameter associated with the error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParameterValidationError.Value">
            <summary>
            Gets the erroneous value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParameterValidationError.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1BookmarkPosition">
            <summary>
            Represents a position of a bookmark within a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1BookmarkPosition.#ctor(System.Int32,C1.Win.Interop.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> class.
            </summary>
            <param name="pageIndex">The 0-based page index.</param>
            <param name="pageBounds">The bookmark's bounds on page.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1BookmarkPosition.PageIndex">
            <summary>
            Gets the 0-based page index.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1BookmarkPosition.PageBounds">
            <summary>
            Gets the bookmark's bounds on page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SecurityException">
            <summary>
            Represents an exception caused by invalid credentials used in <see cref="T:C1.Win.C1Document.C1DocumentSource"/> operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SecurityException"/> class.
            </summary>
            <param name="path">The connection path that caused the exception.</param>
            <param name="ex">The inner exception which is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if there is no associated inner exception.</param>
        </member>
        <member name="P:C1.Win.C1Document.SecurityException.Path">
            <summary>
            Gets the connection path that caused the current exception.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SecurityErrorEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.SecurityError"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SecurityErrorEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SecurityErrorEventArgs"/> class.
            </summary>
            <param name="path">The connection path accessing which caused the security error.</param>
            <param name="failedAttemptCount">The number of failed open attempts.</param>
        </member>
        <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.Path">
            <summary>
            Get the connection path accessing which caused the security error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.FailedAttemptCount">
            <summary>
            Gets the number of failed open attempts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.Retry">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> should retry 
            the operation which caused the security error.
            The default value is <b>false</b>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SecurityErrorEventHandler">
            <summary>
            Represents a method that will handle a <see cref="E:C1.Win.C1Document.C1DocumentSource.SecurityError"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Document.SecurityErrorEventArgs"/> object that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Document.CustomAction">
            <summary>
            Abstract base class for types representing actions 
            that can be performed on a document managed by a <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.CustomAction.WriteToString">
            <summary>
            For internal use.
            Converts this <see cref="T:C1.Win.C1Document.CustomAction"/> to string.
            </summary>
            <returns>The string representing this <see cref="T:C1.Win.C1Document.CustomAction"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.CustomAction.ReadFromString(System.String)">
            <summary>
            For internal use.
            Reads content from specified string.
            </summary>
            <param name="s">The string containing object's content.</param>
        </member>
        <member name="M:C1.Win.C1Document.CustomAction.Parse(System.String)">
            <summary>
            Converts string to <see cref="T:C1.Win.C1Document.CustomAction"/> object, returns null if 
            string does not represent <see cref="T:C1.Win.C1Document.CustomAction"/> object.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:C1.Win.C1Document.CustomAction"/> object or null if string does not represent <see cref="T:C1.Win.C1Document.CustomAction"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.CustomAction.RegisterType(System.String,System.Type)">
            <summary>
            For internal use.
            Registers type derived from <see cref="T:C1.Win.C1Document.CustomAction"/>.
            </summary>
            <param name="alias">The alias.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs.#ctor(C1.Win.C1Document.CustomAction,C1.Win.C1Document.C1BookmarkPosition,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs"/> class.
            </summary>
            <param name="customAction">A <see cref="T:C1.Win.C1Document.CustomAction"/> object defining custom action executed in async operation.</param>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object defining position in the generated document which should be showed.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs.Position">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> defining the position in the generated document which should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs.CustomAction">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.CustomAction"/> object defining custom action executed in the async operation.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ValidateParametersCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.ValidateParametersCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ValidateParametersCompletedEventArgs.#ctor(System.Collections.Generic.List{C1.Win.C1Document.ParameterValidationError},System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ValidateParametersCompletedEventArgs"/> class.
            </summary>
            <param name="errors">A list of <see cref="T:C1.Win.C1Document.ParameterValidationError"/> objects describing the errors which occur during checking of parameter values.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.ValidateParametersCompletedEventArgs.Errors">
            <summary>
            Gets the list of <see cref="T:C1.Win.C1Document.ParameterValidationError"/> objects describing the errors which occur during checking of parameter values.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.GetPageCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.GetPageCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GetPageCompletedEventArgs.#ctor(System.Int32,C1.Win.C1Document.C1Page,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.GetPageCompletedEventArgs"/> class.
            </summary>
            <param name="pageIndex">An index of the page requested in async operation.</param>
            <param name="page">A <see cref="T:C1.Win.C1Document.C1Page"/> object representing result of operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.GetPageCompletedEventArgs.PageIndex">
            <summary>
            Gets the index of the page requested in the async operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.GetPageCompletedEventArgs.Page">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Page"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.GetLinkTargetPositionCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs.#ctor(C1.Win.C1Document.C1LinkTargetBase,C1.Win.C1Document.C1BookmarkPosition,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs"/> class.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> object defines position in the document.</param>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object representing the result of the operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs.LinkTarget">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> object defining position in the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs.Position">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ExportCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.ExportCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ExportCompletedEventArgs.#ctor(C1.Win.C1Document.Export.ExportFilter,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ExportCompletedEventArgs"/> class.
            </summary>
            <param name="exporter">An <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> object defining export parameters.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.ExportCompletedEventArgs.Exporter">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> objectdefining export parameters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSourceContext">
            <summary>
            For internal use.
            Abstract class representing the full context in which a <see cref="T:C1.Win.C1Document.C1DocumentSource"/> operates.
            Instances of this class can be used to save and restore the current state of a
            C1DocumentSource, for example it can be used to implement forward and backward navigation.
            For details see <see cref="M:C1.Win.C1Document.C1DocumentSource.GetContext"/> and <see cref="M:C1.Win.C1Document.C1DocumentSource.SetContext(C1.Win.C1Document.C1DocumentSourceContext)"/> methods.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSourceBusyState">
            <summary>
            Describes the busy state of a <see cref="T:C1.Win.C1Document.C1DocumentSource"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Ready">
            <summary>
            The document is ready (not busy).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Generating">
            <summary>
            The document is currently generating.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Exporting">
            <summary>
            The document is currently exporting.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Printing">
            <summary>
            The document is currently printing.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource">
            <summary>
            Abstract base class for types that can create and manage a <see cref="T:C1.Win.C1Document.C1Document"/> object
            from some source.
            <para>Derived classes provide implementation for specific sources such as SSRS reports etc.</para>
            <para>The common base (C1DocumentSource) allows to work with various document and reports types
            (e.g. previewing or printing them) in a uniform manner.</para>
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IExecutionContext">
            <summary>
            Represents the context used in asynchronous operations.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IExecutionContext.OnLongOperation(System.Double,System.Boolean)">
            <summary>
            Asynchronous method should call this method to notify about execution progress.
            </summary>
            <param name="complete">Progress 0..1</param>
            <param name="canCancel"><b>true</b> indicates that operation can be cancelled at this moment.</param>
            <returns>If this method returns <b>true</b> then async operation should be cancelled.</returns>
        </member>
        <member name="P:C1.Win.C1Document.IExecutionContext.CancellationToken">
            <summary>
            <see cref="P:C1.Win.C1Document.IExecutionContext.CancellationToken"/> that can be passed to underlying task.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsExporting">
            <summary>
            Returns a value indicating whether this <see cref="T:C1.Win.C1Document.C1DocumentSource"/>
            object performs export currently.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsValidatingParameters">
            <summary>
            Returns a value indicating whther this <see cref="T:C1.Win.C1Document.C1DocumentSource"/>
            object performs validating of parameters currently.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetDefPaginated">
            <summary>
            Returns default value for <see cref="P:C1.Win.C1Document.C1DocumentSource.Paginated"/> property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Init">
            <summary>
            Called from constructor, initializes an object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnLongOperation(System.Double,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="done"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnPagesLoaded(System.Int32,System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnPagesClear">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnDirtyChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnBusyStateChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnPageCountChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnGenerateCompleted(System.Exception)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnExecuteCustomActionCompleted(C1.Win.C1Document.CustomAction,C1.Win.C1Document.C1BookmarkPosition,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="customAction"></param>
            <param name="position"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnValidateParametersCompleted(System.Collections.Generic.List{C1.Win.C1Document.ParameterValidationError},System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="errors"></param>
            <param name="exception"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnGetPageCompleted(System.Int32,C1.Win.C1Document.C1Page,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="pageIndex"></param>
            <param name="page"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnGetLinkTargetPositionCompleted(C1.Win.C1Document.C1LinkTargetBase,C1.Win.C1Document.C1BookmarkPosition,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="bookmark"></param>
            <param name="position"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnExportCompleted(C1.Win.C1Document.Export.ExportFilter,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="exporter"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnSecurityError(System.String,System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.FirePageCountChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalClearContent">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalCancel">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalDispose">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetDocumentRange(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.Util.IC1TextMeasurementContext)">
            <summary>
            Creates the <see cref="T:C1.Win.C1Document.C1DocumentRange"/> object on the base of two text positions specified
            by <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> objects.
            </summary>
            <param name="startPosition">Start position for the document range.</param>
            <param name="endPosition">End position for the document range.</param>
            <param name="textMeasurementContext">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> to use while building <see cref="T:C1.Win.C1Document.C1DocumentRange"/>.</param>
            <returns><see cref="T:C1.Win.C1Document.C1DocumentRange"/> defining document range.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetWordDocumentRange(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.Util.IC1TextMeasurementContext)">
            <summary>
            Creates a <see cref="T:C1.Win.C1Document.C1DocumentRange"/> object that defines a word containing a specified position in the document.
            </summary>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object specifying the text position.</param>
            <param name="textMeasurementContext">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> to use while building <see cref="T:C1.Win.C1Document.C1DocumentRange"/>.</param>
            <returns>A <see cref="T:C1.Win.C1Document.C1DocumentRange"/> that defines the word that contains or is near the specified <paramref name="position"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPageMetafile(System.Int32,System.Drawing.Imaging.Metafile@,System.Boolean@)">
            <summary>
            For internal use.
            Returns metafile representing the page with specified index.
            </summary>
            <param name="pageIndex">The index of the page.</param>
            <param name="metafile">OUT: The metafile of the page.</param>
            <param name="disposeMetafile">OUT: Indicates whether the returned metafile should be disposed when no longer used.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPageMetafiles(System.Func{System.Boolean})">
            <summary>
            For internal use only.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.DrawPage(C1.Win.C1Document.Util.C1Graphics,System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="graphics"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsAsyncOperationActive">
            <summary>
            For internal use.
            Returns a value indicating whether the async operation currently executed.
            Attention!!! This method checks only Generate, Export, ValidateParameters, ExecuteCustomAction actions.
            For example, this method can be used in OnLongOperation() to determine type of operation - async or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalGenerate(C1.Win.C1Document.IExecutionContext)">
            <summary>
            Should be overriden. Generates the content managed by this <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsGenerateAllowed">
            <summary>
            Returns a value indicating whether the <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/> method can be called at this moment.
            </summary>
            <returns>Returns a value indicating whether the <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/> method can be called at this moment.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Generate">
            <summary>
            Generates the document.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.GenerateAsyncEx" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.GenerateAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object identifying async operation.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalExecuteCustomAction(C1.Win.C1Document.CustomAction,C1.Win.C1Document.IExecutionContext)">
            <summary>
            Should be overriden. Executes some custom action on the document.
            </summary>
            <param name="action"></param>
            <returns><see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object specifies position in document where viewer should be positioned when method finished.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsExecuteCustomActionAllowed">
            <summary>
            Returns a value indicating whether the ExecuteCustomAction allowed.
            </summary>
            <returns>Returns a value indicating whether the Generate action allowed.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomAction(C1.Win.C1Document.CustomAction)">
            <summary>
            For internal use only.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionAsyncEx(C1.Win.C1Document.CustomAction)">
            <summary>
            For internal use only.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionAsync(C1.Win.C1Document.CustomAction)">
            <summary>
            For internal use only.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalValidateParameters(System.Collections.Generic.List{C1.Win.C1Document.ParameterValidationError},C1.Win.C1Document.IExecutionContext)">
            <summary>
            Should be overriden. Validates values of parameters and refreshes their state.
            </summary>
            <param name="errors"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ValidateParameters">
            <summary>
            Validates the current parameter values, refreshes their valid values' lists if the values are valid.
            </summary>
            <returns>The list of <see cref="T:C1.Win.C1Document.ParameterValidationError"/> objects identifying any errors (may be empty or null).</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.ValidateParametersAsyncEx" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.ValidateParametersAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.ValidateParameters"/> method.
            </summary>
            <returns>The asynchronous list of <see cref="T:C1.Win.C1Document.ParameterValidationError"/> objects identifying any errors (may be empty).</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalSetupExporter(C1.Win.C1Document.Export.ExportFilter)">
            <summary>
            Can be overriden in derived class to perform additional inititializations
            of the exporter before export's starts.
            </summary>
            <param name="exporter"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalExport(C1.Win.C1Document.Export.ExportFilter,C1.Win.C1Document.IExecutionContext)">
            <summary>
            Should be overriden. Exports current with using specified exporter.
            </summary>
            <param name="exporter"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsExportAllowed">
            <summary>
            Returns a value indicating whether the Export action allowed.
            </summary>
            <returns>Returns a value indicating whether the Export action allowed.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.ExportFilter)">
            <summary>
            Exports the document into a stream in an external format using the specified export filter.
            </summary>
            <param name="exportFilter">The export filter to use.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.ExportAsyncEx(C1.Win.C1Document.Export.ExportFilter)" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExportAsync(C1.Win.C1Document.Export.ExportFilter)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.ExportFilter)"/> method.
            </summary>
            <param name="exportFilter">The export filter to use.</param>
            <returns>Asynchronous value object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalGetPage(System.Int32,C1.Win.C1Document.IExecutionContext)">
            <summary>
            Should be overriden. Loads page with specified index.
            </summary>
            <param name="pageIndex"></param>
            <param name="context"></param>
            <returns><see cref="T:C1.Win.C1Document.C1Page"/> object defines page of document.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPage(System.Int32)">
            <summary>
            For internal use.
            Fetches a page with the specified index.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPageAsync(System.Int32)">
            <summary>
            For internal use.
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetPage(System.Int32)"/> method.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The asynchronous <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.GetPageAsyncEx(System.Int32)" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetLoadedPage(System.Int32)">
            <summary>
            For internal use.
            Fetches a generated page with the specified index,
            returns null if the requested page has not been generated yet.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsPageLoading(System.Int32)">
            <summary>
            For internal use.
            Checkes whether a page with the specified index has already been requested,
            i.e. the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetPageAsync(System.Int32)"/> method has been called to fetch it.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns><b>true</b> if page is currently loading, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalGetLinkTargetPosition(C1.Win.C1Document.C1LinkTargetBase,C1.Win.C1Document.IExecutionContext)">
            <summary>
            Should be overriden. Returns position of the some position within document.
            </summary>
            <param name="bookmark"></param>
            <param name="context"></param>
            <returns><see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object specifies position of requested bookmark.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetLinkTargetPosition(C1.Win.C1Document.C1LinkTargetBase)">
            <summary>
            For internal use.
            Gets the position of a <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> in the document.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> object position of that is requested.</param>
            <returns>The requested position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.GetBookmarkPositionAsyncEx(C1.Win.C1Document.C1LinkTargetBase)" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetBookmarkPositionAsync(C1.Win.C1Document.C1LinkTargetBase)">
            <summary>
            For internal use.
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetLinkTargetPosition(C1.Win.C1Document.C1LinkTargetBase)"/> method.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTargetBase"/> object position of that is requested.</param>
            <returns>The asynchronous requested bookmark's position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsPrintAllowed">
            <summary>
            Returns a value indicating whether the Print action allowed.
            </summary>
            <returns>Returns a value indicating whether the Print action allowed.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Print(C1.Win.C1Document.C1PrintOptions)">
            <summary>
            Prints the generated document.
            </summary>
            <param name="options">The <see cref="T:C1.Win.C1Document.C1PrintOptions"/> class defines the print options.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Print(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Prints the generated report.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Print">
            <summary>
            Prints the generated report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ClearContent">
            <summary>
            Clear generated content and sets <see cref="P:C1.Win.C1Document.C1DocumentSource.Dirty"/> to true.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.CancelAsync">
            <summary>
            Cancels currently executed async action and waits until action will be actually cancelled.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetContext">
            <summary>
            For internal use.
            Returns a  <see cref="T:C1.Win.C1Document.C1DocumentSourceContext"/> object representing the current context
            of the <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Document.C1DocumentSourceContext"/> object representing the current context of this document source.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.SetContext(C1.Win.C1Document.C1DocumentSourceContext)">
            <summary>
            For internal use.
            Sets the context for the current <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
            <param name="context">A <see cref="T:C1.Win.C1Document.C1DocumentSourceContext"/> object defining the context to set.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetHitTestAction(C1.Win.C1Document.HitTestInfo)">
            <summary>
            Gets the custom action associated with a hit test info, or null.
            </summary>
            <param name="hti">The hit test info to check.</param>
            <returns>The custom action, or null.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.SyncObject">
            <summary>
            Gets an object used by this <see cref="T:C1.Win.C1Document.C1DocumentSource"/> object
            to synchronize asynchronious operations. All async methds like
            InitializeAsync GenerateAsync executed as: lock(SyncObject) { ... }.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.C1DocumentSource"/> is disposed and can not be longer used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Log">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.LogEntryList"/> containing the list of events which occured during the last operation (generating, exporting etc).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Features">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1DocumentSourceFeatures"/> object specifying the set of features supported by this <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.AsyncMethodsUseAwaitPattern">
            <summary>
            Gets or sets a value indicating whether calls to async methods of the current document source expect the async/await pattern to be used by the calling code.
            If this property is true, then the *Completed events (such as <see cref="!:OpenCompleted"/>, <see cref="E:C1.Win.C1Document.C1DocumentSource.GenerateCompleted"/> and others)
            do not fire.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Dirty">
            <summary>
            Gets a value indicating whether the current content is dirty and does not correspond to the current values of
            <see cref="!:DocumentLocation"/>, <see cref="P:C1.Win.C1Document.C1DocumentSource.Paginated"/> etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.SupportedExportProviders">
            <summary>
            Gets an array of exporters supported by the current document source object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.DocumentName">
            <summary>
            Gets a name of the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object produced by the current document source.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.PageCount">
            <summary>
            Gets the number of already generated pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.BusyState">
            <summary>
            Gets the current busy state of the current <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.IsBusy">
            <summary>
            Gets the value indicating whether the current <see cref="T:C1.Win.C1Document.C1DocumentSource"/> busy.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Paginated">
            <summary>
            Gets or sets a value indicating whether the content should be represented as set of fixed sized pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> object specifying the page settings to use when
            generating a paginated document (see <see cref="P:C1.Win.C1Document.C1DocumentSource.Paginated"/>).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Parameters">
            <summary>
            Gets a collection of parameters used to generate content.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Credential">
            <summary>
            Gets or sets the <see cref="T:System.Net.NetworkCredential"/> object specifying the credentials
            which will be used to access data for document generation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.IsUserInteractive">
            <summary>
            Gets a value indicating whether the current document source is running in a user-interactive environment.
            This property returns false when running in a service, web app and so on.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.GenerateCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.GenerateAsync"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.GetPageCompleted">
            <summary>
            For internal use.
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetPageAsync(System.Int32)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionCompleted">
            <summary>
            For internal use.
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionAsync(C1.Win.C1Document.CustomAction)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.ValidateParametersCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.ValidateParametersAsync"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.GetLinkTargetPositionCompleted">
            <summary>
            For internal use.
            Occurs when the <see cref="!:GetLinkTargetPositionAsync"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.ExportCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.ExportAsync(C1.Win.C1Document.Export.ExportFilter)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.BusyStateChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1DocumentSource.BusyState"/> property value changes. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.DirtyChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1DocumentSource.Dirty"/> property value changes. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.LongOperation">
            <summary>
            Occurs periodically during various document operations.
            Allows to provide progress indication and the ability to cancel some long operations such as document generation.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.PageCountChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1DocumentSource.PageCount"/> property value changes. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.PagesLoaded">
            <summary>
            For internal use.
            Occurs when the content of some pages is loaded.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.PagesClear">
            <summary>
            For internal use.
            Occurs when the pages are cleared, i.e. <see cref="P:C1.Win.C1Document.C1DocumentSource.PageCount"/> becomes zero.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.SecurityError">
            <summary>
            Occurs when a securiy exception occurs during a document source operation.
            This event allows to correct security-related properties like <see cref="T:System.Net.NetworkCredential"/>
            and retry a failed operation with new credentials.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource.Activities">
            <summary>
            Contains references to activities managed by the <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Activities.Cancel">
            <summary>
            Cancels all activites.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Activity`1">
            <summary>
            Descendant of <see cref="T:C1.Win.C1Document.ActivityBase"/> which returns some value.
            </summary>
            <typeparam name="TResult">The type of the activity result.</typeparam>
        </member>
        <member name="T:C1.Win.C1Document.ActivityBase">
            <summary>
            Helper class. Used to implement async operations in C1Document library.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IAsyncInfo">
            <summary>
            Supports asynchronous actions and operations.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncInfo.Cancel">
            <summary>
            Cancels the asynchronous operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncInfo.Close">
            <summary>
            Closes the asynchronous operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncInfo.Status">
            <summary>
            Gets a value that indicates the status of the asynchronous operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncInfo.ErrorCode">
            <summary>
            Gets an exception occurs in the asynchronous operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncInfo.Id">
            <summary>
            Gets the handle of the asynchronous operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ActivityBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:C1.Win.C1Document.ActivityBase"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ActivityBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:C1.Win.C1Document.ActivityBase"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ActivityBase.Cancel">
            <summary>
            Cancels this activity.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ActivityBase.LongOperationThrowIfCancelled(System.Double)">
            <summary>
            Calls OnLongOperation() and throws an exception if it returns false.
            </summary>
            <param name="complete"></param>
        </member>
        <member name="T:C1.Win.C1Document.IAsyncOperationWithProgress`2">
            <summary>
            Represents an asynchronous operation that includes progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncOperationWithProgress`2.GetResults">
            <summary>
            Returns the results of the action.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncOperationWithProgress`2.Progress">
            <summary>
            Gets or sets the method that receives progress events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncOperationWithProgress`2.Completed">
            <summary>
            Gets or sets the method that handles the action completed event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IAsyncActionWithProgress`1">
            <summary>
            Represents an asynchronous action that includes progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncActionWithProgress`1.GetResults">
            <summary>
            Returns the results of the action.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncActionWithProgress`1.Progress">
            <summary>
            Gets or sets the method that receives progress events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncActionWithProgress`1.Completed">
            <summary>
            Gets or sets the method that handles the action completed event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Activity`1.Task">
            <summary>
            Gets the task object executing in this activity.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource.LongOperationActivity`1">
            <summary>
            Fires C1DocumentSource.LongOperation event while executing, base for GenerateActivity and ExportActivity.
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:C1.Win.C1Document.C1PdfDocumentSource">
            <summary>
            Represents a document source which loads and renders PDF documents.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PdfDocumentSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1PdfDocumentSource"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PdfDocumentSource.GetLoadedPage(System.Int32)">
            <returns>The <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page, or null.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1PdfDocumentSource.DocumentLocation">
            <summary>
            Gets or sets the location of the PDF document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PdfDocumentSource.Credential">
            <summary>
            Overridden. Gets or sets <see cref="T:System.Net.NetworkCredential"/> object defining credentials used in the PDF Document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PdfDocumentSource.SupportedExportProviders">
            <summary>
            Overridden. Gets an array of exporters supported by the current document source object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1RplImportException">
            <summary>
            Represents an exception that occurred during RPL import.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1RplImportException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the C1RplImportException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1RplImportException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the C1RplImportException class.
            </summary>
            <param name="format">A format string used to format the exception message.</param>
            <param name="args">A list of arguments passed to the format string.</param>
        </member>
        <member name="T:C1.Win.C1Document.SSRSReportLocationBase">
            <summary>
            Abstract base class for types representing the location of an SSRS report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocationBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSReportLocationBase"/> class.
            </summary>
            <param name="reportServer">Address of the SSRS server.</param>
        </member>
        <member name="P:C1.Win.C1Document.SSRSReportLocationBase.ReportServer">
            <summary>
            Gets an address of the SSRS server, like "http://someaddress/ReportServer".
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSReportLocation">
            <summary>
            Represents the location of an SSRS report specified by a full path to the report on a server.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSReportLocation"/> class.
            </summary>
            <param name="reportServer">Address of the SSRS server.</param>
            <param name="reportPath">Full path to the report on the server.</param>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.ToString">
            <summary>
            Converts the current report location to a string representation.
            </summary>
            <returns>The string representing the current object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.GetHashCode">
            <summary>
            Returns the hash code for this report location.
            </summary>
            <returns>The hash code for this report location.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.Equals(System.Object)">
            <summary>
            Compares the current report location to another one.
            </summary>
            <param name="obj">The other report location object to compare the current to.</param>
            <returns>True if both objects represent the same location, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.SSRSReportLocation.ReportPath">
            <summary>
            Gets a full path to the report on the server.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSReportLocation.TypeConverter">
            <summary>
            Provides <see cref="T:C1.Win.C1Document.SSRSReportLocation.TypeConverter"/> for the <see cref="T:C1.Win.C1Document.SSRSReportLocation"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type to convert from.</param>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <i>value</i> parameter to.</param>
            <returns>An <b>Object</b> that represents the converted value.</returns>
        </member>
        <member name="T:C1.Win.C1Document.SSRSDrillthroughReportLocation">
            <summary>
            Represents the location of an SSRS report specified via execution ID of master report and ID of the drillthrough report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation"/> class.
            </summary>
            <param name="reportServer">Address of the server.</param>
            <param name="executionID">Execution ID of the master report.</param>
            <param name="drillthroughID">ID of the drillthrough report.</param>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.GetHashCode">
            <summary>
            Returns the hash code for this report location.
            </summary>
            <returns>The hash code for this report location.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.Equals(System.Object)">
            <summary>
            Compares the current report location to another one.
            </summary>
            <param name="obj">The other report location object to compare the current to.</param>
            <returns>True if both objects represent the same location, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.SSRSDrillthroughReportLocation.ExecutionID">
            <summary>
            Gets the execution ID of the master report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.SSRSDrillthroughReportLocation.DrillthroughID">
            <summary>
            Gets the drillthrough report ID.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter">
            <summary>
            Provides <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter"/> for the <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type to convert from.</param>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <i>value</i> parameter to.</param>
            <returns>An <b>Object</b> that represents the converted value.</returns>
        </member>
        <member name="T:C1.Win.C1Document.SSRSSessionReportLocation">
            <summary>
            Represents the location of an SSRS report specified by a report session ID.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation"/> class.
            </summary>
            <param name="reportServer">Address of the server.</param>
            <param name="sessionID">Session ID of the report.</param>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.GetHashCode">
            <summary>
            Returns the hash code for this report location.
            </summary>
            <returns>The hash code for this report location.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.Equals(System.Object)">
            <summary>
            Compares the current report location to another one.
            </summary>
            <param name="obj">The other report location object to compare the current to.</param>
            <returns>True if both objects represent the same location, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.SSRSSessionReportLocation.SessionID">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter">
            <summary>
            Provides <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter"/> for the <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type to convert from.</param>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <i>value</i> parameter to.</param>
            <returns>An <b>Object</b> that represents the converted value.</returns>
        </member>
        <member name="T:C1.Win.C1Document.C1SSRSContext">
            <summary>
            Defines working context for <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1SSRSDocumentSource">
            <summary>
            Represents a document source which can be used to generate an SSRS report.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.PdfExportProvider">
            <summary>
            Gets the static registered instance of the PDF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.CsvExportProvider">
            <summary>
            Gets the static registered instance of the CSV export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.BmpExportProvider">
            <summary>
            Gets the static registered instance of the BMP export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.EmfExportProvider">
            <summary>
            Gets the static registered instance of the EMF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.GifExportProvider">
            <summary>
            Gets the static registered instance of the GIF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.JpegExportProvider">
            <summary>
            Gets the static registered instance of the JPEG export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.PngExportProvider">
            <summary>
            Gets the static registered instance of the PNG export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.TiffExportProvider">
            <summary>
            Gets the static registered instance of the TIFF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.ExcelExportProvider">
            <summary>
            Gets the static registered instance of the Excel export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.WordExportProvider">
            <summary>
            Gets the static registered instance of the Word export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.XlsxExportProvider">
            <summary>
            Gets the static registered instance of the Xlsx export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.DocxExportProvider">
            <summary>
            Gets the static registered instance of the Docx export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.MhtmlExportProvider">
            <summary>
            Gets the static registered instance of the Mhtml export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.SvgExportProvider">
            <summary>
            For internal use.
            Gets the static registered instance of the Mhtml export provider.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.#ctor(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.OpenReportSession(C1.Win.C1Document.IExecutionContext)">
            <summary>
            Opens _reportSession, ensures that it connected to report specified in DocumentLocation.
            Returns true if connection was opened and it means that list of parameters was updated
            and false otherwise.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetUniqueName(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <param name="uniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.IsExportAllowed">
            <summary>
            Returns a value indicating whether the Export action allowed.
            </summary>
            <returns>Returns a value indicating whether the Export action allowed.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ResetDocumentLocation">
            <summary>
            Resets the DocumentLocation property to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ShouldSerializeDocumentLocation">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ShouldSerializeConnectionOptions">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Init">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalClearContent">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalDispose">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.CheckParameterValue(C1.Win.C1Document.Parameter,System.Object,System.Object@,System.String@)">
            <summary>
            Checks the value passed to the fact that it is the correct value for the parameter
            and converts it to type specified in <see cref="!:DataType"/> parameter.
            For example, if object contains <b>byte</b> and <see cref="!:DataType"/> is Int then
            <see cref="!:correctedValue"/> will contain <b>Int32</b>.
            </summary>
            <param name="value">Value to check.</param>
            <param name="correctedValue">OUT: Contains value converted to type defined in <see cref="!:DataType"/> property.</param>
            <param name="errorMessage">OUT: Contains error message if value is invalid.</param>
            <returns>Returns <b>true</b> if value is valid and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalValidateParameters(System.Collections.Generic.List{C1.Win.C1Document.ParameterValidationError},C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="actualValues"></param>
            <param name="errors"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalGenerate(C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalGetPage(System.Int32,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="pageIndex"></param>
            <param name="updateFindRange"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalGetLinkTargetPosition(C1.Win.C1Document.C1LinkTargetBase,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="linkTarget"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalExecuteCustomAction(C1.Win.C1Document.CustomAction,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="action"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalExport(C1.Win.C1Document.Export.ExportFilter,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="exporter"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.IsGenerateAllowed">
            <summary>
            Overriden. Returns <b>true</b> if State equals to <see cref="F:C1.Win.C1Document.C1DocumentSourceBusyState.Ready"/> and <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation"/> is not null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Generate">
            <summary>
            Generates the SSRS report.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1SSRSDocumentSource.GenerateAsyncEx" -->
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GenerateAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1SSRSDocumentSource.Generate"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1SSRSDocumentSource.Generate"/>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ValidateParameters">
            <summary>
            Validates the current parameter values, refreshes their valid values' lists if the values are valid.
            </summary>
            <returns>The list of <see cref="T:C1.Win.C1Document.ParameterValidationError"/> objects identifying any errors (may be empty or null).</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1SSRSDocumentSource.ValidateParametersAsyncEx" -->
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ValidateParametersAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1SSRSDocumentSource.ValidateParameters"/> method.
            </summary>
            <returns>The asynchronous list of <see cref="T:C1.Win.C1Document.ParameterValidationError"/> objects identifying any errors (may be empty).</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Print(C1.Win.C1Document.C1PrintOptions)">
            <summary>
            Prints the generated report.
            </summary>
            <param name="options">The <see cref="T:C1.Win.C1Document.C1PrintOptions"/> class defines the print options.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Print">
            <summary>
            Prints the generated report with default print options.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Print(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Prints the generated report.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetContext">
            <summary>
            For internal use.
            Overriden. Returns the current working context of this <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/> working context.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.SetContext(C1.Win.C1Document.C1DocumentSourceContext)">
            <summary>
            For internal use.
            Overriden. Sets the working context of this <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/>.
            </summary>
            <param name="context">The new working context.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetHitTestAction(C1.Win.C1Document.HitTestInfo)">
            <summary>
            For internal use.
            Overridden. Gets the custom action associated with a hit test info, or null.
            </summary>
            <param name="hti">The hit test info to check.</param>
            <returns>The custom action, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetLoadedPage(System.Int32)">
            <summary>
            For internal use.
            Overridden. Fetches a generated page with the specified index,
            or null if the requested page has not been generated yet.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetPageMetafile(System.Int32,System.Drawing.Imaging.Metafile@,System.Boolean@)">
            <summary>
            For internal use.
            </summary>
            <param name="pageIndex"></param>
            <param name="metafile"></param>
            <param name="disposeMetafile"></param>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.SupportedExportProviders">
            <summary>
            Overridden. Gets an array of exporters supported by the current document source object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Language">
            <summary>
            Gets or sets the language used in the SSRS session.
            The culture specified by this property affects User!Language report identifier.
            By default this property is null, which means that CultureInfo.CurrentUICulture will be used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Features">
            <summary>
            Overridden. Gets a <see cref="T:C1.Win.C1Document.C1DocumentSourceFeatures"/> object defining
            features of the <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentName">
            <summary>
            Overriden. Gets the user-friendly name for the current report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Document">
            <summary>
            Overridden. Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object representing the SSRS report
            associated with the current document source.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ReportSession">
            <summary>
            Gets the <see cref="T:C1.Win.C1Ssrs.ReportSession"/> object used to connect to SSRS report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Credential">
            <summary>
            Overridden. Gets or sets <see cref="T:System.Net.NetworkCredential"/> object defining credentials used in the SSRS connection.
            This is a shortcut to <see cref="P:C1.Win.C1Ssrs.ConnectionOptions.Credential"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.PageSettings">
            <summary>
            Overriden. Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> object specifying the page settings used to generate the SSRS report.
            This property is automatically updated when a new report is opened.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation">
            <summary>
            Gets or sets the location of the SSRS report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions">
            <summary>
            Gets the <see cref="T:C1.Win.C1Ssrs.ConnectionOptions"/> object containing options used when connecting to SSRS.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1SSRSDocumentSource.ToggleItemAction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ToggleItemAction.ID">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1SSRSDocumentSource.SortAction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.SortAction.ID">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.SortAction.Direction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AlignHorzEnum">
            <summary>
            Specifies the horizontal alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.Win.C1Document.Style.TextAlignHorz"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Near">
            <summary>
            The text is left-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Center">
            <summary>
            The text is centered horizontally.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Far">
            <summary>
            The text is right-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Justify">
            <summary>
            The text is justified horizontally by widening the white spaces existing in the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars">
            <summary>
            The text is justified horizontally by adding white spaces between all characters in the text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AlignVertEnum">
            <summary>
            Specifies the vertical alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.Win.C1Document.Style.TextAlignVert"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Top">
            <summary>
            The text is top-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Center">
            <summary>
            The text is centered vertically.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Bottom">
            <summary>
            The text is bottom-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Justify">
            <summary>
            The text is justified vertically.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ImageAlignHorzEnum">
            <summary>
            Specifies the horizontal alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.Win.C1Document.ImageAlign.AlignHorz"/> property
            on <see cref="P:C1.Win.C1Document.Style.ImageAlign"/> and <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Left">
            <summary>
            The image is left-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Center">
            <summary>
            The image is centered horizontally.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Right">
            <summary>
            The image is right-aligned.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ImageAlignVertEnum">
            <summary>
            Specifies the vertical alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.Win.C1Document.ImageAlign.AlignVert"/> property
            on <see cref="P:C1.Win.C1Document.Style.ImageAlign"/> and <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Top">
            <summary>
            The image is top-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Center">
            <summary>
            The image is centered vertically.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Bottom">
            <summary>
            The image is bottom-aligned.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.TextPositionEnum">
            <summary>
            Specifies the subscript and superscript properties of text.
            
            This is the type of <see cref="P:C1.Win.C1Document.Style.TextPosition"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextPositionEnum.Normal">
            <summary>
            The text is positioned and sized normally.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextPositionEnum.Subscript">
            <summary>
            The text is positioned and sized as subscript.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextPositionEnum.Superscript">
            <summary>
            The text is positioned and sized as superscript.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SplitBehaviorEnum">
            <summary>
            Defines the splitting behavior of a render object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.SplitBehaviorEnum.Never">
            <summary>
            The object should not be split between pages
            (i.e. should always be kept together on a single page), object
            is cut off if it not fit the page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.SplitBehaviorEnum.SplitIfNeeded">
            <summary>
            The object can be split if it does not fit onto the current page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.SplitBehaviorEnum.KeepTogether">
            <summary>
            The object can be split only if it is too large to fit on an empty 
            page. In that case, the object is split immediately. Otherwise, a 
            new page is started and the object is placed on it without 
            splitting.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FontStyle">
            <summary>
            Defines the font styles.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontStyle.Normal">
            <summary>
            Normal font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontStyle.Italic">
            <summary>
            Italic font.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FontWeight">
            <summary>
            Defines the font weights.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.Normal">
            <summary>
            "Normal" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.Black">
            <summary>
            "Black" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.Bold">
            <summary>
            "Bold" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.ExtraBlack">
            <summary>
            "Extra black" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.ExtraBold">
            <summary>
            "Extra bold" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.ExtraLight">
            <summary>
            "Extra light" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.Light">
            <summary>
            "Light" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.Medium">
            <summary>
            "Medium" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.SemiBold">
            <summary>
            "Semi bold" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.SemiLight">
            <summary>
            "Semi light" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontWeight.Thin">
            <summary>
            "Thin" font.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1TextDecoration">
            <summary>
            Defines the various text decorations underline, strikeout etc.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextDecoration.None">
            <summary>
            No decoration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextDecoration.Underline">
            <summary>
            Underline text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextDecoration.Strikeout">
            <summary>
            Strikeout text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FontStretch">
            <summary>
            Represents the degree to which a font has been stretched compared to a font's normal aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.UltraCondensed">
            <summary>	
            Ultra condenced.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.ExtraCondensed">
            <summary>	
            Extra condenced.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.Condensed">
            <summary>	
            Condenced.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.SemiCondensed">
            <summary>	
            Semi condensed.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.Normal">
            <summary>	
            Normal.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.Medium">
            <summary>	
            Medium.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.SemiExpanded">
            <summary>	
            Semi expanded.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.Expanded">
            <summary>	
            Expanded.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.ExtraExpanded">
            <summary>	
            Extra expanded.
            </summary>	
        </member>
        <member name="F:C1.Win.C1Document.C1FontStretch.UltraExpanded">
            <summary>	
            Ultra expanded.
            </summary>	
        </member>
        <member name="T:C1.Win.C1Document.WordWrapMode">
            <summary>
            Specifies how to break words when lines of text wrap.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.WordWrapMode.Normal">
            <summary>
            Default. A word is not split unless it is too long to fit within the boundaries of the container by itself.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.WordWrapMode.BreakWord">
            <summary>
            A word can be split at any position if needed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.TextFitMode">
            <summary>
            Specifies how a text is adjusted to fit in specified bounds.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextFitMode.None">
            <summary>
            Text is not adjusted.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextFitMode.AutoFontSize">
            <summary>
            The font size is adjusted (increased or decreased) so that text fits in the specified bounds.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextFitMode.AutoCharSpacing">
            <summary>
            The spacing between characters is adjusted (increased or decreased) so that text fits in the specified bounds.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.WritingMode">
            <summary>
            Specifies whether a text is written horizontally or vertically.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BarCodeEnum">
            <summary>
            Determines the type of barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.None">
            <summary>
            No barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Ansi39">
            <summary>
            ANSI 3 of 9 (Code 39) uses upper case, numbers, - , * $ / + %.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Ansi39x">
            <summary>
            ANSI Extended 3 of 9 (Extended Code 39) uses the complete ASCII character set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code39">
            <summary>
            Alpha-numeric, (Code 3 of 9).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code39x">
            <summary>
            Extended Code 39 uses the complete ASCII character set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code93">
            <summary>
            Alpha-numeric.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code93x">
            <summary>
            Extended Code 93 uses the complete ASCII character set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128_A">
            <summary>
            Code 128 A uses control characters, numbers, punctuation, and upper case.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128_B">
            <summary>
            Code 128 B uses punctuation, numbers, upper case and lower case.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128_C">
            <summary>
            Code 128 C uses only numbers.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128auto">
            <summary>
            Code 128 Auto uses the complete ASCII character set.  
            Automatically selects between Code 128 A, B and C to give the smallest barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code_2_of_5">
            <summary>
            Code 2 of 5 uses only numbers.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code25intlv">
            <summary>
            Interleaved 2 of 5 uses only numbers.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Codabar">
            <summary>
            Numeric only, slightly denser than Code39.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Matrix_2_of_5">
            <summary>
            Matrix 2 of 5 is a higher density barcode consisting of 3 black bars and 2 white bars. 
            Matrix_2_of_5 uses only numbers.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.MSI">
            <summary>
            MSI Code uses only numbers.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.PostNet">
            <summary>
            Numeric only, US Postal Service.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.EAN_13">
            <summary>
            EAN-13 uses only numbers (12 numbers and a check digit). 
            If there are only 12 numbers in the string, it calculates a checksum and adds it to the thirteenth position. 
            If there are 13, it validates the checksum and throws an error if it is incorrect.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.EAN_8">
            <summary>
            EAN-8 uses only numbers (7 numbers and a check digit).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.UPC_A">
            <summary>
            UPC-A uses only numbers (11 numbers and a check digit).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.UPC_E0">
            <summary>
            UPC-E0 uses only numbers.
            Used for zero-compression UPC symbols.  
            For the Caption property, you may enter either a six-digit UPC-E code or a complete 11-digit (includes code type, which must be 0 (zero)) UPC-A code.  
            If an 11-digit code is entered, the Barcode control will convert it to a six-digit UPC-E code, if possible. 
            If it is not possible to convert from the 11-digit code to the six-digit code, nothing is displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.UPC_E1">
            <summary>
            UPC-E1 uses only numbers.  Used typically for shelf labeling in the retail environment.  
            The length of the input string for U.P.C. E1 is six numeric characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RM4SCC">
            <summary>
            Royal Mail RM4SCC uses only letters and numbers (with a check digit).  
            This is the barcode used by the Royal Mail in the United Kingdom.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.UCCEAN128">
            <summary>
            UCC/EAN –128 uses the complete ASCII character Set.  
            This is a special version of Code 128 used in HIBC applications.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.QRCode">
            <summary>
            QRCode is a 2D symbology that is capable of handling numeric, alphanumeric and byte data as well as Japanese kanji and kana characters. 
            This symbology can encode up to 7,366 characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Code49">
            <summary>
            Code 49 is a 2D high-density stacked barcode. Encodes the complete ASCII character set. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.JapanesePostal">
            <summary>
            This is the barcode used by the Japanese Postal system. 
            Encodes alpha and numeric characters consisting of 18 digits including a 7-digit postal code number, optionally followed by block and house number information. 
            The data to be encoded can include hyphens.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.Pdf417">
            <summary>
            Pdf417 is a popular high-density 2-dimensional symbology that encodes up to 1108 bytes of information. 
            This barcode consists of a stacked set of smaller barcodes. 
            Encodes the full ASCII character set. 
            Capable of encoding as many as 2725 data characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.EAN128FNC1">
            <summary>
            EAN128FNC1 is a UCC/EAN-128 (EAN128) type barcode that allows you to insert FNC1 character at any place and adjust the bar size etc, which is not available in UCC/EAN-128.
            To insert FNC1 character, set “\n” for C#, or “vbLf” for VB to Text property at runtime.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14">
            <summary>
            RSS14 is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification for use with omnidirectional point-of-sale scanners.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14Truncated">
            <summary>
            RSS14Truncated is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification plus Indicator digits for use on small items, not for point-of-sale scanners.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14Stacked">
            <summary>
            RSS14Stacked is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is the same as RSS14Truncated, but stacked in two rows when RSS14Truncated is too wide.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14StackedOmnidirectional">
            <summary>
            RSS14StackedOmnidirectional is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is the same as RSS14, but stacked in two rows when RSS14 is too wide.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RSSExpanded">
            <summary>
            RSSExpanded is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification plus AI element strings (expiration date, weight, etc.) for use with omnidirectional point-of-sale scanners.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RSSExpandedStacked">
            <summary>
            RSSExpandedStacked is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is the same as RSSExpanded, but stacked in two rows when RSSExpanded is too wide.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.RSSLimited">
            <summary>
            RSS Limited is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification with indicator digits of 0 or 1 in a small symbol that is not scanned by point-of-sale scanners.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.DataMatrix">
            <summary>
            Data Matrix is a high density, two-dimensional barcode with square modules arranged in a square or rectangular matrix pattern.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.MicroPDF417">
            <summary>
            MicroPDF417 is two-dimensional (2D), multi-row symbology, derived from PDF417. 
            Micro-PDF417 is designed for applications that need to encode data in a two-dimensional (2D) symbol (up to 150 bytes, 250 alphanumeric characters, or 366 numeric digits) with the minimal symbol size.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarCodeEnum.IntelligentMail">
            <summary>
            Intelligent Mail, formerly known as the 4-State Customer Barcode, is a 65-bar code used for domestic mail in the U.S.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.Exporter">
            <summary>
            Base class for all SSRS exporters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.ExportFilter">
            <summary>
            The abstract base class for all exporter classes.
            An instance of an <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> derived class is used to export a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.CopyPropertiesToOptionsForm(C1.Win.C1Document.Export.ExportOptionsFormBase)">
            <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            Can be overridden in a derived class to handle format-specific options.
            </summary>
            <param name="f">The <see cref="T:C1.Win.C1Document.Export.ExportOptionsFormBase"/> object to copy the properties to.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.CopyPropertiesFromOptionsForm(C1.Win.C1Document.Export.ExportOptionsFormBase)">
            <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            Can be overridden in a derived class to handle format-specific options.
            </summary>
            <param name="f">The <see cref="T:C1.Win.C1Document.Export.ExportOptionsFormBase"/> object to copy the options from.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.CanPreviewFile(System.String)">
            <summary>
            Tests whether <see paramref="fileName"/> can be previewed.
            <para>
            If you override this, you must also override <see cref="!:PreviewFile()"/>.
            </para>
            </summary>
            <returns><b>true</b> if the output file can be previewed, <b>false</b> otherwise.</returns>
            <seealso cref="!:PreviewFile()"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.PreviewFile(System.String)">
            <summary>
            Previews the specified file.
            <para>
            Override this if you override <see cref="!:CanPreviewFile()"/>.
            </para>
            </summary>
            <seealso cref="!:CanPreviewFile()"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.GetMainStream">
            <summary>
            Returns stream which should be used to store content if exporter produces SINGLE file during
            export. Do NOT dispose this stream, it will be automatically disposed after export if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.GetStream(System.String)">
            <summary>
            Returns stream which can be used to store content if exporter produces MULTIPLE files during export.
            Dispose this stream after using.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.IsPaginated">
            <summary>
            Returns value indicating whether <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> requires paginated content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> can handle the specified type of document pages' range.
            The default implementation of this method returns <b>true</b> if the specified range type
            is <see cref="F:C1.Win.C1Document.OutputRangeType.All"/>, <b>false</b> otherwise.
            </summary>
            <param name="rangeType">The type of the range to test.</param>
            <returns><b>true</b> if the <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> can handle the specified output range, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.Dispose">
            <summary>
            Disposes the <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:C1.Win.C1Document.Export.ExportFilter"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportFilter.ShowOptionsDialog">
            <summary>
            Displays a dialog that allows the user to edit the export options.
            </summary>
            <returns><b>true</b> if the dialog was displayed successfully and the user pressed <b>OK</b>, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.CanShowPreview">
            <summary>
            Gets a value indicating whether the exported file can be previewed.
            This property is cached for each exporter, and is not refreshed after
            it has been determined.
            ATTENTION! This property is used to edit export's parameters in user's ui
            so it should NOT use data generated AFTER export, OutputFiles property for example.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.Document">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1Document"/> providing exporting content.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.Pages">
            <summary>
            Gets or sets the list of the document pages, fragments of these pages reference render objects
            of the document <see cref="P:C1.Win.C1Document.Export.ExportFilter.Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.DocumentSource">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> object providing exporting content.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.Preview">
            <summary>
            Gets or sets a value indicating whether the exported document should be opened
            after exporting it to a disk file.
            The application used to open the file is determined by the OS shell.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.ShowOptions">
            <summary>
            Gets or sets a value indicating whether the options dialog should be shown to the user
            before exporting the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> providing exporting content.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.FileName">
            <summary>
            Gets or sets the name of the output file.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.Stream">
            <summary>
            Gets or sets the output stream.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.ExportProvider">
            <summary>
            Gets an instance of a class derived from <see cref="P:C1.Win.C1Document.Export.ExportFilter.ExportProvider"/>
            describing the export format associated with the current exporter.
            That instance can be used to retrieve static information about the current export format
            such as format description or default extension.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.MultiFile">
            <summary>
            Gets a value indicating whether multiple files were generated during export.
            If multiple files were generated, and the <see cref="P:C1.Win.C1Document.Export.ExportFilter.UseZipForMultipleFiles"/> property is true,
            the output (stream or file) will be a zipped archive containing the generated files.
            The list of actual files can be retrived via <see cref="P:C1.Win.C1Document.Export.ExportFilter.OutputFiles"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.UseZipForMultipleFiles">
            <summary>
            Gets or sets a value indicating whether the output (stream or file) should be
            a zipped archive with the generated files, if multiple files are created during export.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.OutputFiles">
            <summary>
            Gets the list of files which were generated by the call to <see cref="!:Export(string)"/>.
            Typically exporters produce a single file (e.g. RTF, XLS exporters),
            but some (like HTML, EMF exporters) may produce several files all of which 
            can be then accessed through this property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.Range">
            <summary>
            Gets or sets the range of pages that is to be exported.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportFilter.DocumentInfo">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.Export.ExportFilter.DocumentInfo"/> object associated with the document
            assigned to the current exporter.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValue(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="sb"></param>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValue(System.Text.StringBuilder,System.String,C1.Win.C1Document.Unit)">
            <summary>
            For internal use.
            </summary>
            <param name="sb"></param>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValuePreserve(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="sb"></param>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.GetDevInfo">
            <summary>
            Returns DeviceInfo string for SSRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.GetFormat">
            <summary>
            Returns format indentifier for SSRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.IsPaginated">
            <summary>
            Overriden. This functions does not used in SSRS exporters and throws
            NotImplementedException.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.Exporter.DocumentSource">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/> object providing report data.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PaginatedExporter">
            <summary>
            Base class for paginated exporters like PDF, IMAGE and so on.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.GetDevInfo">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> object defining layout of the page.
            <b>Null</b> indicates default value, specified in the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.Columns">
            <summary>
            Gets or sets the number of columns to set for the report.
            <b>Null</b> indicates default value, specified in the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.ColumnSpacing">
            <summary>
            Gets or sets the column spacing.
            <b>Null</b> indicates default value, specified in the report.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.ImageExporter">
            <summary>
            Base class for all exporters performing export to image format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetFormat">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetDevInfo">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetOutputFormat">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current exporter.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExportProvider">
            <summary>
            Describes export to CSV format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/>
        </member>
        <member name="T:C1.Win.C1Document.Export.ExportProvider">
            <summary>
            The abstract base class describing a supported export format.
            All export providers describing specific formats (such as PDF or HTML) derive from this class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.PdfExportProvider">
            <summary>
            Gets the static registered instance of the PDF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.HtmlExportProvider">
            <summary>
            Gets the static registered instance of the HTML export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.XlsExportProvider">
            <summary>
            Gets the static registered instance of the XLS export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.MetafileExportProvider">
            <summary>
            Gets the static registered instance of the metafile export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.XlsxExportProvider">
            <summary>
            Gets the static registered instance of the Open XML Excel export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.RtfExportProvider">
            <summary>
            Gets the static registered instance of the RTF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.DocxExportProvider">
            <summary>
            Gets the static registered instance of the Open XML Word export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.TiffExportProvider">
            <summary>
            Gets the static registered instance of the TIFF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.BmpExportProvider">
            <summary>
            Gets the static registered instance of the BMP export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.PngExportProvider">
            <summary>
            Gets the static registered instance of the PNG export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.JpegExportProvider">
            <summary>
            Gets the static registered instance of the JPEG export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportProvider.GifExportProvider">
            <summary>
            Gets the static registered instance of the GIF export provider.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            When overridden in a derived class, returns an instance of a specialized class derived from <see cref="T:C1.Win.C1Document.Export.ExportFilter"/>.
            </summary>
            <returns>Returns the newly created exporter.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportProvider.FormatName">
            <summary>
            Gets a short description of the current export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportProvider.SupportedDocumentInfoFields">
            <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.Win.C1Document.DocumentInfo"/> class
            are supported by the current export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportProvider.OptionsFormClass">
            <summary>
            Gets the type of form which is used to edit the export options by default.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportProvider.CanShowOptions">
            <summary>
            Gets a value indicating whether the associated <see cref="T:C1.Win.C1Document.Export.ExportFilter"/>
            can show a dialog allowing the user to edit the export options.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "csv".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.FormatName">
            <summary>
            Gets a short description of the CSV export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExporterEncoding">
            <summary>
            Defines text encodings supported by <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to CSV.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.CsvExportProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.Encoding">
            <summary>
            Gets or sets the character encoding scheme: ASCII, UTF7, UTF8, or Unicode.
            The default value is UTF8.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.ExcelMode">
            <summary>
            Gets or sets a value indicating whether the target output is for Excel.
            The default value is true.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.FieldDelimiter">
            <summary>
            Gets or sets the delimiter string to put in the result.
            The default value is a comma ",".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.FileExtension">
            <summary>
            Gets or sets the file extension to put on the result.
            The default value is .CSV.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.NoHeader">
            <summary>
            Gets or sets a value indicating whether the header row is excluded from the output.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.Qualifier">
            <summary>
            Gets or sets the qualifier string to put around results that contain the field delimiter or record
            delimiter. If the results contain the qualifier, the qualifier is repeated.
            The Qualifier setting must be different from the FieldDelimiter and RecordDelimiter settings.
            The default value is a quotation mark (").
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.RecordDelimiter">
            <summary>
            Gets ot sets the record delimiter to put at the end of each record.
            The default value is &lt;cr>&lt;lf>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.SuppressLineBreaks">
            <summary>
            Gets or sets value indicating whether line breaks are removed from the data included in the output.
            The default value is false.
            If the value is true, the FieldDelimiter, RecordDelimiter, and Qualifier settings cannot be a space character.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.UseFormattedValues">
            <summary>
            Gets or sets a value indicating whether formatted strings are put into the CSV output.
            <b>null</b> indicates default value true when ExcelMode is true; otherwise it is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PdfExportProvider">
            <summary>
            Describes export to Adobe PDF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "pdf".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.OptionsFormClass">
            <summary>
            Overriden. Gets the type of form which is used to edit the export options by default.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.FormatName">
            <summary>
            Gets a short description of the PDF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PdfExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to PDF.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PdfExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the exporter.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.PdfExportProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.HumanReadablePDF">
            <summary>
            Gets or sets a value indicating whether the PDF document should be created uncompressed,
            which allows the PDF source to be human-readable.
            This property is used only when <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide"/> is true.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide">
            <summary>
            Gets or sets a value indicating whether the export is executed on the server side.
            The default value is true.
            </summary>
            <remarks>
            If this property is false, then the PDF file will be generated locally using <b>C1Pdf</b>.
            This mode provides more features which are supported by C1Pdf, including PDF/A, security settings etc.
            But, this mode is slower, and it does not support outlines.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether the fonts used in the report should be embedded in the generated PDF.
            This property is used only when <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide"/> is false.
            </summary>
            <remarks>
            Embedding the fonts can make the resulting PDF document substantially larger, 
            but allows the document to be viewed correctly on systems that may not have all the necessary fonts installed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.PdfACompatible">
            <summary>
            Gets or sets a value indicating whether the generated PDF file should be PDF/A compatible.
            This property is used only when <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide"/> is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.UseCompression">
            <summary>
            Gets or sets a value indicating whether the generated PDF file should use compression.
            This property is used only when <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide"/> is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.PdfSecurityOptions">
            <summary>
            Gets a <b>PdfSecurityOptions</b> object which specifies who can use the PDF document and what actions are allowed.
            This property is used only when <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide"/> is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.TiffExportProvider">
            <summary>
            Describes export to image TIFF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "tiff".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.FormatName">
            <summary>
            Gets a short description of the PNG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.TiffExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to TIFF.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.TiffExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current exporter.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.TiffExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.BmpExportProvider">
            <summary>
            Describes export to image BMP format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "bmp".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.FormatName">
            <summary>
            Gets a short description of the BMP export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.BmpExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to BMP.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.BmpExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.EmfExportProvider">
            <summary>
            Describes export to image EMF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "emf".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.FormatName">
            <summary>
            Gets a short description of the EMF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.EmfExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to EMF.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.EmfExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.GifExportProvider">
            <summary>
            Describes export to image GIF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.GifExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.GifExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "gif".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.GifExportProvider.FormatName">
            <summary>
            Gets a short description of the GIF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.GifExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to GIF.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.GifExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.GifExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.JpegExportProvider">
            <summary>
            Describes export to image JPEG format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.JpegExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.JpegExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "jpeg".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.FormatName">
            <summary>
            Gets a short description of the JPEG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.JpegExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to JPEG.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.JpegExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PngExportProvider">
            <summary>
            Describes export to image PNG format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PngExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PngExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "png".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PngExportProvider.FormatName">
            <summary>
            Gets a short description of the PNG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PngExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to PNG.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PngExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.PngExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider">
            <summary>
            Describes export to Web archive (MHTML) format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "mhtml".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.FormatName">
            <summary>
            Gets a short description of the MHTML export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to Web archive (MHTML) format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.MhtmlExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current exporter.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExporter.OutlookCompat">
            <summary>
            Gets or sets a value indicating whether to render with extra metadata that makes the report look
            better in Outlook.
            The default value is true.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider">
            <summary>
            Describes export to Microsoft Excel format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xls".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.FormatName">
            <summary>
            Gets a short description of the Excel export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider">
            <summary>
            Describes export to XLSX (Open XML) format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xlsx".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider.FormatName">
            <summary>
            Gets a short description of the Excel export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to Excel.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ExcelExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current exporter.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OpenXmlDocument">
            <summary>
            Gets or sets a value indicating whether the document should be saved in Office12 Open XML format.
            </summary>
            <value><b>true</b> if document should be exported in Office12 format, <b>false</b> otherwise.</value>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OmitDocumentMap">
            <summary>
            Gets or sets a value indicating whether to omit the document map for reports that support it.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OmitFormulas">
            <summary>
            Gets or sets a value indicating whether to omit formulas from the rendered report.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.SimplePageHeaders">
            <summary>
            Gets or sets a value indicating whether the page header of the report is rendered to the Excel page header.
            A value of false indicates that the page header is rendered to the first row of the worksheet.
            The default value is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.WordExportProvider">
            <summary>
            Describes export to Microsoft Word format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.WordExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "doc".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExportProvider.FormatName">
            <summary>
            Gets a short description of the Microsoft Word export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.DocxExportProvider">
            <summary>
            Describes export to DOCX (Open XML) format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.DocxExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.DocxExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "docx".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.DocxExportProvider.FormatName">
            <summary>
            Gets a short description of the DOCX export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode">
            <summary>
            Defines how AutoFit value can be specified for tables in generated Word files.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.False">
            <summary>
            AutoFit is set to false on any Word table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.True">
            <summary>
            AutoFit is set to true on every Word table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Never">
            <summary>
            AutoFit values are not set on any Word table and behavior reverts to the Word default.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Default">
            <summary>
            AutoFit is set on tables that are narrower than the physical drawing area (physical page width excluding margins) per logical page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.WordExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to Microsoft Word format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.WordExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current exporter.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OpenXmlDocument">
            <summary>
            Gets or sets a value indicating whether the document should be saved in Office12 Open XML format.
            </summary>
            <value><b>true</b> if document should be exported in Office12 format, <b>false</b> otherwise.</value>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.AutoFit">
            <summary>
            Gets or sets a value defining how an AutoFit value will be specified for tables in generated Word file.
            The default value is <see cref="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Default"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.ExpandToggles">
            <summary>
            Gets or sets a value indicating whether all items that can be toggled should render in their fully-expanded state.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.FixedPageWidth">
            <summary>
            Gets or sets a value indicating whether the Page Width written to the DOC file will grow to accommodate the width of the largest page in the Report Body.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OmitHyperlinks">
            <summary>
            Gets or sets a value indicating whether to omit the Hyperlink action on all items where it is set.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OmitDrillthroughs">
            <summary>
            Gets or sets a value indicating whether to omit the Drillthrough action on all items where it is set.
            The default value is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.SvgExportProvider">
            <summary>
            For internal use.
            Describes export to HTML format based on SVG format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.SvgExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.SvgExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.SvgExportProvider"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.SvgExportProvider"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.SvgExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "html".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.SvgExportProvider.FormatName">
            <summary>
            Gets a short description of the HTML export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.SvgExporter">
            <summary>
            For internal use.
            Represents an object that can be used to export a SSRS report to SVG format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.HtmlFilterBase">
            <summary>
            Base class for HTML filters based on <see cref="T:C1.Win.C1Document.Util.C1HtmlGraphics"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.GraphicsFilter">
            <summary>
            Paginated export filter.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.GraphicsFilter.Init">
            <summary>
            Override this method to perform initialization linked with used C1Graphics object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.GraphicsFilter.Deinit">
            <summary>
            Override this method to dispose all resources used in export.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.GraphicsFilter.ExportFinished">
            <summary>
            Called when export was successfully finished.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.GraphicsFilter.ExportPage(C1.Win.C1Document.C1Page)">
            <summary>
            Performs export of the single <see cref="T:C1.Win.C1Document.C1Page"/>.
            </summary>
            <param name="page"></param>
        </member>
        <member name="F:C1.Win.C1Document.Export.HtmlFilterBase.ShowNavigator">
            <summary>
            Specifies whether the navigator should be added
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.HtmlFilterBase.NavigatorPosition">
            <summary>
            Specifies the navigator position
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.HtmlFilterBase.SingleFile">
            <summary>
            Specifies whether the filter should produce a single file
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.HtmlFilterBase.GetPageCount">
            <summary>
            Gets the count of pages in the exported document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.SvgExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current exporter.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Export.EmfOptionsForm">
            <summary>
            Represents a form for editing the export options used by an <see cref="!:EmfFilter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.ImageOptionsForm">
            <summary>
            Base class for forms used to edit options of image exporters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.ExportOptionsFormBase">
            <summary>
            Represents a form for editing the export options used by an <see cref="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Exporter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Forms.BaseForm">
            <summary>
            Base class for all custom forms in C1Preview.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.BaseForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Forms.BaseForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Forms.BaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.BaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Forms.BaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportOptionsFormBase.#ctor">
            <summary>
            <para>Do not use directly.</para>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.ExportOptionsFormBase"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportOptionsFormBase.CreateForm(C1.Win.C1Document.Export.ExportFilter,System.Type,System.Type)">
            <summary>
            Creates a new instance of a <see cref="T:C1.Win.C1Document.Export.ExportOptionsFormBase"/>-derived class.
            </summary>
            <param name="exporter">The exporter to use.</param>
            <param name="customType">The custom form type.</param>
            <param name="defaultType">The default form type.</param>
            <returns></returns>
        </member>
        <member name="F:C1.Win.C1Document.Export.ExportOptionsFormBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportOptionsFormBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportOptionsFormBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Exporter">
            <summary>
            Gets the associated exporter.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.ExportProvider">
            <summary>
            Gets the associated export provider.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Preview">
            <summary>
            Gets or sets a value indicating whether the resulting document
            should be opened using the default system viewer.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.DocumentInfo">
            <summary>
            Gets or sets the document info.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Range">
            <summary>
            Gets or sets the range of pages to be exported.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.MaxPageNumber">
            <summary>
            Gets or sets the maximum number of pages in the exported document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ImageOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.ImageOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.ImageOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ImageOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.ImageOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.EmfOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.EmfOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.EmfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.EmfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.EmfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.EmfOptionsForm.MetafileType">
            <summary>
            Gets or sets the type of metafile this <see cref="T:C1.Win.C1Document.Export.MetafileFilter"/> will generate.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.HtmlOptionsForm">
            <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.Win.C1Document.Export.HtmlFilter"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.HtmlOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.HtmlOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.HtmlOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.HtmlOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.HtmlOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.Paged">
            <summary>
            Specifies whether the filter should produce a continuous 
            report into a single HTML file or a paged report into a set of HTML files.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.PagedEnabled">
            <summary>
            Specifies whether the <see cref="P:C1.Win.C1Document.Export.HtmlOptionsForm.Paged"/> is supported.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.ShowNavigator">
            <summary>
            Specifies whether the navigator should be added
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.SingleFile">
            <summary>
            Specifies whether the filter should produce a single file
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.PdfOptionsForm">
            <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.Win.C1Document.Export.PdfFilter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.PdfOptionsFormBase">
            <summary>
            Represents a base form for editing the export options of the pdf exporters.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfOptionsFormBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.PdfOptionsFormBase"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.PdfOptionsFormBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfOptionsFormBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfOptionsFormBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.UseCompression">
            <summary>
            Gets or sets a value indicating whether to use compression.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.UseOutlines">
            <summary>
            Gets or sets a value indicating whether to use outlines.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.PdfACompatible">
            <summary>
            Gets or sets a value indicating whether to PDF/A compatible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether to embed embeddable fonts used in the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityOwnerPassword">
            <summary>
            Gets or sets the owner password.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityUserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.EncryptionType">
            <summary>
            Gets or sets the type of encryption to use for a password-protected PDF document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowPrint">
            <summary>
            Gets or sets a value indicating whether the resulting document can be printed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowCopyContent">
            <summary>
            Gets or sets a value indicating whether the content of the resulting document can be copied.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowEditContent">
            <summary>
            Gets or sets a value indicating whether the content of the resulting document can be edited.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowEditAnnotations">
            <summary>
            Gets or sets a value indicating whether the annotations in the resulting document can be edited.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.PdfOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.PdfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfOptionsForm.Exporter">
            <summary>
            Gets the associated exporter.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.HtmlExportProvider">
            <summary>
            Describes export to HTML format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.HtmlFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.HtmlExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.HtmlFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.HtmlFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "html".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlExportProvider.FormatName">
            <summary>
            Gets a short description of the HTML export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlExportProvider.OptionsFormClass">
            <summary>
            Overriden. Gets the type of form which is used to edit the export options by default.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.HtmlFilter">
            <summary>
            Used to render reports into HTML streams or files.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.HtmlFilter.Paged">
            <summary>
            Specifies whether the filter should produce a continuous 
            report into a single HTML file or a paged report into a set of HTML files.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.HtmlFilter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Indicates whether a range of pages can be exported.
            Returns true for paged export mode, false for non-paged.
            </summary>
            <param name="rangeType">The range type.</param>
            <returns>True for paged export mode, false for non-paged.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.HtmlFilter.ExportProvider">
            <summary>
            Gets <see cref="!:ExportProvider.HtmlExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.ImageExportProvider">
            <summary>
            Describes export to one of image format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.ImageFilter"/>
        </member>
        <member name="T:C1.Win.C1Document.Export.ImageFilter">
            <summary>
            Base class for filters used to render documents into image streams or files.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.MetafileFilter"/>
        </member>
        <member name="T:C1.Win.C1Document.Export.RasterImageExportProvider">
            <summary>
            Describes export to one of image format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.ImageFilter"/>
        </member>
        <member name="P:C1.Win.C1Document.Export.RasterImageExportProvider.OptionsFormClass">
            <summary>
            Overriden. Gets the type of form which is used to edit the export options by default.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.RasterImageFilter">
            <summary>
            Base class for image filters generting raster images like BMP, PNG, TIFF etc.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:C1.Win.C1Document.Export.RasterImageFilter.Resolution" -->
        <member name="T:C1.Win.C1Document.Export.BmpExportProvider">
            <summary>
            Describes export to BMP format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.BmpFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.BmpExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.BmpFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.BmpFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.BmpExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "bmp".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.BmpExportProvider.FormatName">
            <summary>
            Gets a short description of the BMP export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.BmpFilter">
            <summary>
            Used to render documents into BMP streams or files. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.BmpFilter.ExportProvider">
            <summary>
            Gets the <see cref="!:ExportProvider.BmpExportProvider"/>
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.PngExportProvider">
            <summary>
            Describes export to PNG format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.PngFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.PngExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.PngFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.PngFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.PngExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "png".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PngExportProvider.FormatName">
            <summary>
            Gets a short description of the PNG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.PngFilter">
            <summary>
            Used to render documents into PNG streams or files. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PngFilter.ExportProvider">
            <summary>
            Gets the <see cref="!:ExportProvider.PngExportProvider"/>
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.JpegExportProvider">
            <summary>
            Describes export to JPEG format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.JpegFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.JpegExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.JpegFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.JpegFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.JpegExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "jpg".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.JpegExportProvider.FormatName">
            <summary>
            Gets a short description of the JPEG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.JpegFilter">
            <summary>
            Used to render document into JPEG streams or files. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.JpegFilter.ExportProvider">
            <summary>
            Gets the <see cref="!:ExportProvider.JpegExportProvider"/>
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.GifExportProvider">
            <summary>
            Describes export to GIF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.GifFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.GifExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.GifFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.GifFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.GifExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "gif".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.GifExportProvider.FormatName">
            <summary>
            Gets a short description of the GIF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.GifFilter">
            <summary>
            Used to render documents into GIF streams or files. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.GifFilter.ExportProvider">
            <summary>
            Gets the <see cref="!:ExportProvider.GifExportProvider"/>
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.MetafileExportProvider">
            <summary>
            Describes export to EMF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.MetafileFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.MetafileExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.MetafileFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.MetafileFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.MetafileExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "zip".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.MetafileExportProvider.FormatName">
            <summary>
            Gets a short description of the EMF export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.MetafileExportProvider.OptionsFormClass">
            <summary>
            Overriden. Gets the type of form which is used to edit the export options by default.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.MetafileFilter">
            <summary>
            Used with to render documents into compressed metafile files. 
            This filter creates zip files containing one metafile for each report page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.MetafileFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.MetafileFilter"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.MetafileFilter.ExportProvider">
            <summary>
            Gets <see cref="!:ExportProvider.MetafileExportProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.MetafileFilter.MetafileType">
            <summary>
            Gets or sets the type of metafile this <see cref="T:C1.Win.C1Document.Export.MetafileFilter"/> will generate.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.MetafileFilter.ReferenceGraphics">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Graphics"/> object using to obtain device context for created metafiles.
            Can be null, screen DC will be used in this case.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.PdfExportProvider">
            <summary>
            Describes export to PDF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.PdfFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.PdfFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.PdfFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "pdf".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfExportProvider.FormatName">
            <summary>
            Gets a short description of the PDF export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfExportProvider.OptionsFormClass">
            <summary>
            Overriden. Gets the type of form which is used to edit the export options by default.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.PdfFilter">
            <summary>
            Used to render reports into PDF (portable document format) streams or files. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.PdfFilter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            
            </summary>
            <param name="rangeType"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfFilter.EmbedFonts">
            <summary>
            Specifies whether the filter should embed font information into the PDF output.
            </summary>
            <remarks>
            <para>Embedding font information makes the PDF document substantially larger, but it allows the file to be 
            viewed faithfully in systems that don't have all the necessary fonts installed.</para>
            <para>Embedding fonts is not necessary if the target systems have the necessary <b>TrueType</b>
            fonts installed.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfFilter.UseOutlines">
            <summary>
            Specifies whether the PDF output should include an outline tree. 
            </summary>
            <remarks>
            <para>The outline tree is created automatically based on the report groups and 
            can be used to navigate through the report in the Adobe Acrobat viewer.</para>
            <para>Each node in the tree corresponds to a group header section in the report.
            Invisible group header sections do not generate outline entries in the PDF document.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfFilter.PdfACompatible">
            <summary>
            Gets or sets a value indicating whether to generate PDF/A compatible document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfFilter.UseCompression">
            <summary>
            Gets or sets a value indicating whether to use compression.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfFilter.PdfSecurityOptions">
            <summary>
            Gets a <see cref="P:C1.Win.C1Document.Export.PdfFilter.PdfSecurityOptions"/> object that specifies who can use the Pdf document and what actions are allowed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfFilter.ExportProvider">
            <summary>
            Gets <see cref="!:ExportProvider.PdfExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.PdfSecurityOptions">
            <summary>
            Contains options that determine who can use the Pdf document and what actions are allowed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowCopyContent">
            <summary>
            Gets or sets whether the user can copy contents from the Pdf document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowEditAnnotations">
            <summary>
            Gets or sets whether the user can edit annotations in the Pdf document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowEditContent">
            <summary>
            Gets or sets whether the user can edit the contents of the Pdf document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowPrint">
            <summary>
            Gets or sets whether the user can print the Pdf document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.OwnerPassword">
            <summary>
            Gets or sets the password required to change permissions for the Pdf document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.UserPassword">
            <summary>
            Gets or sets the password required to open the Pdf document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.EncryptionType">
            <summary>
            Gets or sets the PDF encription type, by default standart 40 bit.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.RtfExportProvider">
            <summary>
            Describes export to RTF format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.RtfExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.RtfFilter"/> class where <see cref="P:C1.Win.C1Document.Export.RtfFilter.OpenXml"/> is false.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.RtfFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "rtf".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfExportProvider.FormatName">
            <summary>
            Gets a short description of the RTF export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfExportProvider.SupportedDocumentInfoFields">
            <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.Win.C1Document.DocumentInfo"/> class
            are supported by the current export format.
            This implementation returns the combination of
            <b>Author</b>,
            <b>Creator</b>,
            <b>Title</b>,
            <b>Operator</b>,
            <b>Subject</b>,
            <b>Keywords</b>,
            <b>CreationTime</b>,
            <b>RevisionTime</b>,
            <b>Manager</b>,
            <b>Company</b> and
            <b>Comment</b>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.DocxExportProvider">
            <summary>
            Describes export to DOCX format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.DocxExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.RtfFilter"/> class where <see cref="P:C1.Win.C1Document.Export.RtfFilter.OpenXml"/> is true.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.RtfFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.DocxExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "docx".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.DocxExportProvider.FormatName">
            <summary>
            Gets a short description of the RTF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.RtfFilter">
            <summary>
            Used to export documents into RTF streams or files. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.StructureFilter">
            <summary>
            Abstract base class for XLS and RTF filters.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfFilter.Paged">
            <summary>
            Specifies whether the filter preserve page layout of original report
            or should generate continuous  document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfFilter.OpenXml">
            <summary>
            Gets or sets whether to export the file using the OpenXml format used by Microsoft Word 2007 and later.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfFilter.ShapesWord2007Compatible">
            <summary>
            Gets or sets a value indicating whether when saving to DOCX, Word 2007 compatible shapes format
            should be used.
            If set to false, newer Word 2010 shapes format is used, which supports more features but may yield documents
            that are incompatible with Word 2007 and are very slow when opened in MS Word.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfFilter.ExportProvider">
            <summary>
            Gets <see cref="!:ExportProvider.RtfExportProvider"/> or <see cref="!:ExportProvider.DocxExportProvider"/>
            depending on <see cref="P:C1.Win.C1Document.Export.RtfFilter.OpenXml"/> property.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.RasterImageOptionsForm">
            <summary>
            Base class for forms used to edit options of image exporters.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.RasterImageOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.RasterImageOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.RasterImageOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.RasterImageOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.RasterImageOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RasterImageOptionsForm.Resolution">
            <summary>
            Gets or sets the resolution of the TIFF document, in dots per inch. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.RtfOptionsForm">
            <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.Win.C1Document.Export.HtmlFilter"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.RtfOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.HtmlOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.RtfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.RtfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.RtfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfOptionsForm.Paged">
            <summary>
            Specifies whether the filter should produce a continuous 
            report into a single HTML file or a paged report into a set of HTML files.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.RtfOptionsForm.OpenXmlDocument">
            <summary>
            Gets or sets whether to export the file using the OpenXml format used by Microsoft Word 2007 and later.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.TiffOptionsForm">
            <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.Win.C1Document.Export.TiffFilter"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.TiffOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.TiffOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.TiffOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.TiffOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.TiffOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.TiffOptionsForm.Monochrome">
            <summary>
            Gets or sets whether the TIFF document should be saved in monochrome format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.XlsOptionsForm">
            <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.Win.C1Document.Export.XlsFilter"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.XlsOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.HtmlOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.XlsOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.XlsOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.XlsOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsOptionsForm.PictureLayer">
            <summary>
            Gets or sets whether to export using separated picture layer.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsOptionsForm.Tolerance">
            <summary>
            Gets or sets the tolerance (in points) when auto-detecting the
            boundaries of rows and columns in the document. The smaller this
            amount, the greater the number of narrow rows and columns created
            for precise positioning of data.
            </summary>
            <value>The tolerance value.</value>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsOptionsForm.OpenXmlDocument">
            <summary>
            Gets or sets whether to export the file using the OpenXml format used by Microsoft Word 2007 and later.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm">
            <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.Win.C1Document.Export.PdfFilter"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.ServerSide">
            <summary>
            Gets or sets a value indicating whether export is performed on server.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.Exporter">
            <summary>
            Gets the associated exporter.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.TiffExportProvider">
            <summary>
            Describes export to TIFF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.TiffFilter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.TiffExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.TiffFilter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.TiffFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.TiffExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "tiff".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.TiffExportProvider.FormatName">
            <summary>
            Gets a short description of the TIFF export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.TiffExportProvider.OptionsFormClass">
            <summary>
            Overriden. Gets the type of form which is used to edit the export options by default.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.TiffFilter">
            <summary>
            Used to render documents into TIFF streams or files. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.TiffFilter.ExportProvider">
            <summary>
            Gets the <see cref="!:ExportProvider.TiffExportProvider"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.TiffFilter.Monochrome">
            <summary>
            Gets or sets whether the TIFF document should be saved in monochrome format.
            </summary>
            <remarks>
            <para>The default value for this property is true, which results in much smaller documents that are compatible
            with fax machines (the compression used is CompressionCCITT4).</para>
            <para>Set this property to false to generate color documents which use LZW compression but are substantially 
            larger than monochrome documents (often 100 times larger using the same resolution).</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1Document.Export.XlsExportProvider">
            <summary>
            Describes export to XLS format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.XlsExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.XlsFilter"/> class where <see cref="P:C1.Win.C1Document.Export.XlsFilter.OpenXml"/> is false.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.XlsFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xls".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsExportProvider.FormatName">
            <summary>
            Gets a short description of the HTML export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsExportProvider.SupportedDocumentInfoFields">
            <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.Win.C1Document.DocumentInfo"/> class
            are supported by the current export format.
            This implementation returns <b>Author</b>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.XlsxExportProvider">
            <summary>
            Describes export to the Open XML XLSX format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.XlsxExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.XlsFilter"/> class where <see cref="P:C1.Win.C1Document.Export.XlsFilter.OpenXml"/> is true.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.XlsFilter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsxExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xlsx".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsxExportProvider.FormatName">
            <summary>
            Gets a short description of XLSX export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.XlsFilter">
            <summary>
            Used to export reports to XLS streams or files. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsFilter.SheetName">
            <summary>
            Gets or sets the name of the worksheet to be used when saving the report into the Excel workbook file.
            </summary>
            <remarks>
            You can use this property to save multiple reports into a single Excel workbook file, one on each sheet.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsFilter.OpenXml">
            <summary>
            Gets or sets whether to export the file using the OpenXml format used by Microsoft Excel 2007 and later.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsFilter.PictureLayer">
            <summary>
            Gets or sets whether to export using separated picture layer.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsFilter.Tolerance">
            <summary>
            Gets or sets the tolerance (in points) when auto-detecting the
            boundaries of rows and columns in the document. The smaller this
            amount, the greater the number of narrow rows and columns created
            for precise positioning of data.
            </summary>
            <value>The tolerance value.</value>
        </member>
        <member name="P:C1.Win.C1Document.Export.XlsFilter.ExportProvider">
            <summary>
            Gets <see cref="!:ExportProvider.XlsExportProvider"/> or <see cref="!:ExportProvider.XlsxExportProvider"/>
            depending on OpenXml property.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.XlsFilter.ObjectField">
            <summary>Fields may contain text, expressions, pictures, or sub reports.</summary>
        </member>
        <member name="T:C1.Win.C1Document.Forms.DocumentInfoForm">
            <summary>
            Represents a <see cref="T:System.Windows.Forms.Form"/> that allows a user to edit <see cref="T:C1.Win.C1Document.DocumentInfo"/>
            associated with a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.SetDocumentInfo(C1.Win.C1Document.DocumentInfo)">
            <summary>
            Copies the data from a <see cref="T:C1.Win.C1Document.DocumentInfo"/> object to properties of the current <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm"/>.
            </summary>
            <param name="documentInfo">The <see cref="T:C1.Win.C1Document.DocumentInfo"/> to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.BuildDocumentInfo">
            <summary>
            Creates a new <see cref="T:C1.Win.C1Document.DocumentInfo"/> object, and copies data
            from the current <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm"/> into that object.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Document.DocumentInfo"/> object containing data from the current form.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.CreateForm(System.Type,System.Type)">
            <summary>
            Creates a new <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm"/> form,
            or form of a type derived from <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm"/>.
            </summary>
            <param name="customType">The custom form type (must be <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm"/> or derived from it).</param>
            <param name="defaultType">The default form type (used if <paramref name="customType"/> is <b>null</b>,
            must be <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm"/> or derived from it).</param>
            <returns>The newly created form.</returns>
        </member>
        <member name="F:C1.Win.C1Document.Forms.DocumentInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Forms.DocumentInfoForm.SupportedFields">
            <summary>
            Gets or sets the combination of <see cref="T:C1.Win.C1Document.DocumentInfoFields"/> identifying <see cref="T:C1.Win.C1Document.DocumentInfo"/> fields supported by this form.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Forms.OutputRangeForm">
            <summary>
            Represents a form that can be used to enter a range of pages.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Forms.OutputRangeForm"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.SetOutputRange(C1.Win.C1Document.OutputRange,System.Nullable{System.Int32})">
            <summary>
            Assigns the output range.
            </summary>
            <param name="range">The range to assign.</param>
            <param name="maxPageNumber">The maximum possible page number.</param>
        </member>
        <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.BuildOutputRange">
            <summary>
            Builds an output range based on the input data.
            </summary>
            <returns>The new range.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.CreateForm(System.Type,System.Type)">
            <summary>
            Creates an instance of the <see cref="T:C1.Win.C1Document.Forms.OutputRangeForm"/> or derived type.
            </summary>
            <param name="customType">Custom form type or <b>null</b>.</param>
            <param name="defaultType">Default form type.</param>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Forms.OutputRangeForm"/>.</returns>
        </member>
        <member name="F:C1.Win.C1Document.Forms.OutputRangeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowAll">
            <summary>
            Gets or sets a value indicating whether the "allow all pages" option is available.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowPageRange">
            <summary>
            Gets or sets a value indicating whether the "page range" option is available.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowPageList">
            <summary>
            Gets or sets a value indicating whether the "page list" option is available.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowInverted">
            <summary>
            Gets or sets a value indicating whether the "inverted list" option is available.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageColumn">
            <summary>
            Represents the properties of a page column.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageColumn.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageColumn"/> class.
            </summary>
            <param name="width">A double value representing the <see cref="P:C1.Win.C1Document.PageColumn.Width"/> of the current column.</param>
            <param name="spacing">A double value representing the <see cref="P:C1.Win.C1Document.PageColumn.Spacing"/> of the current column.</param>
        </member>
        <member name="P:C1.Win.C1Document.PageColumn.Width">
            <summary>
            Gets the width of the current column.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageColumn.Spacing">
            <summary>
            Gets the spacing between the current and next columns.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageColumnCollection">
            <summary>
            Collection of <see cref="T:C1.Win.C1Document.PageColumn"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageLayout">
            <summary>
            Represents the page layout of a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageLayout"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageLayout.#ctor(C1.Win.C1Document.C1PageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageLayout"/> class.
            </summary>
            <param name="pageSettings">The page settings to use.</param>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.PageLayout"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Owner">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.IDocumentObjectOwner"/> object owning current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.PageHeader">
            <summary>
            Gets or sets the page header associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.PageFooter">
            <summary>
            Gets or sets the page footer associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Watermark">
            <summary>
            Gets or sets the watermark associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> object associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.HasColumns">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.Win.C1Document.PageLayout.Columns"/> collection
            on the current page layout has been initialized and is not empty.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Columns">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1Document.PageColumn"/> objects associated with the current page layout.
            Note that accessing this property initializes the collection of column definitions
            if it has not been initialized yet.
            Use <see cref="P:C1.Win.C1Document.PageLayout.HasColumns"/> to test whether any columns have been defined on this layout.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageLayoutKindEnum">
            <summary>
            Identifies the set of pages to which a page layout is applied in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.Default">
            <summary>
            The current page layout is the default for a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.FirstPage">
            <summary>
            The current page layout is to be used for the first page of a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.LastPage">
            <summary>
            The current page layout is to be used for the last page of a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.EvenPages">
            <summary>
            The current page layout is to be used for even pages of a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.OddPages">
            <summary>
            The current page layout is to be used for odd pages of a document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageLayouts">
            <summary>
            Represents the standard page layouts used in a <see cref="T:C1.Win.C1Document.RenderSection"/>
            (such as the default page layout, page layout used for first and last pages,
            and so on).
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageLayouts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageLayouts"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Document">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.PageLayouts"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Owner">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.RenderSection"/> object owning this <see cref="T:C1.Win.C1Document.PageLayouts"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Item(C1.Win.C1Document.PageLayoutKindEnum)">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.PageLayout"/> of the specified <see cref="T:C1.Win.C1Document.PageLayoutKindEnum"/>.
            Returns <b>null</b> if the specified kind of page layout has not been specified
            for the current <see cref="T:C1.Win.C1Document.PageLayouts"/>.
            </summary>
            <param name="kind">The kind of page layout to return.</param>
            <returns>The page layout with specified kind, or <b>null</b> if it does not exist.</returns>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.FirstPage">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for the first page of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.LastPage">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for the last page of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.EvenPages">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for even pages of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.OddPages">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for odd pages of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Default">
            <summary>
            Gets or sets the default <see cref="T:C1.Win.C1Document.PageLayout"/> for the current document.
            The effective page layout for each page is determined by merging this layout
            with all other applicable layouts.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParameterType">
            <summary>
            Specifies the type of a value (e.g. in a <see cref="P:C1.Win.C1Document.Parameter.DataType"/>).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.Boolean">
            <summary>
            The value is Boolean.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.DateTime">
            <summary>
            The value is DateTime.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.Time">
            <summary>
            The value is DateTime.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.Integer">
            <summary>
            The value is Integer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.Float">
            <summary>
            The value is float (internally, such parameters are stored and processed as double values).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.String">
            <summary>
            The value is String.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LabeledValue">
            <summary>
            Represents a value with a label. The label can be used in a UI.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LabeledValue.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LabeledValue"/> class.
            </summary>
            <param name="value">Value represented by the <see cref="T:C1.Win.C1Document.LabeledValue"/> class.</param>
            <param name="label">Label of value.</param>
        </member>
        <member name="P:C1.Win.C1Document.LabeledValue.Value">
            <summary>
            Gets or sets actual value represented by this <see cref="T:C1.Win.C1Document.LabeledValue"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LabeledValue.Label">
            <summary>
            Gets label for the value to display in the UI.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LabeledValues">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.LabeledValue"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LabeledValues.IndexOfValue(System.Object)">
            <summary>
            Searches <see cref="T:C1.Win.C1Document.LabeledValue"/> object with specified value.
            </summary>
            <param name="value">Value of <see cref="T:C1.Win.C1Document.LabeledValue"/> object.</param>
            <returns>Index of searched object or -1 if not found.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Parameter">
            <summary>
            Represents a user-defined parameter.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Parameter.OnPropertyChanged">
            <summary>
            Called when property of <see cref="T:C1.Win.C1Document.Parameter"/> is changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Owner">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.ParameterCollection"/> containing this <see cref="T:C1.Win.C1Document.Parameter"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.DocumentSource">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1DocumentSource"/> owning this <see cref="T:C1.Win.C1Document.Parameter"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Nullable">
            <summary>
            Gets or sets a value indicating whether the value of this parameter can be null.
            Cannot be true if this is a multi-value parameter.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.AllowBlank">
            <summary>
            Gets or sets a value indicating whether the value of this parameter can be an empty string.
            Ignored unless <see cref="P:C1.Win.C1Document.Parameter.DataType"/> is <b>String</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.MultiValue">
            <summary>
            Gets or sets a value indicating whether this parameter can be used to pass multiple values.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Hidden">
            <summary>
            Gets or sets a value indicating whether this parameter should be hidden from user interface.
            (Hidden parameters can be used for programmatic control of subreports, drillthrough reports etc.)
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Prompt">
            <summary>
            Gets or sets the prompt shown to the user when asking to enter a value for the parameter.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.AllowedValues">
            <summary>
            <para>Gets a list of allowed parameter values.</para>
            <para>This can be null, which means that the list of allowed values is not supported.</para>
            <para>This can also be an empty list, which means that the list of allowed values is empty
            (possible if for example the list is filled by a query, and the query returned an empty result).</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Value">
            <summary>
            <para>Gets or sets the parameter value.</para>
            If <see cref="P:C1.Win.C1Document.Parameter.MultiValue"/> is true, the parameter value can be an array,
            in which case all items in that array must have the same type, and cannot be arrays.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.DataType">
            <summary>
            Gets or sets the data type of this parameter.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParameterCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.Parameter"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ParameterCollection.ContainsVisibleParameters">
            <summary>
            Checks whether collection contains parameters visible for end user.
            </summary>
            <returns><b>true</b> if collection contains parameter visible for end user; <b>false</b> otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Document.CornerRadius">
            <summary>
            Defines the corners' radii of a rounded rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CornerRadius.Default">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.CornerRadius"/> structure defining a rectangle with square corners.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.CornerRadius.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.CornerRadius"/> structure.
            </summary>
            <param name="all">The value for all corners.</param>
        </member>
        <member name="M:C1.Win.C1Document.CornerRadius.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.CornerRadius"/> structure.
            </summary>
            <param name="allX">The value for all x radii.</param>
            <param name="allY">The value for all y radii.</param>
        </member>
        <member name="M:C1.Win.C1Document.CornerRadius.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.CornerRadius"/> structure.
            </summary>
            <param name="topLeftX">The value of <see cref="P:C1.Win.C1Document.CornerRadius.TopLeftX"/> property.</param>
            <param name="topLeftY">The value of <see cref="P:C1.Win.C1Document.CornerRadius.TopLeftY"/> property.</param>
            <param name="topRightX">The value of <see cref="P:C1.Win.C1Document.CornerRadius.TopRightX"/> property.</param>
            <param name="topRightY">The value of <see cref="P:C1.Win.C1Document.CornerRadius.TopRightY"/> property.</param>
            <param name="bottomLeftX">The value of <see cref="P:C1.Win.C1Document.CornerRadius.BottomLeftX"/> property.</param>
            <param name="bottomLeftY">The value of <see cref="P:C1.Win.C1Document.CornerRadius.BottomLeftY"/> property.</param>
            <param name="bottomRightX">The value of <see cref="P:C1.Win.C1Document.CornerRadius.BottomRightX"/> property.</param>
            <param name="bottomRightY">The value of <see cref="P:C1.Win.C1Document.CornerRadius.BottomRightY"/> property.</param>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.TopLeftX">
            <summary>
            Gets or sets the x-radius of the upper left corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.TopLeftY">
            <summary>
            Gets or sets the y-radius of the upper left corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.TopRightX">
            <summary>
            Gets or sets the x-radius of the upper right corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.TopRightY">
            <summary>
            Gets or sets the y-radius of the upper right corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.BottomRightX">
            <summary>
            Gets or sets the x-radius of the bottom right corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.BottomRightY">
            <summary>
            Gets or sets the y-radius of the bottom right corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.BottomLeftX">
            <summary>
            Gets or sets the x-radius of the bottom left corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.BottomLeftY">
            <summary>
            Gets or sets the y-radius of the bottom left corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.All">
            <summary>
            Gets or sets a single radius value for all corners.
            Getting this property when different radii have different values returns null.
            Setting this property to null does not have any effect.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CornerRadius.AllX">
            <summary>
            Gets or sets a single X radius value for all corners.
            Getting this property when different X radii have different values returns null.
            Setting this property to null does not have any effect.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:C1.Win.C1Document.CornerRadius.AllY" -->
        <member name="T:C1.Win.C1Document.IBorder">
            <summary>
            Defines border properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorder.Left">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.ILine"/> object defining left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorder.Top">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.ILine"/> object defining top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorder.Right">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.ILine"/> object defining right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorder.Bottom">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.ILine"/> object defining bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorder.CornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.IBorder.CornerRadius"/> structure defining the corners' radii of the rounded border.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Border">
            <summary>
            Represents a border of object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.VisualPrimitive">
            <summary>
            Abstract base class for classes representing various complex visual properties like
            <see cref="T:C1.Win.C1Document.Line"/>, <see cref="T:C1.Win.C1Document.Border"/> etc.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.IC1Serializable">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.VisualPrimitive.CreateSame">
            <summary>
            Creates an object of the same type as the current object.
            </summary>
            <returns>The created object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.VisualPrimitive.OnPropertyChanged(System.String)">
            <summary>
            Fires <see cref="E:C1.Win.C1Document.VisualPrimitive.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">the name of the property that changed.</param>
        </member>
        <member name="M:C1.Win.C1Document.VisualPrimitive.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>Returns the created copy.</returns>
        </member>
        <member name="M:C1.Win.C1Document.VisualPrimitive.AssignFrom(C1.Win.C1Document.VisualPrimitive)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.VisualPrimitive"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.VisualPrimitive.Compare(C1.Win.C1Document.VisualPrimitive)">
            <summary>
            Compares this <see cref="T:C1.Win.C1Document.VisualPrimitive"/> object with another <see cref="T:C1.Win.C1Document.VisualPrimitive"/> object
            returns <b>true</b> if objects represent same object.
            </summary>
            <param name="v">The <see cref="T:C1.Win.C1Document.VisualPrimitive"/> object to compare with.</param>
            <returns>Returns <b>true</b> if two objects are same.</returns>
        </member>
        <member name="M:C1.Win.C1Document.VisualPrimitive.Compare(C1.Win.C1Document.VisualPrimitive,C1.Win.C1Document.VisualPrimitive)">
            <summary>
            Compares two <see cref="T:C1.Win.C1Document.VisualPrimitive"/> objects and returns <b>true</b> if 
            objects represent same line.
            </summary>
            <param name="x">One <see cref="T:C1.Win.C1Document.VisualPrimitive"/> object.</param>
            <param name="y">Second <see cref="T:C1.Win.C1Document.VisualPrimitive"/> object.</param>
            <returns>Returns <b>true</b> if objects are same, <b>false</b> otherwise. Returns <b>true</b> if both objects are null.</returns>
        </member>
        <member name="E:C1.Win.C1Document.VisualPrimitive.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1PropsTable`1">
            <summary>
            For internal use.
            Helper class used by the another classes to implement <see cref="T:C1.Win.C1Document.Serialization.IC1Serializable"/> interface.
            </summary>
            <typeparam name="T">Type supporting <see cref="T:C1.Win.C1Document.Serialization.IC1Serializable"/> interface.</typeparam>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.IC1PropsTable">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Border"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Border.#ctor(System.Double,System.Drawing.Color,C1.Win.C1Document.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Border"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Border.AssignFrom(C1.Win.C1Document.VisualPrimitive)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.Border"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.Border.Compare(C1.Win.C1Document.VisualPrimitive)">
            <summary>
            Compares this <see cref="T:C1.Win.C1Document.Border"/> object with another <see cref="T:C1.Win.C1Document.Border"/> object
            returns <b>true</b> if objects represent same border.
            </summary>
            <param name="v">The <see cref="T:C1.Win.C1Document.Border"/> object to compare with.</param>
            <returns>Returns <b>true</b> if two border objects represent same border.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Border.CornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.Border.CornerRadius"/> structure defining the corners' radii of the rounded border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Border.Left">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Line"/> object defining left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Border.Top">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Line"/> object defining top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Border.Right">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Line"/> object defining right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Border.Bottom">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Line"/> object defining bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Border.Style">
            <summary>
            Gets or sets the style of all sides of the border.
            If different sides of the border have different styles, gets null.
            Setting this property to null does not have any effect.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Border.Width">
            <summary>
            Gets or sets the width of all sides of the border.
            If different sides of the border have different widths, gets null.
            Setting this property to null does not have any effect.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Border.Color">
            <summary>
            Gets or sets the color of all sides of the border.
            If different sides of the border have different colors, gets Color.Empty.
            Setting this property to null does not have any effect.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IImageAlign">
            <summary>
            Defines image alignment properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.AlignVert">
            <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.StretchHorz">
            <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.StretchVert">
            <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.TileHorz">
            <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.TileVert">
            <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.BestFit">
            <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ImageAlign">
            <summary>
            Represents the alignment of an image within its container.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ImageAlign.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ImageAlign"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ImageAlign.#ctor(C1.Win.C1Document.ImageAlignHorzEnum,C1.Win.C1Document.ImageAlignVertEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ImageAlign"/> class.
            </summary>
            <param name="alignHorz">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.AlignHorz"/>.</param>
            <param name="alignVert">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.AlignVert"/>.</param>
            <param name="stretchHorz">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/>.</param>
            <param name="stretchVert">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/>.</param>
            <param name="keepAspectRatio">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/>.</param>
            <param name="tileHorz">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.TileHorz"/>.</param>
            <param name="tileVert">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.TileVert"/>.</param>
        </member>
        <member name="M:C1.Win.C1Document.ImageAlign.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:C1.Win.C1Document.ImageAlign"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:C1.Win.C1Document.ImageAlign"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.AlignVert">
            <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.StretchHorz">
            <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.StretchVert">
            <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            Used when <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/> or <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.TileHorz">
            <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            Ignored if <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.TileVert">
            <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            Ignored if <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.BestFit">
            <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            See <b>remarks</b> for details.
            </summary>
            <remarks>
            <para>
            Getting this property returns a Boolean conjunction (<b>AND</b>) of the
            <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/>, <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> and <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/> values.
            </para>
            <para>
            Setting this property to a <b>true</b> value sets
            <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/>, <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> and <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/> to <b>true</b>.
            </para>
            <para>
            Setting this property to a <b>false</b> value sets
            <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/> only to <b>false</b>.
            </para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1Document.DashStyle">
            <summary>
            Defines the dash style of a line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DashStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DashStyle.Solid">
            <summary>
            Solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DashStyle.Dash">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DashStyle.Dot">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DashStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DashStyle.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ILine">
            <summary>
            Defines the properties of a line.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ILine.Style">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ILine.Width">
            <summary>
            Gets or sets the line width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ILine.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Line">
            <summary>
            Represents a line in <see cref="T:C1.Win.C1Document.C1Document"/> and <see cref="!:C1FlexReport"/>.
            This class is used to specifiy borders in the <see cref="T:C1.Win.C1Document.Border"/> class,
            line style used by shapes, and so on.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Line"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Line.#ctor(System.Double,System.Drawing.Color,C1.Win.C1Document.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Line"/> class.
            </summary>
            <param name="width">The value of <see cref="P:C1.Win.C1Document.Line.Width"/> property.</param>
            <param name="color">The value of <see cref="P:C1.Win.C1Document.Line.Color"/> property.</param>
            <param name="style">The value of <see cref="P:C1.Win.C1Document.Line.Style"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.Line.AssignFrom(C1.Win.C1Document.VisualPrimitive)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.Line"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.Line.Compare(C1.Win.C1Document.VisualPrimitive)">
            <summary>
            Compares this <see cref="T:C1.Win.C1Document.Line"/> object with another <see cref="T:C1.Win.C1Document.Line"/> object
            returns <b>true</b> if objects represent same border.
            </summary>
            <param name="v">The <see cref="T:C1.Win.C1Document.Line"/> object to compare with.</param>
            <returns>Returns <b>true</b> if two Line objects represent same line.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Line.Style">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Line.Width">
            <summary>
            Gets or sets the line width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Line.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Line.ActualWidth">
            <summary>
            Gets the actual width of the line.
            Unlike the <see cref="P:C1.Win.C1Document.Line.Width"/> property, this returns 0
            if <see cref="P:C1.Win.C1Document.Line.Style"/> is <see cref="F:C1.Win.C1Document.DashStyle.None"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DXPrintManager">
            <summary>
            For internal use.
            Implements printing via C1DXGraphics using D2D printing services.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1PrintManager">
            <summary>
            For internal use.
            Provides printing services.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PrintManager.Print">
            <summary>
            Prints the <see cref="P:C1.Win.C1Document.C1PrintManager.DocumentSource"/> with the specified printer settings.
            This method can throw exceptions if some error occurs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PrintManager.DocumentSource">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> that to print.
            <see cref="T:C1.Win.C1Document.C1PrintManager"/> assumes that this <see cref="T:C1.Win.C1Document.C1DocumentSource"/> already in Printing state, i.e. its BusyState == Printing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PrintManager.Options">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PrintOptions"/> object defining the print parameters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1MetafilePrintManager">
            <summary>
            For internal use.
            Implements printing via C1GdiGraphics using standart <see cref="T:System.Drawing.Printing.PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.LayoutPage(System.Drawing.Image,System.Drawing.Printing.PageSettings,C1.Win.C1Document.UnitTypeEnum,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
            <summary>
            Layouts a page represented by an <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="page">The image of the page to layout.</param>
            <param name="pageSettings">The page settings to use.</param>
            <param name="units">Target units.</param>
            <param name="pageSize">OUT: Page size.</param>
            <param name="content">OUT: Content rectangle.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.RotateSize(System.Drawing.SizeF)">
            <summary>
            Swaps the width and height of a <see cref="T:System.Drawing.Size"/> structure (rotates 90 degrees).
            </summary>
            <param name="s">The <see cref="T:System.Drawing.Size"/> to rotate.</param>
            <returns>The newly created <see cref="T:System.Drawing.Size"/> with width and height swapped.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.RotatePaper(System.Int32,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
            <summary>
            Rotates a paper size and the printable area within it by the specified angle.
            </summary>
            <param name="angle">The rotation angle, counterclockwise (valid values are <b>90</b> and <b>270</b>).</param>
            <param name="paperSize">The paper size.</param>
            <param name="printableArea">The printable area.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.PaperRotationAngle(System.Int32)">
            <summary>
            Returns the paper rotation angle.
            </summary>
            <param name="pageRotationAngle">The page rotation angle, in degrees.</param>
            <returns>The paper rotation angle, in degrees.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.ShouldRotate(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Tests whether a page should be rotated to better fit paper.
            </summary>
            <param name="paperSize">The paper size.</param>
            <param name="pageSize">The page size.</param>
            <returns><b>true</b> if the page should be rotated, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.CenterRect(System.Drawing.SizeF,System.Drawing.RectangleF)">
            <summary>
            Creates a <see cref="T:System.Drawing.RectangleF"/> with a specified size, centered within another rectangle.
            </summary>
            <param name="inner">The <see cref="T:System.Drawing.SizeF"/> of the rectangle that must be centered within <paramref name="outer"/>.</param>
            <param name="outer">The outer <see cref="T:System.Drawing.RectangleF"/> within which to center the new rectangle.</param>
            <returns>The newly created and centered <see cref="T:System.Drawing.RectangleF"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.ZoomSize(System.Drawing.SizeF,System.Double)">
            <summary>
            Zooms (scales) a <see cref="T:System.Drawing.SizeF"/> by a specified zoom factor.
            </summary>
            <param name="s">The <see cref="T:System.Drawing.SizeF"/> to zoom.</param>
            <param name="zoomFactor">The zoom factor.</param>
            <returns>The scaled <see cref="T:System.Drawing.SizeF"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.ZoomRect(System.Drawing.RectangleF,System.Double)">
            <summary>
            Zooms (scales) a <see cref="T:System.Drawing.RectangleF"/> by a specified zoom factor.
            </summary>
            <param name="r">The <see cref="T:System.Drawing.RectangleF"/> to zoom.</param>
            <param name="zoomFactor">The zoom factor.</param>
            <returns>The scaled <see cref="T:System.Drawing.RectangleF"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1MetafilePrintManager.LayoutPrintPage(System.Drawing.SizeF,System.Drawing.RectangleF,System.Int32,System.Drawing.SizeF,System.Drawing.RectangleF,C1.Win.C1Document.C1PrintOptions,System.Drawing.PointF@,System.Double@,System.Boolean@)">
            <summary>
            Calculates the page zoom factor and the location of the page (top/left)
            inside the printer paper size, according to the specified page scaling
            mode. All sizes should be in the same units.
            </summary>
            <param name="paperSize">Printer paper size.</param>
            <param name="printableArea">Printable area (depends on the printer).</param>
            <param name="landscapeAngle">Landscape angle supported by the printer (90 or 270).</param>
            <param name="pageSize">Document page size.</param>
            <param name="pageContent">Page content rectangle (pageSize sans the margins).</param>
            <param name="printOptions">Print options to use.</param>
            <param name="pageLocation">OUT: Page location relative to the paper top left.</param>
            <param name="pageZoom">OUT: Page zoom factor.</param>
            <param name="rotate">OUT: whether the page should be rotated
            (the angle is opposite to landscapeAngle).</param>
        </member>
        <member name="T:C1.Win.C1Document.PageScaling">
            <summary>
            Specifies the way pages are scaled during printing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageScaling.None">
            <summary>
            Pages are not scaled.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageScaling.FitToPaper">
            <summary>
            Pages are enlarged or made smaller if needed to fit paper.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageScaling.ReduceToPaper">
            <summary>
            Pages are made smaller if needed to fit paper.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1PrintOptions">
            <summary>
            Describes options controlling how a document's content is to be printed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PrintOptions.AssignFrom(C1.Win.C1Document.C1PrintOptions)">
            <summary>
            Copies properties from another object into this object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1PrintOptions.PrinterSettings">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.C1PrintOptions.PrinterSettings"/> object defining the print parameters,
            can be null to use default printer settings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PrintOptions.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> object defining the page settings, size, landscape etc,
            can be null in this case the <see cref="P:C1.Win.C1Document.C1DocumentSource.PageSettings"/> will be used.
            This property does not force C1DocumentSource to repaginate, it affects only
            the printer's paper size, the document's pages will be scaled to fit.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PrintOptions.PrintJobName">
            <summary>
            Gets or sets the name for the print job.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderContainerFragment">
            <summary>
            Base class for all container fragments.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderFragment">
            <summary>
            Represents fragment of the <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject"/> on the page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.#ctor(C1.Win.C1Document.RenderObject)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.RenderFragment"/> class.
            </summary>
            <param name="renderObject">The <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject"/> producing this <see cref="T:C1.Win.C1Document.RenderFragment"/> object.</param>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.BuildDrawParams(C1.Win.C1Document.Util.C1Graphics,C1.Win.C1Document.FragmentDrawParams@)">
            <summary>
            Calculates fields of <see cref="T:C1.Win.C1Document.FragmentDrawParams"/> on the base of Bounds, ParentBounds etc.
            </summary>
            <param name="graphics"></param>
            <param name="fdp"></param>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.ToPagePosition(C1.Win.Interop.Point)">
            <summary>
            Converts point specified relative to top-left corner of the parent fragment
            to page coordinates.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.CalcHitTest(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.HitTestInfo,C1.Win.Interop.Point,C1.Win.Interop.Rect,System.Double,System.Double)">
            <summary>
            Calculates information about specific page point.
            </summary>
            <param name="tmc">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> interface which can be used in text processing.</param>
            <param name="hti">Hit test info.</param>
            <param name="ptPage">Coordinates of the point to test, specified relative to the page top left corner containing this <see cref="T:C1.Win.C1Document.RenderFragment"/>, in C1Document.DefaultUnit units.</param>
            <param name="clipRectPage"></param>
            <param name="xOffs"></param>
            <param name="yOffs"></param>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.DrawContentStart(C1.Win.C1Document.Util.C1Graphics,C1.Win.C1Document.FragmentDrawParams@)">
            <summary>
            Draws background of the object.
            </summary>
            <param name="graphics"></param>
            <param name="fdp"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.CreateSame">
            <summary>
            Creates a new instance of the same class as this one.
            </summary>
            <returns>The newly created clone.</returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.AssignFrom(C1.Win.C1Document.RenderFragment)">
            <summary>
            Assigns all from another <see cref="T:C1.Win.C1Document.RenderFragment"/> object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.Draw(C1.Win.C1Document.Util.C1Graphics,C1.Win.Interop.Rect,System.Nullable{C1.Win.Interop.Rect},C1.Win.C1Document.IC1HighlightingManager)">
            <summary>
            Draw fragments in specified position, visibilityRectPx defines the visible rectangle,
            only fragments which intersect with it should be drawn.
            All positions specified in pixels of graphics.
            </summary>
            <param name="graphics"></param>
            <param name="boundsPx"></param>
            <param name="visibilityRectPx"></param>
            <param name="highlightingManager"></param>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.GetTopLeftChildrenOffsetRelativeToPage">
            <summary>
            Returns offset of the fragment's client area relative to the page's top-left corner.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.HasChildFragments">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.RenderFragment"/> object
            contains child <see cref="T:C1.Win.C1Document.RenderFragment"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.ChildFragments">
            <summary>
            Gets a collection of children <see cref="T:C1.Win.C1Document.RenderFragment"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.ParentFragment">
            <summary>
            Gets the parent <see cref="T:C1.Win.C1Document.RenderFragment"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.RenderObject">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject"/> producing this fragment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.Document">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Document"/> referenced by the <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject"/> of this <see cref="T:C1.Win.C1Document.RenderFragment"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.Page">
            <summary>
            Get the <see cref="T:C1.Win.C1Document.C1Page"/> object containing this fragment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.Bounds">
            <summary>
            Gets or sets bounds of the <see cref="T:C1.Win.C1Document.RenderFragment"/> on page or parent.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.BackgroundOffset">
            <summary>
            Gets or sets the <see cref="T:C1.Win.Interop.Thickness"/> structure defining the drawing offset
            for background it is used if background is "complex" gradient, image etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.ContentOffset">
            <summary>
            Gets or sets the <see cref="T:C1.Win.Interop.Thickness"/> structure defining the drawing offset
            for content.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderContainerFragment.HasChildren">
            <summary>
            Gets a value indicating whether <see cref="T:C1.Win.C1Document.RenderContainerFragment"/> contains child fragments.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderContainerFragment.Children">
            <summary>
            Gets a collection of children fragments.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IC1TextFragment">
            <summary>
            This interface should be implmented by the render fragments which support
            text operations like searching, highlighting etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IC1TextFragment.GetNearestTextPosition(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.Interop.Point,System.Double,System.Double)">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> defining text position within a fragment
            which is nearest to the specified point.
            </summary>
            <param name="tmc">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> interface which can be used in text processing.</param>
            <param name="ptPage">The position relative to the top-left corner of the page.</param>
            <param name="xOffs">The horizontal offset of the parent fragment from the left edge of the page.</param>
            <param name="yOffs">The vertical offset of the parent fragment from the top edge of the page.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining position within fragment or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.IC1TextFragment.FindText(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.C1FindTextParams,C1.Win.C1Document.FindTextCallback)">
            <summary>
            Searches a text within fragment and enumerates all found text blocks.
            Returns an object identifiing the found text blocks, this object will be passed later
            to the fragment to highlight found text.
            </summary>
            <param name="tmc">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> interface which can be used in text processing.</param>
            <param name="findTextParams">The find params.</param>
            <param name="callback">The callback method which should be called for each found text block.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.IC1TextFragment.GetDocumentRange(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
            <summary>
            Returns the <see cref="T:C1.Win.C1Document.C1DocumentRange"/> corresponding to the document range between
            <paramref name="start"/> and <paramref name="end"/>.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.IC1TextFragment.GetWordDocumentRange(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.Util.IC1TextMeasurementContext)">
            <summary>
            Returns the <see cref="T:C1.Win.C1Document.C1DocumentRange"/> corresponding to word pointed by the <paramref name="position"/>.
            </summary>
            <param name="position"></param>
            <param name="tmc"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.IC1TextFragment.SelectAllText(C1.Win.C1Document.Util.IC1TextSelectionBuilder)">
            <summary>
            Called when whole fragment within selection bounds and all its text should be selected.
            </summary>
            <param name="selectionBuilder">The <see cref="T:C1.Win.C1Document.Util.IC1TextSelectionBuilder"/> interface which should be used to return results.</param>
        </member>
        <member name="M:C1.Win.C1Document.IC1TextFragment.SelectText(C1.Win.C1Document.Util.IC1TextSelectionBuilder)">
            <summary>
            Called when part of fragment intersects with selection.
            </summary>
            <param name="selectionBuilder">The <see cref="T:C1.Win.C1Document.Util.IC1TextSelectionBuilder"/> interface which should be used to return results.</param>
        </member>
        <member name="P:C1.Win.C1Document.IC1TextFragment.Fragment">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.RenderFragment"/> implementing this <see cref="T:C1.Win.C1Document.IC1TextFragment"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FoundPosition">
            <summary>
            Represents a position in a document where a text was found.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetPage">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1Page"/> object where find position located.
            </summary>
            <returns><see cref="T:C1.Win.C1Document.C1Page"/> object where find position located.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetStart">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining start of searched text.
            </summary>
            <returns><see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining start of searched text.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetEnd">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining end of searched text.
            </summary>
            <returns><see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining end of searched text.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetFragmentRange(C1.Win.C1Document.RenderFragment)">
            <summary>
            Returns the object defining the part of <paramref name="fragment"/> belongs to this <see cref="T:C1.Win.C1Document.C1FoundPosition"/>.
            The type of object depends on type of <paramref name="fragment"/>, for example,
            <see cref="T:C1.Win.C1Document.RenderTextFragment"/> descendats return <see cref="T:C1.Win.C1Document.C1TextBlockRange"/> object.
            </summary>
            <param name="fragment"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetBounds">
            <summary>
            Returns the bounds of this <see cref="T:C1.Win.C1Document.C1FoundPosition"/> on the page,
            rectangle calculated on the base of <see cref="P:C1.Win.C1Document.C1DocumentTextPosition.PageCoords"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.C1FoundPosition.NearText">
            <summary>
            Gets the text near the found position.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FoundPosition.PositionInNearText">
            <summary>
            Gets the zero-based position of the found string in <see cref="P:C1.Win.C1Document.C1FoundPosition.NearText"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1TextFragmentTextPosition">
            <summary>
            Defines the position within <see cref="T:C1.Win.C1Document.C1Document"/> via fragment supporting
            <see cref="T:C1.Win.C1Document.IC1TextFragment"/> interface and text position within fragment.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1TextFragmentTextPosition.#ctor(C1.Win.C1Document.IC1TextFragment,System.Int32,System.Int32,C1.Win.C1Document.C1CaretCoords,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1TextFragmentTextPosition"/> class.
            </summary>
            <param name="textFragment"><see cref="T:C1.Win.C1Document.IC1TextFragment"/> contained text position.</param>
            <param name="textPosition">The text position within text fragment, zero based.</param>
            <param name="length">The length of text block pointed by the <paramref name="textPosition"/>.</param>
            <param name="pageCoords">The coordinates of text position relative to the top-left corner of the fragment's page.</param>
            <param name="isTraling">Indicates whether the document position is <b>after</b> text position specified by <paramref name="textPosition"/>.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1TextFragmentTextPosition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:C1.Win.C1Document.C1TextFragmentTextPosition"/>.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1TextFragmentTextPosition.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:C1.Win.C1Document.C1TextFragmentTextPosition"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.Win.C1Document.C1TextFragmentTextPosition"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1TextFragmentTextPosition.TextFragment">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.IC1TextFragment"/> object containing text position.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextFragmentTextPosition.TextPosition">
            <summary>
            Get the text position within text fragment object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextFragmentTextPosition.Length">
            <summary>
            Gets the length of text block pointed by the <see cref="P:C1.Win.C1Document.C1TextFragmentTextPosition.TextPosition"/>,
            typically <see cref="P:C1.Win.C1Document.C1TextFragmentTextPosition.Length"/> is <b>1</b> because text block consists of one char, 
            but in some cases one text position can be formed by the two and more characters.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextFragmentTextPosition.IsTraling">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.C1TextFragmentTextPosition"/> object
            points to the place <b>after</b> <see cref="P:C1.Win.C1Document.C1TextFragmentTextPosition.TextPosition"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextFragmentTextPosition.TextIndex">
            <summary>
            Gets the index in the text pointed by this <see cref="T:C1.Win.C1Document.C1TextFragmentTextPosition"/>,
            if <see cref="P:C1.Win.C1Document.C1TextFragmentTextPosition.IsTraling"/> is false then TextIndex equals TextPosition otherwise it
            equals TextPosition + Length.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.RenderBarCodeFragment.TextPosition.#ctor(C1.Win.C1Document.RenderBarCodeFragment,System.Int32,System.Int32,C1.Win.C1Document.C1CaretCoords,System.Boolean,System.Int32,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.RenderBarCodeFragment.TextPosition"/> class.
            </summary>
            <param name="fragment"><see cref="T:C1.Win.C1Document.RenderBarCodeFragment"/> contained text position.</param>
            <param name="textPosition">The text position within text fragment, zero based.</param>
            <param name="length">The length of text block pointed by the <paramref name="textPosition"/>.</param>
            <param name="pageCoords">The coordinates of text position relative to the top-left corner of the fragment's page.</param>
            <param name="isTraling">Indicates whether the document position is <b>after</b> text position specified by <paramref name="textPosition"/>.</param>
            <param name="textFragmentIndex">The index of text fragment in the <see cref="T:C1.Win.C1Document.RenderBarCodeFragment"/></param>
            <param name="textBlocks">The fragments of the text displayed in the <see cref="T:C1.Win.C1Document.RenderBarCodeFragment"/>.</param>
        </member>
        <member name="M:C1.Win.C1Document.RenderBarCodeFragment.TextPosition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:C1.Win.C1Document.RenderBarCodeFragment.TextPosition"/>.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderBarCodeFragment.TextPosition.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:C1.Win.C1Document.RenderBarCodeFragment.TextPosition"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.Win.C1Document.RenderBarCodeFragment.TextPosition"/>.</returns>
        </member>
        <member name="T:C1.Win.C1Document.FindTextCallback">
            <summary>
            Callback method called from <see cref="M:C1.Win.C1Document.IC1TextFragment.FindText(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.C1FindTextParams,C1.Win.C1Document.FindTextCallback)"/>
            for each found text position.
            </summary>
            <param name="start">The position defining start of the found text.</param>
            <param name="end">The position defining end of the found text.</param>
        </member>
        <member name="T:C1.Win.C1Document.FragmentDrawParams">
            <summary>
            Defines properties used during drawing of <see cref="T:C1.Win.C1Document.RenderFragment"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.VisibilityRectPx">
            <summary>
            The visibility rect passed to C1Page.Draw() method.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.HasDrawOffset">
            <summary>
            Indicates whether <see cref="!:RenderFragment.DrawOffset"/> is not empty,
            it means that Borders.BoundsPx should be used as clip rectangle for background.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.DrawingBoundsPx">
            <summary>
            Drawing area of fragment, i.e. Bounds without spacing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.BackgroundBoundsPx">
            <summary>
            Background rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.BackgroundClipRectPx">
            <summary>
            Clipping rectangle for background.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.ContentBoundsPx">
            <summary>
            Content rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.ContentClipRectPx">
            <summary>
            Clipping rectangle for content.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.Borders">
            <summary>
            Parameters of borders.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BorderSide">
            <summary>
            Represents one side of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderSide.Line">
            <summary>
            Defines line style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderSide.WidthPx">
            <summary>
            Contains line width in pixels.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BorderParams">
            <summary>
            Contains information about fragment borders, used in <see cref="T:C1.Win.C1Document.RenderFragment"/> drawing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.BoundsPx">
            <summary>
            Rectangle of borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.CornerRadiusPx">
            <summary>
            Border.CornerRadius converted to pixels.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.RoundBordersClipRegion">
            <summary>
            Clip region used when object has rounded borders,
            should be applied before drawing background or content.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderFragmentCollection">
            <summary>
            Represents collection of the <see cref="T:C1.Win.C1Document.RenderFragment"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.RenderTextFragment.InternalBuildTextLayout(C1.Win.C1Document.Util.C1TextLayout)">
            <summary>
            Initializes the properties of the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object.
            </summary>
            <param name="tl"></param>
        </member>
        <member name="M:C1.Win.C1Document.RenderTextFragment.GetText">
            <summary>
            Gets the text of this <see cref="T:C1.Win.C1Document.RenderTextFragment"/> fragment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderTextFragment.HasText">
            <summary>
            Gets a value indicating whether this fragment has text to display,
            using this method more effective than string.IsNullOrEmpty(GetText()).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderTextFragment.GetNearestTextPosition(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.Interop.Point,System.Double,System.Double)">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> defining text position within a fragment
            which is nearest to the specified point.
            </summary>
            <param name="tmc">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> interface which can be used in text processing.</param>
            <param name="ptPage">The position relative to the top-left corner of the page.</param>
            <param name="xOffs">The horizontal offset of the parent fragment from the left edge of the page.</param>
            <param name="yOffs">The vertical offset of the parent fragment from the top edge of the page.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining position within fragment or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderTextFragment.FindText(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.C1FindTextParams,C1.Win.C1Document.FindTextCallback)">
            <summary>
            Searches a text within fragment and enumerates all found text blocks.
            </summary>
            <param name="tmc">The <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> interface which can be used in text processing.</param>
            <param name="findTextParams">The find params.</param>
            <param name="callback">The callback method called for each found text block.</param>
            <returns>Returns object which can be passed back to the object in Draw() method to highlight found text.</returns>
        </member>
        <member name="P:C1.Win.C1Document.RenderTextFragment.NewParagraph">
            <summary>
            Gets or sets a value indicating whether the first line of this <see cref="T:C1.Win.C1Document.RenderTextFragment"/>
            is a first line of paragraph and <see cref="P:C1.Win.C1Document.Style.TextIndent"/> should be used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderTextFragment.JustifyLastLine">
            <summary>
            Gets or sets a value indicating whether the last line of this <see cref="T:C1.Win.C1Document.RenderTextFragment"/>
            should be justified if <see cref="!:RenderObject.Style.TextAlignHorz"/> is Justify or JustifyChars.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderTextFragment.VerticalLines">
            <summary>
            Gets or sets a value indicating whether the lines of text should go
            from left to right or from right to left.
            This property is used only if <see cref="!:RenderObject.Style.TextAngle"/> specifies not a right angle
            (not 0, 90, 180 or 270).
            <b>Null</b> indicates that direction will be autocalculated on the base of <see cref="!:RenderObject.Style.TextAngle"/> and fragment's size.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderTextFragment.FoundPosition">
            <summary>
            Represents text searched within <see cref="T:C1.Win.C1Document.RenderTextFragment"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderTextFragment.DocumentRange">
            <summary>
            Represents the document range within single <see cref="T:C1.Win.C1Document.RenderTextFragment"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderArea">
            <summary>
            Represents the base class for all simple containers like <see cref="T:C1.Win.C1Document.RenderArea"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderContainer">
            <summary>
            The abstract base class for all render objects containing child render objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderContainer.HasChildren">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.RenderContainer"/> contains child objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderContainer.Children">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.RenderObjectCollection"/> containing child objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BarcodeSizeMode">
            <summary>
            Specifies the various barcode sizing modes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeSizeMode.Normal">
            <summary>
            The size of the barcode image is determined by properties like BarcodeSizeOptions.NarrowBarWidth, BarcodeSizeOptions.NarrowWideRatio etc.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeSizeMode.Scale">
            <summary>
            The barcode image is scaled to fit the <see cref="!:Field"/> area.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BarcodeSizeOptions">
            <summary>
            Specifies the options affecting the size of a barcode, such as the width of narrow bars, 
            narrow to wide bars' ratio etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeSizeOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.BarcodeSizeOptions"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeSizeOptions.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:C1.Win.C1Document.BarcodeSizeOptions"/> to the specified object to determine whether the two are equal.
            </summary>
            <param name="obj">The object to which the current BarcodeSizeOptions is compared.</param>
            <returns>True if the two objects specify the same options, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeSizeOptions.Clone">
            <summary>
            Makes a copy of the current object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeSizeOptions.AssignFrom(C1.BarCode.BarCodeOptionsBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.BarCode.BarCodeOptionsBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeSizeOptions.GetHashCode">
            <summary>
            Calculates and retrieves a hash code based on the current values of specified options.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeSizeOptions.ModuleSize">
            <summary>
            Gets or sets the barcode module size in twips.
            <para>Zero means the default value which is different for different barcode types:</para>
            <list type="bullet">
            <item>15 twips for simple "bar" barcodes.</item>
            <item>75 twips for matrix barcodes (QRCode, DataMatrix).</item>
            <item>45 twips for RSS stacked barcodes (RSSStacked, RSSExpandedStacked).</item>
            <item>45 twips for composite barcodes.</item>
            </list>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeSizeOptions.NarrowWideRatio">
            <summary>
            Gets or sets the ratio between narrow and wide bars.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeSizeOptions.SizeMode">
            <summary>
            Gets or sets the barcode sizing mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeSizeOptions.BarHeight">
            <summary>
            Gets or sets the bar height in twips.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeSizeOptions.SupplementSpacing">
            <summary>
            Gets or sets the spacing between the main and the supplement bacodes in twips.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BarcodeOptions">
            <summary>
            Definies additional barcode options.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeOptions.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:C1.Win.C1Document.BarcodeOptions"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeOptions.AssignFrom(C1.Win.C1Document.BarcodeOptions)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.BarcodeOptions"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeOptions.Clone">
            <summary>
            Creates a clone of the current object.
            </summary>
            <returns>The clone object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.IsVertical">
            <summary>
            True if barcode is vertical (based on rotation value).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.SizeOptions">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.BarcodeSizeOptions"/> object which specifies options affecting the size of the barcode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.CaptionGrouping">
            <summary>
            Gets or sets a value indicating whether to split the caption text into groups for barcode types that support it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.CaptionPosition">
            <summary>
            Gets or sets the vertical position of caption relative to barcode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.CheckSumEnabled">
            <summary>
            Gets or sets a value indicating whether a checksum of the barcode will be computed and included in the barcode when applicable.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.SupplementNumber">
            <summary>
            Gets or sets the supplement for the barcode data, supplement is 2/5 digit for EAN/UPC symbologies.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.TextAlign">
            <summary>
            Gets or sets the caption text alignment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.BarCodeDirection">
            <summary>
            Gets or sets the direction of the barcode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.Code49">
            <summary>
            Gets or sets a <see cref="T:C1.BarCode.Code49Options"/> object specifying additional options for Code49 barcodes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.QRCode">
            <summary>
            Gets or sets a <see cref="T:C1.BarCode.QRCodeOptions"/> object specifying additional options for QR barcodes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.PDF417">
            <summary>
            Gets or sets a <see cref="T:C1.BarCode.PDF417Options"/> object specifying additional options for PDF417 barcodes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.MicroPDF417">
            <summary>
            Gets or sets a <see cref="T:C1.BarCode.MicroPDF417Options"/> object specifying additional options for MicroPDF417 barcodes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.GS1Composite">
            <summary>
            Gets or sets a <see cref="T:C1.BarCode.GS1CompositeOptions"/> object specifying additional options for composite barcodes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.RssExpandedStacked">
            <summary>
            Gets or sets a <see cref="T:C1.BarCode.RssExpandedStackedOptions"/> object specifying additional options for RSS expanded stacked barcodes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.BarcodeOptions.DataMatrix">
            <summary>
            Gets or sets a <see cref="T:C1.BarCode.DataMatrixOptions"/> object specifying additional options for DataMatrix barcodes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderBarCode">
            <summary>
            Represents an barcode in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderBarCode.Text">
            <summary>
            Gets or sets the value that is encoded as the barcode image.
            </summary>
            <remarks>
            <para>Some encodings support alphanumeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="T:C1.Win.C1Document.BarCodeEnum"/> enumeration 
            for details.</para>
            <para>If you use characters that are invalid for the current encoding, the
            object will display a blank image.</para>
            </remarks>
            <example>The following sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Document.RenderBarCode.BarCodeType">
            <summary>
            Gets or sets the type of encoding to use when generating the barcode.
            <para>Note that BarCodeType.None is not a valid value for this property.</para>
            </summary>
            <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.Win.C1Document.RenderBarCode.Text"/> property to generate the barcode image 
            displayed in the object.
            </remarks>
            <example>The following sample shows how to use the BarCodeType property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Document.RenderBarCode.Options">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.BarcodeOptions"/> object defining additional barcode options.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderImage">
            <summary>
            Represents an image in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderImage.Image">
            <summary>
            Gets or sets an image that is
            rendered by the current <see cref="T:C1.Win.C1Document.RenderImage"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderImage.ImageName">
            <summary>
            Gets or sets the name of an image that is 
            rendered by the current <see cref="T:C1.Win.C1Document.RenderImage"/> object.
            When the current object renders, the actual image is retrieved by this name
            from the <see cref="P:C1.Win.C1Document.C1Document.Dictionary"/> of the containing <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BordersSplitMode">
            <summary>
            Specifies how borders are drawn when the object is split between pages.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersSplitMode.None">
            <summary>
            Borders are not drawn where the object is split.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersSplitMode.Square">
            <summary>
            Square borders are drawn where the object is split.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersSplitMode.Round">
            <summary>
            Borders are drawn where the object is split.
            If the border is round, round borders are drawn where the object is split.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderObjectCollection">
            <summary>
            Represents the collection of RenderObject objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraph">
            <summary>
            Represents a paragraph in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderTextBase">
            <summary>
            Represents a text in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraph.HasContent">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.Win.C1Document.RenderParagraph.Content"/> collection
            has been initialized and contains one or more elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraph.Content">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.RenderParagraphObjectCollection"/> collection representing content of this
            <see cref="T:C1.Win.C1Document.RenderParagraph"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraphObject">
            <summary>
            The abstract base class for inline text and images, rendered using a single style,
            in the <see cref="P:C1.Win.C1Document.RenderParagraph.Content"/> of a <see cref="T:C1.Win.C1Document.RenderParagraph"/> object.
            </summary>
            <seealso cref="T:C1.Win.C1Document.RenderParagraphText"/>
            <seealso cref="T:C1.Win.C1Document.RenderParagraphInlineContainer"/>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraphObject.Hyperlink">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> associated with the current paragraph object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraphObject.ToolTip">
            <summary>
            Gets or sets a tooltip associated with this <see cref="T:C1.Win.C1Document.RenderParagraphObject"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraphText">
            <summary>
            Represents a run of text, rendered using a single style,
            in the <see cref="P:C1.Win.C1Document.RenderParagraph.Content"/> of a <see cref="T:C1.Win.C1Document.RenderParagraph"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraphText.Text">
            <summary>
            Gets or sets the text of the current <see cref="T:C1.Win.C1Document.RenderParagraphText"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraphValue">
            <summary>
            Represents a run of formatted text, rendered using a single style,
            in the <see cref="P:C1.Win.C1Document.RenderParagraph.Content"/> of a <see cref="T:C1.Win.C1Document.RenderParagraph"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraphValue.Value">
            <summary>
            Gets or sets a value displayed by this <see cref="T:C1.Win.C1Document.RenderParagraphValue"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraphValue.Format">
            <summary>
            Gets or sets format string used to format <see cref="P:C1.Win.C1Document.RenderParagraphValue.Value"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraphInlineContainer">
            <summary>
            Represents an inline container for <see cref="T:C1.Win.C1Document.RenderObject"/> supporting <see cref="!:IFloater"/> interface.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraphInlineContainer.Content">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.RenderObject"/> providing content for this <see cref="T:C1.Win.C1Document.RenderParagraphInlineContainer"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraphObjectCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.RenderParagraphObject"/> objects,
            <see cref="T:C1.Win.C1Document.RenderParagraphObjectCollection"/> represents a content of the <see cref="T:C1.Win.C1Document.RenderParagraph"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraphObjectCollection.Owner">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.RenderParagraph"/> object containing this object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderPdf">
            <summary>
            Represents a RTF in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderPdf.PdfParser">
            <summary>
            Gets or sets the <b>PDFParser</b>- PDF content represented by the current object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderRtf">
            <summary>
            Represents a RTF in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderRtf.Rtf">
            <summary>
            Gets or sets the <b>RTF</b>-formatted text represented by the current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderRtf.DetectUrls">
            <summary>
            Gets or sets a value indicating whether or not the current <see cref="T:C1.Win.C1Document.RenderRtf"/>
            will automatically format Uniform Resource Locators (URLs) 
            when those are found in text assigned to the <see cref="P:C1.Win.C1Document.RenderRtf.Rtf"/> property.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderSection">
            <summary>
            Represents a part of a document with particular page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderSection.PageLayouts">
            <summary>
            Gets the collection of page layouts used in the <see cref="T:C1.Win.C1Document.RenderSection"/> object.
            In addition to the default layout which is always present, special layouts
            may be defined for first, last, even and odd pages of the document.
            The effective layout for each page is then produced by merging all applicable layouts.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderSectionCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.RenderSection"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderSectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>Returns the element with specified index.</returns>
        </member>
        <member name="P:C1.Win.C1Document.RenderSectionCollection.Item(System.String)">
            <summary>
            Gets the item with specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>Returns the item with specified name or null if not found.</returns>
        </member>
        <member name="T:C1.Win.C1Document.RenderShape">
            <summary>
            Represents a shape in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderShape.ShapeType">
            <summary>
            Gets the type of geometric shape drawn by the current object, returns <b>None</b> if <see cref="P:C1.Win.C1Document.RenderShape.Shape"/> property is null.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderShape.Shape">
            <summary>
            Gets or sets an instance of the <see cref="T:C1.Win.C1Document.ShapeBase"/>-derived class specifying
            properties of the geometric shape drawn by this object.
            </summary>
            <seealso cref="P:C1.Win.C1Document.RenderShape.ShapeType"/>
        </member>
        <member name="T:C1.Win.C1Document.FormatSyntax">
            <summary>
            Defines various syntax of format string used in <see cref="T:C1.Win.C1Document.RenderValue"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderValue">
            <summary>
            Represents a value in a <see cref="T:C1.Win.C1Document.C1Document"/>,
            value converted to text with using <see cref="P:C1.Win.C1Document.RenderValue.Format"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderValue.Value">
            <summary>
            Gets or sets a value displayed by this <see cref="T:C1.Win.C1Document.RenderValue"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderValue.Format">
            <summary>
            Gets or sets format string used to format <see cref="P:C1.Win.C1Document.RenderValue.Value"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderValue.Text">
            <summary>
            Gets a text representing <see cref="P:C1.Win.C1Document.RenderValue.Value"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ShapeType">
            <summary>
            Defines shapes supported by the <see cref="!:Field"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LineSlantEnum">
            <summary>
            Defines how line is drawn within shape.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineSlantEnum.NoLine">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineSlantEnum.NoSlant">
            <summary>
            Render field as a vertical line (if Height > Width) 
            or as a horizontal line (if Width > Height).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineSlantEnum.Down">
            <summary>
            Render field as a line between the left-top 
            and right-bottom corners of the field box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineSlantEnum.Up">
            <summary>
            Render field as a line between the left-bottom 
            and right-top corners of the field box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ShapeBase">
            <summary>
            Abstract base class for shapes rendered by report fields
            (see <see cref="!:Field.ShapeType"/> and <see cref="!:Shape"/>).
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ShapeBase.OnPropertyChanged(System.String)">
            <summary>
            Fires <see cref="E:C1.Win.C1Document.ShapeBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">the name of the property that changed.</param>
        </member>
        <member name="M:C1.Win.C1Document.ShapeBase.CreateShape(C1.Win.C1Document.ShapeType)">
            <summary>
            Creates <see cref="T:C1.Win.C1Document.ShapeBase"/>-derived object appropriate specified <see cref="P:C1.Win.C1Document.ShapeBase.ShapeType"/>.
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.ShapeBase.AssignFrom(C1.Win.C1Document.ShapeBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.ShapeBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.ShapeBase.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.Win.C1Document.ShapeBase"/> object.
            Property <see cref="!:Owner"/> is not copied and value of <see cref="!:Owner"/> property
            is null.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.ShapeBase"/> object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.ShapeBase.ShapeType">
            <summary>
            Gets the type of the current shape.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LineShapeBase">
            <summary>
            Abstract base class for <see cref="T:C1.Win.C1Document.LineShape"/> and <see cref="!:PolygonShape"/> classes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LineShape">
            <summary>
            Represents a line shape in a <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LineShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LineShape"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LineShape.#ctor(C1.Win.C1Document.LineSlantEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LineShape"/> class.
            </summary>
            <param name="lineSlant">The value of <see cref="P:C1.Win.C1Document.LineShape.LineSlant"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.LineShape.AssignFrom(C1.Win.C1Document.ShapeBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.ShapeBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Document.LineShape.ShapeType">
            <summary>
            Overridden. Gets <see cref="!:ShapeType.Line"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LineShape.LineSlant">
            <summary>
            Gets or sets a value specifying how the line should be drawn within the field.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.TriangleShapeBase">
            <summary>
            Abstract base class for <see cref="T:C1.Win.C1Document.IsoscelesTriangleShape"/> and <see cref="T:C1.Win.C1Document.RightTriangleShape"/> types.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IsoscelesTriangleShape">
            <summary>
            Represents an isosceles triangle shape in a <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IsoscelesTriangleShape.ShapeType">
            <summary>
            Overridden. Gets <see cref="!:ShapeType.IsoscelesTriangle"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RightTriangleShape">
            <summary>
            Represents a rectangular triangle shape in a <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RightTriangleShape.ShapeType">
            <summary>
            Overridden. Gets <see cref="!:ShapeType.RightTriangle"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RectangleShape">
            <summary>
            Represents a rectangle shape in a <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RectangleShape.ShapeType">
            <summary>
            Overridden. Gets <see cref="!:ShapeType.Rectangle"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.EllipseShape">
            <summary>
            Represents an ellipse shape in a <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.EllipseShape.ShapeType">
            <summary>
            Overridden. Gets <see cref="!:ShapeType.Ellipse"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.EllipsePartShape">
            <summary>
            Abstract base class for <see cref="T:C1.Win.C1Document.ArcShape"/> and <see cref="T:C1.Win.C1Document.PieShape"/> classes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.EllipsePartShape.AssignFrom(C1.Win.C1Document.ShapeBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.ShapeBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Document.EllipsePartShape.StartAngle">
            <summary>
            Gets or sets the angle, measured in degrees, clockwise from the <b>X</b> axis
            to the first side of the sector defining the current shape.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.EllipsePartShape.SweepAngle">
            <summary>
            Gets or sets the angle, measured in degrees, clockwise from <see cref="P:C1.Win.C1Document.EllipsePartShape.StartAngle"/>
            to the second side of the sector defining the current shape.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ArcShape">
            <summary>
            Represents an arc shape in a <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ArcShape.AssignFrom(C1.Win.C1Document.ShapeBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.ShapeBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Document.ArcShape.ShapeType">
            <summary>
            Overridden. Gets <see cref="!:ShapeType.Arc"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ArcShape.Closed">
            <summary>
            Gets or sets a value indicating whether the current arc should be closed
            (i.e. the start and end points of the arc should be connected by a straight line).
            </summary>
            <remarks>
            The default value of this property is <b>false</b>.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Document.PieShape">
            <summary>
            Represetns a pie shape in a <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PieShape.ShapeType">
            <summary>
            Overridden. Gets <see cref="!:ShapeType.Pie"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.IC1FormatVersionProvider">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.IC1FormatVersionProvider.GetFormatVersion">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1FormatVersion">
            <summary>
            For internal use.
            Defines the version of something.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1FormatVersion.#ctor(System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="formatVersion"></param>
            <param name="minAssemblyVersion"></param>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1FormatVersion.#ctor(System.Version,System.Version)">
            <summary>
            For internal use.
            </summary>
            <param name="formatVersion"></param>
            <param name="assemblyVersion"></param>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1FormatVersion.ToString">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1FormatVersion.Parse(System.String,System.Boolean)">
            <summary>
            For internal use.
            Converts a string to the C1FormatVersion object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="throwException">Indicates the exception should be thrown if string cannot be converted to C1FormatVersion.</param>
            <returns>Returns instance of C1FormatVersion object or null.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1FormatVersion.FormatVersion">
            <summary>
            For internal use.
            Gets the version of C1D document format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1FormatVersion.AssemblyVersion">
            <summary>
            For internal use.
            Gets the AssemblyVersion of C1.C1Preview.2.dll assemly
            that supports this FormatVersion.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.IC1SerializableCollection">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.ReadUnknownObjectDelegate">
            <summary>
            For internal use.
            Used to pass custom method used to read objects which type can not be resolved during deserialization.
            </summary>
            <param name="reader"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1Serializer">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1Serializer.PointToString(C1.Win.Interop.Point)">
            <summary>
            Converts <see cref="T:C1.Win.Interop.Point"/> structure to string used in serializing.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1Serializer.CornerRadiusToString(C1.Win.C1Document.CornerRadius)">
            <summary>
            Converts <see cref="T:C1.Win.C1Document.CornerRadius"/> structure to string used in serializing.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1Serializer.TryCornerRadiusFromString(System.String,C1.Win.C1Document.CornerRadius@)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.C1Document.CornerRadius"/> structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: the created <see cref="T:C1.Win.C1Document.CornerRadius"/> structure.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1Serializer.TryPointFromString(System.String,C1.Win.Interop.Point@)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.Interop.Point"/> structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: the created <see cref="!:Point"/> structure.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1Serializer.FormatVersion">
            <summary>
            Gets or sets the version of content currently serialized or deserialized.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1Serializer.Aliases">
            <summary>
            Gets or sets a list of the type aliases used during serialization or deserialization.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1Serializer.BasePath">
            <summary>
            Gets the name of the directory used during serialization / deserialization to search additional files
            if they specified via relative file name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1Serializer.RootObject">
            <summary>
            Gets the object which currently serialize or deserialized.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode">
            <summary>
            Defines how type names are encoded during serialization.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode.None">
            <summary>
            Type name is not serialized.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode.FullName">
            <summary>
            Type name is serialized as full name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode.AssemblyName">
            <summary>
            Type name is serialized with assembly name as "AssemblyName,FullTypeName",
            for example "C1.FlexReport.CustomFields.4,C1.FlexReport.CustomFields.SuperLabel".
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1WriterReaderBase">
            <summary>
            For internal use.
            Base class for reader/writer used by <see cref="T:C1.Win.C1Document.Serialization.C1Serializer"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1WriterBase">
            <summary>
            For internal use.
            Base class for writers which performs writing during serialization.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1ReaderBase">
            <summary>
            For internal use.
            Base class for readers which performs reading during deserialization.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Serialization.C1ReaderBase.ReadProp">
            <summary>
            Moves position to the next property, returns <b>false</b> if no more properties exists for the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1ReaderBase.PropName">
            <summary>
            Gets the name of the current property, call one of ReadXXX(...) method to read a value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1XmlNodeReader">
            <summary>
            For internal use.
            Implements reading from <see cref="T:System.Xml.XmlNode"/> during deserializing.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.C1XmlWriter">
            <summary>
            For internal use.
            Implements writing to <see cref="T:System.Xml.XmlTextWriter"/> during serialization.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Serialization.C1XmlWriter.XmlWriter">
            <summary>
            Gets underlying XmlWriter object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.TypeAlias">
            <summary>
            For internal use.
            Represents alias for the type.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Serialization.TypeAliases">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Style">
            <summary>
            Represents the style of an object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.IC1TextFormat">
            <summary>
            Defines the text format, font,  forecolor etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontName">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontWeight">
            <summary>
            Gets the font weight.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontStyle">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontSize">
            <summary>
            Gets the font size in points, 1/72 inch.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontStretch">
            <summary>
            Gets the font stretch.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.Culture">
            <summary>
            Gets culture associated with this format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.RightToLeft">
            <summary>
            Gets a value indicating whether the text are aligned to support locales using right-to-left fonts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.TextDecoration">
            <summary>
            Gets the text decoration.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.BackColor">
            <summary>
            Gets the background color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.Brush">
            <summary>
            Gets the background brush.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextFormat.ForeColor">
            <summary>
            Gets the fore color.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.IC1Background">
            <summary>
            Defines attributes of background, color, brush etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Style.GetPropValueNoDef(System.Int32,System.Object@)">
            <summary>
            Gets value of "style" property.
            If style has no this property and all its parents has no this property
            then null is returned (NOT DEFAULT VALUE).
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
            <param name="value">OUT: the property value.</param>
        </member>
        <member name="M:C1.Win.C1Document.Style.IsEmpty">
            <summary>
            Returns true if style has no properties.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Style.GetBorder">
            <summary>
            Returns "real" Border object used as Border by this <see cref="T:C1.Win.C1Document.Style"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Style.GetShapeLine">
            <summary>
            Returns "real" Line object using as ShapeLine by this <see cref="T:C1.Win.C1Document.Style"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Style.GetImageAlign">
            <summary>
            Returns "real" ImageAlign object using as ImageAlign by this <see cref="T:C1.Win.C1Document.Style"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Style.GetBackgroundImageAlign">
            <summary>
            Returns "real" ImageAlign object using as BackgroundImageAlign by this <see cref="T:C1.Win.C1Document.Style"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Style.HasBackground">
            <summary>
            Checks whether the some background specified in this style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Style.Clear">
            <summary>
            Clears the current style, resets all properties so that they
            inherit from the parent style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Style.AssignNonInheritedFrom(C1.Win.C1Document.Style)">
            <summary>
            Copies to the current style all properties of another <see cref="!:C1.C1Preview.Style"/> object
            that have been explicitly set on that other style,
            plus the values of the <see cref="P:C1.Win.C1Document.Style.Parent"/> and <see cref="P:C1.Win.C1Document.Style.AmbientParent"/> properties.
            </summary>
            <param name="source">The source <see cref="!:C1.C1Preview.Style"/> object to copy properties from.</param>
            <remarks>
            Effectively, this method makes the current <see cref="!:C1.C1Preview.Style"/>
            a complete copy of the <paramref name="source"/> style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Owner">
            <summary>
            Gets the owner of the current style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.Parent">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.Style"/> that is the parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for non-ambient properties
            of the current style that have not been explicitly set.
            </para>
            <para>
            If <b>null</b>, such properties have default values.
            </para>
            <para>
            This property is <b>null</b> by default.
            </para>
            </summary>
            <remarks>
            Initially a <see cref="T:C1.Win.C1Document.Style"/> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, while the effective values
            of all non-ambient properties (such as borders) are inherited
            from the style specified by this property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Parents">
            <summary>
            Sets both parents (<see cref="P:C1.Win.C1Document.Style.Parent"/> and <see cref="P:C1.Win.C1Document.Style.AmbientParent"/>) to the same value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.Children">
            <summary>
            Gets the collection of child styles
            (i.e. <see cref="T:C1.Win.C1Document.Style"/> objects that have their <see cref="P:C1.Win.C1Document.Style.Parent"/>
            set to the current style).
            </summary>
            <remarks>
            This method always returns a non-<b>null</b> collection of child styles,
            initializing it if it did not exist.
            To test whether a style already has child styles
            without creating the <see cref="P:C1.Win.C1Document.Style.Children"/> collection,
            use the <see cref="P:C1.Win.C1Document.Style.HasChildren"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.HasChildren">
            <summary>
            Gets a value indicating whether the current style's <see cref="P:C1.Win.C1Document.Style.Children"/>
            collection has been initialized and contains one or more elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.AmbientParent">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.Style"/> that is the ambient parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for ambient properties
            of the current style that have not been explicitly set.
            </para>
            <para>
            If <b>null</b>, such properties are inherited from the style of the containing object.
            </para>
            <para>
            This property is <b>null</b> by default.
            </para>
            </summary>
            <remarks>
            Initially a <see cref="T:C1.Win.C1Document.Style"/> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, unless this property has
            been set to a non-<b>null</b> value, in which case they are
            inherited from that style.
            <para>
            Note that even if an <b>AmbientParent</b> has been specified,
            only ambient properties that have been explicitly set on
            that style or any of its own ambient parents (styles or containing objects)
            propagate to the current style. See example below for details.
            </para>
            </remarks>
            <example>
            For instance, the following code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            still prints "my text" in bold, while this code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                doc.Style.FontBold = false; // this line makes the difference!
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            prints "my text" using regular (non-bold) font. This is because
            <see cref="!:C1.C1Preview.Style.FontBold"/> has been explicitly set to <b>false</b>
            on the style assigned to the <b>AmbientParent</b> on the text object.
            </example>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackgroundImage">
            <summary>
            Gets or sets the background image.
            The image is aligned using <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no image.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackgroundImageName">
            <summary>
            Gets or sets the name of the background image
            in <see cref="P:C1.Win.C1Document.C1Document.Dictionary"/> on the current document.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is emtpy string.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Brush">
            <summary>
            Gets or sets the brush used to fill the background.
            If both this and <see cref="P:C1.Win.C1Document.Style.BackColor"/> properties are specified for a style,
            the <b>BackColor</b> takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no brush.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ForeColor">
            <summary>
            Gets or sets the text (foreground) color.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is black color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Rotation">
            <summary>
            Gets or sets the rotation angle,
            in degrees counterclockwise from the <b>X</b> axis.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextAlignHorz">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is left alignment.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextAlignVert">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is top alignment.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.LineSpacing">
            <summary>
            Gets or sets the line spacing of a text in percent.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100% (normal line spacing).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.WordWrap">
            <summary>
            Gets or sets a value indicating whether text automatically
            wraps to the next line when there is not enough space left on the current line.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.HyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight hyperlinks with blue text color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.VisitedHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for visited hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight visited hyperlinks with magenta text color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.HoverHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for highlighted hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to underline text on a hyperlinks under mouse.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ActiveHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for active hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to not highlight active hyperlinks.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TreatLastLineNotEndOfParagraph">
            <summary>
            Obsolete. Use <see cref="P:C1.Win.C1Document.Style.JustifyLastLine"/> instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.EolIsEndOfParagraph">
            <summary>
            Obsolete. Use <see cref="P:C1.Win.C1Document.Style.JustifyEndOfLines"/> instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether spaces at ends of text lines
            are taken into account when measuring the text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Padding">
            <summary>
            Gets or sets the padding (white space added between the style owner's content and borders).
            </summary>
            <remarks>
            Padding is within <see cref="P:C1.Win.C1Document.Style.Borders"/> (if any), while <see cref="P:C1.Win.C1Document.Style.Spacing"/> is added outside of borders.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no padding.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Spacing">
            <summary>
            Gets or sets the spacing between the the current style's owner and the surrounding objects.
            </summary>
            <remarks>
            Spacing is outside of <see cref="P:C1.Win.C1Document.Style.Borders"/> (which, in turn, contain <see cref="P:C1.Win.C1Document.Style.Padding"/>).
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no spacing.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Borders">
            <summary>
            Gets or sets the borders drawn around the current style's owner object.
            </summary>
            <remarks>
            Borders are drawn within the <see cref="P:C1.Win.C1Document.Style.Spacing"/> area, and contain <see cref="P:C1.Win.C1Document.Style.Padding"/>.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no borders.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Shadow">
            <summary>
            Gets or sets properties of the shadow cast by the current object.
            By default the shadow is invisible due to being 100% transparent.
            Set <b>Shadow.Transparency</b> to a value less than 100, to show shadow.
            Other properties can be adjusted as needed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.ImageAlign">
            <summary>
            Gets or sets the foreground image alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para>
            </remarks>
            <seealso cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackgroundImageAlign">
            <summary>
            Gets or sets the background image alignment.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para>
            </remarks>
            <seealso cref="P:C1.Win.C1Document.Style.ImageAlign"/>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackColor">
            <summary>
            Gets or sets the background color.
            If both this and <see cref="P:C1.Win.C1Document.Style.Brush"/> properties are specified for a style,
            this property takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is transparent background color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.MinOrphanLines">
            <summary>
            Gets or sets the minimum number of orphan text lines allowed on a page
            before or after a page break.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ClientAreaOnly">
            <summary>
            Gets or sets a value indicating whether just the client area of a <see cref="T:System.Windows.Forms.Control"/>,
            or the whole control, is rendered by the <see cref="T:C1.Win.C1Document.RenderImage"/> object owning the current style.
            </summary>
            <remarks>
            <para>
            A <see cref="T:C1.Win.C1Document.RenderImage"/> can render an image of a <see cref="T:System.Windows.Forms.Control"/>
            if it is assigned to the <b>RenderImage</b>'s <see cref="!:RenderImage.Control"/> property.
            <b>ClientAreaOnly</b> can be used to indicate that only the client area of that control should be rendered.
            </para>
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ShapeFillBrush">
            <summary>
            Gets or sets the brush used to fill internal areas of shapes
            (objects derived from <see cref="!:RenderShapeBase"/>).
            If for a style both this and <see cref="P:C1.Win.C1Document.Style.ShapeFillColor"/> are specified,
            <b>ShapeFillColor</b> takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no brush.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ShapeFillColor">
            <summary>
            Gets or sets the color used to fill internal areas of shapes
            (objects derived from <see cref="!:RenderShapeBase"/>).
            If for a style both this and <see cref="P:C1.Win.C1Document.Style.ShapeFillBrush"/> are specified,
            this property takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is transparent fill color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ShapeLine">
            <summary>
            Gets or sets the style of lines used to draw shape objects (RenderLine, RenderRectangle etc).
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is a black line, 1pt thick.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextIndent">
            <summary>
            Gets or sets the indentation of the first line in a block of text.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.CharSpacing">
            <summary>
            Gets or sets the spacing between characters in a text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 0 (normal spacing).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.CharWidth">
            <summary>
            Gets or sets the amount (in percent) by which to increase or decrease
            the widths of characters in a text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100 (normal width).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.JustifyLastLine">
            <summary>
            Gets or sets a value indicating whether the last line of text should be justified
            if the current style has <see cref="P:C1.Win.C1Document.Style.TextAlignHorz"/> set to
            <see cref="F:C1.Win.C1Document.AlignHorzEnum.Justify"/> or <see cref="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars"/>.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.JustifyEndOfLines">
            <summary>
            Gets or sets a value indicating whether lines of text
            ending with a newline character should be justified
            if the current style has <see cref="P:C1.Win.C1Document.Style.TextAlignHorz"/> set to
            <see cref="F:C1.Win.C1Document.AlignHorzEnum.Justify"/> or <see cref="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars"/>.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.WordWrapMode">
            <summary>
            Gets or sets a value indicating how words can be split when text lines wrap.
            <para>
            This property is ignored if <see cref="P:C1.Win.C1Document.Style.WordWrap"/> is <b>false</b>.
            </para>
            <para>
            The default value is <see cref="!:C1.C1Preview.WordWrapMode.Normal"/>
            </para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextAngle">
            <summary>
            Gets or sets the text rotation angle,
            in degrees counterclockwise from the <b>X</b> axis.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextFitMode">
            <summary>
            Gets or sets a value indicating how the text will be fit into available area.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontName">
            <summary>
            Gets or sets the face name of the font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontSize">
            <summary>
            Gets or sets the em-size of the font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 10.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontStyle">
            <summary>
            Gets or sets the style of font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontStretch">
            <summary>
            Gets or sets the font stretch.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextDecoration">
            <summary>
            Gets or sets a value indicating whether the font is underlined.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextPosition">
            <summary>
            Gets or sets a value indicating whether text is rendered
            normally, or as superscript or subscript.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is normal text.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1Document.PropsHashTable`1">
            <summary>
            <para>For internal use only.</para>
            Represents a hashtable of properties and their values.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.Clear">
            <summary>
            Clears the current instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.GetPropIndex(System.Int32)">
            <summary>
            Gets the index of a property in the <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys"/> and <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values"/> arrays.
            </summary>
            <param name="propKey">The property key.</param>
            <returns>The 0-based index of the specified property in the <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys"/> and <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values"/> arrays.</returns>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.SetPropValue(System.Int32,`0)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="propKey">The property key.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.DeletePropValue(System.Int32)">
            <summary>
            Deletes a property value from the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
            <param name="propKey">The property key to remove.</param>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current <see cref="!:PropsHashtable&lt;T&gt;"/> is empty.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.IsPropExists(System.Int32)">
            <summary>
            Tests whether a property is set in the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
            <param name="propKey">The property key.</param>
            <returns><b>true</b> if the specified property has been set on the current <see cref="!:PropsHashtable&lt;T&gt;"/>, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Count">
            <summary>
            Gets the number of properties set on the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            This value is equal to the number of elements in the <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys"/> and <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values"/> collections.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Flags">
            <summary>
            Gets the array of flags.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Keys">
            <summary>
            Gets the array of property keys set in the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Values">
            <summary>
            Gets the array of property values set on the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.StyleCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.Style"/> objects.
            This is the type of the <see cref="P:C1.Win.C1Document.Style.Children"/> collection
            on a <see cref="T:C1.Win.C1Document.Style"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.StyleCollection.Owner">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.Style"/> object owning this collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FoundPageRange">
            <summary>
            Represents text searched on single page of document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FindTextParams">
            <summary>
            Represents find text parameters.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1FindTextParams.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1FindTextParams"/> class.
            </summary>
            <param name="text">The text to find.</param>
            <param name="wholeWord">Indicates whether to match whole words only.</param>
            <param name="matchCase">Indicates whether to match case.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1FindTextParams.Text">
            <summary>
            Gets the text to find.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FindTextParams.WholeWord">
            <summary>
            Gets a value indicating whether to match whole words only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FindTextParams.MatchCase">
            <summary>
            Gets a value indicating whether to match case.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FindTextAction">
            <summary>
            Describes the directions of the text searching.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FindTextAction.Start">
            <summary>
            Text searching should be performed from the start of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FindTextAction.Next">
            <summary>
            Text searching should be performed from the current position the the end of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FindTextAction.Previous">
            <summary>
            Text searching should be performed from the current position the the start of the document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FindActionCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1TextSearchManager.FindActionCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.FindActionCompletedEventArgs.#ctor(C1.Win.C1Document.C1FindTextAction,C1.Win.C1Document.C1FoundPosition,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.FindActionCompletedEventArgs"/> class.
            </summary>
            <param name="action">Defines the find action.</param>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1FoundPosition"/> object representing result of operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.FindActionCompletedEventArgs.Action">
            <summary>
            Get the <see cref="T:C1.Win.C1Document.C1FindTextAction"/> value defines the complited find action.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.FindActionCompletedEventArgs.Position">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1FoundPosition"/> object that specifies the found text position.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1TextSearchManager">
            <summary>
            Provides functionality to search text in the document managed by the <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextSearchManager._foundRangeSync">
            <summary>
            Sync object used to sync access to the _foundRange.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextSearchManager._requestedPageIndex">
            <summary>
            Index of the page which currently requested in the FindPageRange() method.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextSearchManager._activity">
            <summary>
            Currently executed activity.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1TextSearchManager.GetFragmentHighligh(System.Collections.Generic.IList{C1.Win.C1Document.C1FragmentHighlight},C1.Win.C1Document.RenderFragment,C1.Win.C1Document.C1HighlightAttrs,C1.Win.C1Document.C1HighlightAttrs)">
            <summary>
            Fills <paramref name="highlight"/> list for specified <see cref="T:C1.Win.C1Document.RenderFragment"/>.
            </summary>
            <param name="highlight"></param>
            <param name="fragment"></param>
            <param name="findMatchHighlight"></param>
            <param name="activeFindMatchHighlight"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStart(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)">
            <summary>
            Finds the first occurrence of a text in the document.
            </summary>
            <param name="startPageIndex">0-based index of page where to start the search.</param>
            <param name="wholeDocument">Indicates whether whole document should be loaded during searching or to the first fragment found.</param>
            <param name="findParams">Find text parameters.</param>
            <returns>The found text position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1TextSearchManager.FindStartAsyncEx(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams,System.Boolean)" -->
        <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStartAsync(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams,System.Boolean)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1TextSearchManager.FindStartAsync(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams,System.Boolean)"/> method.
            </summary>
            <param name="startPageIndex">0-based index of page where to start the search.</param>
            <param name="wholeDocument">Indicates whether whole document should be loaded during searching or to the first fragment found.</param>
            <param name="findParams">Find text parameters.</param>
            <returns>Asynchronous object representing the found text position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1TextSearchManager.FindNext(C1.Win.C1Document.C1FoundPosition)">
            <summary>
            Finds the next occurrence of a text in the document.
            </summary>
            <param name="initialPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>The found text position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1TextSearchManager.FindNextAsyncEx(C1.Win.C1Document.C1FoundPosition,System.Boolean)" -->
        <member name="M:C1.Win.C1Document.C1TextSearchManager.FindNextAsync(C1.Win.C1Document.C1FoundPosition,System.Boolean)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="!:FindNext()"/> method.
            </summary>
            <param name="foundPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>Asynchronous object representing the found text position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1TextSearchManager.FindPrevious(C1.Win.C1Document.C1FoundPosition)">
            <summary>
            Finds the previous occurrence of a text in the document.
            </summary>
            <param name="foundPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>The found text position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1TextSearchManager.FindPreviousAsyncEx(C1.Win.C1Document.C1FoundPosition,System.Boolean)" -->
        <member name="M:C1.Win.C1Document.C1TextSearchManager.FindPreviousAsync(C1.Win.C1Document.C1FoundPosition,System.Boolean)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="!:FindPrevious()"/> method.
            </summary>
            <param name="foundPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>Asynchronous object representing the found text position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1TextSearchManager.Reset">
            <summary>
            Resets text search results.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1TextSearchManager.CancelAsync">
            <summary>
            Cancels current async action and waits while action will be actually cancelled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextSearchManager.ActiveFoundPosition">
            <summary>
            Gets or sets the active found position, this position has different highlighting attrs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextSearchManager.Params">
            <summary>
            Search parameters: text, etc. Initialized in the FindStartXXX() method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextSearchManager.WholeDocument">
            <summary>
            Indicates whether searching should be performed in whole document, or only
            while first occurence not found. Initialized in the FindStartXXX() method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextSearchManager.FoundRange">
            <summary>
            Defines the range of text which was found.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1TextSearchManager.LongOperation">
            <summary>
            Occurs periodically during operations.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1TextSearchManager.FoundPositionsChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1TextSearchManager.FoundPositions"/> list is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1TextSearchManager.FindActionCompleted">
            <summary>
            Occurs when async find action completed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1TextSearchManager.C1FoundPositions">
            <summary>
            Helper class provides access to list of the found text fragments.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextSearchManager.FindStartActivity.StartPageIndex">
            <summary>
            Index of the page from which searching should be started.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.UnitTypeEnum">
            <summary>
            Enumerates units of measurement used in a <see cref="T:C1.Win.C1Document.C1Document"/>,
            used by <see cref="T:C1.Win.C1Document.Unit"/> and related types.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Inch">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Mm">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Pica">
            <summary>
            Specifies the pica unit (1/6 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Twip">
            <summary>
            Specifies a twip (1/1440 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.InHs">
            <summary>
            Specifies a hundredths of an inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Display">
            <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Cm">
            <summary>
            Specifies centimetre's as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Dip">
            <summary>
            Specifies DIP's 1/96 inch as the unit of measure.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Unit">
            <summary>
            A utility structure specifying some values related to units of measurement.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.MmPerInch">
            <summary>Millimeters per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DocumentUnitsPerInch">
            <summary>Document units per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PointsPerInch">
            <summary>Points per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.TwipsPerInch">
            <summary>Twips per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PicaPerInch">
            <summary>Picas per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.CmPerInch">
            <summary>Centimeters per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DisplayPerInch">
            <summary>Display units per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DipPerInch">
            <summary>DIP units per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.MmPerInchF">
            <summary>Millimeters per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DocumentUnitsPerInchF">
            <summary>Document units per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PointsPerInchF">
            <summary>Points per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.TwipsPerInchF">
            <summary>Twips per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PicaPerInchF">
            <summary>Picas per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.CmPerInchF">
            <summary>Centimeters per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DisplayPerInchF">
            <summary>Display units per inch as float.</summary>
        </member>
        <member name="M:C1.Win.C1Document.Unit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Unit"/> structure
            from a string.
            String should contain A numeric value qualified with unit of measurement, e.g. <b>"28mm"</b> or <b>"7in"</b>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Unit.#ctor(System.Double,C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Unit"/> structure.
            </summary>
            <param name="value">The unit value.</param>
            <param name="unitType">The unit of measurement.</param>
        </member>
        <member name="M:C1.Win.C1Document.Unit.ToString">
            <summary>
            Converts the current object to a string.
            </summary>
            <returns>The string representing the current <see cref="T:C1.Win.C1Document.Unit"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Convert(C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Converts value of this <see cref="T:C1.Win.C1Document.Unit"/> structure to value in specified units of measurement.
            </summary>
            <param name="to">The target unit of measurement.</param>
            <returns>Returns the value in <paramref name="to"/> units.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.StringToUnitType(System.String,C1.Win.C1Document.UnitTypeEnum@)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> value. The string can be one of the following:
            "doc", "in", "mm", "pc", "dsp", "pt", "tw", "inhs", "cm", "dip".
            This method is case-insensitive.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="value">OUT: On exit, contains the <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> value.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.UnitTypeToString(C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Converts a <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> value to a string representation as in
            the following table:
            <list type="bullet">
            <item><description><term>Document</term>"doc"</description></item>
            <item><description><term>Inch</term>"in"</description></item>
            <item><description><term>Millimeter</term>"mm"</description></item>
            <item><description><term>Pica</term>"pc"</description></item>
            <item><description><term>Point</term>"pt"</description></item>
            <item><description><term>Twip</term>"tw"</description></item>
            <item><description><term>InHs</term>"inhs"</description></item>
            <item><description><term>Centimeters</term>"cm"</description></item>
            <item><description><term>Dip</term>"dip"</description></item>
            </list>
            </summary>
            <param name="value">A <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> to convert.</param>
            <returns>The string representing <paramref name="value"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Implicit(C1.Win.C1Document.Unit)~System.String">
            <summary>
            Converts a unit value to a string.
            </summary>
            <param name="value">The unit to convert.</param>
            <returns>The string representing the unit value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Implicit(System.String)~C1.Win.C1Document.Unit">
            <summary>
            Converts a string to a <see cref="T:C1.Win.C1Document.Unit"/> value (see <see cref="M:C1.Win.C1Document.Unit.#ctor(System.String)"/>.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The unit value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.TryParse(System.String,System.Double@,C1.Win.C1Document.UnitTypeEnum@)">
            <summary>
            Parses a string and gets <see cref="P:C1.Win.C1Document.Unit.Value"/> and <see cref="!:Unit.Utits"/> from that string.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="value">OUT: value of <see cref="T:C1.Win.C1Document.Unit"/> structure.</param>
            <param name="units">OUT: units of <see cref="T:C1.Win.C1Document.Unit"/> structure.</param>
            <returns>A <b>true</b> if conversion was successfull.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.TryParse(System.String,C1.Win.C1Document.Unit@)">
            <summary>
            Parses a string and creates <see cref="T:C1.Win.C1Document.Unit"/> structure.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="unit">OUT: <see cref="T:C1.Win.C1Document.Unit"/> structure.</param>
            <returns>True if the conversion was successfull, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Parse(System.String)">
            <summary>
            Parses a string and creates a <see cref="T:C1.Win.C1Document.Unit"/> instance from that string,
            throws an exception if string is invalid.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>A <see cref="T:C1.Win.C1Document.Unit"/> instance.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Convert(System.Double,System.Double,C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Converts a value from pixel unit of measurement to another.
            </summary>
            <param name="value">The value to convert in pixels.</param>
            <param name="fromDpi">The source dpi.</param>
            <param name="to">The target unit of measurement.</param>
            <returns><paramref name="value"/> converted to <paramref name="to"/> units.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Convert(System.Double,C1.Win.C1Document.UnitTypeEnum,System.Double)">
            <summary>
            Converts a value from one unit of measurement to pixel.
            </summary>
            <param name="value">The value to convert in <paramref name="from"/> units.</param>
            <param name="from">The source unit of measurement.</param>
            <param name="to">The target dpi.</param>
            <returns><paramref name="value"/> converted to pixels with specified dpi.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Convert(System.Double,C1.Win.C1Document.UnitTypeEnum,C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Converts a value from one unit of measurement to another.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="from">The source unit of measurement.</param>
            <param name="to">The target unit of measurement.</param>
            <returns><paramref name="value"/> converted to <paramref name="to"/> units.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Unit.Value">
            <summary>
            Gets the value of the current unit (in <see cref="P:C1.Win.C1Document.Unit.Units"/>).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Unit.Units">
            <summary>
            Gets the unit of measurement of the current unit.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BarcodeExRenderer">
            <summary>
            Provides functionality to render and measure barcodes based on XBarcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer._options">
            <summary>
            <see cref="T:C1.Win.C1Document.BarcodeOptions"/> definies additional barcode options.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer._format">
            <summary>
            <see cref="T:C1.Win.C1Document.Util.IC1TextFormat"/> defines visual properties: font fore color etc.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer._measurementContext">
            <summary>
            IC1TextMeasurementContext used in drawing/measuring.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer._units">
            <summary>
            Units of measurement used in <see cref="T:C1.Win.C1Document.BarcodeOptions"/> class specified in _options field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer._barEngine">
            <summary>
            Used to measure/draw all NON composite barcodes and to draw main barcode in case of composite.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer._barEngineDependent">
            <summary>
            Used only with composite barcode to draw/measure dependent barcode.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.#ctor(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.BarcodeOptions,C1.Win.C1Document.Util.IC1TextFormat,C1.Win.C1Document.UnitTypeEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.BarcodeExRenderer"/> class.
            </summary>
            <param name="measurementContext">IC1TextMeasurementContext object used to measure/drawing barcode.</param>
            <param name="options"><see cref="T:C1.Win.C1Document.BarcodeOptions"/> defining additional barcode options.</param>
            <param name="format"><see cref="T:C1.Win.C1Document.Util.IC1TextFormat"/> object defining visual properties: font, fore color.</param>
            <param name="units">Units of measurement used in the <paramref name="options"/>.</param>
            <param name="useGdiCompatibleTextLayout">Indiates whether to use direct write text layout compatible with GDI.</param>
            <param name="rightToLeft">Indicates whether to use right to left text layout.</param>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.DrawErrorMessage(C1.Win.Interop.Rect,System.String,System.Collections.Generic.IList{C1.Win.C1Document.C1FragmentHighlight},System.Object)">
            <summary>
            Draws error message.
            </summary>
            <param name="rect"></param>
            <param name="errorMessage"></param>
            <param name="highlight"></param>
            <param name="callbackData"></param>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.GetModuleSize(C1.BarCode.CodeType)">
            <summary>
            Returns the module size for barcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.GetBarEngineDependent(C1.BarCode.CodeType)">
            <summary>
            Gets the dependent engine for the composite barcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.GetBarEngine(C1.BarCode.CodeType)">
            <summary>
            Gets the main <see cref="T:C1.BarCode.BarEngine"/> in case of composite and single <see cref="T:C1.BarCode.BarEngine"/> in case of all other barcodes.
            </summary>
            <param name="calcSize">Indicates that created <see cref="T:C1.BarCode.BarEngine"/> will be used to calculate barcode size, i.e. its IsAutoModuleSize should be false.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.ToPixels(System.Double)">
            <summary>
            Converts value in <see cref="F:C1.Win.C1Document.BarcodeExRenderer._units"/> to value in pixels of _measurementContext.
            </summary>
            <param name="value"></param>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.GetSize(System.String,C1.BarCode.CodeType,System.Double@,System.Double@)">
            <summary>
            Calculates size of barcode on the base of <see cref="P:C1.Win.C1Document.BarcodeOptions.SizeOptions"/> in pixels of <see cref="!:BarcodeExRenderer.Graphics"/>.
            </summary>
            <param name="text">The barcode text.</param>
            <param name="codeType">The barcode type.</param>
            <param name="width">OUT: The width of barcode.</param>
            <param name="height">OUT: The height of barcode.</param>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.GetSize(System.String,C1.BarCode.CodeType)">
            <summary>
            Calculates size of barcode on the base of <see cref="P:C1.Win.C1Document.BarcodeOptions.SizeOptions"/> in pixels of <see cref="!:BarcodeExRenderer.Graphics"/>.
            </summary>
            <param name="text">The barcode text.</param>
            <param name="codeType">The barcode type.</param>
            <returns>The size of barcode.</returns>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.GetMetrics(System.String,C1.BarCode.CodeType)">
            <summary>
            Calculates size of barcode on the base of <see cref="P:C1.Win.C1Document.BarcodeOptions.SizeOptions"/>.
            ATTENTION!!! This method ignores BarDirection, i.e. it always calculate values
            as Options.BarDirection == BarCodeDirection.LeftToRight.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.BarcodeExRenderer.Draw(C1.Win.Interop.Rect,System.String,C1.BarCode.CodeType,C1.Win.C1Document.BarcodeAlign,C1.Win.C1Document.BarcodeAlign,System.Collections.Generic.IList{C1.Win.C1Document.C1FragmentHighlight})">
            <summary>
            Draws barcode, the rect specifies bounds of the barcode in pixels of the <see cref="!:BarCodeExRenderer.MeasurementContext"/>.
            </summary>
            <param name="rect">Bounds of the barcode in pixels of the <see cref="!:BarCodeExRenderer.MeasurementContext"/>.</param>
            <param name="text">The text of the barcode.</param>
        </member>
        <member name="T:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics">
            <summary>
            Metrics of barcode, units are pixels of <see cref="!:BarCodeExRenderer.Graphics"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.Width">
            <summary>
            Width of the barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.Height">
            <summary>
            Height of the barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.MainBarcodeWidth">
            <summary>
            Width of main barcode, differs from Size.Width for suppliment and composite barcodes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.SupplementBarcodeX">
            <summary>
            Horizontal offset of suppliment barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.SupplementBarcodeWidth">
            <summary>
            Width of supplement barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.MainBarcodeY">
            <summary>
            Offset of main barcode from top in case of composite barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.MainBarcodeHeight">
            <summary>
            Height of main barcode in case of composite barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.DependentBarcodeY">
            <summary>
            Height of dependent barcode in case of composite barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.DependentBarcodeHeight">
            <summary>
            Height of dependent barcode in case of composite barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.CompositeCaptionY">
            <summary>
            Y position of caption of composite barcode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BarcodeExRenderer.BarcodeMetrics.CompositeCaptionHeight">
            <summary>
            Height of caption of composite barcode.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NotifyCollection`1">
            <summary>
            Represents a collection with notifications.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:C1.Win.C1Document.INotifyCollection">
            <summary>
            Notifies listeners of dynamic changes, such as when items get added and removed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyCollection.CollectionChanging">
            <summary>
            Occurs when a collection about to be changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyCollection.CollectionChanged">
            <summary>
            Occurs when a collection changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.NotifyCollection`1.CollectionChanging">
            <summary>
            Occurs when a collection about to be changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.NotifyCollection`1.CollectionChanged">
            <summary>
            Occurs when a collection changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1Brush">
            <summary>
            Abstract base class for brushes used in <see cref="T:C1.Win.C1Document.C1Document"/> and <see cref="!:C1FlexReport"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Brush.IsVisible(C1.Win.Interop.Rect)">
            <summary>
            Tests whether the current brush is visible within the specified bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>True if the brush is visible, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1Brush.IsSimple">
            <summary>
            True for solid brushes, false for gradients.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1SolidBrush">
            <summary>
            Defines a brush of a single color.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SolidBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1SolidBrush"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SolidBrush.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1SolidBrush"/> class.
            </summary>
            <param name="color">The value of the <see cref="P:C1.Win.C1Document.C1SolidBrush.Color"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1SolidBrush.SetColor(System.Drawing.Color)">
            <summary>
            Use this method to set value of <see cref="P:C1.Win.C1Document.C1SolidBrush.Color"/> property without firing
            PropertyChanged event.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:C1.Win.C1Document.C1SolidBrush.Color">
            <summary>
            Gets or sets the color of this <see cref="T:C1.Win.C1Document.C1SolidBrush"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.GradientStop">
            <summary>
            Defines the point within gradient.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GradientStop.#ctor">
            <summary>
            This constructor used only for deserialization.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GradientStop.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.GradientStop"/> class.
            </summary>
            <param name="position">The value of the <see cref="P:C1.Win.C1Document.GradientStop.Position"/> property.</param>
            <param name="color">The value of the <see cref="P:C1.Win.C1Document.GradientStop.Color"/> property.</param>
        </member>
        <member name="P:C1.Win.C1Document.GradientStop.Position">
            <summary>
            A value that indicates the relative position of the gradient stop in the brush.
            This value must be in the [0.0, 1.0] range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.GradientStop.Color">
            <summary>
            The color of the gradient stop.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.GradientStopCollection">
            <summary>
            Represents collection of the <see cref="T:C1.Win.C1Document.GradientStop"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1GradientBrush">
            <summary>
            Abstract base class for various gradient brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1GradientBrush.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.C1GradientBrush"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1GradientBrush.GradientStops">
            <summary>
            Gets the brush's gradient stops.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1GradientBrush.Color1">
            <summary>
            Gets the first color of the gradient.
            Note that setting this property automatically changes the <see cref="P:C1.Win.C1Document.C1GradientBrush.GradientStops"/> collection
            (the color of the first gradient stop will be changed).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1GradientBrush.Color2">
            <summary>
            Gets the last color of the gradient.
            Note that settings this property automatically changes the <see cref="P:C1.Win.C1Document.C1GradientBrush.GradientStops"/> collection
            (the color of the last gradient stop will be changed).
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1RadialBrush">
            <summary>
            Defines a radial gradient brush.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1RadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:C1.Win.Interop.Point"/> structure that specifies the position of the center point.
            (0,0) is the top-left corner, (1,1) is the bottom-right corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1RadialBrush.CenterColor">
            <summary>
            Gets or sets the center color of the current radial gradient brush.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1RadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the current radial gradient brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1LinearBrush">
            <summary>
            Defines a linear gradient brush.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1LinearBrush.StartPoint">
            <summary>
            Gets or sets the coordinates of the start point of the current linear gradient.
            (0,0) is the top-left corner, (1,1) is the bottom-right corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1LinearBrush.EndPoint">
            <summary>
            Gets or sets the coordinates of the end point of the current linear gradient.
            (0,0) is the top-left corner, (1,1) is the bottom-right corner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1LinearBrush.StartColor">
            <summary>
            Gets or sets the starting color of the current linear gradient brush.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1LinearBrush.EndColor">
            <summary>
            Gets or sets the ending color of the current linear gradient brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1DXExportGraphics">
            <summary>
            Base class for all graphics objects used in exporters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1Graphics">
            <summary>
            Base class implements drawing surface for <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.IC1TextMeasurementContext">
            <summary>
            Defines context which can be used to measure the text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.IC1TextMeasurementContext.CreateTextLayout">
            <summary>
            Creates the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object which can be used for text measurements with this context.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextMeasurementContext.TextLayout">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object can be used to measure text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextMeasurementContext.DpiX">
            <summary>
            Gets the horizontal resolution of the context.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextMeasurementContext.DpiY">
            <summary>
            Gets the vertical resolution of the context.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Util.C1Graphics"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.WriteBookmark(System.String,C1.Win.Interop.Rect)">
            <summary>
            Used to identify some area on the <see cref="T:C1.Win.C1Document.Util.C1Graphics"/> this area can be referenced in
            <see cref="M:C1.Win.C1Document.Util.C1Graphics.WriteHyperlink(C1.Win.C1Document.C1Hyperlink,C1.Win.Interop.Rect)"/> method. Used in "exports" graphics.
            </summary>
            <param name="bookmark"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.WriteHyperlink(C1.Win.C1Document.C1Hyperlink,C1.Win.Interop.Rect)">
            <summary>
            Marks some area as clickable <paramref name="hyperlink"/> defines the target.
            </summary>
            <param name="hyperlink"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.InflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates rectangle.
            This method considers specific of graphics context, for example,
            for GDI surface this method uses following calculation:
            rect.Left = rect.Left - left / 2 - left % 2
            rect.Width = rect.Width + left / 2 + left % 2 + right / 2 + right % 2
            Because GDI surface uses "integer" pixels.
            </summary>
            <param name="rect"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.DeflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            See comments for: <see cref="M:C1.Win.C1Document.Util.C1Graphics.InflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)"/>.
            </summary>
            <param name="rect"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateClipRegion(C1.Win.C1Document.Util.IPath)">
            <summary>
            Creates clip region for specified graphics path.
            </summary>
            <param name="graphicsPath"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateClipRegion(C1.Win.Interop.Rect)">
            <summary>
            Creates clip region for specified bounds.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.CreatePath">
            <summary>
            Creates graphics path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateRoundBordersClipRegion(C1.Win.C1Document.BorderParams)">
            <summary>
            Creates clip region for specified border.
            </summary>
            <param name="borders"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawRectangle(C1.Win.Interop.Rect,System.Drawing.Color,System.Double,C1.Win.C1Document.DashStyle)">
            <summary>
            Draws a rectangle specified by a <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="bounds">A <see cref="T:C1.Win.Interop.Rect"/> structure that represents the rectangle to draw.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> structure that represents the color of the rectangle.</param>
            <param name="lineWidth">Specifies the width of the line used to draw rectangle.</param>
            <param name="style">Specifies the style of the line used to draw rectangle.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawEllipse(C1.Win.Interop.Rect,System.Drawing.Color,System.Double,C1.Win.C1Document.DashStyle)">
            <summary>
            Draws an ellipse specified by a <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="bounds">A <see cref="T:C1.Win.Interop.Rect"/> structure that represents the ellipse to draw.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> structure that represents the color of the ellipse.</param>
            <param name="lineWidth">Specifies the width of the line used to draw ellipse.</param>
            <param name="style">Specifies the style of the line used to draw ellipse.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawRectangle(C1.Win.C1Document.Line,System.Double,C1.Win.Interop.Rect)">
            <summary>
            Draws a rectangle specified by a <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="line">A <see cref="T:C1.Win.C1Document.Line"/> object specifies attributes of the rectangle.</param>
            <param name="lineWidth">Specifies the width in pixels of the line used to draw rectangle.</param>
            <param name="bounds">A <see cref="T:C1.Win.Interop.Rect"/> structure that represents the rectangle to draw.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawPath(C1.Win.C1Document.Util.IPath,System.Drawing.Color,System.Double,C1.Win.C1Document.DashStyle)">
            <summary>
            Draws a <see cref="T:C1.Win.C1Document.Util.IPath"/>.
            </summary>
            <param name="path">An object supporting <see cref="T:C1.Win.C1Document.Util.IPath"/> interface that represents the path to draw.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> structure that represents the color of the path.</param>
            <param name="lineWidth">Specifies the width in pixels of the line used to draw rectangle.</param>
            <param name="style">Specifies the style of the line used to draw rectangle.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.SetClip(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Sets the clipping rectangle specified by the <paramref name="clipRect"/> if
            <paramref name="containerRect"/> does not contain it.
            </summary>
            <param name="clipRect"></param>
            <param name="containerRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawRtf(System.String,System.Int32,System.Int32,C1.Win.Interop.Rect,System.Boolean)">
            <summary>
            Draws the RTF text.
            </summary>
            <param name="rtf"></param>
            <param name="firstCharIndex"></param>
            <param name="length"></param>
            <param name="bounds"></param>
            <param name="detectUrls"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateTextLayout">
            <summary>
            Creates and initializes the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object which can be used to render or measure text on the graphics.
            </summary>
            <returns>Created <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawGlyphRun(System.Double,System.Double,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Drawing.Color,C1.Win.C1Document.Util.IC1TextRange,C1.Win.C1Document.Util.C1TextLayout,System.String)">
            <summary>
            Renders a run of glyphs.
            </summary>
            <param name="baselineOriginX">The X coordinate of the glyphs' baseline, if this is right-to-left text then X points to the "right" side of the text, glyphs should be drawn from this point to the left.</param>
            <param name="baselineOriginY">The Y coordinate of the glyphs' baseline, if range.IsSideways is true, i.e. glyphs should be drawn in vertical direction (japanese text), then Y equals to the middle of the glyphs' height.</param>
            <param name="glyphCount">The count of the glyphs.</param>
            <param name="glyphIndices">The pointer to the array of shorts containing indicies of the glyphs in the font specified by the range.GetFontFace(), use ((short*)glyphIndices)[i] to get i-th glyph index, all indices already resolved and can not be zero.</param>
            <param name="glyphAdvances">The pointer to the array of floats containing the glyphs' widths, use ((float*)glyphAdvances)[i] to get width of the i-th glyph.</param>
            <param name="glyphOffsets">The pointer to the array of <see cref="!:DW.GlyphOffset"/> structures, use ((DW.GlyphOffset*)glyphOffsets)[i] to get width of the i-th glyph.</param>
            <param name="clusterMap">The pointer to the table of text clusters.</param>
            <param name="foreColor">The color of the text.</param>
            <param name="range">The <see cref="T:C1.Win.C1Document.Util.IC1TextRange"/> interface which allows to get extended information about text.</param>
            <param name="textLayout">The <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object calling this method.</param>
            <param name="text">The text to drawn.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.CustomDraw(C1.Win.C1Document.RenderFragment,C1.Win.C1Document.FragmentDrawParams@)">
            <summary>
            Allows <see cref="T:C1.Win.C1Document.Util.C1Graphics"/> descendant to override drawing of some render fragments.
            This method should return true if drawing implemented by the C1Graphics in the custom way.
            Only background and content should be drawn, borders are drawn always.
            </summary>
            <param name="rf"></param>
            <param name="fdp"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.GetRotatedMatrix(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Based on this article:
            http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/matrix2d/index.htm.
            </summary>
            <param name="cos"></param>
            <param name="sin"></param>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1Graphics.GetRotatedMatrix(System.Single,System.Double,System.Double)">
            <summary>
            Create the matrix performing rotation at specified angle around specified point.
            </summary>
            <param name="angle"></param>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1Graphics.Transform">
            <summary>
            Gets or sets transformation matrix.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1Graphics.TextLayout">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object which can be used to measure text,
            this instance is created in <see cref="T:C1.Win.C1Document.Util.C1Graphics"/> constructor and disposed
            when <see cref="T:C1.Win.C1Document.Util.C1Graphics"/> disposed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1Graphics.Printing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Win.C1Document.Util.C1Graphics"/> object
            used for printing.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.IC1DXTextLayoutOwner">
            <summary>
            Should be implemented by class owning <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1DXTextLayoutOwner.Factory">
            <summary>
            Gets the DirectWrite factory which should be used by the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1DXTextLayoutOwner.DefaultFont">
            <summary>
            Gets the name of the font used when font specified somewhere within C1DXTextLayout is not found.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1DXTextLayoutOwner.FallbackFonts">
            <summary>
            Gets the list of the fallback fonts which are used if font specified somewhere withing 
            C1DXTextLayout does not contain glyphs for certains chars.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXExportGraphics.DrawText(C1.Win.Interop.Point,System.String,System.String,System.Single,C1.Win.C1Document.C1FontWeight,System.Boolean,C1.Win.C1Document.C1TextDecoration,System.Drawing.Color,System.Single[],System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Simple draw text run.
            </summary>
            <param name="pt">The start point for draw text.</param>
            <param name="text">The text run.</param>
            <param name="fontName">The font name as string.</param>
            <param name="fontSize">The font size in points.</param>
            <param name="weight">The font weight, see <see cref="T:C1.Win.C1Document.C1FontWeight"/>.</param>
            <param name="italic">The italic flag.</param>
            <param name="decor">The text docoration, see <see cref="T:C1.Win.C1Document.C1TextDecoration"/>.</param>
            <param name="color">The text (foreground) color.</param>
            <param name="advances">The advaces array, widths of each glyph in points.</param>
            <param name="panose">The font panose (font identifier).</param>
            <param name="vertical">The vertical texts with hieroglyphs flag.</param>
            <param name="bidiLevel">The right to left (bi-di) text level (0 - normal, 1 - rtl, 2 - inside rtl).</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXExportGraphics.DrawGlyphs(C1.Win.Interop.Point,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,System.Drawing.Color,C1.Util.DX.DirectWrite.MeasuringMode)">
            <summary>
            Exactly draw glyphs run.
            </summary>
            <param name="pt">The start point for draw glyphs.</param>
            <param name="glyphRun">The draw glyphs run, see <see cref="!:GlyphRun"/>.</param>
            <param name="glyphRunDescription">The draw glyphs run description, see <see cref="!:GlyphRunDescription"/>.</param>
            <param name="color">The text (foreground) color.</param>
            <param name="measuringMode">The measuring mode, see <see cref="!:MeasuringMode"/>.</param>
        </member>
        <member name="T:C1.Win.C1Document.Util.DXFontSubSet">
            <summary>
            Raw (binary font data) font subset.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.DXFontSubSet.#ctor(C1.Util.DX.DirectWrite.FontFace)">
            <summary>
            Initialization raw subset.
            </summary>
            <param name="fontFace">The font face DX object.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.DXFontSubSet.Init">
            <summary>
            Initialization fields.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.DXFontSubSet.GetFontSubSet(C1.Util.DX.DirectWrite.FontFace,System.Boolean)">
            <summary>
            Gets font subset for DX font face.
            </summary>
            <param name="fontFace">The font face DX object.</param>
            <param name="readGlyphs">Read glyph flags for embedded fonts.</param>
            <returns>The font subset object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.DXFontSubSet.GetFontTableStream(System.String)">
            <summary>
            Gets stream for the font table block by name.
            </summary>
            <param name="name">The name of the font table block.</param>
            <returns>Returns the font table stream, otherwise <b>null</b>.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1DXTextMeasurementContext">
            <summary>
            Implements <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext"/> interface, can be used as context
            to measure the text with using Direct2D and DirectWrite.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1DXGraphics">
            <summary>
            Graphics object used Direct2D and DirectWrite to perform drawing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXGraphics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Util.C1DXGraphics"/> class.
            Instance of the class performs all drawing to the internal image object.
            Call BeginGetImage/EndGetImage() methods to start/finish drawing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1DXGraphics.GdiCompatibleContext">
            <summary>
            Indicates if DeviceContext is based on opaque GdiCompatible bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1DXGraphics.FillColor">
            <summary>
            Used for drawing SSRS pages under Windows 7.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.INativeImage">
            <summary>
            For internal use.
            Represents native image depending on current <see cref="T:C1.Win.C1Document.Util.C1Graphics"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.INativeImage.GetSize">
            <summary>
            Returns size of the image in pixels.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Util.IClipRegion">
            <summary>
            Represents clip region.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.IPath">
            <summary>
            For internal use.
            Behavior similar to: http://msdn.microsoft.com/en-us/library/windows/desktop/dd316578(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.IPathSink">
            <summary>
            For internal use.
            Behavior similar to: http://msdn.microsoft.com/en-us/library/windows/desktop/dd316592(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1DXTextLayout">
            <summary>
            Implements text rendering on the base of DirectWrite API.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayout">
            <summary>
            Base class implements text rendering/measuring functionality.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextAlign">
            <summary>
            Gets the horizontal text alignment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesAlign">
            <summary>
            Gets the vertical text alignment, defines how lines of the text are aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.WritingMode">
            <summary>
            Gets the writing mode, horizontal, vertical etc.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.WordWrap">
            <summary>
            Gets or sets a value indicating whether text automatically
            wraps to the next line when there is not enough space left on the current line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.RightToLeft">
            <summary>
            Gets a value indicating whether the text are aligned to support locales using right-to-left fonts.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.GdiCompatible">
            <summary>
            Gets or sets a value indicating whether the text should be rendered in GDI compatible mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether the space at the end of each line is included in a string measurement.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.NewParagraph">
            <summary>
            Gets or sets a value indicating whether the first line should be interpretted as first line of the paragraph.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyLastLine">
            <summary>
            Gets or sets a value indicating whether the last line should be justified if TextAlign is Justify or JustifyChars.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextIndent">
            <summary>
            Gets or sets an indent of first line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextAngle">
            <summary>
            Gets or sets a text angle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextRanges">
            <summary>
            Gets the collection of formatted text ranges.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.LineSpacing">
            <summary>
            Gets or sets the line spacing, <b>1</b> by default, no additional spacing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth">
            <summary>
            Gets or sets the maximum available width, <b>null</b> - width is unlimited.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight">
            <summary>
            Gets or sets the maximum available height, <b>null</b> - height is unlimited.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Highlight">
            <summary>
            Gets or sets the highlighting which should be used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.VerticalLines">
            <summary>
            Gets or sets a value indicating whether the lines of text should go
            from left to right or from right to left.
            This property is used only if <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextAngle"/> specifies not a right angle
            (not 0, 90, 180 or 270).
            <b>Null</b> indicates that direction will be autocalculated on the base of <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextAngle"/>, <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth"/>, <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextFitMode">
            <summary>
            Gets or sets a value indicating how tex should be fit in specified bounds,
            bounds are specified by the <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth"/> and <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight"/>,
            they both should be not null if <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextFitMode"/> is not <b>None</b>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.CharPitch">
            <summary>
            Gets or sets the value defining additional space between characters.
            This value will be added to the width of each character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirection">
            <summary>
            Calculated. Contains the direction of the lines' flow.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Lines">
            <summary>
            Calculated. List of the text lines.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Width">
            <summary>
            Calculated. The width of the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Height">
            <summary>
            Calculated. The height of the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.AllTextFit">
            <summary>
            Calculated. Indicates whether all text fit into bounds specified by the <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth"/> and <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextLength">
            <summary>
            Calculated. Total text length.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.CreateTextRange(System.String,C1.Win.C1Document.Util.IC1TextFormat)">
            <summary>
            Creates <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange"/> object.
            </summary>
            <param name="text"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.Dispose">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.Clear">
            <summary>
            Clears content of the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.AddText(System.String,C1.Win.C1Document.Util.IC1TextFormat)">
            <summary>
            Adds formatted range of the text to the text layout.
            </summary>
            <param name="text">The text.</param>
            <param name="format">The format of the text.</param>
            <returns>The <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange"/> defining the text range.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.MeasureAutoSize">
            <summary>
            Measures the text size.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.MeasureLayout">
            <summary>
            Measures full text layout, after calling this method you can use all methods of <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/>,
            like HitTest(), Draw() etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.Draw(C1.Win.C1Document.Util.C1Graphics,System.Double,System.Double)">
            <summary>
            Draws current <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> on specified <see cref="T:C1.Win.C1Document.Util.C1Graphics"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.MeasureAndDraw(C1.Win.C1Document.Util.C1Graphics,System.Double,System.Double)">
            <summary>
            Measures layoyt and draws.
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.BuildSelection(C1.Win.C1Document.Util.IC1TextSelectionBuilder)">
            <summary>
            Builds text selection.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.GetCaretCoords(System.Int32,System.Boolean)">
            <summary>
            Use this function to get the pixel location relative to the top-left of the layout box given
            the text position and the logical side of the position.
            </summary>
            <param name="textIndex">The text position used to get the pixel location.</param>
            <param name="isTraling">Indicates whether the location should points to the position <b>after</b> char specified by the <paramref name="textIndex"/>.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.HitTest(System.Double,System.Double)">
            <summary>
            Use this function passing in a specific pixel location relative to the top-left
            location of the layout box and obtains the information about the correspondent
            hit-test metrics of the text string where the hit-test has occurred.
            </summary>
            <param name="x">The pixel location X to hit-test, relative to the top-left location of the layout box.</param>
            <param name="y">The pixel location Y to hit-test, relative to the top-left location of the layout box.</param>
            <returns>Returns <see cref="T:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo"/> contains information about hit test.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.GetSplitPosition(System.Double,System.Int32,C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo@)">
            <summary>
            Determines position where text can be split.
            </summary>
            <param name="pos"></param>
            <param name="minOrphanLines"></param>
            <param name="spi">OUT: Contains information about split position.</param>
            <returns>Returns a value indicating whether the text can be split at specified position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayout.GetText">
            <summary>
            Get the text of this text layout as a single string.
            </summary>
            <returns>The text of the text layout.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayout.JustifyMode">
            <summary>
            Defines the various types of justification which should
            be applied for a text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyMode.None">
            <summary>
            No justufication.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyMode.Standard">
            <summary>
            Standard justification spaces are used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyMode.Chars">
            <summary>
            Width of all chars in the line should be adjusted.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirectionEnum">
            <summary>
            Defines the directions of the lines' flow.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirectionEnum.NormalFlowMask">
            <summary>
            Indicates that lines go in vertical direction top-to-bottom or bottom-to-top
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirectionEnum.NormalDirectionMask">
            <summary>
            Indicates that lines go in most often direction when first line above last line, i.e.
            top-to-bottom or left-to-right
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo">
            <summary>
            Defines split position within text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Before">
            <summary>
            The part of the text above split position.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.After">
            <summary>
            The part of the text below split position.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.Size">
            <summary>
            The size of part in pixels.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.FirstCharIndex">
            <summary>
            Index of the first character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.Length">
            <summary>
            Length in characters, -1 means all remaining text starting with <see cref="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.FirstCharIndex"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayout.TextPos">
            <summary>
            Defines position within text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextPos.TextIndex">
            <summary>
            Index of the char.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextPos.GlyphIndex">
            <summary>
            Index of the glyph.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayout.Line">
            <summary>
            Reprensets a line of the text in <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.Start">
            <summary>
            Position where Line starts.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.End">
            <summary>
            Position where Line ends.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.BeforeHardBreak">
            <summary>
            Position where hardbreak chars at the end of the line start.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.BeforeTralingSpaces">
            <summary>
            Position where traling spaces start.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.Width">
            <summary>
            Width of the line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.Height">
            <summary>
            Height of the line.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextLayout.Line.HardBreak">
            <summary>
            Gets a value indicating whether the line was added due hard break.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextLayout.Line.Length">
            <summary>
            Gets length of line in chars.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo">
            <summary>
            Describes the region of the <see cref="T:C1.Win.C1Document.Util.C1TextLayout"/> obtained by a hit test.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition">
            <summary>
            The text position.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.Length">
            <summary>
            The number of text positions within the hit region.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsBefore">
            <summary>
            The coordinates of the caret <b>before</b> <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsAfter">
            <summary>
            The coordinates of the caret <b>after</b> <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsTrailingHit">
            <summary>
            Indicates whether the hit-test location is at the leading or the trailing
            side of the character. When the <see cref="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsInside"/> value is set to FALSE,
            this value is set according to the <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition"/> value to represent the edge closest to the hit-test location.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsInside">
            <summary>
            Indicates whether the hit-test location is inside the text string.
            When FALSE, the position nearest the text's edge is returned.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoords">
            <summary>
            Get the caret coords, depending on <see cref="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsTrailingHit"/> this property
            returns <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsAfter"/> or <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsBefore"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Owner">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Util.IC1DXTextLayoutOwner"/> owning this <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout._linesSize">
            <summary>
            Equals to MaxHeight if _isLinesVertical is true otherwise equals to MaxWidth.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout._textSize">
            <summary>
            Equals to MaxWidth if _isLinesVertical is true otherwise equals to MaxHeight.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout._textAlignSize">
            <summary>
            Size which should be used to wrap a text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout._firstLineRotateOffset">
            <summary>
            Offset from edge of this <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/> to the first line,
            not zero then TextAngle is not Multiples 90.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout._linesRotatedHeightSum">
            <summary>
            Sum of lines' <see cref="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.RotatedHeight"/>, it calculated on the base of font height,
            this value takes into account LineSpacing vaue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout._maxTextRightBound">
            <summary>
            Width of widest line, it calculated as sum if glyph advances and <see cref="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.TextIndent"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.#ctor(C1.Win.C1Document.Util.IC1DXTextLayoutOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/> class.
            </summary>
            <param name="owner">The IC1DXTextLayoutOwner interface providing additional info used during text rendering.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.DoAutoFontSize(System.Double@,System.Double@)">
            <summary>
            Called when <see cref="T:C1.Win.C1Document.TextFitMode"/> is AutoFontSize.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.PrevPos(C1.Win.C1Document.Util.C1DXTextLayout.Cluster@)">
            <summary>
            Updates <paramref name="cluster"/> so it points on previous text cluster.
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.NextPos(C1.Win.C1Document.Util.C1DXTextLayout.Cluster@)">
            <summary>
            Updates <paramref name="cluster"/> so it points on next text cluster.
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.BuildLinesWordWrap(System.Double,System.Double@)">
            <summary>
            Splits text into lines when WordWrap is true.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.BuildLines(System.Double@)">
            <summary>
            Builds list of lines using hard breaks only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.ResolveGlyphsCommon(C1.Win.C1Document.Util.C1DXTextLayout.FontItem,C1.Win.C1Document.Util.C1DXTextLayout.Range,System.Int32@,System.Int32@)">
            <summary>
            Common method which used to determine a font which can be used to render specified text,
            it uses predefined list of fallback fonts.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.ResolveGlyphsDirectWrite(C1.Win.C1Document.Util.C1DXTextLayout.FontItem,C1.Win.C1Document.Util.C1DXTextLayout.Range,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Determines the font which can be used to render specified text via standard
            DirectWrite IDWriteFontFallback interface,
            this interface supported starting with Windows 8.1.
            </summary>
            <param name="fi"></param>
            <param name="r"></param>
            <param name="ri"></param>
            <param name="totalGlyphCount"></param>
            <param name="glyphStart"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.GetChar(System.Int32)">
            <summary>
            Gets the char at specified text position.
            </summary>
            <param name="charIndex">The text position.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.GetString(System.Int32,System.Int32)">
            <summary>
            Gets the string containg part of the text of this <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/> object.
            </summary>
            <param name="textPosition">The start text position.</param>
            <param name="length">The text length.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1DXTextLayout.UseTransformForSidewaysText">
            <summary>
            Gets a value indicating whether the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/> should NOT
            apply transform to the graphics when draw a vertical text using the font with NOT rotated glyphs.
            For example, "japan" glyphs are NOT rotated when text is drawn in vertical direction from top to bottom.
            Currently this property overriden in the <see cref="T:C1.Win.C1Document.Util.C1GdiGraphics.C1GdiTextLayout"/> because
            if StringFormatFlags.DirectionVertical is specified in StringFormat then rotation transform 
            should NOT be applied for WinForms Graphics object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1DXTextLayout.BuildCharMapWhenDrawGlyphRun">
            <summary>
            Gets a value indicating whether the arrays if characters' widths should be build and passed
            to the DrawGlyphRun(...) method.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1DXTextLayout.Cluster">
            <summary>
            Position within text including index of the range containing this position.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Cluster.Pos">
            <summary>
            Position within text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Cluster.RangeIndex">
            <summary>
            Index of the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout.Range"/> containing <see cref="F:C1.Win.C1Document.Util.C1DXTextLayout.Cluster.Pos"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.FontItem.Metrics">
            <summary>
            Cached <see cref="T:C1.Util.DX.DirectWrite.FontMetrics"/>, usable only of C1DXMeasurementTextLayout2.GdiCompatible is false.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.FontItem.Panose">
            <summary>
            Cached <see cref="T:C1.Util.DX.DirectWrite.Panose"/> used in font fallback methods.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.FontItem.SpaceGlyphIndex">
            <summary>
            Index of the space glyph for FontFace.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.FontItem.TabWidth">
            <summary>
            Width of the TAB.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.MemBlock.ToArray``1">
            <summary>
            Only for testing purposes, to view the data containing in this <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout.MemBlock"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Util.IC1TextRange">
            <summary>
            Defines various attributes of the text range which used by <see cref="T:C1.Win.C1Document.Util.C1Graphics"/> to draw range of text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.IC1TextRange.GetFontFacePtr">
            <summary>
            Gets the pointer to the IDWriteFontFace interface, usable if D2D functions is used to draw a text.
            </summary>
            <param name="textLayout"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.IC1TextRange.GetFontFace">
            <summary>
            Gets the DW.FontFace object which allows to get all required info about font.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.IC1TextRange.GetBaseLineOffset">
            <summary>
            Gets the offset of the base line of the font in DIPs 1/96 inch.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextRange.IsSideways">
            <summary>
            Gets a value indicating whether the text is vertical like japanese for example.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextRange.BidiLevel">
            <summary>
            Gets the bidi level of the text, if BidiLevel % 2 != 0 then it is RightToLeft text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextRange.FontName">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextRange.FontEmSize">
            <summary>
            Gets the font size in DIPs, 1/96 inch.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextRange.FontStyle">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextRange.FontWeight">
            <summary>
            Gets the font weight, bold, normal etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.IC1TextRange.FontStretch">
            <summary>
            Gets the font stretch.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Range.TextStart">
            <summary>
            Start of the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Range.TextLength">
            <summary>
            Length of the range.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:C1.Win.C1Document.Util.C1DXTextLayout.Range.RightToLeft" -->
        <member name="T:C1.Win.C1Document.Util.C1DXTextLayout.Line2">
            <summary>
            Reprensets a line of the text in <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.StartRangeIndex">
            <summary>
            Index of the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout.Range"/> where line starts.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.EndRangeIndex">
            <summary>
            Index of the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout.Range"/> where line ends.
            If <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MeasureTrailingSpaces"/> is false then trailing spaces is not included.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.RotatedHeight">
            <summary>
            Specifies the "rotated" height of the line, this property equals to 
            Height / cos(TextAngle) or Height / sin(TextAngle).
            Depending on lines flow direction (vertical or by horizontal).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.TextIndent">
            <summary>
            Offset from the left / right where text of the line starts,
            depends on the <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextIndent"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.CenterX">
            <summary>
            X coordinate of line's center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.CenterY">
            <summary>
            Y coordinate of line's center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.StartOffset">
            <summary>
            Offset from center point where line's content starts.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Line2.BaseLine">
            <summary>
            Offset of base line from top of the line.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1DXTextLayout.C1TextLayoutRange2">
            <summary>
            Represents range of formatted text in the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextLayoutRange">
            <summary>
            Represents range of formatted text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayoutRange.Text">
            <summary>
            Gets or sets the text of the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1TextLayoutRange.Format">
            <summary>
            Gets or sets the format of the text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayoutRange.#ctor(System.String,C1.Win.C1Document.Util.IC1TextFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange"/> class.
            </summary>
            <param name="text">The value of the <see cref="F:C1.Win.C1Document.Util.C1TextLayoutRange.Text"/> property.</param>
            <param name="format">The value of the <see cref="F:C1.Win.C1Document.Util.C1TextLayoutRange.Format"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextLayoutRange.Dispose">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.C1TextLayoutRange2.#ctor(System.String,C1.Win.C1Document.Util.IC1TextFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout.C1TextLayoutRange2"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="format">The format of the text.</param>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1DXTextLayout.C1TextLayoutRange2.LocaleName">
            <summary>
            Gets the pointer to the string containing culture name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1DXTextLayout.C1TextLayoutRange2.FontEmSize">
            <summary>
            Get a size of the font in the DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1GdiGraphics.Transform">
            <summary>
            Replace this with actual implementation.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1GdiGraphics.C1GdiTextLayout">
            <summary>
            C1GdiTextLayout derived from <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/>, all measurements in the <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout"/>
            are performed in the DIPs, so C1GdiTextLayout converts value to the dpi of C1GdiGraphics.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.ArcSize">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368068(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.SweepDirection">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368166(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.FigureBegin">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368106(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.FigureEnd">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368108(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.ArcSegment">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368065(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.FillMode">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368110(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.SmoothingMode">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1HtmlGraphics.WriteLinks">
            <summary>
            Adds rectangles surrounded by A tag with HREF to the end of SVG content
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1HyperlinkAttrs">
            <summary>
            Represents the visual attributes of a text hyperlink in a certain state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor(System.Drawing.Color,System.Drawing.Color,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> class,
            assigning background and foreground colors and <see cref="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline"/> property.
            </summary>
            <param name="backColor">The background color of the hyperlink text.</param>
            <param name="foreColor">The foreground color of the hyperlink text.</param>
            <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> class,
            assigning <see cref="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline"/> property.
            </summary>
            <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            This method compares properties on the two objects.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><b>true</b> if the specified Object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/>.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.BackColor">
            <summary>
            Gets the background color.
            If this value indicates an empty or transparent color,
            the background color of a hyperlink is not changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.ForeColor">
            <summary>
            Gets the foreground (text) color.
            If this value indicates an empty or transparent color,
            the text color of a hyperlink is not changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline">
            <summary>
            Gets a value indicating whether the text of a hyperlink is underlined.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.VisitedDefault">
            <summary>
            Gets the default attributes of visited hyperlinks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.NormalDefault">
            <summary>
            Gets the default attributes of "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.HoverDefault">
            <summary>
            Gets the default attributes of highlighted hyperlinks.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1ImageFormat">
            <summary>
            For internal use.
            Represets an image format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1Image">
            <summary>
            For internal use.
            Helper class rerpesents the crossplatform image holder in C1Document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1Image._scaleFactorX">
            <summary>
            Used only if C1Image represents a metafile.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1Image._scaleFactorY">
            <summary>
            Used only if C1Image represents a metafile.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Image.GetData">
            <summary>
            Use this method to get the <see cref="T:System.IO.MemoryStream"/> which can be used to create an image
            in multithreading enviroment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1Image.GetFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1ImageFormat"/> value corresponding to the passed <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.C1PaperSize">
            <summary>
            <see cref="T:C1.Win.C1Document.C1PaperSize"/> contains all possible standard paper sizes from all platforms
            WinForms, WPF, UWP etc.
            Currerntly this enumeration is a copy of WinForms PaperKind enumeration because
            it contains all possible paper sizes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1PaperSizeConverter">
            <summary>
            Contains methods to convert platform paper size to <see cref="T:C1.Win.C1Document.C1PaperSize"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1PdfGraphics.PageScale(System.Double,System.Double)">
            <summary>
            Set page scale for this graphics (for links and bookmarks).
            </summary>
            <param name="sx">The horizontal scale.</param>
            <param name="sy">The vertical scale.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1PdfGraphics.Reset">
            <summary>
            Resets state of this <see cref="T:C1.Win.C1Document.Util.C1PdfGraphics"/> object,
            called from exporters when rendering of the document's page is finished.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1PdfGraphics.Angle">
            <summary>
            Gets current angle from transform.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1PositionBase">
            <summary>
            Base class for all classes defining position of the <see cref="T:C1.Win.C1Document.RenderObject"/> within
            <see cref="T:C1.Win.C1Document.RenderContainer"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PositionBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.C1Document.C1PositionBase"/>.
            </summary>
            <returns>The created <see cref="T:C1.Win.C1Document.C1PositionBase"/> object.</returns>
        </member>
        <member name="T:C1.Win.C1Document.C1Position">
            <summary>
            Defines position of the <see cref="T:C1.Win.C1Document.RenderObject"/> in absolute units.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Position.#ctor(C1.Win.C1Document.Unit,C1.Win.C1Document.Unit,C1.Win.C1Document.Unit,C1.Win.C1Document.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Position"/> class.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1Position.X">
            <summary>
            Gets the X coordinate of the object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Position.Y">
            <summary>
            Gets the Y coordinate of the object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Position.Width">
            <summary>
            Gets the width of the object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Position.Height">
            <summary>
            Gets the height of the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1RichText.c_MeasureDelta">
            <summary>
            see Measure(...) method.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.GetRtfMetafile(System.String,System.Int32,System.Int32,C1.Win.Interop.Rect,System.Boolean)">
            <summary>
            Draws specified RTF text into metafile and returns this metafile.
            </summary>
            <param name="rtf"></param>
            <param name="firstCharIndex"></param>
            <param name="length"></param>
            <param name="bounds"></param>
            <param name="detectUrls"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.GetRtfMetafileBytes(System.String,System.Int32,System.Int32,C1.Win.Interop.Rect,System.Boolean)">
            <summary>
            Draws specified RTF text into metafile and returns metafile's data,
            <paramref name="bounds"/> should be specified in twips.
            </summary>
            <param name="rtf"></param>
            <param name="firstCharIndex"></param>
            <param name="length"></param>
            <param name="bounds"></param>
            <param name="detectUrls"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.SetText(System.String)">
            <summary>
            Sets the specified text to the object, this methods sets text
            using SF_UNICODE flag.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.SetRtf(System.String)">
            <summary>
            Sets RTF text to the object.
            </summary>
            <param name="rtf"></param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.GetRtf">
            <summary>
            Gets the object's content as RTF text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.GetSelectedRtf">
            <summary>
            Gets the selected RTF text, text can be selected with using SetSelection
            method.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.GetText">
            <summary>
            Gets the object's content as simple text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.DrawOrMeasure(System.Drawing.Graphics,System.Drawing.Graphics,C1.Win.Interop.Rect,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws or measures the RTF text.
            </summary>
            <param name="drawGraphics">Graphics object on which text will be drawn. Can be null if only measuring should be performing.</param>
            <param name="measureGraphics">Graphics object, which will be used for measuring of RTF text.</param>
            <param name="boundsRect">Bounds of text in twips. If width or height specified as -1 then it means that this dimension infinite.</param>
            <param name="unitType">Unit of measurement of boundsRect.</param>
            <param name="startIndex">Index of first char of text's range.</param>
            <param name="length">Length of text range, if this parameter is 0 or less than zero then all text from startIndex will be calculated.</param>
            <returns>Returns the C1RichTextMeasureInfo which contains the measured info.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.Load(System.String,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the object's content from specified file.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.Load(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the object's content from stream.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.CopyFrom(C1.Win.C1Document.Util.C1RichText)">
            <summary>
            Copies properties of another C1RichText object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.SetSelection(System.Int32,System.Int32)">
            <summary>
            Sets the selection.
            </summary>
            <param name="selectionStart">Index of the first selected char, zero-based.</param>
            <param name="selectionLength">Length of selected text, if it is -1 then all text from selectionStart will be selected.</param>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1RichText.SetFont(System.Drawing.Font)">
            <summary>
            Sets default font, it used when assigned RTF do define a font.
            </summary>
            <param name="font"><see cref="T:System.Drawing.Font"/> to define.</param>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1RichText.Transparent">
            <summary>
            Gets or sets the value indicating whether the RTF is transparent when painting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1RichText.TextLength">
            <summary>
            Gets the length of text, length of real text will be calculated, 
            the length of RTF tags will not taken into account.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1RichText.DetectUrls">
            <summary>
            Gets or sets a value indicating whether or not the C1RichText will automatically 
            format a Uniform Resource Locator (URL).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1RichText.Handle">
            <summary>
            Handle of native API window which is used.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1RichText.MeasureInfo">
            <summary>
            Represents a result of measuring of RTF text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1RichText.MeasureInfo.BoundsRectTw">
            <summary>
            Bounds of text in twips.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1RichText.MeasureInfo.FittedCharsCount">
            <summary>
            Count of characters which  fit into the BoundsRect rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Util.C1RichText.MeasureInfo.AllCharsFitted">
            <summary>
            True if all characters are fitted.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1RichText.RtfVersionEnum">
            <summary>
            Enumerates the supported versions of RTF.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1RichText.RtfVersionInfo">
            <summary>
            Contains the additional information about each
            RTF version: DLL name, class name of Rich window used in this DLL.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SortedList`2.Add(`0,`1)">
            <summary>
            Adds value to the list, returns index of the added value, throws exception if value with specified key already exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Util.C1TextFormat">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Util.C1TextFormat.#ctor(C1.Win.C1Document.Util.C1TextFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Util.C1TextFormat"/> structure using 
            properties of passed <see cref="T:C1.Win.C1Document.Util.C1TextFormat"/> structure.
            </summary>
            <param name="source">The source structure properties of which are copied.</param>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontStretch">
            <summary>
            Gets the font stretch.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontName">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontWeight">
            <summary>
            Gets the font weight.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontStyle">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontSize">
            <summary>
            Gets the font size.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.Culture">
            <summary>
            Gets culture associated with this format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.RightToLeft">
            <summary>
            Gets a value indicating whether the text are aligned to support locales using right-to-left fonts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.TextDecoration">
            <summary>
            Gets the text decoration.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.BackColor">
            <summary>
            Gets the background color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.Brush">
            <summary>
            Gets the background brush.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Util.C1TextFormat.ForeColor">
            <summary>
            Gets the fore color.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FC">
            <summary>
            <para>For internal use.</para>
            Implements the static methods for comparing the float and double numbers
            with specified precision.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.FC.IsEmpty(C1.Win.Interop.Thickness)">
            <summary>
            For internal use.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.Contains(C1.Win.Interop.Rect,C1.Win.Interop.Point)">
            <summary>
            For internal use.
            </summary>
            <param name="r"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.IntersectsWith(C1.Win.Interop.Rect,C1.Win.Interop.Point,C1.Win.Interop.Point)">
            <summary>
            For internal use.
            Returns true if line segment specified by the <paramref name="p1"/> and <paramref name="p2"/>
            intersects the rectangle <paramref name="r"/>.
            </summary>
            <param name="r"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.IntersectsWith(C1.Win.Interop.Rect,C1.Win.C1Document.C1TextBlockCoords@)">
            <summary>
            For internal use.
            </summary>
            <param name="r"></param>
            <param name="tbc"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.Contains(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            For internal use.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="p11"></param>
            <param name="p12"></param>
            <param name="p21"></param>
            <param name="p22"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.AreIntersecting(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            For internal use.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.AreIntersecting(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="p11"></param>
            <param name="p12"></param>
            <param name="p21"></param>
            <param name="p22"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.EQ(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            For internal use.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.EQ(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.EQ(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.LEQ(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.LEQ(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.GEQ(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.GEQ(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.L(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.L(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.G(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.G(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.Compare(System.Double,System.Double)">
            <summary>
            For internal use.
            Returns -1 if v1 less than v2, 0 if v1 equals to v2, 1 if v1 greater than v2.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.GraphicsHolder">
            <summary>
            Holds a Graphics object together with (printer) device or bitmap that was used
            to create it, if any. The point is to dispose the device or bitmap together
            with the graphics when it is no longer needed (i.e. to avoid resource leaks).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.GraphicsHolder.Empty">
            <summary>
            An empty graphics holder instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GraphicsHolder.Dispose">
            <summary>
            Disposes the current graphics holder.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GraphicsHolder.Dispose(System.Boolean)">
            <summary>
            Disposes the current graphics holder.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GraphicsHolder.FromDC(System.IntPtr)">
            <summary>
            Creates a graphics holder from a device context.
            When the holder is disposed, both graphics and the device context are released (DeleteDC is called on the device context).
            </summary>
            <param name="dc">The device context from which graphics is created.</param>
            <returns>The new instance of the graphics holder.</returns>
        </member>
        <member name="M:C1.Win.C1Document.GraphicsHolder.FromGraphics(System.Drawing.Graphics)">
            <summary>
            Creates a graphics holder from a graphics instance.
            When the holder is disposed, the graphics is left alone (i.e. NOT disposed).
            </summary>
            <param name="g">The graphics to store in the new holder.</param>
            <returns>The new instance of the graphics holder.</returns>
        </member>
        <member name="M:C1.Win.C1Document.GraphicsHolder.FromScreen">
            <summary>
            Creates a graphics holder from screen. If that fails (e.g. on Azure), the graphics is created from a bitmap.
            When the holder is disposed, both graphics and the bitmap are released.
            </summary>
            <returns>The new instance of the graphics holder.</returns>
        </member>
        <member name="M:C1.Win.C1Document.GraphicsHolder.FromBitmap">
            <summary>
            Creates a graphics holder from a bitmap. The graphics and the bitmap are released when the holder is disposed.
            This should never fail.
            </summary>
            <returns>The new instance of the graphics holder.</returns>
        </member>
        <member name="P:C1.Win.C1Document.GraphicsHolder.Graphics">
            <summary>
            Gets the graphics object held by the current instance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.GraphicsHolder.DpiX">
            <summary>
            Gets the horizontal resolution of graphics held by the current instance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.GraphicsHolder.DpiY">
            <summary>
            Gets the vertical resolution of graphics held by the current instance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageArea">
            <summary>
            Lists values identifying a page's area.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.HitTestInfo">
            <summary>
            Contains information about a specific point within <see cref="T:C1.Win.C1Document.C1Page"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.HitTestInfo.IsSameArea(C1.Win.C1Document.HitTestInfo)">
            <summary>
            Compares this <see cref="T:C1.Win.C1Document.HitTestInfo"/> object with another <see cref="T:C1.Win.C1Document.HitTestInfo"/> object and returns value indicating whether objects
            identifying same areas.
            </summary>
            <param name="hti"><see cref="T:C1.Win.C1Document.HitTestInfo"/> object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.IsInsideText">
            <summary>
            Gets or sets value indicating whether text position specified by the <see cref="P:C1.Win.C1Document.HitTestInfo.TextPosition"/> property
            is directly under test point, if this property is <b>false</b> then <see cref="P:C1.Win.C1Document.HitTestInfo.TextPosition"/>
            specifies  text position <b>nearest</b> to test point.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.TextPosition">
            <summary>
            Gets or sets the text <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> structure defining text position corresponding to test point.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.PageArea">
            <summary>
            Gets or sets a value identifying the type of an area located under the test point.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.ToolTip">
            <summary>
            Gets or sets the tooltip of area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.Hyperlink">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> of area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.Fragment">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.RenderFragment"/> under test point.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AsyncActionProgressHandler`1">
            <summary>
            Represents a method that handles progress update events of an asynchronous action that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous action.</param>
            <param name="progressInfo">The progress information.</param>
        </member>
        <member name="T:C1.Win.C1Document.AsyncActionWithProgressCompletedHandler`1">
            <summary>
            Represents a method that handles the completed event of an asynchronous action that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous action.</param>
            <param name="asyncStatus">The status of asynchronous action.</param>
        </member>
        <member name="T:C1.Win.C1Document.AsyncStatus">
            <summary>
            Specifies the status of an asynchronous operation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Started">
            <summary>
            The operation has started.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Completed">
            <summary>
            The operation has completed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Canceled">
            <summary>
            The operation was canceled.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Error">
            <summary>
            The operation has encountered an error.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AsyncOperationProgressHandler`2">
            <summary>
            Represents a method that handles progress update events of an asynchronous operation that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous operation.</param>
            <param name="progressInfo">The progress information.</param>
        </member>
        <member name="T:C1.Win.C1Document.AsyncOperationWithProgressCompletedHandler`2">
            <summary>
            Represents a method that handles the completed event of an asynchronous operation that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous operation.</param>
            <param name="asyncStatus">The status of asynchronous action.</param>
        </member>
        <member name="T:C1.Win.C1Document.CollectionAction">
            <summary>
            Describes the action that caused a
            <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanging"/> or <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanged"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Insert">
            <summary>
            Item added to the collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Remove">
            <summary>
            Item removed from the collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Set">
            <summary>
            Items replaced in the collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Clear">
            <summary>
            Collection cleared.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NotifyCollectionEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanged"/> and <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanging"/> events.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.NotifyCollectionEventArgs.#ctor(C1.Win.C1Document.CollectionAction,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.NotifyCollectionEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="index">The index of the item that is affected by the change.</param>
        </member>
        <member name="P:C1.Win.C1Document.NotifyCollectionEventArgs.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.NotifyCollectionEventArgs.Index">
            <summary>
            Gets the index of the item that is affected by the change.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NotifyCollectionEventHandler">
            <summary>
            Represents a method that handles the <see cref="!:INotifyCollection.PropertyChanged"/> or <see cref="!:INotifyCollection.PropertyChanging"/> events.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="T:C1.Win.C1Document.PropertyNotifyEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanged"/> and <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanging"/> events.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropertyNotifyEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertyNotifyEventArgs class.
            </summary>
            <param name="propertyName">The name of the property that changing or changed.</param>
        </member>
        <member name="P:C1.Win.C1Document.PropertyNotifyEventArgs.PropertyName">
            <summary>
            Gets the name of the property that changing or changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PropertyNotifyEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanged"/> or <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanging"/> events raised when a property is changed or chaning on an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.INotifyObject">
            <summary>
            Notifies clients that a property value about to be changed or already has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyObject.PropertyChanging">
            <summary>
            Occurs when a property value about to be changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyObject.PropertyChanged">
            <summary>
            Occurs when a property value changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutlineNode">
            <summary>
            Represents an outline node within a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutlineNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.OutlineNode"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutlineNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.OutlineNode"/> class.
            </summary>
            <param name="caption">The node caption.</param>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Owner">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNodeCollection"/> containing the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Parent">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNode"/> which is the parent of the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Level">
            <summary>
            Gets the nesting level of the current node within the nodes' tree
            (top-level nodes have level 0).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Caption">
            <summary>
            Gets or sets the UI string used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.LinkTarget">
            <summary>
            Determines the target of the current hyperlink.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Image">
            <summary>
            Gets or sets the image used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.ImageName">
            <summary>
            Gets or sets the name in the <see cref="P:C1.Win.C1Document.C1Document.Dictionary"/> of the icon used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Children">
            <summary>
            Gets the collection of child nodes of the current node.
            Note that accessing this property initializes the collection if it has not been initialized yet.
            To test whether there are child nodes without this side effect, use the <see cref="P:C1.Win.C1Document.OutlineNode.HasChildren"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.HasChildren">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.Win.C1Document.OutlineNode.Children"/> collection of the current node
            has been initialized and contains at least one element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.TopParent">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNode"/> that is the root of the current node tree.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Document">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Document"/> containing the current node tree.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutlineNodeCollection">
            <summary>
            Represents collection of the <see cref="T:C1.Win.C1Document.OutlineNode"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNodeCollection.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutputRangeType">
            <summary>
            Specifies the type of an <see cref="T:C1.Win.C1Document.OutputRange"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRangeType.All">
            <summary>
            All pages of the document are in the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRangeType.PageList">
            <summary>
            Pages that are in the range are specified as a list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRangeType.PageRange">
            <summary>
            One or more ranges of pages are specified.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutputRange">
            <summary>
            Describes a part of the document (pages or objects) that is to be
            exported or printed.
            Note: all page numbers are 1-based.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRange.All">
            <summary>
            Represents an all-inclusive range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRange.AllInverted">
            <summary>
            Represents an all-inclusive range with inverted order.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor">
            <summary>
            Creates a new instance of the output range that includes all pages in the document.
            Note that enumerating the resulting range must be broken by the client.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of OutputRange that includes a single interval of
            pages. 
            </summary>
            <param name="fromPage">The number of the first page to include (1-based).</param>
            <param name="toPage">The number of the last page to include (1-based).</param>
            <param name="inverted">Indicates whether the range should be inverted, see <see cref="P:C1.Win.C1Document.OutputRange.Inverted"/> for details.</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of OutputRange that includes a single interval of
            pages. FromPage may be greater than ToPage, in that case the range is
            inverted.
            </summary>
            <param name="fromPage">The number of the first page to include (1-based).</param>
            <param name="toPage">The number of the last page to include (1-based).</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32[])">
            <summary>
            Creates an instance of OutputRange that includes all pages with
            numbers specified in the list.
            </summary>
            <param name="pageNumbers">The array of page numbers to include.</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.String)">
            <summary>
            Creates an instance of OutputRange that includes pages specified by the
            string parameter.
            The string may contain:
            - page numbers (1-based) separated by spaces or commas;
            - dashes ('-') to specify intervals (a dash at the end implies infinity).
            </summary>
            <param name="pages">The pages to be included.</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Creates an instance of OutputRange that includes all pages with
            numbers specified in the list.
            </summary>
            <param name="pageNumbers">The array of page numbers to include.</param>
            <param name="inverted">Indicates whether the range should be inverted, see <see cref="P:C1.Win.C1Document.OutputRange.Inverted"/> for details.</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of OutputRange that includes pages specified by the
            string parameter.
            The string may contain:
            - page numbers (1-based) separated by spaces or commas;
            - dashes ('-') to specify intervals (a dash at the end implies infinity).
            </summary>
            <param name="pages">The pages to be included.</param>
            <param name="inverted">Indicates whether the range should be inverted, see <see cref="P:C1.Win.C1Document.OutputRange.Inverted"/> for details.</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.ToString">
            <summary>
            Returns a string that represents the current OutputRange.
            </summary>
            <returns>A string that represents the range.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Contains(System.Int32)">
            <summary>
            Tests whether the specified page is within the range.
            </summary>
            <param name="pageNumber">The page number to test.</param>
            <returns>True if the page is in the range, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <param name="minPageNumber">Minimum page number used if page range specified as "-2".</param>
            <param name="maxPageNumber">Maximum page number used if page range specified as "2-".</param>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator(System.Int32)">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <param name="maxPageNumber">Maximum page number used if page range specified as "2-".</param>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.InRange(System.Int32,System.Int32)">
            <summary>
            Tests whether the page numbers specified by this <see cref="T:C1.Win.C1Document.OutputRange"/> within specified range.
            </summary>
            <param name="minPageNumber"></param>
            <param name="maxPageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the number of the page with specified index.
            </summary>
            <param name="pageIndex"></param>
            <param name="minPageNumber"></param>
            <param name="maxPageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetPageCount(System.Int32,System.Int32)">
            <summary>
            Gets the total number of pages in the range.
            </summary>
            <param name="minPageNumber"></param>
            <param name="maxPageNumber"></param>
        </member>
        <member name="P:C1.Win.C1Document.OutputRange.Type">
            <summary>
            Type of range: all pages, range of pages etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutputRange.Inverted">
            <summary>
            Gets the value indicating whether the range should be inverted.
            If the range is inverted, the range's iterator goes from the end of the
            range backwards.
            </summary>
            <value>True if the range is inverted, false otherwise.</value>
        </member>
        <member name="P:C1.Win.C1Document.OutputRange.FromPage">
            <summary>
            Gets the first page in the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutputRange.ToPage">
            <summary>
            Gets the last page in the range.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutputRange.Enumerator">
            <summary>
            Allows to enumerate all pages in the range.
            Note: It is the client reesponsibility to take steps
            to avoid infinite loops if the OutputRange
            was created without specifying a valid MaxPageNumber.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Enumerator.#ctor(C1.Win.C1Document.OutputRange,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the OutputRange enumerator.
            </summary>
            <param name="range"></param>
            <param name="minPageNumber"></param>
            <param name="maxPageNumber"></param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Enumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Enumerator.MoveNext">
            <summary>
            Moves to the next page number in the range.
            </summary>
            <returns>True if there are more pages in the range.</returns>
        </member>
        <member name="P:C1.Win.C1Document.OutputRange.Enumerator.Current">
            <summary>
            Gets the current page number.
            </summary>
            <value>The current page number.</value>
        </member>
        <member name="T:C1.Win.C1Document.Utils">
            <summary>
            Contains common functions.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Utils.AlignDir(System.Double,System.Double,C1.Win.C1Document.Utils.ImageAlignBaseEnum,System.Boolean,System.Double@,System.Int32@)">
            <summary>
            Internal, used from AlignImage() only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Utils.ValueToString(System.Object)">
            <summary>
            Converts value to string, returns "NULL" if value is null, otherwise returns
            string in format: "value.ToString()(value.GetType().FullName)".
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetSystemResolutionScaleFactors(System.Single@,System.Single@)">
            <summary>
            Returns the current scale factor for system resolution regarding to default 96 dpi.
            For example, if system dpi is 120 then 1.25 will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsWindows8_0OrHigher">
            <summary>
            Returns <b>true</b> if OS is Windows8.0 or higher,
            this method calls RtlGetVersion() API function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsWindows8_1OrHigher">
            <summary>
            Returns <b>true</b> if OS is Windows8.1 or higher,
            this method calls RtlGetVersion() API function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.SamePaperSizes(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Tests two sizes for equality allowing a small margin for rounding errors.
            </summary>
            <param name="size1">The first size to compare.</param>
            <param name="size2">The second size to compare.</param>
            <returns>True if the two sizes are reasonably close, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies content of one stream to another.
            </summary>
            <param name="src">The source stream.</param>
            <param name="dst">The destination stream.</param>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets resource stream from specified assembly.
            </summary>
            <param name="asmb"></param>
            <param name="resName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.AlignImage(C1.Win.Interop.Size,C1.Win.C1Document.IImageAlign,C1.Win.Interop.Rect)">
            <summary>
            Aligns the image (represented by its size) within the specified rectangle.
            </summary>
            <param name="imageSize">The source image size.</param>
            <param name="align">Alignment to use.</param>
            <param name="alignRect">The target rectangle.</param>
            <returns>The <see cref="T:C1.Win.C1Document.Utils.ImageAlignInfo"/> object describing how the image should be drawn.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.TryCastNumber(System.Object,System.Globalization.CultureInfo,System.Boolean,System.Double@)">
            <summary>
            Based on old C1Report code, used to convert any object to double,
            see function's source code for details. Returns <b>true</b> if conversion successfull, false otherwise.
            </summary>
            <param name="o">Object to convert.</param>
            <param name="cultureInfo"><see cref="T:System.Globalization.CultureInfo"/> used in conversion.</param>
            <param name="nullAsZero">Convert null or <see cref="F:System.DBNull.Value"/> to zero and return <b>true</b>, otherwise <b>false</b> will be returned.</param>
            <param name="value">OUT: double value.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.FormatValueC1Report(System.String,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Formats specified value using C1Report syntax.
            </summary>
            <param name="val">The value to format.</param>
            <param name="fmt">The format string.</param>
            <returns>The result of formatting.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.ToTwips(System.Double,System.Double)">
            <summary>
            Converts value in pixels to the value in twips.
            </summary>
            <param name="valuePixels">The value in twips.</param>
            <param name="dpi">The dpi which should be used.</param>
            <returns>The value in twips.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetRelativePath(System.String,System.String)">
            <summary>
            Returns the relative path, for example:
            GetRelativePath("c:\temp", "c:\temp\qq\zz.txt") returns "qq\zz.txt".
            </summary>
            <param name="basePath"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetParameterlessCtor(System.Type)">
            <summary>
            Returns default instance parameter-less constructor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsEnum(System.Type)">
            <summary>
            Gets a value indicating whether the current Type represents an enumeration.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsValueType(System.Type)">
            <summary>
            Gets a value indicating whether the Type is a value type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Compares two strings, could be used in Xaml and WinForms.
            </summary>
            <param name="strA"></param>
            <param name="indexA"></param>
            <param name="strB"></param>
            <param name="indexB"></param>
            <param name="length"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.BarCodeEnumToCodeType(C1.Win.C1Document.BarCodeEnum)">
            <summary>
            Converts <see cref="T:C1.Win.C1Document.BarCodeEnum"/> value to <see cref="T:C1.BarCode.CodeType"/> value.
            </summary>
            <param name="bc"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsNull(System.Object)">
            <summary>
            Returns a value indicating whether a value is null or System.DBNull.
            </summary>
            <param name="v">Value to test.</param>
            <returns>Returns <b>true</b> if <paramref name="v"/> is null or System.DBNull, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsEmpty(System.Object)">
            <summary>
            Returns a value indicating whether a value is null, System.DBNull or empty array.
            </summary>
            <param name="v">Value to test.</param>
            <returns>Returns <b>true</b> if <paramref name="v"/> is value is null, System.DBNull or empty array.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Swap``1(``0@,``0@)">
            <summary>
            Swaps two values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v1"></param>
            <param name="v2"></param>
        </member>
        <member name="M:C1.Win.C1Document.Utils.TryObjectAsDouble(System.Object,System.Globalization.CultureInfo,System.Double@)">
            <summary>
            Tries convert object to double.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsNumber(System.Object)">
            <summary>
            Checks whether object represents numeric value, i.e. it is byte, integer, float etc.
            </summary>
            <param name="obj">Object to check.</param>
            <returns><b>true</b> if object represents numeric value, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.AsNumber(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.TryAsNumber(System.Object,System.Double@)">
            <summary>
            Checks whether object represents numeric value, i.e. it is byte, integer, float etc and
            converts it to double. Returns false if object is not number.
            </summary>
            <param name="obj">Value to check.</param>
            <param name="v">Double value.</param>
            <returns>Returns true if <paramref name="obj"/> contains numeric value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the word in the text near to specified position.
            </summary>
            <param name="s"></param>
            <param name="p"></param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetNearText(System.String,System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Gets the text which is "near" to specified position.
            </summary>
            <param name="text"></param>
            <param name="position"></param>
            <param name="length"></param>
            <param name="nearText"></param>
            <param name="positionInNearText"></param>
        </member>
        <member name="M:C1.Win.C1Document.Utils.FindTextInstances(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds instances of text in a string.
            </summary>
            <param name="what">The text to search for.</param>
            <param name="where">The string to search.</param>
            <param name="fromIdx">Index in "where" to start search at.</param>
            <param name="length">Length of substring to search in.</param>
            <param name="maxCount">Max number of instances to find.</param>
            <param name="forward">Search direction.</param>
            <param name="matchCase">Ignore case.</param>
            <param name="word">Whole word search.</param>
            <returns>Array of indexes into "where" to the found instances.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.AreObjectsEqual(System.Object,System.Object)">
            <summary>
            Compares two objects using Equals() methods, returns <b>true</b> if both objects are null.
            </summary>
            <param name="v1">First object.</param>
            <param name="v2">Second object.</param>
            <returns>Returns <b>true</b> if objects are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.ValidateFileName(System.String)">
            <summary>
            Check specified string and removed all characters which can not be in file name.
            </summary>
            <param name="s">The string containg file name to check.</param>
            <returns>Returns validated string.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetMetafileData(System.Drawing.Imaging.Metafile)">
            <summary>
            Returns byte array containing the metafile's bits,
            GetEnhMetaFileBits() API function is used.
            Metafile can not be used after calling this function,
            its handle becomes invalid.
            </summary>
            <param name="metafile"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.ReadMetafileFromMemory(System.Byte[])">
            <summary>
            Reads a <see cref="T:System.Drawing.Imaging.Metafile"/> from a byte array.
            </summary>
            <param name="imageData">The byte array containing the <see cref="T:System.Drawing.Imaging.Metafile"/> data.</param>
            <returns>The newly created <see cref="T:System.Drawing.Imaging.Metafile"/> or null if metafile can not be created from specified data.</returns>
            <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)"/>
        </member>
        <member name="M:C1.Win.C1Document.Utils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)">
            <summary>
            Writes a <see cref="T:System.Drawing.Imaging.Metafile"/> to a byte array.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to write.</param>
            <returns>The byte array containing the <paramref name="metafile"/> data.</returns>
            <seealso cref="M:C1.Win.C1Document.Utils.ReadMetafileFromMemory(System.Byte[])"/>
        </member>
        <member name="M:C1.Win.C1Document.Utils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)">
            <summary>
            Serializes a <see cref="T:System.Drawing.Imaging.Metafile"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to serialize.</param>
            <param name="stream">The target <see cref="T:System.IO.Stream"/>.</param>
            <returns>True if metafile was successfully saved.</returns>
            <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)"/>
            <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)"/>
        </member>
        <member name="M:C1.Win.C1Document.Utils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)">
            <summary>
            Serializes a <see cref="T:System.Drawing.Imaging.Metafile"/> to a disk file.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to serialize.</param>
            <param name="fileName">The target file name.</param>
            <returns>True if metafile was successfully saved.</returns>
            <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)"/>
        </member>
        <member name="M:C1.Win.C1Document.Utils.WriteImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.IO.Stream)">
            <summary>
            Writes specified image to stream.
            </summary>
            <param name="image"></param>
            <param name="imageFormat"></param>
            <param name="stream"></param>
            <returns>Returns null if error occurs during writing or <see cref="T:System.Drawing.Imaging.ImageFormat"/> which was actually used to save an image.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.WriteImageToFile(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Writes specified image to file.
            </summary>
            <param name="image"></param>
            <param name="imageFormat"></param>
            <param name="stream"></param>
            <returns>Returns null if error occurs during writing or <see cref="T:System.Drawing.Imaging.ImageFormat"/> which was actually used to save an image.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Conversions.ToHalfwidthNumbers(System.String,System.Globalization.CultureInfo)">
            <summary>
            Based on Microsoft.VisualBasic.CompilerServices.Utils.ToHalfwidthNumbers()
            </summary>
            <param name="s"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Conversions.IsHexOrOctValue(System.String,System.Globalization.CultureInfo,System.Int64@)">
            <summary>
            Based on Microsoft.VisualBasic.CompilerServices.Utils.IsHexOrOctValue()
            </summary>
            <param name="Value"></param>
            <param name="culture"></param>
            <param name="i64Value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Conversions.ToString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Based on Microsoft.VisualBasic.CompilerServices.ToString(DataTime)
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Conversions.ToString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method created on the base of Microsoft.VisualBasic.CompilerServices.Conversions.ToString()
            using reflection, because original method does not suppor culture.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Conversions.ToDate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Based on Microsoft.VisualBasic.CompilerServices.Conversions.ToDate()
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Conversions.ToDouble(System.Object,System.Globalization.NumberFormatInfo,System.Globalization.CultureInfo)">
            <summary>
            Based on Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble()
            </summary>
            <param name="Value"></param>
            <param name="NumberFormat"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Conversions.ToBoolean(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Based on Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean()
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Strings.vbLCMapString(System.Globalization.CultureInfo,System.Int32,System.String)">
            <summary>
            Based on Microsoft.VisualBasic.Strings.vbLCMapString
            </summary>
            <param name="loc"></param>
            <param name="dwMapFlags"></param>
            <param name="sSrc"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Strings.FormatNamed(System.Object,System.String,System.Globalization.CultureInfo,System.String@)">
            <summary>
            This method based on the <see cref="!:Microsoft.VisualBasic.Strings.FormatNamed()"/>
            and created via reflection, because original method does NOT support culture.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Utils.Strings.Format(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            This method based on the <see cref="!:Microsoft.VisualBasic.Strings.Format()"/>
            and created via reflection, because original method does NOT support culture.
            </summary>
            <param name="Expression"></param>
            <param name="Style"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Utils.ImageAlignInfo">
            <summary>
            Holds calculated data needed to draw the aligned image.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default end user localize options for property, field or class.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="exclude"></param>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.ExcludedMembers">
            <summary>
            Defines a list of members of control that should be excluded from localization.
            Currently used only AddControlToResources application for automatically generating
            control resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1DescriptionAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1DescriptionAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific string description.</param>
            <param name="description">Default non-localized description text.</param>
        </member>
        <member name="P:C1.Win.Localization.C1DescriptionAttribute.Description">
            <summary>
            Returns localized description text if it is available or default value 
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific category.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Looks up the localized name of the specified category.
            </summary>
            <param name="value">The identifer for the category to look up.</param>
            <returns>The localized name of the category, or null if a localized name does not exist.</returns>
        </member>
        <member name="T:C1.Win.Localization.StringsManager">
            <summary>
            The utility class which handles localization tasks.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetResourceStream(System.String,System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Searches for standard resources which looks like BlaBla.Strings.CultureName.resx,
            like C1.Win.C1Preview.Strings.zh.resx or C1.Win.C1Preview.Strings.resx etc.
            Ensures that resource is not *C1* built-in resource, i.e. its name DOES NOT HAVE format
            like
            CultureName.BlaBla.Strings.resx, otherwise bug can occur if entry assembly 
            have C1 builtin resources as in case of C1 executables like C1ThemeDesigner or C1FlexReportDesigner.
            For example C1ThemeDesigner have ja.C1ThemeDesigner.Strings.resx resource
            and this resource *SHOULD BE IGNORED* if  resouceName is "C1ThemeDesigner.Strings.resx" and
            cultureName is "" (invariant).
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <param name="searchInSatelliteOnly"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="cultureName">The culture name to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="M:C1.Util.Win.Win32.LOWORDU(System.IntPtr)">
            <summary>
            Retrieves the low-order word from the specified value. This function handles the message parameters of window. See in MSDN which function used to process the message.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The return value is the low-order word of the specified value.</returns>
            <remarks>
            Use:
            WM_COMMAND, WM_SYSCOMMAND
            WM_SETCURSOR
            WM_ACTIVATE
            WM_MENUCHAR
            WM_HSCROLL WM_VSCROLL - SB_THUMBPOSITION or SB_THUMBTRACK
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.HIWORDU(System.IntPtr)">
            <summary>
            Retrieves the high-order word from the specified value. This function handles the message parameters of window. See in MSDN which function used to process the message.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The return value is the high-order word of the specified value.</returns>
            <remarks>
            WM_HSCROLL WM_VSCROLL -  current position of the scroll box
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_X_LPARAM(System.IntPtr)">
            <summary>
            Retrieves the signed x-coordinate from the given value. 
            This function handles the message parameters of window and is a replacement for LOWORD because LOWORD must return the unsigned value. 
            See in MSDN which function used to process the message.
            </summary>
            <param name="lParam">The value to be converted.</param>
            <returns>The return value is the low-order int of the specified value.</returns>
            <remarks>
            Use:
            WM_CONTEXTMENU,
            WM_MOUSEDOWN, WM_MOUSEUP, WM_MOUSEWHEEL, WM_MOUSEMOVE
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_Y_LPARAM(System.IntPtr)">
            <summary>
            Retrieves the signed y-coordinate from the given value. 
            This function handles the message parameters of window and is a replacement for HIWORD because HIWORD must return the unsigned value. 
            See in MSDN which function used to process the message.
            </summary>
            <param name="lParam">The value to be converted.</param>
            <returns>The return value is the high-order int of the specified value.</returns>
            <remarks>
            Use:
            WM_CONTEXTMENU,
            WM_MOUSEDOWN, WM_MOUSEUP, WM_MOUSEWHEEL, WM_MOUSEMOVE
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_WHEEL_DELTA_WPARAM(System.IntPtr)">
            <summary>
            Retrieves the wheel-delta value from the specified WPARAM value.
            </summary>
            <param name="wParam">The value to be converted.</param>
            <returns>
            The return value is the high-order word representing the wheel-delta value. 
            It indicates the distance that the wheel is rotated, expressed in multiples or divisions of WHEEL_DELTA, which is 120. A positive value indicates that the wheel was rotated forward, away from the user; 
            a negative value indicates that the wheel was rotated backward, toward the user.
            </returns>
            <remarks>
            Use:
            WM_MOUSEWHEEL - zDelta 
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_KEYSTATE_WPARAM(System.IntPtr)">
            <summary>
            Retrieves the state of certain virtual keys from the specified WPARAM value.
            </summary>
            <param name="wParam">The value to be converted.</param>
            <returns>
            The return value is the low-order word representing the virtual key state.
            </returns>
            <remarks>
            Use:
            WM_MOUSEWHEEL - fwKeys  
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.AssocQueryString(System.Int32,System.Int32,System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Gets file-association string from the registry.
            </summary>
            <param name="flags">Use <see cref="T:C1.Util.Win.Win32.ASSOCF"/> constants.</param>
            <param name="str">Use <see cref="T:C1.Util.Win.Win32.ASSOCSTR"/> constants.</param>
            <param name="pszAssoc"></param>
            <param name="pszExtra"></param>
            <param name="pszOut"></param>
            <param name="pcchOut"></param>
            <returns>An <see cref="T:C1.Util.Win.Win32.OLE"/> success/error code.</returns>
            <remarks>
            To get associated exe's length/exe:
            <code>
            uint assocLen = 0;
            AssocQueryString(ASSOCF.ASSOCF_INIT_DEFAULTTOSTAR,ASSOCSTR.ASSOCSTR_EXECUTABLE,Path.GetExtension(OutputFileName),"open",null,ref assocLen);
            </code>
            For existing files, another option is FindExecutable.
            </remarks>
        </member>
        <member name="T:C1.Util.Win.Win32.DM">
            <summary>
            Fiels of DEVMODE structure.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GetDeviceCapsConsts">
            <summary>
            GetDeviceCaps() constants
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SORT">
            <summary>
            Sorting IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LANG">
            <summary>
            Primary language IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SUBLANG">
             <summary>
              Sublanguage IDs.
            
              The name immediately following SUBLANG_ dictates which primary
              language ID that sublanguage ID can be combined with to form a
              valid language ID.
             </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LOCALE">
            <summary>
            Locale Types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.FixFpu">
            <summary>
            usage:
             using (FixFpu ff = new FixFpu())
             { do printer stuff }
            or
             do printer stuff
             FixFpu.Doit();
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.C1PdfAcrofieldType.None">
            <summary>A field type invalid or not found.</summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SC">
            <summary>
            System Menu Command Values
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SWP">
            <summary>
            SetWindowPos flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CDS">
            <summary>
            Flags for ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DISP">
            <summary>
            Return values of the ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WM">
            <summary>
            Windows messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.EM">
            <summary>
            EditControl window messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SB">
            <summary>
            WM_HSCROLL and WM_VSCROLL notifications codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BST">
            <summary>
            BM_GETSTATE flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BM">
            <summary>
            BM_XXX flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODT">
            <summary>
            DRAWITEMSTRUCT control types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODA">
            <summary>
            DRAWITEMSTRUCT drawing actions.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODS">
            <summary>
            DRAWITEMSTRUCT visual states.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.C1">
            <summary>
            ComponentOne constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOperationCodes">
            <summary>
            Specifies a raster-operation code, used by BitBlt function and other.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SW">
            <summary>
            ShowWindow() function codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PRF">
            <summary>
            WM_PRINT drawing options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SF">
            <summary>
            Rich edit data format types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SFF">
            <summary>
            Rich edit data format replacement options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SCF">
            <summary>
            EM_SETCHARFORMAT / EM_GETCHARFORMAT flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PFM">
            <summary>
            EM_SETPARAFORMAT / EM_GETPARAFORMAT flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFM">
            <summary>
            CHARFORMAT mask values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFE">
            <summary>
            CHARFORMAT effects.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TO">
            <summary>
            EM_SETTYPOGRAPHYOPTIONS flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TA">
            <summary>
            Text Alignment Options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DCX">
            <summary>
            GetDCEx() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GW">
            <summary>
            GetWindow() Constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GA">
            <summary>
            GetAncestor() constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ETO">
            <summary>
            ExtTextOut() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SetBkModeConsts">
            <summary>
            SetBkMode modes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OBJ">
            <summary>
            GetObjectType() returning values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TMPF">
            <summary>
            TEXTMETRIC tmPitchAndFamily flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.NTM">
            <summary>
            Values for NETTEXMETRIC.ntmFlags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OLE">
            <summary>
            OLE constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS">
            <summary>
            CreateWindow() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS_EX">
            <summary>
            Extended Window Styles
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ES">
            <summary>
            CreateWindow() flags for edit controls.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFC">
            <summary>
            DrawFrameControl(), type of frame control to draw.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFCS">
            <summary>
            DrawFrameControl(), state of control.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PS">
            <summary>
            CreatePen() flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GWL">
            <summary>
            SetWindowLong() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GR">
            <summary>
            GetGuiResources() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RGN">
            <summary>
            ExtSelectClipRgn() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ScrollWindowFlags">
            <summary>
            ScrollWindowEx flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.MA">
            <summary>
            WM_MOUSEACTIVATE Return Codes
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOp">
            <summary>
            Constants for SetROP2
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ASSOCF">
            <summary>
            Defines ASSOCF values for AssocQueryString method's first parameter (flags).
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ASSOCSTR">
            <summary>
            Defines ASSOCSTR values for AssocQueryString method's second parameter (str).
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.AtomName">
            <summary>
            Name of Atom create by GDI+ for current thread.
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.IsShutdown">
            <summary>
            Gets true if GDI+ currently shutdown.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerAsmName">
            <summary>
            For .NET 4.0 version only, used for designer assembly names.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NonSortingPropertyDescriptorCollection">
            <summary>
            For internal use.
            Provides a non-sorting PropertyDescriptorCollection.
            This is useful for expandable types where you want the nested properties to follow in a certain
            non-alphabetical order.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.CornerRadiusConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LineConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LineTypeEditor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BorderConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AssemblyNames">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AssemblyNames.AsmName_C1Document_4_Design">
            <summary>
            Version-qualified C1.Win.C1Document.4.Design assembly name.
            </summary>
        </member>
    </members>
</doc>
