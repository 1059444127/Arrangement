<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.C1Report.4</name>
  </assembly>
  <members>
    <member name="T:C1.C1Excel.Strings">
      <summary>
            Static class containing UI strings used by the designer.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.Strings">
      <summary>
            Static class containing UI strings used by the designer.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.PdfDocumentInfo">
      <summary>
            Contains information about the document. This information includes 
            the document author, title, keywords, etc.
            </summary>
      <remarks>
        <para>You don't have to provide this information, it is optional. If provided, 
            it is saved with the document and is available to the reader application.</para>
        <para>Some reader applications may allow users to search documents by author, 
            subject, or keyword.</para>
        <para>The Adobe Acrobat Reader 5 does not provide such search mechanism, 
            but it does allow users to view the document information.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Title">
      <summary>
            Gets or sets the title of the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Creator">
      <summary>
            Gets or sets the name of the application that created the original document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Producer">
      <summary>
            Gets or sets the name of the application that created the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Author">
      <summary>
            Gets or sets the name of the person that created the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Subject">
      <summary>
            Gets or sets the subject of the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Keywords">
      <summary>
            Gets or sets keywords (separated by comma) associated with the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.CreationDate">
      <summary>
            Gets or sets the creation date and time of the Pdf document.
            </summary>
      <remarks>
        <para>The default value for this property is the <b>DateTime.MinValue</b>, which
            causes <see cref="T:C1.C1Pdf.C1PdfDocument" /> to use the date and time when the document
            is saved as the creation date.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.C1Anchor">
      <summary>
            Represents an anchor within a document. 
            One or more anchors can be associated with a <see cref="T:C1.C1Preview.RenderObject" />
            via the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> property on the object.
            An anchor (and thus the render object associated with it) can be the
            target of a <see cref="T:C1.C1Preview.C1Hyperlink" /> if that hyperlink's <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" />
            is a <see cref="T:C1.C1Preview.C1LinkTargetAnchor" /> and that anchor's <see cref="P:C1.C1Preview.C1LinkTargetAnchor.AnchorName" />
            is set to that anchor's <see cref="P:C1.C1Preview.C1Anchor.Name" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Anchor" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Anchor" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Anchor" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
      <param name="description">The anchor's description.</param>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor(System.String,System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Anchor" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
      <param name="description">The anchor's description.</param>
      <param name="userData">Arbitrary user data.</param>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.Name">
      <summary>
            Gets the name of the current anchor (must be unique within the document).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.Description">
      <summary>
            Gets the description of the current anchor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.UserData">
      <summary>
            Gets the custom user data associated with the current anchor.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorText">
      <summary>
            Represents an anchor within a text object
            (a <see cref="T:C1.C1Preview.RenderText" />, a <see cref="T:C1.C1Preview.RenderParagraph" /> or a <see cref="T:C1.C1Preview.RenderRichText" />).
            Based on <see cref="T:C1.C1Preview.C1Anchor" />, adds the ability to reference a specific position within the text
            (see <see cref="P:C1.C1Preview.C1AnchorText.Position" />).
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorText" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorText" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorText" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
      <param name="description">The anchor's description.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorText" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
      <param name="description">The anchor's description.</param>
      <param name="userData">Arbitrary user data.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorText" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
      <param name="position">The position within the text.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorText" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
      <param name="description">The anchor's description.</param>
      <param name="position">The position within the text.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String,System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorText" /> class.
            </summary>
      <param name="name">The anchor's name.</param>
      <param name="description">The anchor's description.</param>
      <param name="userData">Arbitrary user data.</param>
      <param name="position">The position within the text.</param>
    </member>
    <member name="P:C1.C1Preview.C1AnchorText.Position">
      <summary>
            Gets the position of anchor withint text, zero based.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.C1Anchor" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.Add(C1.C1Preview.C1Anchor)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.C1Anchor" /> to the current collection.
            </summary>
      <param name="anchor">The anchor to add.</param>
      <returns>Index of the newly added anchor in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.Insert(System.Int32,C1.C1Preview.C1Anchor)">
      <summary>
            Inserts a <see cref="T:C1.C1Preview.C1Anchor" /> into the current collection.
            </summary>
      <param name="index">The position at which to insert the anchor.</param>
      <param name="anchor">The anchor to insert.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.Remove(C1.C1Preview.C1Anchor)">
      <summary>
            Removes a <see cref="T:C1.C1Preview.C1Anchor" /> from the current collection.
            </summary>
      <param name="anchor">The anchor to remove.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.IndexOf(C1.C1Preview.C1Anchor)">
      <summary>
            Returns the index of a <see cref="T:C1.C1Preview.C1Anchor" /> in the current collection.
            </summary>
      <param name="anchor">The anchor to search for.</param>
      <returns>The index of the specified anchor in the current collection, or -1.</returns>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.FindByName(System.String)">
      <summary>
            Searches for an anchor with the specified name in the current collection.
            </summary>
      <param name="anchorName">The name to search for.</param>
      <returns>The anchor with the specified name, or null if the anchor was not found.</returns>
    </member>
    <member name="P:C1.C1Preview.C1AnchorCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.C1Anchor" /> at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.IC1FormatVersionProvider">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1FormatVersion">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1FormatVersion.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TypeConverterBase">
      <summary>
            The abstract base class for type converters that can convert to/from strings.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TypeConverterBase.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to an object.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="M:C1.C1Preview.TypeConverterBase.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkStateEnum">
      <summary>
            Represents the state of a <see cref="T:C1.C1Preview.C1Hyperlink" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Normal">
      <summary>
            An unvisited hyperlink.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Visited">
      <summary>
            A hyperlink that has been visited.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Hover">
      <summary>
            A hyperlink under the mouse pointer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Active">
      <summary>
            A hyperlink that has been clicked, but not yet visited.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1Hyperlink">
      <summary>
            Represents a hyperlink in a document.
            A hyperlink may be assigned to a <see cref="T:C1.C1Preview.RenderObject" />'s <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />,
            or a <see cref="T:C1.C1Preview.ParagraphObject" />'s <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> property.
            In that case clicking on that object in a viewer will jump to the hyperlink's <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Hyperlink" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.RenderObject)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Hyperlink" /> class,
            assigning its <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" /> to a <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" />
            associated with the specified <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
      <param name="renderObject">The <see cref="T:C1.C1Preview.RenderObject" /> to set as the target of the current hyperlink.</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.ParagraphObject)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Hyperlink" /> class,
            assigning its <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" /> to a <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" />
            associated with the specified <see cref="T:C1.C1Preview.ParagraphObject" />.
            </summary>
      <param name="paragraphObject">The <see cref="T:C1.C1Preview.ParagraphObject" /> to set as the target of the current hyperlink.</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.C1LinkTarget)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Hyperlink" /> class,
            assigning its <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" /> to the specified <see cref="T:C1.C1Preview.C1LinkTarget" />.
            </summary>
      <param name="linkTarget">The <see cref="T:C1.C1Preview.C1LinkTarget" /> to set as the target of the current hyperlink.</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.C1LinkTarget,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Hyperlink" /> class,
            assigning its <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" /> to the specified <see cref="T:C1.C1Preview.C1LinkTarget" />.
            </summary>
      <param name="linkTarget">The <see cref="T:C1.C1Preview.C1LinkTarget" /> to set as the target of the current hyperlink.</param>
      <param name="statusText">The string to assign to <see cref="P:C1.C1Preview.C1Hyperlink.StatusText" /> of the current hyperlink.</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.C1LinkTarget,System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Hyperlink" /> class,
            assigning its <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" /> to the specified <see cref="T:C1.C1Preview.C1LinkTarget" />.
            </summary>
      <param name="linkTarget">The <see cref="T:C1.C1Preview.C1LinkTarget" /> to set as the target of the current hyperlink.</param>
      <param name="statusText">The string to assign to <see cref="P:C1.C1Preview.C1Hyperlink.StatusText" /> of the current hyperlink.</param>
      <param name="userData">Arbitrary value to assign to <see cref="P:C1.C1Preview.C1Hyperlink.UserData" /> of the current hyperlink.</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1Hyperlink" /> class,
            assigning its <see cref="P:C1.C1Preview.C1Hyperlink.LinkTarget" /> to a <see cref="T:C1.C1Preview.C1LinkTargetAnchor" />
            associated with the specified anchor name.
            </summary>
      <param name="anchorName">The name of the <see cref="T:C1.C1Preview.C1Anchor" /> to set as the target of the current hyperlink.</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.AssignFrom(C1.C1Preview.C1Hyperlink)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.Clone">
      <summary>
            Creates a copy of the current object.
            </summary>
      <returns>The newly created object.</returns>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.StatusText">
      <summary>
            Text shown in the status line when the mouse is over the link
            (when the document is viewed in a <b>C1PrintPreview</b>).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.LinkTarget">
      <summary>
            Determines the target of the current hyperlink.
            </summary>
      <remarks>
        <para>The hyperlink target is described by an instance of a class derived from <see cref="T:C1.C1Preview.C1LinkTarget" />,
            and can be of one of the following types:</para>
        <list type="bullet">
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetAnchor" />
            </term>
            <description>An anchor defined within the current document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" />
            </term>
            <description>A location within the current document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetExternalAnchor" />
            </term>
            <description>An anchor defined within a previously saved C1D document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetFile" />
            </term>
            <description>An external document, program or URL. The ShellExecute API is used to invoke the link.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetPage" />
            </term>
            <description>A page within the current document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetUser" />
            </term>
            <description>The hyperlink target is determined by a user event handler.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.UserData">
      <summary>
            Gets or sets arbitrary data associated with the current hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.State">
      <summary>
            Gets or sets the state of the current hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.PdfURL">
      <summary>
            Gets the destination URL of the current hyperlink in Adobe PDF format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTarget">
      <summary>
            Describes the target of a <see cref="T:C1.C1Preview.C1Hyperlink" />.
            This is an abstract base class for the following derived classes:
            <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" />,
            <see cref="T:C1.C1Preview.C1LinkTargetPage" />,
            <see cref="T:C1.C1Preview.C1LinkTargetAnchor" />,
            <see cref="T:C1.C1Preview.C1LinkTargetExternalAnchor" />,
            <see cref="T:C1.C1Preview.C1LinkTargetFile" />,
            <see cref="T:C1.C1Preview.C1LinkTargetUser" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTarget" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.GetPageNo(C1.C1Preview.C1Page,C1.C1Preview.C1PrintDocument)">
      <summary>
            Gets the 1-based number of the page pointed to by the current <see cref="T:C1.C1Preview.C1LinkTarget" />.
            This method may return 0 if the page cannot be resolved at this time
            (e.g. the document has not generated yet).
            </summary>
      <param name="currentPage">The page containing the current <see cref="T:C1.C1Preview.C1LinkTarget" /> object.
            <b>null</b> may be specified if the <see cref="T:C1.C1Preview.C1LinkTarget" /> is associated with an <see cref="T:C1.C1Preview.OutlineNode" />.</param>
      <param name="document">The <see cref="T:C1.C1Preview.C1PrintDocument" /> containing the current <see cref="T:C1.C1Preview.C1LinkTarget" />.</param>
      <returns>The target page number.</returns>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.GetDocumentLocation(System.Int32,C1.C1Preview.C1PrintDocument)">
      <summary>
            Returns the <see cref="T:C1.C1Preview.DocumentLocation" /> pointed to by the current link target.
            <para>
            This method may return null if the position cannot be resolved at this time
            (e.g. if the document has not generated yet) or the link target points
            to a position outside the document (e.g a URL or an external document).
            </para></summary>
      <param name="currentPageIndex">0-based index of the page containing the current link target.
            This is used for relative targets (such as previous page) and may be -1 if there is no current
            page in the current context, or the link target is absolute.</param>
      <param name="document">The document containing the current link target.</param>
      <returns>The <see cref="T:C1.C1Preview.DocumentLocation" /> containing the target location.</returns>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.GetDocumentLocation(System.Int32,C1.C1Preview.C1MultiDocument)">
      <summary>
            Returns the <see cref="T:C1.C1Preview.DocumentLocation" /> pointed to by the current link target.
            <para>
            This method may return null if the position cannot be resolved at this time
            (e.g. if the document has not generated yet) or the link target points
            to a position outside the document (e.g a URL or an external document).
            </para></summary>
      <param name="currentPageIndex">0-based index of the page containing the current link target.
            This is used for relative targets (such as previous page) and may be -1 if there is no current
            page in the current context, or the link target is absolute.</param>
      <param name="document">The document containing the current link target.</param>
      <returns>The <see cref="T:C1.C1Preview.DocumentLocation" /> containing the target location.</returns>
    </member>
    <member name="P:C1.C1Preview.C1LinkTarget.URL">
      <summary>
            Gets the target URL, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTarget.PdfURL">
      <summary>
            Gets the target URL in Adobe PDF format, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetUser">
      <summary>
            Describes a <see cref="T:C1.C1Preview.C1LinkTarget" /> determined by a user event handler.
            When using <b>C1.Win.C1Preview.C1PreviewPane</b>, attach a handler of the type
            <b>C1.Win.C1Preview.HyperlinkEventHandler</b> to the <b>C1PreviewPane</b>'s <b>UserHyperlinkJump</b>
            event. That event will be fired when a hyperlink with the link target
            of this type is clicked.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetUser.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetUser" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetAnchor">
      <summary>
            Describes a <see cref="T:C1.C1Preview.C1LinkTarget" /> pointing to a
            <see cref="T:C1.C1Preview.C1Anchor" /> within the current document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetAnchor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetAnchor" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetAnchor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetAnchor" /> class.
            </summary>
      <param name="anchorName">The name (<see cref="P:C1.C1Preview.C1Anchor.Name" />) of the target <see cref="T:C1.C1Preview.C1Anchor" />.</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetAnchor.AnchorName">
      <summary>
            Gets the name (<see cref="P:C1.C1Preview.C1Anchor.Name" />) of the target <see cref="T:C1.C1Preview.C1Anchor" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetAnchor.URL">
      <summary>
            Gets the target URL, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetAnchor.PdfURL">
      <summary>
            Gets the target URL in Adobe PDF format, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetExternalAnchor">
      <summary>
            Describes a <see cref="T:C1.C1Preview.C1LinkTarget" /> pointing to a
            <see cref="T:C1.C1Preview.C1Anchor" /> in a different <see cref="T:C1.C1Preview.C1PrintDocument" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetExternalAnchor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetExternalAnchor" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetExternalAnchor.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetExternalAnchor" /> class.
            </summary>
      <param name="documentFileName">The name of the file (C1D or C1DX) containing the target document.</param>
      <param name="anchorName">The name (<see cref="P:C1.C1Preview.C1Anchor.Name" />) of the target <see cref="T:C1.C1Preview.C1Anchor" />.</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.DocumentFileName">
      <summary>
            Gets the filename with the target <see cref="T:C1.C1Preview.C1PrintDocument" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.URL">
      <summary>
            Gets the target URL, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.PdfURL">
      <summary>
            Gets the target URL in Adobe PDF format, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetFile">
      <summary>
            Describes a <see cref="T:C1.C1Preview.C1LinkTarget" /> pointing to an external document, file or URL.
            The hyperlink jump is performed using the <b>ShellExecute</b> OS shell API, so the result
            depends on the operating system and installed programs.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetFile" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetFile" /> class.
            </summary>
      <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetFile" /> class.
            </summary>
      <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
      <param name="command">The shell command to execute (see <see cref="P:C1.C1Preview.C1LinkTargetFile.Command" /> for details).</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetFile" /> class.
            </summary>
      <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
      <param name="command">The shell command to execute (see <see cref="P:C1.C1Preview.C1LinkTargetFile.Command" /> for details).</param>
      <param name="parameters">The command parameters.</param>
      <param name="directory">The directory where the command is executed.</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.FileName">
      <summary>
            Specifies the file or object on which to execute the specified verb.
            </summary>
      <remarks>
            To specify a Shell namespace object, pass the fully qualified parse name.
            Note that not all verbs are supported on all objects. 
            For example, not all document types support the "print" verb.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Command">
      <summary>
            Gets the command (verb) specifying the action to perform when the link is clicked.
            </summary>
      <remarks>
        <para>The set of available verbs depends on the particular file or folder. 
            Generally, the actions available from an object's shortcut menu are 
            available verbs.</para>
        <para>For more information about verbs and their availability, see Object Verbs. 
            See Extending Shortcut Menus for further discussion of shortcut menus.</para>
        <para>The following verbs are commonly used.</para>
        <list type="table">
          <item>
            <term>edit</term>
            Launches an editor and opens the document for editing. If FileName is not a document file, the function will fail.
            </item>
          <item>
            <term>explore</term>
            <description>Explores the folder specified by FileName.</description>
          </item>
          <item>
            <term>find</term>
            <description>Initiates a search starting from the specified directory.</description>
          </item>
          <item>
            <term>open</term>
            <description>Opens the file specified by the FileName parameter.
            The file can be an executable file, a document file, or a folder.</description>
          </item>
          <item>
            <term>print</term>
            <description>Prints the document file specified by FileName.
            If FileName is not a document file, the function will fail.</description>
          </item>
          <item>
            <term>Empty string</term>
            <description>For systems prior to Microsoft? Windows? 2000, the default verb is used 
            if it is valid and available in the registry. If not, the "open" verb is used.
            For Windows 2000 and later systems, the default verb is used if available. 
            If not, the "open" verb is used. If neither verb is available, 
            the system uses the first verb listed in the registry.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Parameters">
      <summary>
            If the <see cref="P:C1.C1Preview.C1LinkTargetFile.FileName" /> parameter specifies an executable file, this is a string 
            specifying the parameters to be passed to the application. 
            The format of this string is determined by the verb that is to be invoked. 
            If <see cref="P:C1.C1Preview.C1LinkTargetFile.FileName" /> specifies a document file, this should be an empty string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Directory">
      <summary>
            Gets the default directory.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.URL">
      <summary>
            Gets the target URL, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.PdfURL">
      <summary>
            Gets the target URL in Adobe PDF format, or an empty string if it does not exist.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageJumpTypeEnum">
      <summary>
            Describes the supported modes of moving between pages in a viewer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.First">
      <summary>
            Move to the first page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Previous">
      <summary>
            Move to the previous page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Next">
      <summary>
            Move to the next page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Last">
      <summary>
            Move to the last page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Absolute">
      <summary>
            Move directly to the specified page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Relative">
      <summary>
            Move to the page specified relative to the current page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetPage">
      <summary>
            Describes a <see cref="T:C1.C1Preview.C1LinkTarget" /> pointing to another page in the current document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetPage" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetPage" /> class.
            </summary>
      <param name="pageNo">The absolute 1-based target page number.</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor(C1.C1Preview.PageJumpTypeEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetPage" /> class.
            </summary>
      <param name="pageJumpType">The type of the page jump.</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor(C1.C1Preview.PageJumpTypeEnum,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetPage" /> class.
            </summary>
      <param name="pageJumpType">The type of the page jump.</param>
      <param name="pageNo">The absolute 1-based target page number.</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetPage.PageJumpType">
      <summary>
            Gets the type of page jump.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetPage.PageNo">
      <summary>
            Gets the page number to jump to.
            Depending on the value of <see cref="P:C1.C1Preview.C1LinkTargetPage.PageJumpType" />, specifies
            an absolute (1-based) or a relative page number.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetDocumentLocation">
      <summary>
            Describes a <see cref="T:C1.C1Preview.C1LinkTarget" /> pointing to an object within the current document
            that supports the <see cref="T:C1.C1Preview.IDocumentLocation" /> interface.
            Types supporting that interface include <see cref="T:C1.C1Preview.RenderObject" />,
            <see cref="T:C1.C1Preview.ParagraphObject" />, <see cref="T:C1.C1Preview.C1Page" />, and table elements (rows, columns, etc.).
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetDocumentLocation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetDocumentLocation.#ctor(C1.C1Preview.IDocumentLocation)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" /> class.
            </summary>
      <param name="documentLocation">The target object (must support the <see cref="T:C1.C1Preview.IDocumentLocation" /> interface).</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetDocumentLocation.DocumentLocation">
      <summary>
            Gets the target object supporting the <see cref="T:C1.C1Preview.IDocumentLocation" /> interface.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PageSettings">
      <summary>
            Represents the page settings of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1PageSettings" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor(C1.C1Preview.C1PageSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1PageSettings" /> class
            from another <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <param name="source">The <see cref="T:C1.C1Preview.C1PageSettings" /> object to initialize the current one from.</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor(C1.C1Preview.C1PageSettings,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1PageSettings" /> class
            from another <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <param name="source">The <see cref="T:C1.C1Preview.C1PageSettings" /> object to initialize the current one from.</param>
      <param name="landscape">A value indicating whether the current page settings should have landscape orientation.</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor(System.Drawing.Printing.PageSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1PageSettings" /> class
            from a <see cref="T:System.Drawing.Printing.PageSettings" /> object.
            </summary>
      <param name="source">The <see cref="T:System.Drawing.Printing.PageSettings" /> object to initialize the current page settings from.</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.SetPaperSizes(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Sets the <see cref="P:C1.C1Preview.C1PageSettings.Width" /> and the <see cref="P:C1.C1Preview.C1PageSettings.Height" /> to specified values.
            </summary>
      <param name="width">The width to set.</param>
      <param name="height">The height to set.</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.IsSameLayout(C1.C1Preview.C1PageSettings)">
      <summary>
            Compares page layout specified by the current <see cref="T:C1.C1Preview.C1PageSettings" /> with layout of another <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <param name="other">The <see cref="T:C1.C1Preview.C1PageSettings" /> object to compare the current one to.</param>
      <returns>True if the two objects define identical page layout, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.Compare(C1.C1Preview.C1PageSettings)">
      <summary>
            Compares the current <see cref="T:C1.C1Preview.C1PageSettings" /> with another <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <param name="other">The <see cref="T:C1.C1Preview.C1PageSettings" /> object to compare the current one to.</param>
      <returns>True if the two objects contain identical properties, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.C1PageSettings" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.AssignFrom(C1.C1Preview.C1PageSettings)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.C1PageSettings" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.AssignFrom(System.Drawing.Printing.PageSettings)">
      <summary>
            Assigns (copies) properties from a <see cref="T:System.Drawing.Printing.PageSettings" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument,System.Drawing.Printing.PrinterSettings)">
      <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings" /> class,
            and initializes it with the properties of the current <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <param name="document">The <see cref="T:C1.C1Preview.C1PrintDocument" /> object providing the default units
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />) and DPI
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).
            Can be <b>null</b>, but in that case the current object must not contain sizes
            specified in document default units or pixels.</param>
      <param name="printerSettings">A <see cref="T:System.Drawing.Printing.PrinterSettings" /> object
            used to create the resulting <see cref="T:System.Drawing.Printing.PageSettings" />.
            If null, the default printer is used.</param>
      <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument)">
      <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings" /> class,
            and initializes it with the properties of the current <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <param name="document">The <see cref="T:C1.C1Preview.C1PrintDocument" /> object providing the default units
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />) and DPI
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).
            Can be null, but in that case the current object must not contain sizes
            specified in document default units or pixels.</param>
      <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings">
      <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings" /> class,
            and initializes it with the properties of the current <see cref="T:C1.C1Preview.C1PageSettings" /> object.
            </summary>
      <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.IsPaperKindKnown(System.Drawing.Printing.PaperKind)">
      <summary>
            Gets a value indicating whether the specified PaperKind is known 
            and defined in the <see cref="P:C1.C1Preview.C1PageSettings.PaperKind" /> enumeration.
            </summary>
      <param name="paperKind">The value to check.</param>
      <returns>
        <b>true</b> if value is known, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.Compare(C1.C1Preview.C1PageSettings,C1.C1Preview.C1PageSettings)">
      <summary>
            Compares the properties of two <see cref="T:C1.C1Preview.C1PageSettings" /> objects.
            </summary>
      <param name="v1">The first object to compare.</param>
      <param name="v2">The second object to compare.</param>
      <returns>True if the two objects' properties are identical, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.GetCurrentLocaleDefaultPaperSize(System.Double@,System.Double@,System.Double@,C1.C1Preview.UnitTypeEnum@)">
      <summary>
            Retrieves the locale-specific default paper size for the current locale.
            </summary>
      <param name="width">OUT: The width of the default paper.</param>
      <param name="height">OUT: The height of the default paper.</param>
      <param name="margin">OUT: The width of default margins.</param>
      <param name="units">OUT: Unit of measurement used to express the sizes (width, height and margin).</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.CreateDefaultPageSettings">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.C1PageSettings" /> class.
            If <see cref="P:C1.C1Preview.C1PrintDocument.UsePrinterForDefaultPageSettings" /> is true,
            initializes the newly created object with settings based on the current
            printer (specified by <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />).
            Otherwise, initializes the newly created object with default system locale settings.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.C1PageSettings" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.UsePrinterPaperSize">
      <summary>
            Gets or sets a value indicating whether to use the printer paper size
            when generating the document.
            This property does not affect the values of 
            <see cref="P:C1.C1Preview.C1PageSettings.Landscape" />,
            <see cref="P:C1.C1Preview.C1PageSettings.Width" />,
            <see cref="P:C1.C1Preview.C1PageSettings.Height" /> and
            <see cref="P:C1.C1Preview.C1PageSettings.PaperKind" /> properties.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PageLayout">
      <summary>
            Gets the <see cref="P:C1.C1Preview.C1PageSettings.PageLayout" /> object containing the current <see cref="T:C1.C1Preview.C1PageSettings" />.
            Null is returned if the current object does not belong to a <see cref="P:C1.C1Preview.C1PageSettings.PageLayout" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Landscape">
      <summary>
            Gets or sets a value indicating whether to use landscape orientation.
            Changing this property swaps height and width of the page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Width">
      <summary>
            Gets or sets the width of the paper.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Height">
      <summary>
            Gets or sets the height of the paper.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperKind">
      <summary>
            Gets or sets the paper kind.
            Changing of this property may change <see cref="P:C1.C1Preview.C1PageSettings.Width" /> and/or <see cref="P:C1.C1Preview.C1PageSettings.Height" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Color">
      <summary>
            Gets or sets a value indicating whether the document should be printed in color.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.LeftMargin">
      <summary>
            Gets or sets the left margin.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.TopMargin">
      <summary>
            Gets or sets the top margin.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.RightMargin">
      <summary>
            Gets or sets the right margin.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.BottomMargin">
      <summary>
            Gets or sets the bottom margin.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperSourceKind">
      <summary>
            Gets or sets the desired paper source kind.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperSourceName">
      <summary>
            Gets or sets the name of the paper source.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperSourceRawKind">
      <summary>
            Gets or sets the integer representing one of the PaperSourceKind values or a custom value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PrinterResolutionKind">
      <summary>
            Gets or sets the desired printer resolution kind.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PrinterResolutionX">
      <summary>
            Gets or sets the horizontal printer resolution, in dots per inch,
            used when <see cref="P:C1.C1Preview.C1PageSettings.PrinterResolutionKind" /> is Custom.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PrinterResolutionY">
      <summary>
            Gets or sets the vertical printer resolution, in dots per inch,
            used when <see cref="P:C1.C1Preview.C1PageSettings.PrinterResolutionKind" /> is Custom.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PageSettings.PageSettingsTypeConverter">
      <summary>
            Provides <see cref="T:System.ComponentModel.TypeConverter" /> for the <see cref="T:C1.C1Preview.C1PageSettings" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.PageSettingsTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="type">A <see cref="T:System.Type" /> that represents the type to convert from.</param>
      <returns>True if this converter can perform the conversion, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.PageSettingsTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
      <param name="type">The <see cref="T:System.Type" /> to convert the <i>value</i> parameter to.</param>
      <returns>An <b>Object</b> that represents the converted value.</returns>
    </member>
    <member name="T:C1.C1Preview.FormsStyleEnum">
      <summary>
            Specifies the look and feel of input controls displayed by render objects
            derived from <see cref="T:C1.C1Preview.RenderInputBase" />.
            The <see cref="P:C1.C1Preview.C1PrintDocument.FormsStyle" /> property returns a member of this enumeration.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.Acrobat">
      <summary>
            Specifies the Adobe Acrobat Forms style.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.InfoPath">
      <summary>
            Specifies the Microsoft InfoPath style.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.WinXp">
      <summary>
            Specifies the Windows XP (system) style.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.WinClassic">
      <summary>
            Specifies the Windows classic style.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1DocumentFormatEnum">
      <summary>
            Specifies the <see cref="T:C1.C1Preview.C1PrintDocument" /> persistence format.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1d">
      <summary>
            Specifies the original C1Preview for .NET 2.0 format
            (a document is represented by a single XML file).
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1dx">
      <summary>
            Specifies the Open Packaging Conventions compliant format
            (a document is represented by a structured zip file).
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1db">
      <summary>
            Specifies the binary serialization format
            (a document is represented by a sequence of bytes).
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintDocument">
      <summary>
            Represents a ComponentOne Document.
            </summary>
      <summary>
            Represents a document that can be previewed, printed or exported to an external format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IStyleOwner">
      <summary>
            Defines a class that can expose a <b>Style</b> property (of the type <see cref="P:C1.C1Preview.IStyleOwner.Style" />).
            </summary>
    </member>
    <member name="M:C1.C1Preview.IStyleOwner.GetAmbientPropValue(System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Retrieves the value of an ambient property.
            </summary>
      <param name="propKey">The property key.</param>
      <param name="context">
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" /> to use for evaluation of calculated properties.</param>
      <returns>The property value.</returns>
    </member>
    <member name="M:C1.C1Preview.IStyleOwner.GetNonAmbientPropValue(System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Retrieves the value of a non-ambient property.
            </summary>
      <param name="propKey">The property key.</param>
      <param name="context">
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" /> to use for evaluation of calculated properties.</param>
      <returns>The property value.</returns>
    </member>
    <member name="M:C1.C1Preview.IStyleOwner.GetProp(System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Gets the value of a style property existing on the current object
            (does not attempt to resolve properties not explicitly defined on the current object).
            </summary>
      <param name="propKey">The property key (any of the <b>Style.c_propXXX</b> constants).</param>
      <param name="context">
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" /> that should be used to get calculated properties.</param>
      <returns>The property value.</returns>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.AmbientParent">
      <summary>
            Gets the parent for ambient properties.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.HasStyle">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Preview.IStyleOwner" /> has initializated <see cref="P:C1.C1Preview.IStyleOwner.Style" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.Style">
      <summary>
            Gets the style of the current <see cref="T:C1.C1Preview.IStyleOwner" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.Dictionary">
      <summary>
            Gets the dictionary object used to store images.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.EmbeddedFonts">
      <summary>
            Gets the list of embedded fonts.
            This collection is used to deserialize the fonts.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ICollectionOwner">
      <summary>
        <para>For internal use only.</para>
            Describes an interface allowing an object that implements it to receive
            notifications about changes from <see cref="T:C1.C1Preview.OwnedCollection" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnClear(System.Object)">
      <summary>
            Called when the owned collection is being cleared.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> that is being cleared.</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnClearComplete(System.Object)">
      <summary>
            Called after the owned collection has been cleared.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> that has been cleared.</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnInsert(System.Object,System.Int32,System.Object)">
      <summary>
            Called when an item is about to be inserted into the owned collection.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> into which the item is about to be inserted.</param>
      <param name="index">The index of the item that is being inserted.</param>
      <param name="item">The item that is being inserted.</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnInsertComplete(System.Object,System.Int32,System.Object)">
      <summary>
            Called after an item has been inserted into the owned collection.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> into which the item has been inserted.</param>
      <param name="index">The index of the item that has been inserted.</param>
      <param name="item">The item that has been inserted.</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnRemove(System.Object,System.Int32,System.Object)">
      <summary>
            Called when an item is about to be removed from the owned collection.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> from which the item is about to be removed.</param>
      <param name="index">The index of the item that is being removed.</param>
      <param name="item">The item that is being removed.</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnRemoveComplete(System.Object,System.Int32,System.Object)">
      <summary>
            Called after an item has been removed from the owned collection.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> from which the item has been removed.</param>
      <param name="index">The index of the item that has been removed.</param>
      <param name="item">The item that has been removed.</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnSet(System.Object,System.Int32,System.Object,System.Object)">
      <summary>
            Called when an item is about to be set in the owned collection.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> in which the item is about to be set.</param>
      <param name="index">The index of the item that is being set.</param>
      <param name="oldValue">The old value of the item that is being set.</param>
      <param name="newValue">The new value for the item that is being set.</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnSetComplete(System.Object,System.Int32,System.Object,System.Object)">
      <summary>
            Called after an item has been set in the owned collection.
            </summary>
      <param name="sender">The <see cref="T:C1.C1Preview.OwnedCollection" /> in which the item has been set.</param>
      <param name="index">The index of the item that has been set.</param>
      <param name="oldValue">The old value of the item that has been set.</param>
      <param name="newValue">The new value for the item that has been set.</param>
    </member>
    <member name="T:C1.C1Preview.IDocumentLocation">
      <summary>
            Describes a location within a <see cref="T:C1.C1Preview.C1PrintDocument" />
            (used e.g. as the target of a hyperlink etc.).
            The location is identified by a page and a rectangle on that page.
            The rectangle's unit of measurement is determined by the document's
            <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> property.
            Classes that implement this interface are
            <see cref="T:C1.C1Preview.C1Page" />, <see cref="T:C1.C1Preview.RenderObject" /> and <see cref="T:C1.C1Preview.C1Anchor" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.PageIndex">
      <summary>
            Gets the index of page (zero-based) containing this location.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.PageNo">
      <summary>
            Gets the logical number of page containing this location.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.Location">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RectangleD" /> enclosing this location.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.LocationUnit">
      <summary>
            Gets the <see cref="T:C1.C1Preview.UnitTypeEnum" /> used by the <see cref="P:C1.C1Preview.IDocumentLocation.Location" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.LocationDpi">
      <summary>
            Gets the resolution (DPI) used by the <see cref="P:C1.C1Preview.IDocumentLocation.Location" /> property
            (relevant only if the units used are <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.IC1SerializableObject">
      <summary>
            For internal use.
            This interface is used to allow objects to receive notifications from Serializer.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.IScriptContext">
      <summary>
            Describes a scripting context.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.IScriptContext.GetActiveDataBinding">
      <summary>
            Gets the current C1DataBinding object, can return null it means that
            the databinding is not defined.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Document">
      <summary>
            Gets the C1PrintDocument object containing this context.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Page">
      <summary>
            Gets the current Page object, can be null in this case
            the page depended expression can't be calculated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Hyperlink">
      <summary>
            Gets the current hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.LinkTarget">
      <summary>
            Gets the hyperlink's link target, it can differ from Hyperlink.LinkTarget 
            if link target has calculated properties.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IC1Document">
      <summary>
            Provides uniform access to the a document's pages.
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IC1Document.PageAsMetafile(System.Int32,C1.C1Preview.PageDrawParams)">
      <summary>
            Gets a page image.
            For internal use only.
            </summary>
      <param name="pageIndex">Zero-based page index.</param>
      <param name="pdp">Specifies additional draw parameters.</param>
      <returns>The metafile representing the page.</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Document.GetPageNo(System.Int32)">
      <summary>
            Gets the logical page number associated with a page.
            For internal use only.
            </summary>
      <param name="pageIndex">Zero-based page index.</param>
      <returns>The logical page number.</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Document.FindAnchor(System.String)">
      <summary>
            Gets a <see cref="T:C1.C1Preview.C1AnchorInfo" /> object defining position of anchor in document.
            </summary>
      <param name="anchorName">Anchor's name</param>
      <returns>
        <see cref="T:C1.C1Preview.C1AnchorInfo" /> object or null if anchor not found.</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Document.GetPageDocumentLocation(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.C1Preview.DocumentLocation" /> object defining page in document.
            </summary>
      <param name="pageIndex">Zero-base page index</param>
      <returns>
        <see cref="T:C1.C1Preview.DocumentLocation" /> object or null if page index is not valid.</returns>
    </member>
    <member name="P:C1.C1Preview.IC1Document.PageCount">
      <summary>
            Gets the total number of pages in the document.
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1PrintDocument" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeAutoEmbedFonts">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagOpenParen">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.TagOpenParen" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.TagOpenParen" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagCloseParen">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.TagCloseParen" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.TagCloseParen" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagEscapeString">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.TagEscapeString" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.TagEscapeString" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagsInputDialogClassName">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClassName" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClassName" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.SelectBestMeasurementDevice">
      <summary>
            Selects a device to use for <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementGraphics" />.
            
            This method looks for a printer with a "square" resolution
            (i.e. with the same horizontal and vertical DPI) equal to or larger than 300 DPI.
            If such a printer is found, it is assigned to <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />,
            and <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" /> is set to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />.
            Otherwise, <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" /> is set to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Screen" />.
            
            The selected device's resolution is returned by <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDpi" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnDefaultUnitChanged">
      <summary>
            Called when the <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" /> property value has changed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnResolvedUnitChanged">
      <summary>
            Called when the <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> property value has changed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnBusyStateChanged">
      <summary>
            Called when the <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> property value has changed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnLongOperation(System.Double,System.Boolean)">
      <summary>
            Called to indicate the progress of document generating.
            </summary>
      <param name="complete">How much is complete (from 0 to 1).</param>
      <param name="canCancel">Whether the generating can be cancelled.</param>
      <returns>Returns true if generation is *not* aborted.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.InitDocument">
      <summary>
            Performs some initializations: creates the sub-objects (PageHeader, PageFooter etc)
            initializes DefaultPageSettings and so on.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Clear">
      <summary>
            Clears the current document, sets all properties to their default values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.String)">
      <summary>
            Saves the current document to a disk file. The persistense format
            (<see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> or <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1dx" />)
            is determined by the specified file extension. The save format defaults
            to <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> if the format cannot be determined from the extension.
            </summary>
      <param name="fileName">The target file name.</param>
      <seealso cref="T:C1.C1Preview.C1DocumentFormatEnum" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Saves the current document to a disk file using the specified format.
            </summary>
      <param name="fileName">The target file name.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream)">
      <summary>
            Saves the current document to a stream using the <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> format.
            </summary>
      <param name="stream">The target stream.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Saves the current document to a stream using the specified format.
            </summary>
      <param name="stream">The target stream.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.IO.Stream)">
      <summary>
            Loads the current document from a stream.
            The stream should contain a document in <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> format.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Loads the current document from a stream.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.String)">
      <summary>
            Loads the current document from a file.
            The persistence format (<see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> or <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1dx" />)
            is determined by the file extension.
            The format defaults to <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" />
            if the format cannot be determined from the extension.
            </summary>
      <param name="fileName">The source file name.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Loads the current document from a file.
            </summary>
      <param name="fileName">The source file name.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromFile(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.C1PrintDocument" /> class,
            and loads the document from the specified file.
            </summary>
      <param name="fileName">The name of the file from which to load the document.</param>
      <param name="documentFormat">The document persistence format to use.</param>
      <returns>The <see cref="T:C1.C1Preview.C1PrintDocument" /> that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromFile(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.C1PrintDocument" /> class,
            and loads the document from the specified file.
            The persistence format (<see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> or <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1dx" />)
            is determinated by the file extension.
            If the format cannot be determined by the extension, the <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> format is used.
            </summary>
      <param name="fileName">The name of the file from which to load the document.</param>
      <returns>The <see cref="T:C1.C1Preview.C1PrintDocument" /> that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromStream(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.C1PrintDocument" /> class,
            and loads the document from the specified stream.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
      <param name="documentFormat">The document persistence format to use.</param>
      <returns>The <see cref="T:C1.C1Preview.C1PrintDocument" /> that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromStream(System.IO.Stream)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.C1PrintDocument" /> class,
            and loads the document from the specified stream.
            The stream must contain a document in the <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" /> format.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
      <returns>The <see cref="T:C1.C1Preview.C1PrintDocument" /> that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeAdditionalObjects">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.AdditionalObjects" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.AdditionalObjects" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDataSchema">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.DataSchema" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.DataSchema" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeScriptingOptions">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTags">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDocumentInfo">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentInfo" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.DocumentInfo" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDocumentStartingScript">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDocumentEndedScript">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializePageConfigureScript">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.PageConfigureScript" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.PageConfigureScript" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeErrorScript">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.ErrorScript" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.ErrorScript" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeCompatibilityOptions">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeFontProcessingOptions">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Dispose(System.Boolean)">
      <summary>
            Releases the resoureces used by <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <param name="disposing">
        <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnInputValueChanged(C1.C1Preview.RenderInputBase)">
      <summary>
            Called when the <see cref="P:C1.C1Preview.IValueProvider.Value" /> property
            of a <see cref="T:C1.C1Preview.RenderInputBase" /> object contained in the current document has changed.
            Raises the <see cref="E:C1.C1Preview.C1PrintDocument.InputValueChanged" /> event.
            </summary>
      <param name="renderObject">The <see cref="T:C1.C1Preview.RenderInputBase" /> object on which the input value has changed.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnFormsStyleChanged">
      <summary>
            Raises the <see cref="E:C1.C1Preview.C1PrintDocument.FormsStyleChanged" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnGenerateDocument">
      <summary>
            Raises the <see cref="E:C1.C1Preview.C1PrintDocument.GenerateDocument" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageConfigure(C1.C1Preview.C1Page)">
      <summary>
            Called when a new empty page is created and added to the current document,
            raises the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event.
            When this method is called, the <see cref="T:C1.C1Preview.C1Page" /> has already been added to the <see cref="P:C1.C1Preview.C1PrintDocument.Pages" /> collection
            but has not yet been resolved.
            If overridden in a derived class, must call the base method; can be used to change the layout of the new page.
            </summary>
      <param name="page">The newly added <see cref="T:C1.C1Preview.C1Page" /> object.</param>
      <returns>The <see cref="P:C1.C1Preview.C1PrintDocument.PageLayout" /> object created by the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event, or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageAdded(C1.C1Preview.C1Page)">
      <summary>
            Called during document generation after a <see cref="T:C1.C1Preview.C1Page" /> has completely generated,
            raises the <see cref="E:C1.C1Preview.C1PrintDocument.PageAdded" /> event.
            </summary>
      <param name="page">The <see cref="T:C1.C1Preview.C1Page" /> object identifying the generated page.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageUpdated(C1.C1Preview.C1Page)">
      <summary>
            Called during document generation after a <see cref="T:C1.C1Preview.C1Page" /> has updated,
            raises the <see cref="E:C1.C1Preview.C1PrintDocument.PageUpdated" /> event.
            <para>
            This method is called each time a <see cref="T:C1.C1Preview.RenderObject" />'s fragment
            (<see cref="T:C1.C1Preview.RenderFragment" />) is added to or removed from the page
            (i.e. this method is called very often while the document generates).
            </para><para>
            See also <see cref="M:C1.C1Preview.C1PrintDocument.OnPageChanged(C1.C1Preview.C1Page)" />.
            </para></summary>
      <param name="page">The <see cref="T:C1.C1Preview.C1Page" /> object identifying the updated page.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageChanged(C1.C1Preview.C1Page)">
      <summary>
            Called during document generation after a <see cref="T:C1.C1Preview.C1Page" />
            that has already been added to the document has changed 
            (e.g. if page numbering is changed, or the <b>PageCount</b> tag used on the page is updated),
            raises the <see cref="E:C1.C1Preview.C1PrintDocument.PageChanged" /> event.
            <para>
            See also <see cref="M:C1.C1Preview.C1PrintDocument.OnPageUpdated(C1.C1Preview.C1Page)" />.
            </para></summary>
      <param name="page">The <see cref="T:C1.C1Preview.C1Page" /> object identifying the changed page.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageDeleted(C1.C1Preview.C1Page)">
      <summary>
            Called when a page is removed from the <see cref="P:C1.C1Preview.C1PrintDocument.Pages" /> collection.
            </summary>
      <param name="page">The <see cref="T:C1.C1Preview.C1Page" /> object identifying the deleted page.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnBeforePagesClear">
      <summary>
            Called when the <see cref="P:C1.C1Preview.C1PrintDocument.Pages" /> collection is about to be cleared.
            Raises the <see cref="E:C1.C1Preview.C1PrintDocument.BeforePagesClear" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPagesClear">
      <summary>
            Called after the <see cref="P:C1.C1Preview.C1PrintDocument.Pages" /> collection has been cleared.
            Raises the <see cref="E:C1.C1Preview.C1PrintDocument.PagesClear" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting">
      <summary>
            Called when the document is starting to generate.
            Raises the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting" /> event.
            The <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> property is set to <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />
            after this method returns.
            See remarks for more details.
            </summary>
      <remarks>
            The following order is observed before and after the document generation:
            <list type="number"><item><term><see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting" /></term><description>Raises the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting" /> event.</description></item><item><term><see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> = <see cref="F:C1.C1Preview.BusyStateEnum.Generating" /></term><description><see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> changed to <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />.</description></item><item><term><see cref="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentStartingScript" /></term><description>Executes the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" /> script.</description></item><item>
                    ... document's generation ...
                </item><item><term><see cref="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentEndedScript" /></term><description>Executes the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" /> script.</description></item><item><term><see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> = <see cref="F:C1.C1Preview.BusyStateEnum.Ready" /></term><description><see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> changed to <see cref="F:C1.C1Preview.BusyStateEnum.Ready" />.</description></item><item><term><see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentEnded" /></term><description>Raises the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded" /> event.</description></item></list></remarks>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentStartingScript">
      <summary>
            Called when the document is starting to generate.
            Executes the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" /> script.
            See remarks in <see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting" /> method for details and order of events.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnDocumentEnded">
      <summary>
            Called when the document has finished generating.
            Raises the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded" /> event.
            The <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> property is set to <see cref="F:C1.C1Preview.BusyStateEnum.Ready" />
            before this method is called.
            See remarks in <see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting" /> method for more details.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentEndedScript">
      <summary>
            Called when the document has finished generating.
            Executes the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" /> script.
            See remarks in <see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting" /> method for details and order of events.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ClearGeneratedPages">
      <summary>
            Clears the pages and other info created during document generation.
            This method does not clear the document structure/content though.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Converts a <b>double</b> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units.
            </summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destType">The destination <see cref="T:C1.C1Preview.UnitTypeEnum" /> units to convert to.</param>
      <param name="destDpi">The destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.RectangleD" /> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units.
            </summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destType">The destination <see cref="T:C1.C1Preview.UnitTypeEnum" /> units to convert to.</param>
      <param name="destDpiX">The horizontal destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <param name="destDpiY">The vertical destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <returns>A <see cref="T:C1.C1Preview.RectangleD" /> structure converted to target units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Drawing.Region,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Transforms (scales) a <see cref="T:System.Drawing.Region" /> object expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            so that it uses other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units.
            </summary>
      <param name="region">The <see cref="T:System.Drawing.Region" /> to scale.</param>
      <param name="destType">The destination units to use.</param>
      <param name="destDpiX">The horizontal destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <param name="destDpiY">The vertical destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.OffsetsD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.OffsetsD" /> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units.
            </summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destType">The destination <see cref="T:C1.C1Preview.UnitTypeEnum" /> units to convert to.</param>
      <param name="destDpiX">The horizontal destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <param name="destDpiY">The vertical destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <returns>A <see cref="T:C1.C1Preview.OffsetsD" /> structure converted to target units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts a <b>double</b> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units,
            using <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> resolution if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.
            </summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destType">The destination <see cref="T:C1.C1Preview.UnitTypeEnum" /> units to convert to.</param>
      <returns>The value converted to <paramref name="destType" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.RectangleD" /> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units,
            using <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> resolution if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.
            </summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destType">The destination <see cref="T:C1.C1Preview.UnitTypeEnum" /> units to convert to.</param>
      <returns>A <see cref="T:C1.C1Preview.RectangleD" /> structure converted to target units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.OffsetsD,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.OffsetsD" /> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units,
            using <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> resolution if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.
            </summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destType">The destination <see cref="T:C1.C1Preview.UnitTypeEnum" /> units to convert to.</param>
      <returns>A <see cref="T:C1.C1Preview.OffsetsD" /> structure converted to target units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.PointD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.PointD" /> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to other <see cref="T:C1.C1Preview.UnitTypeEnum" /> units.
            </summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destType">The destination <see cref="T:C1.C1Preview.UnitTypeEnum" /> units to convert to.</param>
      <param name="destDpiX">The horizontal destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <param name="destDpiY">The vertical destination resolution (DPI), required only if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.</param>
      <returns>A <see cref="T:C1.C1Preview.PointD" /> structure converted to target units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,System.Single,System.Boolean)">
      <summary>
            Converts a <b>double</b> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" /> units with resolution specified by <paramref name="destDpi" />.
            <para>
            Depending on the <paramref name="truncate" /> parameter, the converted value is either simply truncated,
            or rounded (slower but more precise).
            </para></summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destDpi">The destination resolution (DPI).</param>
      <param name="truncate">
        <b>true</b> to truncate the converted value, <b>false</b> to round it (slower but more precise).</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,System.Single,System.Single,System.Boolean)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.RectangleD" /> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to a <see cref="T:System.Drawing.Rectangle" /> structure expressed in <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" /> units,
            using the specified resolution.
            <para>
            Depending on the <paramref name="truncate" /> parameter, the converted value is either simply truncated,
            or rounded (slower but more precise).
            </para></summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destDpiX">The horizontal destination resolution (DPI).</param>
      <param name="destDpiY">The vertical destination resolution (DPI).</param>
      <param name="truncate">
        <b>true</b> to truncate the converted value, <b>false</b> to round it (slower but more precise).</param>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> structure converted to pixels.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.OffsetsD,System.Single,System.Single,System.Boolean)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.OffsetsD" /> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units
            to a <see cref="T:System.Drawing.Rectangle" /> structure expressed in <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" /> units,
            using the specified resolution.
            <para>
            Depending on the <paramref name="truncate" /> parameter, the converted value is either simply truncated,
            or rounded (slower but more precise).
            </para></summary>
      <param name="value">The value to convert, expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</param>
      <param name="destDpiX">The horizontal destination resolution (DPI).</param>
      <param name="destDpiY">The vertical destination resolution (DPI).</param>
      <param name="truncate">
        <b>true</b> to truncate the converted value, <b>false</b> to round it (slower but more precise).</param>
      <returns>A <see cref="T:C1.C1Preview.OffsetsI" /> structure converted to pixels.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Converts a <b>double</b> value expressed in specified <see cref="T:C1.C1Preview.UnitTypeEnum" /> units
            to a <b>double</b> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
      <param name="value">The source value to convert.</param>
      <param name="srcType">The unit of measurement used to express the source <paramref name="value" />.</param>
      <param name="srcDpi">The source resolution (DPI) (used if <paramref name="srcType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>The <b>double</b> value expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.RectangleD" /> structure expressed in specified <see cref="T:C1.C1Preview.UnitTypeEnum" /> units
            to a <b>RectangleD</b> expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
      <param name="value">The source value to convert.</param>
      <param name="srcType">The unit of measurement used to express the source <paramref name="value" />.</param>
      <param name="srcDpiX">The horizontal source resolution (DPI) (used if <paramref name="srcType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <param name="srcDpiY">The vertical source resolution (DPI) (used if <paramref name="srcType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>The <see cref="T:C1.C1Preview.RectangleD" /> expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts a <b>double</b> value expressed in specified <see cref="T:C1.C1Preview.UnitTypeEnum" /> units
            to a <b>double</b> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units,
            using <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> as the source resolution if <paramref name="srcType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.
            </summary>
      <param name="value">The source value to convert.</param>
      <param name="srcType">The unit of measurement used to express the source <paramref name="value" />.
            If equal to <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />, the current document's <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> is used as the source resolution (DPI).</param>
      <returns>The <b>double</b> value expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.RectangleD" /> structure expressed in specified <see cref="T:C1.C1Preview.UnitTypeEnum" /> units
            to a <b>RectangleD</b> expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units,
            using <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> as the source resolution if <paramref name="srcType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.
            </summary>
      <param name="value">The source value to convert.</param>
      <param name="srcType">The unit of measurement used to express the source <paramref name="value" />.
            If equal to <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />, the current document's <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> is used as the source resolution (DPI).</param>
      <returns>The <see cref="T:C1.C1Preview.RectangleD" /> expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ConvertUnit(C1.C1Preview.Unit,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts an absolute <see cref="T:C1.C1Preview.Unit" /> value to the specified measurement units
            (this overload cannot convert to pixels).
            </summary>
      <param name="source">The source <see cref="T:C1.C1Preview.Unit" /> value to convert (must be an absolute value).</param>
      <param name="destUnitType">The destination unit type (<see cref="T:C1.C1Preview.UnitTypeEnum" />; cannot be <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>A <b>double</b> representing the <paramref name="source" /> value expressed in <paramref name="destUnitType" /> units.</returns>
      <remarks>
        <para>
            The <paramref name="source" /> must be an absolute value, such as "5mm", "1.5in", "8" and so on.
            The source cannot be an expression (such as "prev.width" or "prev.height*2+2mm").
            </para>
        <para>
            The destination units cannot be <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />.
            To convert to pixels, use <see cref="M:C1.C1Preview.C1PrintDocument.ConvertUnit(C1.C1Preview.Unit,C1.C1Preview.UnitTypeEnum,System.Single)" /> instead.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ConvertUnit(C1.C1Preview.Unit,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Converts an absolute <see cref="T:C1.C1Preview.Unit" /> value to the specified measurement units.
            </summary>
      <param name="source">The source <see cref="T:C1.C1Preview.Unit" /> value to convert (must be an absolute value).</param>
      <param name="destUnitType">The destination unit type (<see cref="T:C1.C1Preview.UnitTypeEnum" />).</param>
      <param name="destDpi">The destination resolution (DPI; used if the <paramref name="destUnitType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>A <b>double</b> representing the <paramref name="source" /> value expressed in <paramref name="destUnitType" /> units.</returns>
      <remarks>
            The <paramref name="source" /> must be an absolute value, such as "5mm", "1.5in", "8" and so on.
            The source cannot be an expression (such as "prev.width" or "prev.height*2+2mm").
            </remarks>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.HasEditableTags">
      <summary>
            Checks whether the document contains any tags that can be entered or changed in the tags input dialog.
            </summary>
      <returns>True if the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection
            contains at least one tag which can be shown in the dialog,
            or if the <see cref="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClass" /> is not null (i.e. the developer has defined a custom form to edit the document's tags).</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.EditTags">
      <summary>
            Shows the tags input dialog, allows the user to enter/update the values of <see cref="T:C1.C1Preview.Tag" /> objects
            contained in the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection.
            </summary>
      <returns>True if document contains editable tags and the user accepted the dialog, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Reflow">
      <summary>
            Reflows the current document.
            If a handler has been assigned to the <see cref="E:C1.C1Preview.C1PrintDocument.GenerateDocument" /> event, that handler is invoked.
            Otherwise, the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method is called.
            </summary>
      <returns>True if no warnings occurred during document generation, false if there were warnings.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Generate">
      <summary>
            Generates the current document,
            using the <see cref="F:C1.C1Preview.RefreshModeEnum.RefreshCalculatedValues" /> refresh mode.
            </summary>
      <returns>
        <b>true</b> if no warnings occurred during document generation,
            <b>false</b> if there were warnings (in that case, the <see cref="P:C1.C1Preview.C1PrintDocument.Warnings" /> property on the current document
            contains the warnings that were issued).</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Generate(C1.C1Preview.RefreshModeEnum)">
      <summary>
            Generates the current document.
            Depending on the specified refresh mode, may update data-bound and calculated values.
            </summary>
      <param name="refreshMode">A <see cref="T:C1.C1Preview.RefreshModeEnum" /> value indicating what data should be refreshed during generation.</param>
      <returns>
        <b>true</b> if no warnings occurred during document generation,
            <b>false</b> if there were warnings (in that case, the <see cref="P:C1.C1Preview.C1PrintDocument.Warnings" /> property on the current document
            contains the warnings that were issued).</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout,C1.C1Preview.PageDirectionEnum)">
      <summary>
            Creates a new page and adds it to the document.
            Note that <see cref="P:C1.C1Preview.C1PrintDocument.AllowNonReflowableDocs" /> property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
      <param name="pageLayout">Specifies a layout which will be used for all following pages.</param>
      <param name="direction">Indicates which page must be added - vertical or horizontal.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout)">
      <summary>
            Creates a new page and adds it to the document.
            </summary>
      <param name="pageLayout">Specifies a layout which will be used for all following pages.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage">
      <summary>
            Creates a new page and adds it to the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewColumn">
      <summary>
            Begins a new column. If the current column is the last on the page then a new page will be started.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewLine">
      <summary>
            Begins a new line in inline flow, can be used only if current stacking is inline flow.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.StartDoc">
      <summary>
            Starts a new document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.EndDoc">
      <summary>
            Finishes generation of a document.
            </summary>
      <returns>Returns true if no warning occurs during generating.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.CanRenderBlock">
      <summary>
            Indicates whether rendering in the block flow is permitted now.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.CanRenderDirect">
      <summary>
            Indicates whether direct rendering is permitted now.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.IsInlineStarted">
      <summary>
            Indicates whether an inline paragraph is currently being created on the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.RenderObject" /> into the block flow of the current document,
            and resolves it.
            <para>This method can only be used if <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> is <b>true</b>.</para></summary>
      <param name="ro">The <see cref="T:C1.C1Preview.RenderObject" /> to add to the block flow.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            As all other <b>RenderBlock...</b>, <b>RenderDirect...</b> and <b>RenderInline...</b> methods,
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            on the current document, i.e. when the <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> property is <b>true</b>.
            <para>
            Do not use this method if the document is generated with a call to the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.RenderObject" /> to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            <para>This method can only be used if <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> is <b>true</b>.</para></summary>
      <param name="x">The horizontal (X) coordinate at which to render the object (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the object (cannot be <b>auto</b>).</param>
      <param name="ro">The <see cref="T:C1.C1Preview.RenderObject" /> object to render.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            The specified coordinates (<paramref name="x" /> and <paramref name="y" />)
            are assigned to the <see cref="P:C1.C1Preview.RenderObject.X" /> and <see cref="P:C1.C1Preview.RenderObject.Y" /> properties
            of the passed object.
            <para>
            As all other <b>RenderBlock...</b>, <b>RenderDirect...</b> and <b>RenderInline...</b> methods,
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            on the current document, i.e. when the <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> property is <b>true</b>.
            </para><para>
            Do not use this method if the document is generated with a call to the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.RenderObject" /> to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            <para>This method can only be used if <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> is <b>true</b>.</para></summary>
      <param name="x">The horizontal (X) coordinate at which to render the object (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the object (cannot be <b>auto</b>).</param>
      <param name="ro">The <see cref="T:C1.C1Preview.RenderObject" /> object to render.</param>
      <param name="width">The width of the object (if null, <b>auto</b> is used).</param>
      <param name="height">The height of the object (if null, <b>auto</b> is used).</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            The specified coordinates (<paramref name="x" /> and <paramref name="y" />)
            are assigned to the <see cref="P:C1.C1Preview.RenderObject.X" /> and <see cref="P:C1.C1Preview.RenderObject.Y" /> properties
            of the passed object.
            <para>
            The specified dimensions (<paramref name="width" /> and <paramref name="height" />)
            are assigned to the <see cref="P:C1.C1Preview.RenderObject.Width" /> and <see cref="P:C1.C1Preview.RenderObject.Height" /> properties
            of the passed object.
            </para><para>
            As all other <b>RenderBlock...</b>, <b>RenderDirect...</b> and <b>RenderInline...</b> methods,
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            on the current document, i.e. when the <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> property is <b>true</b>.
            </para><para>
            Do not use this method if the document is generated with a call to the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)">
      <summary>
            Adds an anchor (<see cref="T:C1.C1Preview.C1Anchor" /> or <see cref="T:C1.C1Preview.C1AnchorText" />) at the current position in the document.
            Can be used only if <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> is <b>true</b>.
            </summary>
      <param name="name">A string assigned to the <see cref="P:C1.C1Preview.C1Anchor.Name" /> of the anchor.</param>
      <param name="description">A string assigned to the <see cref="P:C1.C1Preview.C1Anchor.Description" /> of the anchor.</param>
      <param name="userData">Arbitrary data assigned to the <see cref="P:C1.C1Preview.C1Anchor.UserData" /> of the anchor.</param>
      <remarks>
        <para>
            This method can only be used if the current document is being created using
            the <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />/<see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" /> methods
            (i.e. if <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> is <b>true</b>).
            </para>
            The type of anchor that this method creates depends on the current state of the document:
            <list type="bullet"><item>
            If an inline paragraph has been started
            (e.g. with a call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderInline(C1.C1Preview.ParagraphObject,System.Object,System.Object,C1.C1Preview.Style)" /> or <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(System.Object,System.Object,C1.C1Preview.Style,System.Boolean)" />)
            and has not been ended (e.g. with a call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />,
            or any of the <b>RenderBlock()</b> or <b>RenderDirect()</b> methods),
            this method creates a <see cref="T:C1.C1Preview.C1AnchorText" /> on the current paragraph.
            </item><item>
            Otherwise (if there's no current inline paragraph),
            this method creates a <see cref="T:C1.C1Preview.C1Anchor" /> at the current point in the block flow.
            </item></list></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.IsInlineStarted" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String)">
      <summary>
            Adds an anchor (<see cref="T:C1.C1Preview.C1Anchor" /> or <see cref="T:C1.C1Preview.C1AnchorText" />) at the current position in the document.
            Can be used only if <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> is <b>true</b>.
            <para>
            This method is equivalent to <see cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />
            with the last parameter (user data) specified as <b>null</b> value.
            </para></summary>
      <param name="name">A string assigned to the <see cref="P:C1.C1Preview.C1Anchor.Name" /> of the anchor.</param>
      <param name="description">A string assigned to the <see cref="P:C1.C1Preview.C1Anchor.Description" /> of the anchor.</param>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String)">
      <summary>
            Adds an anchor (<see cref="T:C1.C1Preview.C1Anchor" /> or <see cref="T:C1.C1Preview.C1AnchorText" />) at the current position in the document.
            Can be used only if <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" /> is <b>true</b>.
            <para>
            This method is equivalent to <see cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />
            with the last two parameters (description and user data) specified as <b>null</b> values.
            </para></summary>
      <param name="name">A string assigned to the <see cref="P:C1.C1Preview.C1Anchor.Name" /> of the anchor.</param>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders the RTF text.
            </summary>
      <param name="rtf">Text to render, can be plain text.</param>
      <param name="width">If null then parent width will be used.</param>
      <param name="height">If null then autoheight will be used.</param>
      <param name="style">Style of object.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object)">
      <summary>
            Renders the RTF text with autoheight.
            </summary>
      <param name="rtf">Text to render, can be plain text.</param>
      <param name="width">If null then parent width will be used.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String)">
      <summary>
            Renders the RTF text with parent width and autoheight.
            </summary>
      <param name="rtf">Text to render, can be plain text.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders the Image.
            </summary>
      <param name="image">Image to render.</param>
      <param name="width">Width of an image box. If null then autowidth.</param>
      <param name="height">Height of an image box. If null then autoheight.</param>
      <param name="style">Style of the image. If null then the style for an image of document is used.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
      <summary>
            Renders the Image.
            </summary>
      <param name="image">Image to render.</param>
      <param name="width">Width of an image box. If null then autowidth.</param>
      <param name="height">Height of an image box. If null then autoheight.</param>
      <param name="imageAlign">Alignment of an image.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image)">
      <summary>
            Renders the Image.
            </summary>
      <param name="image">Image to render.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)">
      <summary>
            Renders a block of text into the block flow of the current document.
            </summary>
      <param name="text">The text to render.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            The width of the rendered block is set to the width of the page (or column for multi-column layouts),
            which is equivalent to setting the <see cref="P:C1.C1Preview.RenderObject.Width" /> of a <see cref="T:C1.C1Preview.RenderObject" /> to <b>"parent.width"</b>.
            </para>
        <para>
            The height of the rendered block is set to <b>auto</b>,
            which is equivalent to setting the <see cref="P:C1.C1Preview.RenderObject.Height" /> of a <see cref="T:C1.C1Preview.RenderObject" /> to
            <see cref="P:C1.C1Preview.Unit.Auto" /> or <b>"auto"</b>.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,C1.C1Preview.Style)">
      <summary>
            Renders a block of text into the block flow of the current document,
            using the specified <see cref="P:C1.C1Preview.C1PrintDocument.Style" />.
            </summary>
      <param name="text">The text to render.</param>
      <param name="style">The style to use (can be <b>null</b>).</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Renders a block of text into the block flow of the current document,
            using the specified font, text color and horizontal alignment.
            </summary>
      <param name="text">The text to render.</param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> to use (can be <b>null</b>).</param>
      <param name="textColor">The text color to use.</param>
      <param name="horzAlign">The horizontal text alignment to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font)">
      <summary>
            Renders a block of text into the block flow of the current document,
            using the specified font.
            </summary>
      <param name="text">The text to render.</param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> to use (can be <b>null</b>).</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Renders a block of text into the block flow of the current document,
            using the specified font and text color.
            </summary>
      <param name="text">The text to render.</param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> to use (can be <b>null</b>).</param>
      <param name="textColor">The text color to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Renders a block of text into the block flow of the current document,
            using the specified font and horizontal alignment.
            </summary>
      <param name="text">The text to render.</param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> to use (can be <b>null</b>).</param>
      <param name="horzAlign">The horizontal text alignment to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Renders a block of text into the block flow of the current document,
            using the specified horizontal alignment.
            </summary>
      <param name="text">The text to render.</param>
      <param name="horzAlign">The horizontal text alignment to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Color)">
      <summary>
            Renders a block of text into the block flow of the current document,
            using the specified text color.
            </summary>
      <param name="text">The text to render.</param>
      <param name="textColor">The text color to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders a block of text with the specifed width and height
            into the block flow of the current document,
            using the specified <see cref="P:C1.C1Preview.C1PrintDocument.Style" />.
            </summary>
      <param name="text">The text to render.</param>
      <param name="width">The width of the block to render (if <b>null</b>, parent width is used).</param>
      <param name="height">The height of the block to render (if <b>null</b>, auto height is used).</param>
      <param name="style">The style to use (can be <b>null</b>).</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            See <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" /> for details on how the width and height of the
            text block are set.
            </para>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)">
      <summary>
            Begins rendering of a new inline paragraph into the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document,
            using the specified <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> and dimensions.
            </summary>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use for the paragraph.</param>
      <param name="width">The width of the paragraph. If <b>null</b>, page (or column for multi-column layouts) width is used.</param>
      <param name="height">The height of the paragraph. If <b>null</b>, <see cref="P:C1.C1Preview.Unit.Auto" /> is used.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            Use this method to set the <see cref="P:C1.C1Preview.C1PrintDocument.Style" />, <see cref="P:C1.C1Preview.RenderObject.Width" /> and
            <see cref="P:C1.C1Preview.RenderObject.Height" /> of the <see cref="T:C1.C1Preview.RenderParagraph" /> object
            maintained internally to serve subsequent <b>RenderInline...</b> calls.
            The specified parameters are in effect until the started paragraph is ended
            by a call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />, another <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />,
            or any of the <b>RenderBlock...</b> or <b>RenderDirect...</b> methods.
            <para>
            It is not necessary to call this method in order to use other <b>RenderInline...</b> methods
            (such as <see cref="M:C1.C1Preview.C1PrintDocument.RenderInline(C1.C1Preview.ParagraphObject,System.Object,System.Object,C1.C1Preview.Style)" /> or <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,C1.C1Preview.Style)" />),
            but calling this method allows to set the style and dimensions for the paragraph
            that will be filled by subsequent <b>RenderInline...</b> calls.
            </para><para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd">
      <summary>
            Ends rendering of the current inline paragraph.
            </summary>
      <remarks>
            This method ends the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object
            used to serve any of <b>RenderInline...</b> calls.
            <para>
            It is not necessary to call this method in order to end the current paragraph,
            it is also automatically ended by a call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
            or any of the <b>RenderBlock...</b> or <b>RenderDirect...</b> methods.
            </para><para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInline(C1.C1Preview.ParagraphObject,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders a <see cref="T:C1.C1Preview.ParagraphObject" /> into the current inline paragraph.
            </summary>
      <param name="po">The <see cref="T:C1.C1Preview.ParagraphObject" /> object to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <param name="width">The paragraph width. Used only if this call begins a new paragraph (i.e. if there is no current one).</param>
      <param name="height">The paragraph height. Used only if this call begins a new paragraph (i.e. if there is no current one).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to apply to the specified <see cref="T:C1.C1Preview.ParagraphObject" />.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method adds the specified <see cref="T:C1.C1Preview.ParagraphObject" /> to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,C1.C1Preview.Style)">
      <summary>
            Renders a string into the current inline paragraph,
            using the specified style.
            </summary>
      <param name="text">The string to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to apply to the specified text.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphText" /> object
            with the specified style,
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Renders a string into the current inline paragraph,
            using the specified font and text color.
            </summary>
      <param name="text">The string to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <param name="font">The font to use for the specified text.</param>
      <param name="textColor">The text color to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphText" /> object
            with the specified font and color,
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.Font)">
      <summary>
            Renders a string into the current inline paragraph,
            using the specified font.
            </summary>
      <param name="text">The string to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <param name="font">The font to use for the specified text.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphText" /> object
            with the specified font,
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.Color)">
      <summary>
            Renders a string into the current inline paragraph,
            using the specified text color.
            </summary>
      <param name="text">The string to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <param name="textColor">The text color to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphText" /> object
            with the specified text color,
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.FontStyle)">
      <summary>
            Renders a string into the current inline paragraph,
            using the specified font style.
            </summary>
      <param name="text">The string to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <param name="fontStyle">The <see cref="T:System.Drawing.FontStyle" /> to use for the text.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphText" /> object
            with the specified font style,
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String)">
      <summary>
            Renders a string into the current inline paragraph.
            </summary>
      <param name="text">The string to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphText" /> object
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineImage(System.Drawing.Image)">
      <summary>
            Renders an <see cref="T:System.Drawing.Image" /> into the current inline paragraph.
            </summary>
      <param name="image">The image to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphImage" /> object
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineImage(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
            Renders an <see cref="T:System.Drawing.Image" /> into the current inline paragraph,
            using the specified <see cref="P:C1.C1Preview.C1PrintDocument.Style" />.
            </summary>
      <param name="image">The image to add to the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current inline paragraph.</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use for the image.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            This method creates a new <see cref="T:C1.C1Preview.ParagraphImage" /> object
            and adds it to the current internally maintained <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            A new paragraph is started if there is no current one.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin">
      <summary>
            Creates an internally maintained <see cref="T:C1.C1Preview.RenderGraphics" /> object
            that can be used to add graphics to the block flow of the current document.
            </summary>
      <returns>This method always returns <b>true</b>.</returns>
      <remarks>
            Between the calls to this method and <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd" />,
            use <see cref="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics" /> property to access the <see cref="T:C1.C1Preview.RenderGraphics" /> object
            that can be used to draw on.
            <para>
            This method throws an exception if a call to <b>RenderBlockGraphicsBegin</b> without
            a matching call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd" /> has already been issued.
            </para><para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd">
      <summary>
            Adds the internally maintained <see cref="T:C1.C1Preview.RenderGraphics" /> object
            created with a previous call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin" /> to the
            block flow of the current document.
            </summary>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
            Internally, this method calls <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />,
            passing the <see cref="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics" /> as the parameter,
            and resets the internal variable used to hold that value.
            </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>
            Renders an arc into the block flow of the current document.
            </summary>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Renders an arc into the block flow of the current document.
            </summary>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the arc with.</param>
      <param name="fillColor">The fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Renders an arc into the block flow of the current document.
            </summary>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the arc with.</param>
      <param name="fillBrush">The fill brush.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Renders an arc into the block flow of the current document.
            </summary>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the arc with.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Renders an arc into the block flow of the current document.
            </summary>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The arc fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Renders an arc into the block flow of the current document.
            </summary>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>
            Renders an ellipse into the block flow of the current document.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Renders an ellipse into the block flow of the current document.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the ellipse with.</param>
      <param name="fillColor">The ellipse fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Renders an ellipse into the block flow of the current document.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the ellipse with.</param>
      <param name="fillBrush">The ellipse fill brush.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Renders an ellipse into the block flow of the current document.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the ellipse with.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Renders an ellipse into the block flow of the current document.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The ellipse fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Renders an ellipse into the block flow of the current document.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>
            Renders a pie into the block flow of the current document.
            </summary>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Renders a pie into the block flow of the current document.
            </summary>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the pie with.</param>
      <param name="fillColor">The fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Renders a pie into the block flow of the current document.
            </summary>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the pie with.</param>
      <param name="fillBrush">The fill brush.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Renders a pie into the block flow of the current document.
            </summary>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the pie with.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Renders a pie into the block flow of the current document.
            </summary>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Renders a pie into the block flow of the current document.
            </summary>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>
            Renders a rectangle into the block flow of the current document.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Renders a rectangle into the block flow of the current document.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the rectangle with.</param>
      <param name="fillColor">The fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Renders a rectangle into the block flow of the current document.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the rectangle with.</param>
      <param name="fillBrush">The fill brush.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Renders a rectangle into the block flow of the current document.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the rectangle with.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Renders a rectangle into the block flow of the current document.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The fill color.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Renders a rectangle into the block flow of the current document.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockHorzLine(C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Renders a horizontal line with the specified width, starting at the left of the page,
            into the block flow of the current document.
            </summary>
      <param name="width">The width of the line.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the line.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockVertLine(C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Renders a vertical line with the specified height, starting at the current position,
            into the block flow of the current document.
            </summary>
      <param name="height">The height of the line.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the line.</param>
      <returns>
        <b>true</b> if no warnings were generated by this call, <b>false</b> otherwise.</returns>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Adds an RTF-formatted string to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the text (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the text (cannot be <b>auto</b>).</param>
      <param name="rtf">The RTF-formatted string to render.</param>
      <param name="width">The width of the text area (cannot be <b>null</b> or <b>auto</b>).</param>
      <param name="height">The height of the text area (can be <b>null</b>, in which case <see cref="P:C1.C1Preview.Unit.Auto" /> is used).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use, or <b>null</b>.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRichText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object)">
      <summary>
            Adds an RTF-formatted string to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page with <b>auto</b> height, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the text (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the text (cannot be <b>auto</b>).</param>
      <param name="rtf">The RTF-formatted string to render.</param>
      <param name="width">The width of the text area (cannot be <b>null</b> or <b>auto</b>).</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRichText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Adds an <see cref="T:System.Drawing.Image" /> to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="image">The image to render.</param>
      <param name="width">The width of the image (if <b>null</b>, <b>auto</b> is used).</param>
      <param name="height">The height of the image (if <b>null</b>, <b>auto</b> is used).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use, or <b>null</b>.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
      <summary>
            Adds an <see cref="T:System.Drawing.Image" /> to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="image">The image to render.</param>
      <param name="width">The width of the image (if <b>null</b>, <b>auto</b> is used).</param>
      <param name="height">The height of the image (if <b>null</b>, <b>auto</b> is used).</param>
      <param name="imageAlign">The image alignment to use.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image)">
      <summary>
            Adds an <see cref="T:System.Drawing.Image" /> to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="image">The image to render.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Adds a text to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="text">The string to render.</param>
      <param name="width">The width of the text area (if <b>null</b>, <b>auto</b> is used).</param>
      <param name="height">The height of the text area (if <b>null</b>, <b>auto</b> is used).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use, or <b>null</b>.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Adds a text to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, with <b>auto</b> height, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the image (cannot be <b>auto</b>).</param>
      <param name="text">The string to render.</param>
      <param name="width">The width of the text area (if <b>null</b>, <b>auto</b> is used).</param>
      <param name="font">The font to use.</param>
      <param name="textColor">The text color.</param>
      <param name="horzAlign">The horizontal text alignment.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Creates an internally maintained <see cref="T:C1.C1Preview.RenderGraphics" /> object
            that can be used to add graphics at a specific position to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" />
            of the document on the current page.
            </summary>
      <param name="x">The horizontal (X) coordinate on the current page.</param>
      <param name="y">The vertical (Y) coordinate on the current page.</param>
      <remarks>
            Between the calls to this method and <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd" />,
            use <see cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" /> property to access the <see cref="T:C1.C1Preview.RenderGraphics" /> object
            that can be used to draw on.
            <para>
            This method throws an exception if a call to <b>RenderDirectGraphicsBegin</b> without
            a matching call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd" /> has already been issued.
            </para><para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd">
      <summary>
            Renders the internally maintained <see cref="T:C1.C1Preview.RenderGraphics" /> object
            created with a previous call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" /> 
            onto the current page of the document.
            </summary>
      <remarks>
            Internally, this method calls <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)" />,
            passing the <see cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" /> as the parameter,
            and resets the internal variable used to hold that value.
            <para>
            The coordinates at which <see cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" /> is rendered
            are determined by the preceding call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" />.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>
            Adds an arc to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Adds an arc to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the arc with.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Adds an arc to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the arc with.</param>
      <param name="fillBrush">The fill brush.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Adds an arc to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the arc with.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Adds an arc to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Adds an arc to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the arc (cannot be <b>auto</b>).</param>
      <param name="width">The width of the arc.</param>
      <param name="height">The height of the arc.</param>
      <param name="startAngle">The arc's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The arc's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>
            Adds an ellipse to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Adds an ellipse to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the ellipse with.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Adds an ellipse to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the ellipse with.</param>
      <param name="fillBrush">The fill brush.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Adds an ellipse to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the ellipse with.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Adds an ellipse to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Adds an ellipse to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the ellipse (cannot be <b>auto</b>).</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>
            Adds a pie to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Adds a pie to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the pie with.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Adds a pie to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the pie with.</param>
      <param name="fillBrush">The fill brush.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Adds a pie to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the pie with.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Adds a pie to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Adds a pie to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the pie (cannot be <b>auto</b>).</param>
      <param name="width">The width of the pie.</param>
      <param name="height">The height of the pie.</param>
      <param name="startAngle">The pie's starting angle (in degrees, measured clockwise from the X axis).</param>
      <param name="sweepAngle">The pie's sweep angle (in degrees, measured clockwise from <paramref name="startAngle" />).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>
            Adds a rectangle to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Adds a rectangle to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the rectangle with.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Adds a rectangle to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the rectangle with.</param>
      <param name="fillBrush">The fill brush.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Adds a rectangle to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the rectangle with.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Adds a rectangle to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The fill color.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Adds a rectangle to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="x">The horizontal (X) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="y">The vertical (Y) coordinate at which to render the rectangle (cannot be <b>auto</b>).</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectLine(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Adds a line to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="fromX">The X coordinate of the first point that the line connects.</param>
      <param name="fromY">The Y coordinate of the first point that the line connects.</param>
      <param name="toX">The X coordinate of the second point that the line connects.</param>
      <param name="toY">The Y coordinate of the second point that the line connects.</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the line with.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectLine(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Adds a line to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the current document
            at a specific position on the current page, and resolves it.
            </summary>
      <param name="fromX">The X coordinate of the first point that the line connects.</param>
      <param name="fromY">The Y coordinate of the first point that the line connects.</param>
      <param name="toX">The X coordinate of the second point that the line connects.</param>
      <param name="toY">The Y coordinate of the second point that the line connects.</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,System.Boolean,C1.C1Preview.Style)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.RenderPolygon" /> from a collection of
            <see cref="T:C1.C1Preview.UnitPoint" /> objects, and renders it on the current page,
            at position specified by the points' coordinates.
            </summary>
      <param name="points">The collection of <see cref="T:C1.C1Preview.UnitPoint" /> objects
            (an exception occurs if an object that is <b>not</b> a <see cref="T:C1.C1Preview.UnitPoint" /> is found in the collection).</param>
      <param name="closed">A value indicating whether the polygon should be closed (i.e. the last point connected to the first one).</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> to use.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.RenderPolygon" /> from a collection of
            <see cref="T:C1.C1Preview.UnitPoint" /> objects, and renders it on the current page,
            at position specified by the points' coordinates.
            <para>
            If <paramref name="fillColor" /> specifies a non-empty and non-transparent color,
            the polygon is closed, otherwise it is open.
            </para></summary>
      <param name="points">The collection of <see cref="T:C1.C1Preview.UnitPoint" /> objects
            (an exception occurs if an object that is <b>not</b> a <see cref="T:C1.C1Preview.UnitPoint" /> is found in the collection).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the polygon with.</param>
      <param name="fillColor">The fill color (if empty or transparent, the polygon is closed, otherwise it is open).</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.RenderPolygon" /> from a collection of
            <see cref="T:C1.C1Preview.UnitPoint" /> objects, and renders it on the current page,
            at position specified by the points' coordinates.
            <para>
            If <paramref name="fillBrush" /> is <b>null</b>, the polygon is open, otherwise it is closed.
            </para></summary>
      <param name="points">The collection of <see cref="T:C1.C1Preview.UnitPoint" /> objects
            (an exception occurs if an object that is <b>not</b> a <see cref="T:C1.C1Preview.UnitPoint" /> is found in the collection).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the polygon with.</param>
      <param name="fillBrush">The fill color (if <b>null</b>, the polygon is open, otherwise it is closed).</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,C1.C1Preview.LineDef)">
      <summary>
            Creates an open <see cref="T:C1.C1Preview.RenderPolygon" /> from a collection of
            <see cref="T:C1.C1Preview.UnitPoint" /> objects, and renders it on the current page,
            at position specified by the points' coordinates.
            </summary>
      <param name="points">The collection of <see cref="T:C1.C1Preview.UnitPoint" /> objects
            (an exception occurs if an object that is <b>not</b> a <see cref="T:C1.C1Preview.UnitPoint" /> is found in the collection).</param>
      <param name="line">The <see cref="T:C1.C1Preview.LineDef" /> to draw the polygon with.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.RenderPolygon" /> from a collection of
            <see cref="T:C1.C1Preview.UnitPoint" /> objects, and renders it on the current page,
            at position specified by the points' coordinates.
            <para>
            If <paramref name="fillColor" /> specifies a non-empty and non-transparent color,
            the polygon is closed, otherwise it is open.
            </para></summary>
      <param name="points">The collection of <see cref="T:C1.C1Preview.UnitPoint" /> objects
            (an exception occurs if an object that is <b>not</b> a <see cref="T:C1.C1Preview.UnitPoint" /> is found in the collection).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <param name="fillColor">The fill color (if empty or transparent, the polygon is closed, otherwise it is open).</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
            Creates an open <see cref="T:C1.C1Preview.RenderPolygon" /> from a collection of
            <see cref="T:C1.C1Preview.UnitPoint" /> objects, and renders it on the current page,
            at position specified by the points' coordinates.
            </summary>
      <param name="points">The collection of <see cref="T:C1.C1Preview.UnitPoint" /> objects
            (an exception occurs if an object that is <b>not</b> a <see cref="T:C1.C1Preview.UnitPoint" /> is found in the collection).</param>
      <param name="lineColor">The line color.</param>
      <param name="lineThickness">The line thickness.</param>
      <remarks>
        <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            For details, see <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />.
            </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRdl(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.C1PrintDocument" /> class,
            and imports a RDL report definition into created document.
            </summary>
      <param name="fileName">The name of the file containing the report definition.</param>
      <returns>The <see cref="T:C1.C1Preview.C1PrintDocument" /> that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ImportRdl(System.String)">
      <summary>
            Imports a RDL report definition into the current document.
            </summary>
      <param name="fileName">The name of the file containing the report definition.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromC1Report(System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.C1PrintDocument" /> class
            representing the specified <see cref="T:C1.C1Report.C1Report" />.
            </summary>
      <param name="fileName">The name of the file containing the report definition.</param>
      <param name="reportName">The name of the report in <paramref name="fileName" />.</param>
      <returns>The <see cref="T:C1.C1Preview.C1PrintDocument" /> that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)">
      <summary>
            Imports a <see cref="T:C1.C1Report.C1Report" /> report definition into the current document.
            </summary>
      <param name="fileName">The name of the file containing the report definition.</param>
      <param name="reportName">The name of the report in <paramref name="fileName" />.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,System.Boolean)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,System.Boolean)">
      <summary>
            Exports the document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider)">
      <summary>
            Exports the document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print">
      <summary>
            Prints the current document with default printer settings,
            not showing the print progress dialog.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the current document with specified printer settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Prints the document with specified printer settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the print progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints a range of pages of the current document with specified printer settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints a range of pages of the current document with specified printer settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints a range of pages of the current document with specified printer and default page settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to print all pages).</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>
            Prints the current document with specified printer and default page settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints a range of pages of the current document with specified printer and default page settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to print all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.PrintDialog">
      <summary>
            Shows the standard print dialog, allowing the user to print the current document.
            </summary>
      <returns>
        <b>true</b> if the document was printed, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.PrintDialog(System.Drawing.Printing.PrinterSettings,System.Int32[],System.Boolean)">
      <summary>
            Shows the standard print dialog, allowing the user to print the current document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="selectedPageNumbers">The list of selected page numbers.
            If this parameter is not <b>null</b>, <b>selection</b> option is enabled in the dialog.</param>
      <param name="showProgress">Indicates whether to show print progress.</param>
      <returns>
        <b>true</b> if the document was printed, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AdvanceBlockFlow(C1.C1Preview.Unit)">
      <summary>
            Advances the current block flow position by the specified distance.
            </summary>
      <param name="distance">The amount by which to advance the block flow position (can be negative).</param>
      <remarks>
            The specified <paramref name="distance" /> must specify an absolute value (i.e. it cannot be an expression or percentage),
            but it may be negative to move the current block flow position up on the current page.
            <para>
            This method can only be used between calls to <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
            methods on the current document.
            </para></remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.PageAsMetafile(System.Int32)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page.
            </summary>
      <param name="pageNo">The 1-based page number.</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page, or <b>null</b> if the page was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.GetLengthAbsValue(C1.C1Preview.LengthAbs,System.Drawing.Font)">
      <summary>
            Converts an absolute length represented by a <see cref="T:C1.C1Preview.LengthAbs" /> object
            to a <b>double</b> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
      <param name="length">The length to convert. If it is expressed in <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />,
            the current document's <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" /> units are used.</param>
      <param name="font">The font to use if <paramref name="length" /> is expressed in
            <see cref="F:C1.C1Preview.UnitTypeEnum.Em" />, <see cref="F:C1.C1Preview.UnitTypeEnum.Ex" /> or <see cref="F:C1.C1Preview.UnitTypeEnum.LineSpacing" />
            (otherwise, it can be <b>null</b>).</param>
      <returns>The converted <b>double</b> value.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.GetLengthAbsValue(C1.C1Preview.LengthAbs,C1.C1Preview.Style,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Converts an absolute length represented by a <see cref="T:C1.C1Preview.LengthAbs" /> object
            to a <b>double</b> value expressed in the current document's <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
      <param name="length">The length to convert. If it is expressed in <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />,
            the current document's <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" /> units are used.</param>
      <param name="style">The <see cref="P:C1.C1Preview.C1PrintDocument.Style" /> providing the font, required if <paramref name="length" /> is expressed in
            <see cref="F:C1.C1Preview.UnitTypeEnum.Em" />, <see cref="F:C1.C1Preview.UnitTypeEnum.Ex" /> or <see cref="F:C1.C1Preview.UnitTypeEnum.LineSpacing" />
            (otherwise, it can be <b>null</b>).</param>
      <param name="context">
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" /> that should be used to get calculated properties.</param>
      <returns>The converted <b>double</b> value.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FindAnchor(System.String)">
      <summary>
            Searches for an <see cref="T:C1.C1Preview.C1Anchor" /> with the specified <see cref="P:C1.C1Preview.C1Anchor.Name" /> in the current document.
            </summary>
      <param name="anchorName">The name to search for.</param>
      <returns>A <see cref="T:C1.C1Preview.C1AnchorInfo" /> object containing information about the found anchor, or null if none was found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FindInputFragment(System.Int32,System.Boolean)">
      <summary>
            Searches for the first occurrence of a <see cref="T:C1.C1Preview.RenderInputFragment" /> object in the current document.
            </summary>
      <param name="startPageIndex">The 0-based index of the page to start the search at.</param>
      <param name="forward">Specifies whether to search forward or backward.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderInputFragment" /> object that was found, or <b>null</b>.</returns>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationDevice">
      <summary>
            Gets or sets the type of device that is 
            used to provide reference graphics when generating the document.
            If this property is set to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />,
            <see cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" /> specifies the printer.
            </summary>
      <remarks>
        <para>
            The default behavior determining which reference device should be be used when rendering
            a <see cref="N:C1.C1Report" /> or a <see cref="T:C1.C1Preview.C1PrintDocument" /> is specified by static properties
            <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" /> and <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />.
            The (non-static) <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />, <see cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
            and <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" /> properties allow to override the behavior for an individual component.
            </para>
        <para>
            Normally all installed printers would be scanned to obtain a high-resolution
            reference <see cref="T:System.Drawing.Graphics" /> object.
            In order to bypass this process, set this property to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Screen" />.
            In some cases this may increase rendering speed at the cost of some loss in layout accuracy.
            </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationPrinterName">
      <summary>
            Gets or sets the name of the printer that is
            used to provide reference graphics when generating the document.
            <para>This property is only used if <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" /> is set to
            <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />.</para><para>Set this property to <b>null</b> to select the reference printer automatically.</para></summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationDpi">
      <summary>
            Gets or sets the resolution (DPI) used when generating the document.
            <para>
            Note that if <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />,
            this is also the resolution of <b>ResolvedUnit</b> pixels.
            </para></summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationGraphics">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Graphics" /> object to use as reference when generating the report.
            This <b>Graphics</b> is used to calculate text sizes, measure RTF text, and so on.
            </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice">
      <summary>
            Gets the actual measurement device which was used to generate the document.
            This device can differ from the one specified by <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />,
            for example if <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" /> was set to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />
            but the current system has no printers installed.
            </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName">
      <summary>
            Gets the name of the actual measurement printer which was used to generate the document.
            This can differ from the name specified by <see cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />,
            for example if the report was rendered on a system with no such printer.
            </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UsePrinterForDefaultPageSettings">
      <summary>
            Gets or sets a value indicating whether the default page settings are
            retrieved from the default printer (may slow things down if the printer
            is a network one) or calculated based on the current locale.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDpi">
      <summary>
            Gets the resolution (DPI) of the <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementGraphics" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementGraphics">
      <summary>
            Gets the <see cref="T:System.Drawing.Graphics" /> object
            used to measure/calculate layouts of <see cref="T:C1.C1Preview.C1PrintDocument" /> objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName">
      <summary>
            Gets or sets the name of the printer used to provide <see cref="T:System.Drawing.Graphics" />
            used to measure/calculate layouts of <see cref="T:C1.C1Preview.C1PrintDocument" /> objects.
            This property is only used if <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" /> is set to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDevice">
      <summary>
            Gets or sets the type of device used to provide <see cref="T:System.Drawing.Graphics" /> 
            used to measure/calculate layouts of <see cref="T:C1.C1Preview.C1PrintDocument" /> objects.
            If this property is set to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />,
            <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" /> specifies the printer.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageNumberingChange">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.C1PrintDocument.PageNumberingChange" /> object
            applied to the first page of the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MaxPages">
      <summary>
            Gets or sets the value limiting the maximum number of pages
            in the generated document.
            <para>
            The default value is -1, indicating that the number of pages
            in the document is unlimited.
            </para><para>
            This property is only taken into account when the document is
            created using the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationMode">
      <summary>
            Gets the document creation mode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.BusyState">
      <summary>
            Gets the current busy state of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.EmfType">
      <summary>
            Gets or sets the type of metafiles created by the current document.
            The default is <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentInfo">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentInfo" /> object containing the information
            about the current document (such as author, company, and so on).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ResolvedUnit">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.UnitTypeEnum" /> value that will be used
            to specify the resolved sizes of objects within the current document
            (e.g. the sizes of <see cref="T:C1.C1Preview.RenderFragment" /> objects representing the
            render objects in the document).
            <para>
            This property cannot be changed when the document is generating
            (i.e. while <see cref="P:C1.C1Preview.C1PrintDocument.IsGenerating" /> returns true).
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageLayout">
      <summary>
            Gets or sets the default page layout for the current document.
            This property is a shortcut for <see cref="P:C1.C1Preview.DocumentPageLayouts.Default" />.
            (A page layout includes page settings, page headers and footers, and column definitions.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageLayouts">
      <summary>
            Gets the collection of page layouts used in the current document.
            In addition to the default layout which is always present, special layouts
            may be defined for first, last, even and odd pages of the document.
            The effective layout for each page is then produced by merging all applicable layouts.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Stacking">
      <summary>
            Gets or sets the top-level stacking rule for the document body.
            <para>The default value is <see cref="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom" />.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DefaultUnit">
      <summary>
            Gets or sets the default unit of measurement for the current document.
            This unit is used when sizes or coordinates of objects within the document
            are set without specifying the unit of measurement explicitly.
            <para>The default value is <see cref="F:C1.C1Preview.UnitTypeEnum.Inch" />.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Body">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DocumentBody" /> object representing the body of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Tags">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TagCollection" /> representing the collection
            of user-defined <see cref="T:C1.C1Preview.Tag" /> objects in the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagOpenParen">
      <summary>
            Gets or sets the string used as the opening parentheses when including references to <see cref="T:C1.C1Preview.Tag" /> objects
            in the current document's texts (e.g. in <see cref="P:C1.C1Preview.RenderText.Text" /> or <see cref="P:C1.C1Preview.ParagraphText.Text" />).
            To include a <b>TagOpenParen</b> string itself in a text, prepend it with the <see cref="P:C1.C1Preview.C1PrintDocument.TagEscapeString" /> string.
            <para>The default value is <b>"["</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagCloseParen">
      <summary>
            Gets or sets the string used as the closing parentheses when including references to <see cref="T:C1.C1Preview.Tag" /> objects
            in the current document's texts (e.g. in <see cref="P:C1.C1Preview.RenderText.Text" /> or <see cref="P:C1.C1Preview.ParagraphText.Text" />).
            To include a <b>TagCloseParen</b> string itself in a text, prepend it with the <see cref="P:C1.C1Preview.C1PrintDocument.TagEscapeString" /> string.
            <para>The default value is <b>"]"</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagEscapeString">
      <summary>
            Gets or sets the string that can be used to escape <see cref="P:C1.C1Preview.C1PrintDocument.TagOpenParen" /> and <see cref="P:C1.C1Preview.C1PrintDocument.TagCloseParen" />.
            To include a <b>TagEscapeString</b> string itself in a text, duplicate it.
            <para>The default value is <b>"\"</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ThrowExceptionOnError">
      <summary>
            Gets or sets a value indicating whether an exception should be raised if an error occurs
            while the current document generates.
            If this property is false, the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method will return false
            if errors occurred while generating, otherwise an exception will be thrown
            on the first error.
            <para>The default value is false.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AllowNonReflowableDocs">
      <summary>
            Gets or sets a value indicating whether methods can be called on the current document
            that would result in the document becoming non-reflowable (such as <see cref="M:C1.C1Preview.C1PrintDocument.NewPage" />).
            If this property is false, calling such methods throws an exception.
            If this property is true, calling such methods sets the <see cref="P:C1.C1Preview.C1PrintDocument.Reflowable" />
            flag to false on the current document.
            <para>The default value is false.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ClipPage">
      <summary>
            Gets or sets a value indicating whether to clip the content 
            of the current document to page margins.
            <para>The default value is <b>false</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DisableUserReflow">
      <summary>
            Gets or sets a value indicating whether the end user should be prevented
            from reflowing the document with different page settings.
            This property is only a hint to the document viewer.
            <para>The default value is false (i.e. reflow is allowed).</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UseGdiPlusTextRendering">
      <summary>
            Gets or sets a value indicating whether text in the current document
            should be rendered using the GDI+ text API.
            <para>The default value is false.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DoEvents">
      <summary>
            Gets or sets a value indicating whether the current <see cref="T:C1.C1Preview.C1PrintDocument" />
            should handle Windows messages while generating.
            <para>The default value is false.</para></summary>
      <remarks>
        <para>Setting this property to true allows users to resize forms, click buttons, etc. while documents are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a
            "Cancel" button to stop the document generation (otherwise the user wouldn't be able to click the
            button until the generation is complete).</para>
        <para>Setting this property to false will cause documents to generate slightly faster.</para>
      </remarks>
      <example>
        <para>The code below implements "Generate" and "Cancel" buttons attached to a <see cref="T:C1.C1Preview.C1PrintDocument" />.</para>
        <para>The "Generate" button checks whether the document is busy before starting to generate it.
            This is necessary because the user could click the "Generate" button several times in a row, before the document got a 
            chance to finish generating. (Calling the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method while the component is busy throws an 
            exception.)</para>
        <para>The "Cancel" button checks whether the document is currently generating, and sets the <see cref="P:C1.C1Preview.C1PrintDocument.Cancel" /> 
            property to true if it is.</para>
        <code>
            _doc.DoEvents = true;
            
            private void Generate_Click(object sender, EventArgs e)
            {
               if (_doc.BusyState != BusyStateEnum.Ready)
                   Console.WriteLine("Cannot generate now, document is busy");
               else 
                   _doc.Generate();
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_doc.BusyState != BusyStateEnum.Ready) 
                   _doc.Cancel = true;
               else 
                   Console.WriteLine("Document is not generating, nothing to cancel");
            }
            </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Style">
      <summary>
            Gets the main (root) <see cref="T:C1.C1Preview.Style" /> of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Outlines">
      <summary>
            Gets the <see cref="T:C1.C1Preview.OutlineNodeCollection" /> representing the collection of
            <see cref="T:C1.C1Preview.OutlineNode" /> objects of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Dictionary">
      <summary>
            Gets the current document's <see cref="T:C1.C1Preview.Dictionary" />.
            The <b>Dictionary</b> can be used to contain reused resources
            (e.g. images used in multiple places in the document).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionTab">
      <summary>
            Gets or sets the action to be performed when the TAB key is pressed 
            in a <b>C1.Win.C1Preview.C1PreviewPane</b> control which is viewing the current document.
            <para>The default value is <see cref="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocOut" />.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionEnter">
      <summary>
            Gets or sets the action to be performed when the ENTER key is pressed 
            in a <b>C1.Win.C1Preview.C1PreviewPane</b> control which is viewing the current document.
            <para>The default value is <see cref="F:C1.C1Preview.FormsKeyActionEnterEnum.None" />.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsStyle">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.FormsStyleEnum" /> value specifying
            the look and feel of input controls in the current document
            (see types derived from <see cref="T:C1.C1Preview.RenderInputBase" />).
            <para>The default value is <see cref="F:C1.C1Preview.FormsStyleEnum.Acrobat" />.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AddWarningsWhenErrorInScript">
      <summary>
            Gets or sets a value indicating whether to add messages to the
            current document's <see cref="P:C1.C1Preview.C1PrintDocument.Warnings" /> collection
            when script errors are found.
            <para>The default value is false.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ShowTagsInputDialog">
      <summary>
            Gets or sets a value indicating whether a dialog allowing to input values for some or all
            of the user defined tags (elements of the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection) should be shown
            to the user before the document generates. To include or exclude tags from the dialog,
            use <see cref="P:C1.C1Preview.Tag.ShowInDialog" />.
            <para>The default value is false.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClass">
      <summary>
            Gets or sets the type of form used to input tag values
            (the form will be shown if <see cref="P:C1.C1Preview.C1PrintDocument.ShowTagsInputDialog" /> is true).
            The form type must be derived from <see cref="T:C1.C1Preview.Forms.TagsInputFormBase" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClassName">
      <summary>
            Gets or sets the type name of form used to input tag values
            (the form will be shown if <see cref="P:C1.C1Preview.C1PrintDocument.ShowTagsInputDialog" /> is true).
            The form type must be derived from <see cref="T:C1.C1Preview.Forms.TagsInputFormBase" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.BuildSerializerLog">
      <summary>
            Gets or sets a value indicating whether a log should be built
            during serialization and deserialization operations.
            If an exception occurs, that log is available in the exception data.
            Set this property to true to help debugging obscure serialization errors.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFormatVersion">
      <summary>
            Gets a string representing the version of the document persistence format
            supported by the current assembly.
            This version is used to check persisted documents' compatibility.
            Versions are backwards-compatible, but not vice versa
            (i.e. a document persisted using a newer version of <see cref="T:C1.C1Preview.C1PrintDocument" />
            may be unreadable by an older version).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormatVersion">
      <summary>
            Gets a <see cref="T:C1.C1Preview.C1FormatVersion" /> object representing the version of the document persistence format
            supported by the current assembly.
            This version is used to check persisted documents' compatibility.
            Versions are backwards-compatible, but not vice versa
            (i.e. a document persisted using a newer version of <see cref="T:C1.C1Preview.C1PrintDocument" />
            may be unreadable by an older version).
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DefaultUnitChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" /> property value has changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.ResolvedUnitChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> property value has changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.LongOperation">
      <summary>
            Occurs periodically during document generation.
            Allows to provide progress indication and the ability to cancel generation to the user.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.BusyStateChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> property value has changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Document">
      <summary>
            Gets a <see cref="T:System.Drawing.Printing.PrintDocument" /> object that can be used to render the current document
            into a standard print preview control. Not needed and not recommended if you're using
            ComponentOne preview controls.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts">
      <summary>
        <para>This property is obsolete.</para>
            Gets or sets a value indicating whether the <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />
            collection will be automatically filled with fonts used in the document
            during document generation.
            <para>The default value is false.</para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FontHandling">
      <summary>
            Gets or sets a value specifying how font embedding and substitution are handled
            by the current <see cref="T:C1.C1Preview.C1PrintDocument" />.
            This property is simply a shortcut to <see cref="!:FontProcessingOptions.FontHandling" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsPageCountFinal">
      <summary>
            Gets a value indicating whether all pages have been added to the document
            being generated.
            <para>
            For example, if the document has a page footer or header
            that includes the total page count (of the kind "Page X of Y"), this property
            gets <b>false</b> while new pages are being added, but <b>true</b> when adding
            new pages is over and the total page count is being updated on the rendered
            pages.
            </para><para>
            If the document is currently not generating (see <see cref="P:C1.C1Preview.C1PrintDocument.IsGenerating" />),
            gets <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.GeneratingComplete">
      <summary>
            If the current document is generating (see <see cref="P:C1.C1Preview.C1PrintDocument.IsGenerating" />),
            gets the approximate completion ratio, from 0 (0% complete) to 1 (100% complete).
            If the document is currently not generating, gets 1.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UserData">
      <summary>
            Gets or sets arbitrary data associated with the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts">
      <summary>
            Gets the collection of fonts embedded in the current document.
            <para>
            If <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" /> property on the document
            has been set to <see cref="F:C1.C1Preview.FontHandling.EmbedFonts" /> or
            <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />,
            this collection is populated automatically when the document generates.
            </para><para>
            Otherwise, this collection is not populated automatically. But you can
            add fonts to this collection in code, so that just the added fonts will be 
            embedded in the document. Note that in that case you must also explicitly
            specify the glyphs to include by calling the <see cref="M:C1.C1Preview.EmbeddedFont.AddGlyphs(System.String)" />
            method or any of its overloads.
            </para></summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFonts">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.DocumentFont" /> objects describing fonts
            used in the current document.
            <para>
            This collection is populated automaticallly when the document generates,
            depending on the value of the <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />
            property on the document.
            </para></summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.SystemTags">
      <summary>
            Gets the collection of system tags (objects derived from <see cref="T:C1.C1Preview.TagSys" />) associated with the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UsageInfo">
      <summary>
            Gets the <see cref="P:C1.C1Preview.C1PrintDocument.UsageInfo" /> object containing information related to the
            current document's usage: date/time of generation, file name last used to
            save or load the document, and so on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.HasGenerateDocumentHandler">
      <summary>
            Gets the value indicating whether a handler is attached to the
            <see cref="E:C1.C1Preview.C1PrintDocument.GenerateDocument" /> event of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ExportProviders">
      <summary>
            Gets the collection of all registered <see cref="T:C1.C1Preview.Export.ExportProvider" /> objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageLayout">
      <summary>
            Gets the effective layout for the current page. That layout is automatically
            built on the fly by merging all applicable layouts defined for the current document in <see cref="P:C1.C1Preview.C1PrintDocument.PageLayouts" />.
            You may change the properties on <b>CurrentPageLayout</b> programmatically. The changes will be
            effective immediately if they are made in the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event handler,
            otherwise they will take effect for the next added page.
            <para>
            Note that this property is only available during document generation, at other times null is returned.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AcceptButton">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderInputButton" /> object representing the 
            accept button in the current document
            (the first <see cref="T:C1.C1Preview.RenderInputButton" /> object with <see cref="P:C1.C1Preview.RenderInputButton.AcceptButton" /> property set to true).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics">
      <summary>
            Gets the current <see cref="T:C1.C1Preview.RenderGraphics" /> object
            created by the last call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockGraphics">
      <summary>
            Gets the current <c>Graphics</c> object
            created by the last call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics">
      <summary>
            Gets the current <see cref="T:C1.C1Preview.RenderGraphics" /> object
            created by the last call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectGraphics">
      <summary>
            Gets the current <c>Graphics</c> object
            created by the last call to <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsGenerating">
      <summary>
            Indicates whether the document is currently being generated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode">
      <summary>
            Gets a value indicating whether the document is being generated
            via <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> / <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" /> methods.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Reflowable">
      <summary>
            Gets a value indicating whether the document is reflowable.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Warnings">
      <summary>
            Gets the collection of warnings produced by the document's generation.
            </summary>
      <seealso cref="T:C1.C1Preview.Warning" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorCode">
      <summary>
            Obsolete. Now gets the Code of the first element in the Warnings collection,
            or GenerateErrorEnum.None if there are no warnings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorDesc">
      <summary>
            Obsolete. Now gets the description of the first element in the Warnings collection,
            or an empty string if there are no warnings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Pages">
      <summary>
            Gets the collection of document's pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DataSchema">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> object representing
            the data schema built into the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Cancel">
      <summary>
            Gets or sets a value indicating whether to cancel the generation of the current document.
            Note that this property is useful only if <see cref="P:C1.C1Preview.C1PrintDocument.DoEvents" />
            is set to <b>true</b>.
            </summary>
      <remarks>
            Setting this property to <b>true</b> can only be done while the current document is
            being generated (i.e. the value of the <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" /> property is
            equal to <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />). An attempt to set this property
            to <b>true</b> when the document is not being generated will cause an exception.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPage">
      <summary>
            Gets the current generating page, returns null if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageArea">
      <summary>
            Gets the current generating area of page, returns null if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowHeight">
      <summary>
            An amount of available vertical space in the block flow in the currently 
            generating page area, value specified in the ResolvedUnit units.
            Returns -1 if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowWidth">
      <summary>
            An amount of available horizontal space in the block flow in the currently 
            generating page area, value specified in the ResolvedUnit units.
            Returns -1 if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ScriptingOptions">
      <summary>
            Gets the ScriptingOptions object defining the scripting options of this C1PrintDocument object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions">
      <summary>
            Gets the <see cref="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions" /> object which determines compatibility
            with previous versions of C1PrintDocument.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions">
      <summary>
            Gets the <see cref="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions" /> object which determines
            how font subtitution and embedding are handled when the document generates.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFileName">
      <summary>
            Gets the file name associated with the current document
            (i.e. the document was either loaded from that file, or
            saved to it).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentDirectoryName">
      <summary>
            Gets the directory of the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFileName" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript">
      <summary>
            Gets or sets the script that is executed when the current document starts generating.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.C1PrintDocument" /> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting" /> event at this time.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript">
      <summary>
            Gets or sets the script that is executed when the current document has finished generating.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.C1PrintDocument" /> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded" /> event at this time.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageConfigureScript">
      <summary>
            Gets or sets the script that is executed when a new page is added to the document.
            This script executes after the page has been added to the <see cref="P:C1.C1Preview.C1PrintDocument.Pages" /> collection
            but before it is resolved (i.e. when the content of the page has not been laid out yet).
            <para>
            This script should be used only to change the page layout. Do not use this script
            to change the page content, as it may cause errors. 
            </para></summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.C1PrintDocument" /> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event at this time.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorScript">
      <summary>
            Gets or sets the script that is executed when an error occurs in a script attached to the current document.
            </summary>
      <remarks>
        <para>
            The <see cref="P:C1.C1Preview.C1PrintDocument.ErrorScript" /> event is also fired at the same time
            as this script is executed.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AssemblyVersion">
      <summary>
            Gets the version of C1PrintDocument assembly.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DocumentStarting">
      <summary>
            Occurs when the document generation is starting.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DocumentEnded">
      <summary>
            Occurs when the document generation completes.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageConfigure">
      <summary>
            Occurs when a new empty page has been created and added to the document's Pages collection, but has not been resolved yet.
            Use this method only to change the layout of the page.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageAdded">
      <summary>
            Occurs during document generation when a page has been generated and added to the Pages collection,
            and the next page is about to be generated.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageUpdated">
      <summary>
            Occurs when a page of the document has been updated.
            Fires very often during document generation when fragments of objects are added to, or removed from the page.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageChanged">
      <summary>
            Occurs when an already generated page of the document has been changed,
            for example when the PageCount variable on the page needs to be updated.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageDeleted">
      <summary>
            Occurs when the page has been removed from the document's Pages collection.
            This event cannot fire during document generation.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PagesClear">
      <summary>
            Occurs when the Pages collection has been cleared.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.BeforePagesClear">
      <summary>
            Occurs when the Pages collection is about to be cleared.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.GenerateDocument">
      <summary>
            Occurs when the document needs to be generated.
            Allows user to build the document content in an event handler.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.InputValueChanged">
      <summary>
            Occurs when the value of a RenderInputBase object within the document has been changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.FormsStyleChanged">
      <summary>
            Occurs when the FormsStyle property value changes. 
            </summary>
    </member>
    <member name="T:C1.C1Preview.Debug.DebugUtils">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.WriteLine(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.WriteLine(System.String,System.Object[])">
      <summary>
            For internal use.
            </summary>
      <param name="formatMask">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.GetRenderFragmentCaption(C1.C1Preview.RenderFragment)">
      <summary>
            For internal use.
            </summary>
      <param name="rf">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.DumpFragment(System.String,C1.C1Preview.RenderFragment,System.Int32)">
      <summary>
            For internal use.
            </summary>
      <param name="caption">
      </param>
      <param name="rf">
      </param>
      <param name="level">
      </param>
    </member>
    <member name="T:C1.C1Preview.DictionaryItem">
      <summary>
            The base class for types of objects that can be inserted in a <see cref="T:C1.C1Preview.C1PrintDocument" />'s <see cref="T:C1.C1Preview.Dictionary" />.
            Derived classes include <see cref="T:C1.C1Preview.DictionaryImage" /> and <see cref="T:C1.C1Preview.DictionaryIcon" />.
            </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Dictionary" />
    </member>
    <member name="T:C1.C1Preview.NamedCollectionItem">
      <summary>
            Represents an element of a <see cref="T:C1.C1Preview.NamedCollection" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IOwnedCollectionItem">
      <summary>
        <para>For internal use only.</para>
            Elements of an <see cref="T:C1.C1Preview.OwnedCollection" /> must implement this interface.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOwnedCollectionItem.Owner">
      <summary>
            Gets or sets the owner of the collection item.
            </summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.SetNameInt(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="newName">
      </param>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.SetName(System.String)">
      <summary>
            Sets the name of the current item.
            </summary>
      <param name="newName">The new name of the item.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.NamedCollectionItem" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.NamedCollectionItem" /> object.
            Note that the <see cref="P:C1.C1Preview.NamedCollectionItem.Owner" /> property is not copied to the new object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.NamedCollectionItem" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.NamedCollectionItem.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.NamedCollection" /> containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.NamedCollectionItem.Name">
      <summary>
            Gets or sets the unique name of the current object.
            If an item with the specified name already exists in the collection,
            an exception is thrown.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryItem.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryItem" /> class.
            </summary>
      <param name="name">The name of the <see cref="T:C1.C1Preview.DictionaryItem" />.</param>
      <seealso cref="P:C1.C1Preview.NamedCollectionItem.Name" />
    </member>
    <member name="M:C1.C1Preview.DictionaryItem.SetName(System.String)">
      <summary>
            Overridden. Sets the name of the current item.
            </summary>
      <param name="newName">The new name.</param>
    </member>
    <member name="P:C1.C1Preview.DictionaryItem.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Dictionary" /> object that is the owner of the current item.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Dictionary">
      <summary>
            Represents a dictionary within a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            The dictionary allows to store an object such as an image or an icon once,
            and reuse it throughout the document.
            Items contained in the dictionary must have types derived from <see cref="T:C1.C1Preview.DictionaryItem" />
            (e.g. <see cref="T:C1.C1Preview.DictionaryImage" /> or <see cref="T:C1.C1Preview.DictionaryIcon" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.NamedCollection">
      <summary>
            Represents an <see cref="T:C1.C1Preview.OwnedCollection" /> of uniquely-named elements.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OwnedCollection">
      <summary>
            Describes a collection with an owner.
            Base class for <see cref="T:C1.C1Preview.RenderObjectCollection" /> and <see cref="T:C1.C1Preview.ParagraphObjectCollection" />.
            Additional to <see cref="T:C1.C1Preview.OwnedCollectionBase" /> updates Owner property
            of items if they supports <see cref="T:C1.C1Preview.IOwnedCollectionItem" /> interface.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OwnedCollectionBase">
      <summary>
            Represents a collection with an owner object.
            Notifies the owner of interesting events on the collection if the owner
            supports the <see cref="T:C1.C1Preview.ICollectionOwner" /> interface.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedCollectionBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedCollectionBase" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnClear">
      <summary>
            Called when the collection is about to be cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnClearComplete">
      <summary>
            Called after the collection has been cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been inserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnRemove(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
            Called when an item is about to be set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Called after an item has been set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.AddInt(System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.InsertInt(System.Int32,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.RemoveInt(System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.GetByIndex(System.Int32)">
      <summary>
            For internal use.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.SetByIndex(System.Int32,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.AssignFrom(C1.C1Preview.OwnedCollectionBase)">
      <summary>
            Clears the current collection, and copies the items from another one.
            The items are copied by cloning, and must support the <see cref="T:System.ICloneable" />
            interface (if an item that does not support is encountered, an exception occurs).
            </summary>
      <param name="source">The <see cref="T:C1.C1Preview.OwnedCollectionBase" /> to copy items from.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.IndexOf(System.Object)">
      <summary>
            Searches for the specified Object and returns the zero-based index 
            of the first occurrence within the entire collection.
            </summary>
      <param name="obj">The Object to locate in the collection. The value can be a null reference.</param>
      <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.Exchange(System.Int32,System.Int32)">
      <summary>
            Swap two items in collection.
            </summary>
      <param name="item1">Index of first item.</param>
      <param name="item2">Index of second item.</param>
    </member>
    <member name="P:C1.C1Preview.OwnedCollectionBase.Owner">
      <summary>
            Gets the owner of collection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedCollection" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnClear">
      <summary>
            Called when the collection is about to be cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been inserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
            Called when an item is about to be set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Called after an item has been set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.GetItemType">
      <summary>
            Gets the type of items in the collection.
            If this method returns null, items of different types can be added to the collection.
            Otherwise, only items of the type this method returns can be added.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OwnedCollection.Owner">
      <summary>
            Gets the owner of collection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.NamedCollection" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.NamedCollectionItem" /> type.</returns>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnClearComplete">
      <summary>
            Called after the collection has been cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Called after an item has been set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
            Called when an item is about to be set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.IndexOfName(System.String)">
      <summary>
            Returns the 0-based index of a <see cref="T:C1.C1Preview.NamedCollectionItem" />
            with specified name in the current <see cref="T:C1.C1Preview.NamedCollection" />.
            </summary>
      <param name="name">The name of the item to locate. </param>
      <returns>The 0-based index of the specified item, or -1 if the item was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.FindByName(System.String)">
      <summary>
            Returns <see cref="T:C1.C1Preview.NamedCollectionItem" /> with specified name.
            </summary>
      <param name="name">The name of the item to locate.</param>
      <returns>The specified item</returns>
    </member>
    <member name="M:C1.C1Preview.Dictionary.GetItemType">
      <summary>
            Gets the type of items that can be added to this dictionary.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.DictionaryItem" /> type.</returns>
    </member>
    <member name="M:C1.C1Preview.Dictionary.Add(C1.C1Preview.DictionaryItem)">
      <summary>
            Adds an item to the current dictionary.
            </summary>
      <param name="di">The <see cref="T:C1.C1Preview.DictionaryItem" /> to add.</param>
      <returns>The index of the newly added item in the current dictionary.</returns>
    </member>
    <member name="M:C1.C1Preview.Dictionary.Remove(C1.C1Preview.DictionaryItem)">
      <summary>
            Removes an item from the current dictionary.
            </summary>
      <param name="di">The <see cref="T:C1.C1Preview.DictionaryItem" /> to remove.</param>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object that is the owner of the current dictionary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DictionaryItem" /> with the specified name.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.DictionaryItem" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryImage">
      <summary>
            Represents an <see cref="P:C1.C1Preview.DictionaryImage.Image" /> stored in a <see cref="T:C1.C1Preview.Dictionary" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryImage" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryImage" /> class.
            </summary>
      <param name="name">The name of the current item.</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.#ctor(System.String,System.Drawing.Image)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryImage" /> class.
            </summary>
      <param name="name">The name of the current item.</param>
      <param name="image">The image to store in the current item.</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.ShouldSerializeImage">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DictionaryImage.Image" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.DictionaryImage.Image" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.ShouldSerializeOpenXmlImage">
      <summary>
            Indicates whether the <b>OpenXmlImage</b> property should be serialized.
            </summary>
      <returns>True if <b>OpenXmlImage</b> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DictionaryImage" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DictionaryImage.Image">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.DictionaryImage.Image" /> stored by the current <see cref="T:C1.C1Preview.DictionaryImage" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryIcon">
      <summary>
            Represents an <see cref="P:C1.C1Preview.DictionaryIcon.Icon" /> stored in a <see cref="T:C1.C1Preview.Dictionary" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryIcon" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryIcon" /> class.
            </summary>
      <param name="name">The name of the current item.</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.#ctor(System.String,System.Drawing.Icon)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryIcon" /> class.
            </summary>
      <param name="name">The name of the current item.</param>
      <param name="icon">The icon to store in the current item.</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.ShouldSerializeIcon">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DictionaryIcon.Icon" /> property should be serialized.
            </summary>
      <returns>True if <see cref="P:C1.C1Preview.DictionaryIcon.Icon" /> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.ShouldSerializeOpenXmlIcon">
      <summary>
            Indicates whether the <b>OpenXmlIcon</b> property should be serialized.
            </summary>
      <returns>True if <b>OpenXmlIcon</b> should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DictionaryIcon" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DictionaryIcon.Icon">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.DictionaryIcon.Icon" /> stored by the current <see cref="T:C1.C1Preview.DictionaryIcon" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IDictionaryItemLinkOwner">
      <summary>
        <para>For internal use only.</para>
            This interface should be implemented by a class if it needs to hold a link (reference)
            to an object in a <see cref="P:C1.C1Preview.IDictionaryItemLinkOwner.Dictionary" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IDictionaryItemLinkOwner.Dictionary">
      <summary>
            Gets the <see cref="P:C1.C1Preview.IDictionaryItemLinkOwner.Dictionary" /> where the <see cref="T:C1.C1Preview.DictionaryItem" /> is stored.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryItemLink">
      <summary>
            The base class describing a link (reference) to a <see cref="T:C1.C1Preview.DictionaryItem" />.
            Provides the base functionality, derived classes such as <see cref="T:C1.C1Preview.DictionaryImageLink" /> and <see cref="T:C1.C1Preview.DictionaryIconLink" />
            represent links to specific type of dictionary items.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryItemLink.#ctor(C1.C1Preview.IDictionaryItemLinkOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryItemLink" /> class.
            </summary>
      <param name="owner">The owner of this instance.</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryItemLink.GetItemData">
      <summary>
            Gets the data representing the item.
            </summary>
      <returns>The data representing the item.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryItemLink.AssignFrom(C1.C1Preview.DictionaryItemLink)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DictionaryItemLink" /> to the current object.
            </summary>
      <param name="source">
      </param>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.DataInt">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.Owner">
      <summary>
            Gets the owner of the current dictionary item.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.Document">
      <summary>
            Gets <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing the curret dictionary item.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.Data">
      <summary>
            Gets or sets data representing the object stored in the dictionary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.ItemName">
      <summary>
            Gets or sets the name of the item in the dictionary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.HasData">
      <summary>
            Gets a value indicating whether <see cref="T:C1.C1Preview.DictionaryItemLink" /> contains data.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryImageLink">
      <summary>
            Specializes the <see cref="T:C1.C1Preview.DictionaryItemLink" /> class to represent a link to an <see cref="T:System.Drawing.Image" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.#ctor(C1.C1Preview.IDictionaryItemLinkOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryImageLink" /> class.
            </summary>
      <param name="owner">The owner of this instance.</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeImage">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DictionaryImageLink.Image" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DictionaryImageLink.Image" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeMetafile">
      <summary>
            Indicates whether the <see cref="T:System.Drawing.Imaging.Metafile" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="T:System.Drawing.Imaging.Metafile" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeOpenXmlMetafile">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeOpenXmlImage">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.GetItemData">
      <summary>
            Gets the data representing the item.
            </summary>
      <returns>The data representing the item.</returns>
    </member>
    <member name="P:C1.C1Preview.DictionaryImageLink.Image">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> associated with the current item.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryIconLink">
      <summary>
            Specializes the <see cref="T:C1.C1Preview.DictionaryItemLink" /> class to represent a link to an <see cref="T:System.Drawing.Icon" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.#ctor(C1.C1Preview.IDictionaryItemLinkOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DictionaryIconLink" /> class.
            </summary>
      <param name="owner">The owner of this instance.</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.ShouldSerializeIcon">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DictionaryIconLink.Icon" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DictionaryIconLink.Icon" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.ShouldSerializeOpenXmlIcon">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.GetItemData">
      <summary>
            Gets the data representing the item.
            </summary>
      <returns>The data representing the item.</returns>
    </member>
    <member name="P:C1.C1Preview.DictionaryIconLink.Icon">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Icon" /> associated with the current item.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentBody">
      <summary>
            Represents the body of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            The body is the main part of a document presenting visible content,
            and can be accessed via the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> property on the document.
            (The only other parts presenting visible document content are page headers and footers.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing this <see cref="T:C1.C1Preview.DocumentBody" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Stacking">
      <summary>
            Gets the stacking rules for the current <see cref="T:C1.C1Preview.DocumentBody" />.
            Use <see cref="P:C1.C1Preview.C1PrintDocument.Stacking" /> to set the stacking rules.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.HasChildren">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Preview.DocumentBody" /> contains any render objects
            (i.e. whether the <see cref="P:C1.C1Preview.DocumentBody.Children" /> collection exists and is not empty).
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Children">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.RenderObject" /> elements contained within the current <see cref="T:C1.C1Preview.DocumentBody" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentInfoFields">
      <summary>
            Enumerates the fields stored by the <see cref="T:C1.C1Preview.DocumentInfo" /> class.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.None">
      <summary>
            No fields.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Title">
      <summary>
            The title of the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Author">
      <summary>
            The author of the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Operator">
      <summary>
            The person who last made changes to the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Manager">
      <summary>
            The manager of the author.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Company">
      <summary>
            The company of the author.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Subject">
      <summary>
            The subject of the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Comment">
      <summary>
            The document comments.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.CreationTime">
      <summary>
            The date and time when the document was created.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.RevisionTime">
      <summary>
            The date and time when the document was last modified.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Creator">
      <summary>
            The application that created the original document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Keywords">
      <summary>
            The keywords for the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Producer">
      <summary>
            The application that created the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.All">
      <summary>
            All fields.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentInfo">
      <summary>
            Represents general information about a <see cref="T:C1.C1Preview.C1PrintDocument" />,
            such as author, subject, creation date and time, and so on.
            Can be accessed via the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentInfo" /> property on a document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DocumentInfo" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerialize">
      <summary>
            Indicates whether the current <see cref="T:C1.C1Preview.DocumentInfo" /> object should be serialized.
            </summary>
      <returns>
        <b>true</b> if the current <see cref="T:C1.C1Preview.DocumentInfo" /> object should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeTitle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Title" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Title" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeAuthor">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Author" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Author" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeOperator">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Operator" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Operator" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeSubject">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Subject" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Subject" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeCreator">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Creator" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Creator" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeProducer">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Producer" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Producer" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeCompany">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Company" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Company" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeCreationTime">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.CreationTime" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.CreationTime" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeRevisionTime">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.RevisionTime" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.RevisionTime" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeManager">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Manager" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Manager" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeComment">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Comment" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Comment" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeKeywords">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.DocumentInfo.Keywords" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.DocumentInfo.Keywords" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.AssignFrom(C1.C1Preview.DocumentInfo)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DocumentInfo" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.DocumentInfo" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.DocumentInfo" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.GetKeywordsAsText">
      <summary>
            Returns the <see cref="P:C1.C1Preview.DocumentInfo.Keywords" /> collection of the current object
            as a single space-delimited string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.SetKeywordsAsText(System.String)">
      <summary>
            Assigns the <see cref="P:C1.C1Preview.DocumentInfo.Keywords" /> collection on the current object
            from a single string containing the space-delimited list of keywords.
            (Note that the <see cref="P:C1.C1Preview.DocumentInfo.Keywords" /> collection is cleared by this method prior to assignment.)
            </summary>
      <param name="value">The space-delimited list of keywords.</param>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Title">
      <summary>
            Gets or sets the title of a document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Author">
      <summary>
            Gets or sets the author of a document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Operator">
      <summary>
            Gets or sets the person who last made changes to a document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.CreationTime">
      <summary>
            Gets or sets the date and time when a document was created.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.RevisionTime">
      <summary>
            Gets or sets the date and time when a document was last modified.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Subject">
      <summary>
            Gets or sets the subject of a document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Producer">
      <summary>
            Gets or sets the application that created a document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Creator">
      <summary>
            Gets or sets the application that created the original document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Company">
      <summary>
            Gets or sets the company of a document's author.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Keywords">
      <summary>
            Gets or sets the keywords for a document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Manager">
      <summary>
            Gets or sets the manager of the author.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Comment">
      <summary>
            Gets or sets the comment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.UserData">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2" /> of custom user defined string keys and strings associated with a document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Util.FastList">
      <summary>
            Represents an <see cref="T:System.Collections.IList" /> providing a fast search for the contained elements.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.FindObjectIndex(System.Object,System.Int32@)">
      <summary>
            Performs a fast search for the specified object within the current <see cref="T:C1.C1Preview.Util.FastList" />.
            </summary>
      <param name="obj">The object to search for.</param>
      <param name="index">OUT: the index of <paramref name="obj" /> within the current list, or 0 if the object was not found.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> was found, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Add(System.IComparable)">
      <summary>
            Adds an object implementing the <see cref="T:System.IComparable" /> interface to the current list.
            </summary>
      <param name="obj">The object to add (if the current list already contains this object, an exception is thrown).</param>
      <returns>The index of the added object in the current list.</returns>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Remove(System.Object)">
      <summary>
            Removes the specified element from the current list.
            </summary>
      <param name="obj">The element to remove.</param>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Insert(System.Int32,System.Object)">
      <summary>
            Inserts the element at the specified index.
            </summary>
      <param name="index">The index of the element.</param>
      <param name="obj">The element to insert.</param>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index from the current list.
            </summary>
      <param name="index">The index of the element to remove.</param>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Clear">
      <summary>
            Clears the current <see cref="T:C1.C1Preview.Util.FastList" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.IndexOf(System.Object)">
      <summary>
            Returns the index of the specified object in the current <see cref="T:C1.C1Preview.Util.FastList" />.
            (Performs a fast search using the <see cref="M:C1.C1Preview.Util.FastList.FindObjectIndex(System.Object,System.Int32@)" /> method.)
            </summary>
      <param name="obj">The object to search for.</param>
      <returns>The index of the specified object within the current list, or -1 if none was found.</returns>
    </member>
    <member name="P:C1.C1Preview.Util.FastList.InnerList">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> used internally to store the elements of the current <see cref="T:C1.C1Preview.Util.FastList" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EventCollection">
      <summary>
            Represents an <see cref="T:C1.C1Preview.OwnedCollection" /> that fires events when changing.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EventCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.EventCollection" />.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnClear">
      <summary>
            Called when the collection is about to be cleared.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changing" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnClearComplete">
      <summary>
            Called after the collection has been cleared.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changed" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changing" /> event.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been inserted.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changed" /> event.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnRemove(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be removed.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changing" /> event.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changed" /> event.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
            Called when an item is about to be set.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changing" /> event.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Called after an item has been set.
            Fires the <see cref="E:C1.C1Preview.EventCollection.Changed" /> event.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="E:C1.C1Preview.EventCollection.Changing">
      <summary>
            Occurs when a change is about to be made to the current collection.
            </summary>
    </member>
    <member name="E:C1.C1Preview.EventCollection.Changed">
      <summary>
            Occurs after a change has been made to the current collection.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeTypeEnum">
      <summary>
            Describes the type of a change to a collection.
            </summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.InsertItem">
      <summary>
            Item is inserted.
            </summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.SetItem">
      <summary>
            Item is set (changed).
            </summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.DeleteItem">
      <summary>
            Item is deleted.
            </summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.Reset">
      <summary>
            Collection is cleared.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeEventHandler">
      <summary>
            Represents the method that will handler an event occuring when
            collection changing.
            </summary>
      <param name="sender">The source of event.</param>
      <param name="e">The parameters of event.</param>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeEventArgs">
      <summary>
            Contains data about <see cref="T:C1.C1Preview.EventCollection" /> change events.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EventCollectionChangeEventArgs.#ctor(C1.C1Preview.EventCollectionChangeTypeEnum,System.Object,System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.EventCollectionChangeEventArgs" /> class.
            </summary>
      <param name="changeType">The collection change type.</param>
      <param name="oldItem">The old item, or null.</param>
      <param name="newItem">The new item, or null.</param>
      <param name="index">The item index, or -1.</param>
    </member>
    <member name="M:C1.C1Preview.EventCollectionChangeEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.EventCollectionChangeEventArgs" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.ChangeType">
      <summary>
            Gets the type of collection's changing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.OldItem">
      <summary>
            Gets the old object at specified index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.NewItem">
      <summary>
            Gets the new object at specified index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.Index">
      <summary>
            Gets the index within collection where changing occurs.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OwnedFastListBase">
      <summary>
            Represents <see cref="T:C1.C1Preview.Util.FastList" /> with owner object.
            Notifies the owner of interesting events on the collection if the owner
            supports the <see cref="T:C1.C1Preview.ICollectionOwner" /> interface.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedFastList" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedFastList" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnRemove(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been inserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnClear">
      <summary>
            Called when the list is about to be cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnClearComplete">
      <summary>
            Called after the list has been cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.RemoveAt(System.Int32)">
      <summary>
            Removes the specified element from the current list.
            </summary>
      <param name="index">Index of the element to remove.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.Insert(System.Int32,System.Object)">
      <summary>
            Inserts the element at the specified index.
            </summary>
      <param name="index">The index of the element.</param>
      <param name="obj">The element to insert.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.Clear">
      <summary>
            Clears the current <see cref="T:C1.C1Preview.OwnedFastListBase" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OwnedFastListBase.Owner">
      <summary>
            Gets the owner of collection.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OwnedFastList">
      <summary>
            Describes a <see cref="T:C1.C1Preview.Util.FastList" /> with an owner.
            Base class for <see cref="T:C1.C1Preview.C1PageCollection" />.
            Additional to <see cref="T:C1.C1Preview.OwnedFastListBase" /> updates Owner property
            of items if they supports <see cref="T:C1.C1Preview.IOwnedCollectionItem" /> interface.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedFastList" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OwnedFastList" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnClear">
      <summary>
            Called when the list is about to be cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been inserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.GetItemType">
      <summary>
            Gets the type of items in the collection.
            If this method returns null, items of different types can be added to the collection.
            Otherwise, only items of the type this method returns can be added.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OwnedFastList.Owner">
      <summary>
            Gets the owner of collection.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChange">
      <summary>
            Represents an absolute or relative page numbering change in <see cref="T:C1.C1Preview.C1PrintDocument" />
            or <see cref="T:C1.C1Preview.C1MultiDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.#ctor(C1.C1Preview.PageNumberingChangeModeEnum,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageNumberingChange" /> class.
            </summary>
      <param name="mode">The page numbering mode.</param>
      <param name="value">The page numbering value (semantics depend on <paramref name="mode" />).</param>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.GetPageNo(System.Int32)">
      <summary>
            Gets the page number changed by the current <see cref="T:C1.C1Preview.PageNumberingChange" /> object.
            </summary>
      <param name="curPageNo">The current page number.</param>
      <returns>The page number after the change.</returns>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.Parse(System.String,System.Boolean)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.PageNumberingChange" /> object.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="throwException">Indicates whether an exception should be thrown if the specified string cannot be converted.</param>
      <returns>The created <see cref="T:C1.C1Preview.PageNumberingChange" /> object,
            or <b>null</b> if the string could not be converted and <paramref name="throwException" /> is <b>false</b>.</returns>
    </member>
    <member name="P:C1.C1Preview.PageNumberingChange.Mode">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.PageNumberingChangeModeEnum" /> value determining the page numbering change
            represented by the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageNumberingChange.Value">
      <summary>
            Gets or sets the absolute page number or increment.
            The semantics of this property depend on the value of the <see cref="P:C1.C1Preview.PageNumberingChange.Mode" /> property.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChange.TypeConverter">
      <summary>
            Represents a type converter for <see cref="T:C1.C1Preview.PageNumberingChange" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.PageNumberingChange" /> object.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Preview.StackingRulesEnum">
      <summary>
            Defines the stacking rules: block or inline flow,
            top to bottom or left to right for block flow.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom">
      <summary>
            Objects are placed one beneath another within the container.
            When the bottom edge of the current page is reached, a new page is added.
            This is the default.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.BlockLeftToRight">
      <summary>
            Objects are placed one next to another, from left to right.
            When the right edge of the current page is reached, a new horizontal page is added
            (a horizontal page logically extends the preceding page to the right;
            C1PreviewPane respects this location by default, showing such pages in a row).
            </summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.InlineLeftToRight">
      <summary>
            Objects are placed inline, one next to another, from left to right.
            When the right edge of the current page is reached, the sequence wraps to the next line.
            A new page is added when the bottom of the current page is reached.
            </summary>
    </member>
    <member name="T:C1.C1Preview.MeasurementDeviceEnum">
      <summary>
            Defines the device (printer or screen) used to measure the elements of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MeasurementDeviceEnum.Printer">
      <summary>
            Use printer device to measure document elements.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MeasurementDeviceEnum.Screen">
      <summary>
            Use system screen device to measure document elements.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentCreationMode">
      <summary>
            Defines the generation mode of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.Unknown">
      <summary>
            The document was not generated, its creation mode is unknown at this time.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.Generate">
      <summary>
            The document was created by a call to the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.StartEndDoc">
      <summary>
            The document was created by calls to the <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" /> and
            <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" /> methods.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChangeModeEnum">
      <summary>
            Describes the type of a page numbering change in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Set">
      <summary>
            Set the page number to a specified absolute value.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Increment">
      <summary>
            Increment the current page number by a specified value.
            </summary>
    </member>
    <member name="T:C1.C1Preview.BusyStateEnum">
      <summary>
            Describes the busy state of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Ready">
      <summary>
            The document is not busy.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Generating">
      <summary>
            The document is currently generating.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Saving">
      <summary>
            The document is currently saving.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Loading">
      <summary>
            The document is currently loading.
            </summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsUtils">
      <summary>
        <para>For internal use only.</para>
            Provides graphics-related static helper methods and properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.ReadMetafileFromMemory(System.Byte[])">
      <summary>
            Reads a <see cref="T:System.Drawing.Imaging.Metafile" /> from a byte array.
            </summary>
      <param name="imageData">The byte array containing the <see cref="T:System.Drawing.Imaging.Metafile" /> data.</param>
      <returns>The newly created <see cref="T:System.Drawing.Imaging.Metafile" />.</returns>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)">
      <summary>
            Writes a <see cref="T:System.Drawing.Imaging.Metafile" /> to a byte array.
            </summary>
      <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile" /> to write.</param>
      <returns>The byte array containing the <paramref name="metafile" /> data.</returns>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.ReadMetafileFromMemory(System.Byte[])" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)">
      <summary>
            Serializes a <see cref="T:System.Drawing.Imaging.Metafile" /> to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile" /> to serialize.</param>
      <param name="stream">The target <see cref="T:System.IO.Stream" />.</param>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)" />
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)">
      <summary>
            Serializes a <see cref="T:System.Drawing.Imaging.Metafile" /> to a disk file.
            </summary>
      <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile" /> to serialize.</param>
      <param name="fileName">The target file name.</param>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves an <see cref="T:System.Drawing.Image" /> to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to save.</param>
      <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat" /> to use for saving the image
            (ignored if the image is a <see cref="T:System.Drawing.Imaging.Metafile" />).</param>
      <returns>The <see cref="T:System.IO.MemoryStream" /> object containing image data, or <b>null</b> if an error occurred while saving.</returns>
      <remarks>
            Unlike the standard <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)" /> method,
            this method saves <see cref="T:System.Drawing.Imaging.Metafile" /> objects as metafiles, without any conversions
            (the standard method converts metafiles to PNG format prior to saving).
            </remarks>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)">
      <summary>
            Saves an <see cref="T:System.Drawing.Image" /> to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to save.</param>
      <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat" /> to use for saving the image
            (ignored if <paramref name="image" /> is a <see cref="T:System.Drawing.Imaging.Metafile" />, and <paramref name="keepAsMetafile" /> is <b>true</b>).</param>
      <param name="keepAsMetafile">If <b>true</b>, metafiles are saved without conversion, ignoring <paramref name="imageFormat" />.
            Otherwise, the image is saved in the specified format.</param>
      <returns>The <see cref="T:System.IO.MemoryStream" /> object containing image data, or <b>null</b> if an error occurred while saving.</returns>
      <remarks>
            Unlike the standard <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)" /> method,
            this method is able to save <see cref="T:System.Drawing.Imaging.Metafile" /> objects as metafiles, without any conversions
            (the standard method converts metafiles to PNG format prior to saving even if such conversion is not requested).
            </remarks>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToMemory(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)">
      <summary>
            Saves an <see cref="T:System.Drawing.Image" /> to a array of bytes.
            </summary>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to save.</param>
      <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat" /> to use for saving the image
            (ignored if <paramref name="image" /> is a <see cref="T:System.Drawing.Imaging.Metafile" />, and <paramref name="keepAsMetafile" /> is <b>true</b>).</param>
      <param name="keepAsMetafile">If <b>true</b>, metafiles are saved without conversion, ignoring <paramref name="imageFormat" />.
            Otherwise, the image is saved in the specified format.</param>
      <returns>The <see cref="T:System.IO.MemoryStream" /> object containing image data, or <b>null</b> if an error occurred while saving.</returns>
      <remarks>
            Unlike the standard <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)" /> method,
            this method is able to save <see cref="T:System.Drawing.Imaging.Metafile" /> objects as metafiles, without any conversions
            (the standard method converts metafiles to PNG format prior to saving even if such conversion is not requested).
            </remarks>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.LoadImageFromMemory(System.Byte[])">
      <summary>
            Creates an image from a byte array.
            </summary>
      <param name="data">The byte array containing the image data.</param>
      <returns>The <see cref="T:System.Drawing.Image" /> object or null if the image could not be created.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.FindImageCodecInfo(System.Drawing.Imaging.ImageFormat)">
      <summary>
            Returns <see cref="T:System.Drawing.Imaging.ImageCodecInfo" /> for the specified image format,
            or <c>null</c>.
            </summary>
      <param name="imageFormat">The image format (e.g. as returned by <see cref="P:System.Drawing.Image.RawFormat" />).</param>
      <returns>The corresponding <see cref="T:System.Drawing.Imaging.ImageCodecInfo" /> or <c>null</c> if none was found.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetScreenDpi(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
            Returns the logical and physical screen resolution.
            </summary>
      <param name="logicalDpiX">OUT: the logical horizontal resolution.</param>
      <param name="logicalDpiY">OUT: the logical vertical resolution.</param>
      <param name="physicalDpiX">OUT: the physical horizontal resolution.</param>
      <param name="physicalDpiY">OUT: the physical vertical resolution.</param>
      <param name="realLogicalDpiX">OUT: The real horz DPI 96, 120, 144 etc depending on font size.</param>
      <param name="readDpiY">OUT: The real vert DPI 96, 120, 144 etc depending on font size.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiX(System.IntPtr)">
      <summary>
            Returns the horizontal resolution of the specified device context.
            </summary>
      <param name="dc">Handle of the device context.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiY(System.IntPtr)">
      <summary>
            Returns the vertical resolution of the specified device context.
            </summary>
      <param name="dc">Handle of the device context.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetMetafileInfo(System.Drawing.Imaging.Metafile,C1.C1Preview.MetafileInfo@)">
      <summary>
            Creates an instance of <see cref="T:C1.C1Preview.MetafileInfo" /> and fills it with data about the specified metafile.
            </summary>
      <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile" /> to get information about.</param>
      <param name="metafileInfo">OUT: <see cref="T:C1.C1Preview.MetafileInfo" /> containing information about <paramref name="metafile" />.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetMetafileSize(System.Drawing.Imaging.Metafile,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Gets the size of a metafile.
            </summary>
      <param name="metafile">The metafile to get the size of.</param>
      <param name="destType">The target unit of measurement.</param>
      <param name="destDpiX">The target horizontal resolution (used if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <param name="destDpiY">The target vertical resolution (used if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>The size of <paramref name="metafile" /> in units specified by <paramref name="destType" />.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetImageSize(System.Drawing.Image,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Gets the size of an image.
            </summary>
      <param name="image">The image to get the size of.</param>
      <param name="destType">The target unit of measurement.</param>
      <param name="destDpiX">The target horizontal resolution (used if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <param name="destDpiY">The target vertical resolution (used if <paramref name="destType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>The size of <paramref name="image" /> in units specified by <paramref name="destType" />.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetImageDpi(System.Drawing.Image)">
      <summary>
            Gets the resolution of an image.
            If the image is a <see cref="T:System.Drawing.Imaging.Metafile" /> containing a <see cref="T:C1.C1Preview.MetafileInfo" />,
            resolution is taken from that info.
            </summary>
      <param name="image">The image.</param>
      <returns>The image resolution (DPI).</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,C1.C1Preview.IImageAlign,C1.C1Preview.IMetafilePainter,System.Boolean)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" />.
            </summary>
      <param name="graphics">
        <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to draw.</param>
      <param name="drawRect">The alignment rectangle.</param>
      <param name="clipRect">The clipping rectangle, can be null in this case clipping not applied.</param>
      <param name="align">The image alignment (if <b>null</b>, <see cref="P:C1.C1Preview.ImageAlign.Default" /> is used).</param>
      <param name="metafilePainter">An object implementing the <see cref="T:C1.C1Preview.IMetafilePainter" />,
            <param name="useClassicDrawMethod">Uses Graphics.DrawImage(image, dstRect) method instead of Graphics.DrawImage(image, dstRect, srcRect, GraphicsUnit) in some rare cases this method (with 2 parameters) produces better results.</param>
            if not <b>null</b>, and <paramref name="image" /> is a <see cref="T:System.Drawing.Imaging.Metafile" />, used to draw the image.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.ConvertToEmf(System.Drawing.Imaging.Metafile,System.Drawing.Graphics)">
      <summary>
            Converts a metafile from <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" /> or <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" />
            to <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" /></summary>
      <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile" /> to convert.</param>
      <param name="referenceGraphics">The <see cref="T:System.Drawing.Graphics" /> to use in converting,
            if <b>null</b>, the screen DC is used.</param>
      <returns>The converted <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" /> metafile.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.CreateRoundRectPath(System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representing a rounded rectangle.
            </summary>
      <param name="rectangle">The rectangle to base the result on.</param>
      <param name="ellipse">The size of the ellipse used to draw rounded corners.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representing <paramref name="rectangle" /> rounded using <paramref name="ellipse" />.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.CreateRoundRectPath(System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representing a rounded rectangle.
            </summary>
      <param name="rectangle">The rectangle to base the result on.</param>
      <param name="ellipse">The size of the ellipse used to draw rounded corners.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representing <paramref name="rectangle" /> rounded using <paramref name="ellipse" />.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.DrawRoundRect(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Draws a rounded rectangle on the specified <see cref="T:System.Drawing.Graphics" /> with the specified <see cref="T:System.Drawing.Pen" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="pen">The <see cref="T:System.Drawing.Pen" /> to draw with.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.RectangleF" /> to use as the base for the rounded rectangle.</param>
      <param name="ellipse">The size of the ellipse used to draw rounded corners.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.FillRoundRect(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Fills a rounded rectangle on the specified <see cref="T:System.Drawing.Graphics" /> with the specified <see cref="T:System.Drawing.Brush" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="brush">The fill <see cref="T:System.Drawing.Brush" /> to use.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.RectangleF" /> to use as the base for the rounded rectangle.</param>
      <param name="ellipse">The size of the ellipse used to draw rounded corners.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.DrawRoundRect(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Draws a rounded rectangle on the specified <see cref="T:System.Drawing.Graphics" /> with the specified <see cref="T:System.Drawing.Pen" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="pen">The <see cref="T:System.Drawing.Pen" /> to draw with.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.RectangleF" /> to use as the base for the rounded rectangle.</param>
      <param name="ellipse">The size of the ellipse used to draw rounded corners.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.FillRoundRect(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Fills a rounded rectangle on the specified <see cref="T:System.Drawing.Graphics" /> with the specified <see cref="T:System.Drawing.Brush" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="brush">The fill <see cref="T:System.Drawing.Brush" /> to use.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.RectangleF" /> to use as the base for the rounded rectangle.</param>
      <param name="ellipse">The size of the ellipse used to draw rounded corners.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsImagesContentEqual(System.Drawing.Image,System.Drawing.Image)">
      <summary>
            Compares two images by content.
            </summary>
      <param name="i1">The first <see cref="T:System.Drawing.Image" /> to compare.</param>
      <param name="i2">The second <see cref="T:System.Drawing.Image" /> to compare.</param>
      <returns>
        <b>true</b> if the images have the same content, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsImagesContentEqual(System.Drawing.Image,System.Drawing.Image,System.Boolean)">
      <summary>
            Compares two images by content, optionally using fuzzy comparison.
            </summary>
      <param name="i1">The first <see cref="T:System.Drawing.Image" /> to compare.</param>
      <param name="i2">The second <see cref="T:System.Drawing.Image" /> to compare.</param>
      <param name="useFuzzyComparison">
        <b>true</b> to use fuzzy comparison (ignoring minor differences),
            <b>false</b> to use strict comparison.</param>
      <returns>
        <b>true</b> if the images have the same content, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsImageEqualToolStripItemImage(System.Drawing.Image,System.Windows.Forms.ToolStripItem)">
      <summary>
            Tests whether the content of an image is equal to the content of a <see cref="T:System.Windows.Forms.ToolStripItem" />'s
            <see cref="P:System.Windows.Forms.ToolStripItem.Image" />.
            This method performs fuzzy comparison (see <see cref="M:C1.C1Preview.GraphicsUtils.IsImagesContentEqual(System.Drawing.Image,System.Drawing.Image,System.Boolean)" />).
            </summary>
      <param name="image">The image to compare.</param>
      <param name="item">The <see cref="T:System.Windows.Forms.ToolStripItem" /> to compare.</param>
      <returns>
        <b>true</b> if the images are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.PixelFormatToBytesPerPixel(System.Drawing.Imaging.PixelFormat)">
      <summary>
            Calculates bytes per pixel based on <see cref="T:System.Drawing.Imaging.PixelFormat" />.
            </summary>
      <param name="pixelFormat">The <see cref="T:System.Drawing.Imaging.PixelFormat" /> to test.</param>
      <returns>Bytes per pixel.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsBitmapsContentEqual(System.Drawing.Bitmap,System.Drawing.Bitmap)">
      <summary>
            Compares the content of two bitmaps.
            </summary>
      <param name="bmp1">The first bitmap to compare.</param>
      <param name="bmp2">The second bitmap to compare.</param>
      <returns>
        <b>true</b> if bitmaps have the same content, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsBitmapsContentEqual(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Boolean)">
      <summary>
            Compares the content of two bitmaps,
            optionally performing fuzzy comparison.
            </summary>
      <param name="bmp1">The first bitmap to compare.</param>
      <param name="bmp2">The second bitmap to compare.</param>
      <param name="useFuzzyComparison">
        <b>true</b> to use fuzzy comparison, <b>false</b> otherwise.</param>
      <returns>
        <b>true</b> if bitmaps have the same content, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealDpiX">
      <summary>
            Gets the physical horizontal resolution of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealDpiY">
      <summary>
            Gets the physical vertical resolution of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.ScreenDpiX">
      <summary>
            Gets the logical horizontal resolution of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.ScreenDpiY">
      <summary>
            Gets the logical vertical resolution of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealScreenDpiX">
      <summary>
            Gets the real logical horizontal resolution of the screen,
            depending on font size (96, 120, 144 etc).
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealScreenDpiY">
      <summary>
            Gets the logical vertical resolution of the screen,
            depending on font size (96, 120, 144 etc).
            </summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsUtils.GdiDc">
      <summary>
            Represents a GDI device context.
            </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.#ctor(System.IntPtr,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.GraphicsUtils.GdiDc" /> class.
            </summary>
      <param name="dc">The GDI DC to use.</param>
      <param name="saveClipRegion">Indicates whether to save clip region.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.#ctor(System.Drawing.Graphics,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.GraphicsUtils.GdiDc" /> class.
            </summary>
      <param name="graphics">The graphics to use.</param>
      <param name="saveClipRegion">Indicates whether to save clip region.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Finalize">
      <summary>
            Destructs this instance.
            </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Dispose">
      <summary>
            Disposes this instance.
            </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.GetClipRegion">
      <summary>
            Returns the clipping region.
            </summary>
      <returns>Handle to the clipping region.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.IntPtr,System.Int32)">
      <summary>
            Sets the clipping region.
            </summary>
      <param name="region">The clipping region.</param>
      <param name="mode">The mode to use.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the clipping region.
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the clipping region.
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="mode">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets the clipping region.
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Drawing.RectangleF)">
      <summary>
            Sets the clipping region.
            </summary>
      <param name="rect">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Drawing.Rectangle)">
      <summary>
            Sets the clipping region.
            </summary>
      <param name="rect">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Drawing.Rectangle,System.Int32)">
      <summary>
            Sets the clipping region.
            </summary>
      <param name="rect">
      </param>
      <param name="mode">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawFrameRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>
            Draws frame rectangle.
            </summary>
      <param name="rect">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.FillRect(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>
            Fills a rectangle.
            </summary>
      <param name="rect">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawFocusRect(System.Drawing.Rectangle)">
      <summary>
            Draws a focus rectangle.
            </summary>
      <param name="rect">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,System.Drawing.Color,System.Int32)">
      <summary>
            Draws a text.
            </summary>
      <param name="s">
      </param>
      <param name="bounds">
      </param>
      <param name="font">
      </param>
      <param name="color">
      </param>
      <param name="formatFlags">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawDisabledText(System.String,System.Drawing.Rectangle,System.Drawing.Font,System.Int32)">
      <summary>
            Draws a disabled text.
            </summary>
      <param name="s">
      </param>
      <param name="bounds">
      </param>
      <param name="font">
      </param>
      <param name="formatFlags">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Draws a line.
            </summary>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Rectangle(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Draws a rectangle.
            </summary>
      <param name="bounds">
      </param>
      <param name="borderColor">
      </param>
      <param name="fillColor">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.FrameRect(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>
            Draws a frame rectangle.
            </summary>
      <param name="bounds">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
      <summary>
            Fills a rectangle.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="brush">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawCheck(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>
            Draws a checkmark.
            </summary>
      <param name="bounds">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Ellipse(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Draws an ellipse.
            </summary>
      <param name="bounds">
      </param>
      <param name="borderColor">
      </param>
      <param name="fillColor">
      </param>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.GdiDc.Dc">
      <summary>
            Gets the DC.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.GdiDc.DpiX">
      <summary>
            Gets horizontal DPI.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.GdiDc.DpiY">
      <summary>
            Gets vertical DPI.
            </summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign">
      <summary>
            Indicates text alignment.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign.Near">
      <summary>
            Near alignment.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign.Far">
      <summary>
            Far alignment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsHolder">
      <summary>
            Holds a Graphics object together with (printer) device or bitmap that was used
            to create it, if any. The point is to dispose the device or bitmap together
            with the graphics when it is no longer needed (i.e. to avoid resource leaks).
            </summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsHolder.Empty">
      <summary>
            An empty graphics holder instance.
            </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromDC(System.IntPtr)">
      <summary>
            Creates a graphics holder from a device context.
            When the holder is disposed, both graphics and the device context are released (DeleteDC is called on the device context).
            </summary>
      <param name="dc">The device context from which graphics is created.</param>
      <returns>The new instance of the graphics holder.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromGraphics(System.Drawing.Graphics)">
      <summary>
            Creates a graphics holder from a graphics instance.
            When the holder is disposed, the graphics is left alone (i.e. NOT disposed).
            </summary>
      <param name="g">The graphics to store in the new holder.</param>
      <returns>The new instance of the graphics holder.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromScreen">
      <summary>
            Creates a graphics holder from screen. If that fails (e.g. on Azure), the graphics is created from a bitmap.
            When the holder is disposed, both graphics and the bitmap are released.
            </summary>
      <returns>The new instance of the graphics holder.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromBitmap">
      <summary>
            Creates a graphics holder from a bitmap. The graphics and the bitmap are released when the holder is disposed.
            This should never fail.
            </summary>
      <returns>The new instance of the graphics holder.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.Dispose">
      <summary>
            Disposes the current graphics holder.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsHolder.Graphics">
      <summary>
            Gets the graphics object held by the current instance.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsHolder.DpiX">
      <summary>
            Gets the horizontal resolution of graphics held by the current instance.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsHolder.DpiY">
      <summary>
            Gets the vertical resolution of graphics held by the current instance.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IC1Printable">
      <summary>
            If an object implements this interface, it can be seamlessly rendered
            in a <see cref="T:C1.C1Preview.C1PrintDocument" /> via a <see cref="T:C1.C1Preview.RenderC1Printable" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetImage">
      <summary>
            Gets the content of control as Image.
            </summary>
      <returns>The Image object representing a control content.</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetTree">
      <summary>
            Gets the content of control as C1 document
            that is serialized in stream.
            This document can be built with using C1PrintDocumentClient.
            </summary>
      <returns>The stream object containing the document tree.</returns>
    </member>
    <member name="T:C1.C1Preview.PageDirectionEnum">
      <summary>
            Describes the direction in which the new page should be started.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Default">
      <summary>
            Type of page (vertical or horizontal)
            is determinated on the basis of the current stacking rules.
            Vertical page is added if Stacking is StackingRulesEnum.BlockTopToBottom.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Vertical">
      <summary>
            Vertical page direction - i.e. logically the next page is below the current one.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Horizontal">
      <summary>
            Horizontal page direction - i.e. logically the next page is to the right of the current one.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeBase">
      <summary>
            The base type for classes describing layout-releated
            changes that are applied to a <see cref="T:C1.C1Preview.C1PrintDocument" /> before or after a <see cref="T:C1.C1Preview.RenderObject" />
            if assigned to <see cref="P:C1.C1Preview.RenderObject.LayoutChangeBefore" /> or <see cref="P:C1.C1Preview.RenderObject.LayoutChangeAfter" />
            on that object.
            <para>
            Derived classes include
            <see cref="T:C1.C1Preview.LayoutChangeNewPage" />,
            <see cref="T:C1.C1Preview.LayoutChangeNewColumn" />,
            <see cref="T:C1.C1Preview.LayoutChangeNewLine" /> and
            <see cref="T:C1.C1Preview.LayoutChangeNoBreak" />.
            </para></summary>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeBase.AssignFrom(C1.C1Preview.LayoutChangeBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.LayoutChangeBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeBase.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.LayoutChangeBase" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.LayoutChangeBase" /> object.</returns>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewPage">
      <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1Preview.RenderObject" />.
            When an instance of this class is assigned to <see cref="P:C1.C1Preview.RenderObject.LayoutChangeBefore" />
            or <see cref="P:C1.C1Preview.RenderObject.LayoutChangeAfter" /> on that object,
            a page break is inserted before of after that object,
            and layout changes described by the instance are applied to the new page.
            </summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewColumn" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewLine" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNoBreak" />
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNewPage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LayoutChangeNewPage" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNewPage.#ctor(C1.C1Preview.PageLayout)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LayoutChangeNewPage" /> class.
            </summary>
      <param name="pageLayout">The <see cref="T:C1.C1Preview.PageLayout" /> to assign to the <see cref="P:C1.C1Preview.LayoutChangeNewPage.PageLayout" /> property of the current instance.</param>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNewPage.AssignFrom(C1.C1Preview.LayoutChangeBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.LayoutChangeBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNewPage.PageLayout">
      <summary>
            Gets or set the <see cref="T:C1.C1Preview.PageLayout" /> to apply to the new page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNewPage.Direction">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.PageDirectionEnum" /> of the new page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNewPage.Nested">
      <summary>
            Gets or sets a value indicating whether the currently active page layout
            should be saved in a stack before applying this <see cref="T:C1.C1Preview.LayoutChangeNewPage" />,
            to be restored after the associated <see cref="T:C1.C1Preview.RenderObject" /> has been fully rendered.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewColumn">
      <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1Preview.RenderObject" />.
            When an instance of this class is assigned to <see cref="P:C1.C1Preview.RenderObject.LayoutChangeBefore" />
            or <see cref="P:C1.C1Preview.RenderObject.LayoutChangeAfter" /> on that object,
            a column break is inserted before of after that object,
            and layout changes described by the instance are applied.
            </summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewPage" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewLine" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNoBreak" />
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewLine">
      <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1Preview.RenderObject" />.
            When an instance of this class is assigned to <see cref="P:C1.C1Preview.RenderObject.LayoutChangeBefore" />
            or <see cref="P:C1.C1Preview.RenderObject.LayoutChangeAfter" /> on that object,
            and the current <see cref="P:C1.C1Preview.RenderObject.Stacking" /> is <see cref="F:C1.C1Preview.StackingRulesEnum.InlineLeftToRight" />,
            a line break is inserted before of after that object,
            and layout changes described by the instance are applied.
            </summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewPage" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewColumn" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNoBreak" />
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNoBreak">
      <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1Preview.RenderObject" />.
            When an instance of this class is assigned to <see cref="P:C1.C1Preview.RenderObject.LayoutChangeBefore" />
            or <see cref="P:C1.C1Preview.RenderObject.LayoutChangeAfter" /> on that object,
            layout changes described by the instance are applied
            to the next new page (but no immediate page break is caused by this class).
            </summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewPage" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewColumn" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewLine" />
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNoBreak.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LayoutChangeNoBreak" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNoBreak.#ctor(C1.C1Preview.PageLayout)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LayoutChangeNoBreak" /> class.
            </summary>
      <param name="pageLayout">The <see cref="T:C1.C1Preview.PageLayout" /> to assign to the <see cref="P:C1.C1Preview.LayoutChangeNoBreak.PageLayout" /> property of the current instance.</param>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNoBreak.AssignFrom(C1.C1Preview.LayoutChangeBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.LayoutChangeBase" /> to the current object.
            </summary>
      <param name="source">
      </param>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNoBreak.PageLayout">
      <summary>
            Gets or set the <see cref="T:C1.C1Preview.PageLayout" /> to apply to the next page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LongOperationEventArgs">
      <summary>
            Describes arguments for the event fired periodically by a potentially
            long operation. Allows to provide feedback to the user and may also
            allow to cancel the operation.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor">
      <summary>
            Creates a new instance of LongOperationEventArgs with default
            properties (Complete=0, CanCancel=false).
            </summary>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double)">
      <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete value and CanCancel=false.
            </summary>
      <param name="complete">How much is complete (from 0 to 1).</param>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
      <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete and CanCancel values.
            </summary>
      <param name="complete">How much is complete (from 0 to 1).</param>
      <param name="canCancel">Whether the operation can be cancelled.</param>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Boolean)">
      <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified CanCancel value and Complete=0.
            </summary>
      <param name="canCancel">Whether the operation can be cancelled.</param>
    </member>
    <member name="P:C1.C1Preview.LongOperationEventArgs.Complete">
      <summary>
            Gets the approximate completed ratio, from 0 (0% complete) to 1 (100% complete).
            </summary>
    </member>
    <member name="P:C1.C1Preview.LongOperationEventArgs.CanCancel">
      <summary>
            Gets the value indicating whether the event handler can cancel the current long operation
            by setting the <see cref="P:C1.C1Preview.LongOperationEventArgs.Cancel" /> property to <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LongOperationEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the current long operation
            should be cancelled. (This property is ignored if <see cref="P:C1.C1Preview.LongOperationEventArgs.CanCancel" /> is <b>false</b>.)
            </summary>
    </member>
    <member name="T:C1.C1Preview.LongOperationEventHandler">
      <summary>
            Represents a method that can handle a long operation event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.LongOperationEventArgs" /> that contains event data.</param>
    </member>
    <member name="T:C1.C1Preview.SerializerBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SerializerBase.Deserialize(System.String,System.Object,System.Type,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            For internal use.
            </summary>
      <param name="fileName">
      </param>
      <param name="o">
      </param>
      <param name="type">
      </param>
      <param name="format">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.OutlineNode">
      <summary>
            Represents an outline node within a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OutlineNode" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OutlineNode" /> class.
            </summary>
      <param name="caption">The node caption.</param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String,C1.C1Preview.IDocumentLocation)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OutlineNode" /> class.
            </summary>
      <param name="caption">The node caption.</param>
      <param name="location">The location within a document associated with the current node.</param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String,C1.C1Preview.C1LinkTarget)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OutlineNode" /> class.
            </summary>
      <param name="caption">The node caption.</param>
      <param name="linkTarget">The <see cref="T:C1.C1Preview.C1LinkTarget" /> associated with this node.</param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String,C1.C1Preview.IDocumentLocation,System.Drawing.Icon)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OutlineNode" /> class.
            </summary>
      <param name="caption">The node caption.</param>
      <param name="location">The location within a document associated with the current node.</param>
      <param name="icon">The icon associated with the current node.</param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.OutlineNode" />.
            This method NOT copies Children property.
            </summary>
      <returns>The newly created object.</returns>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.LinkTarget">
      <summary>
            Determines the target of the current hyperlink.
            </summary>
      <remarks>
        <para>The hyperlink target is described by an instance of a class derived from <see cref="T:C1.C1Preview.C1LinkTarget" />,
            and can be of one of the following types:</para>
        <list type="bullet">
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetAnchor" />
            </term>
            <description>An anchor defined within the current document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" />
            </term>
            <description>A location within the current document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetExternalAnchor" />
            </term>
            <description>An anchor defined within a previously saved C1D document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetFile" />
            </term>
            <description>An external document, program or URL. The ShellExecute API is used to invoke the link.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetPage" />
            </term>
            <description>A page within the current document.</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetUser" />
            </term>
            <description>The hyperlink target is determined by a user event handler.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.OutlineNodeCollection" /> containing the current node.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Parent">
      <summary>
            Gets the <see cref="T:C1.C1Preview.OutlineNode" /> which is the parent of the current node.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Level">
      <summary>
            Gets the nesting level of the current node within the nodes' tree
            (top-level nodes have level 0).
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Location">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.IDocumentLocation" /> associated with the current node.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Caption">
      <summary>
            Gets or sets the UI string used to represent the current node.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Icon">
      <summary>
            Gets or sets the icon used to represent the current node.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.IconName">
      <summary>
            Gets or sets the name in the <see cref="P:C1.C1Preview.C1PrintDocument.Dictionary" /> of the icon used to represent the current node.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Children">
      <summary>
            Gets the collection of child nodes of the current node.
            Note that accessing this property initializes the collection if it has not been initialized yet.
            To test whether there are child nodes without this side effect, use the <see cref="P:C1.C1Preview.OutlineNode.HasChildren" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.HasChildren">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.OutlineNode.Children" /> collection of the current node
            has been initialized and contains at least one element.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.TopParent">
      <summary>
            Gets the <see cref="T:C1.C1Preview.OutlineNode" /> that is the root of the current node tree.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> containing the current node tree.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OutlineNodeCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.OutlineNode" /> elements.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.GetItemType">
      <summary>
            Gets the type of elements in this collection.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.OutlineNode" /> type.</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(C1.C1Preview.OutlineNode)">
      <summary>
            Adds a node to the current collection.
            </summary>
      <param name="node">The node to add.</param>
      <returns>The index of the newly added node in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String)">
      <summary>
            Adds a node with the specified caption and location to the current collection.
            </summary>
      <param name="caption">The caption of the node to add.</param>
      <returns>The index of the newly added node in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String,C1.C1Preview.IDocumentLocation)">
      <summary>
            Adds a node with the specified caption and location to the current collection.
            </summary>
      <param name="caption">The caption of the node to add.</param>
      <param name="location">The location associated with the node.</param>
      <returns>The index of the newly added node in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String,C1.C1Preview.C1LinkTarget)">
      <summary>
            Adds a node with the specified caption and link target to the current collection.
            </summary>
      <param name="caption">The caption of the node to add.</param>
      <param name="linkTarget">The <see cref="T:C1.C1Preview.C1LinkTarget" /> associated with the node.</param>
      <returns>The index of the newly added node in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String,C1.C1Preview.IDocumentLocation,System.Drawing.Icon)">
      <summary>
            Adds a node with the specified caption, location and icon to the current collection.
            </summary>
      <param name="caption">The caption of the node to add.</param>
      <param name="location">The location associated with the node.</param>
      <param name="icon">The icon associated with the node.</param>
      <returns>The index of the newly added node in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Remove(C1.C1Preview.OutlineNode)">
      <summary>
            Removes a node from the current collection.
            </summary>
      <param name="node">The node to remove.</param>
    </member>
    <member name="P:C1.C1Preview.OutlineNodeCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.PageColumnDef">
      <summary>
            Represents the properties of a page column.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageColumnDef" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageColumnDef" /> class.
            </summary>
      <param name="width">A string that is converted to a <see cref="T:C1.C1Preview.Unit" /> value representing the <see cref="P:C1.C1Preview.PageColumnDef.Width" /> of the current column.</param>
      <param name="spacing">A string that is converted to a <see cref="T:C1.C1Preview.Unit" /> value representing the <see cref="P:C1.C1Preview.PageColumnDef.Spacing" /> of the current column.</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageColumnDef" /> class.
            </summary>
      <param name="width">A <see cref="T:C1.C1Preview.Unit" /> value representing the <see cref="P:C1.C1Preview.PageColumnDef.Width" /> of the current column.</param>
      <param name="spacing">A a <see cref="T:C1.C1Preview.Unit" /> value representing the <see cref="P:C1.C1Preview.PageColumnDef.Spacing" /> of the current column.</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.ShouldSerializeWidth">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.PageColumnDef.Width" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.PageColumnDef.Width" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.ShouldSerializeSpacing">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.PageColumnDef.Spacing" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.PageColumnDef.Spacing" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.PageColumnDef" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.PageColumnDef" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.AssignFrom(C1.C1Preview.PageColumnDef)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.PageColumnDef" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.Compare(C1.C1Preview.PageColumnDef)">
      <summary>
            Compares the properties on the current object to another <see cref="T:C1.C1Preview.PageColumnDef" />.
            </summary>
      <param name="other">The <see cref="T:C1.C1Preview.PageColumnDef" /> to compare the current object with.</param>
      <returns>
        <b>true</b> if the properties of the two objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.PageColumnDef.Width">
      <summary>
            Gets or sets the width of the current column.
            <para>The default column width is <b>"auto"</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.PageColumnDef.Spacing">
      <summary>
            Gets or sets the spacing between the current and next columns.
            <para>The default column spacing is <b>5mm</b>.</para></summary>
    </member>
    <member name="T:C1.C1Preview.PageColumnDef.TypeConverter2">
      <summary>
            Represents a type converter for <see cref="T:C1.C1Preview.PageColumnDef" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.TypeConverter2.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Tests whether the current converter can convert this object to the specified type.
            </summary>
      <param name="context">The converter context.</param>
      <param name="type">The target type.</param>
      <returns>
        <b>true</b> if the object can be converted, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.TypeConverter2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the object to the specified type.
            </summary>
      <param name="context">The converter context.</param>
      <param name="culture">The culture.</param>
      <param name="value">The value to convert.</param>
      <param name="type">The target type.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="T:C1.C1Preview.PageColumnDefCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.PageColumnDef" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Add(C1.C1Preview.PageColumnDef)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.PageColumnDef" /> to the current collection.
            </summary>
      <param name="pageColumnDef">The <see cref="T:C1.C1Preview.PageColumnDef" /> to add.</param>
      <returns>The index of the added <see cref="T:C1.C1Preview.PageColumnDef" /> in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Add(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Adds a new <see cref="T:C1.C1Preview.PageColumnDef" /> initialized with the specified width and spacing to the current collection.
            </summary>
      <param name="columnWidth">The <see cref="P:C1.C1Preview.PageColumnDef.Width" /> of the new column definition.</param>
      <param name="columnSpacing">The <see cref="P:C1.C1Preview.PageColumnDef.Spacing" /> of the new column definition.</param>
      <returns>The index of the added <see cref="T:C1.C1Preview.PageColumnDef" /> in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Add">
      <summary>
            Adds a new <see cref="T:C1.C1Preview.PageColumnDef" /> initialized with the
            default <see cref="P:C1.C1Preview.PageColumnDef.Width" /> and <see cref="P:C1.C1Preview.PageColumnDef.Spacing" /> to the current collection.
            </summary>
      <returns>The index of the added <see cref="T:C1.C1Preview.PageColumnDef" /> in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Insert(System.Int32,C1.C1Preview.PageColumnDef)">
      <summary>
            Inserts a <see cref="T:C1.C1Preview.PageColumnDef" /> into the current collection.
            </summary>
      <param name="index">The index at which to insert the specified <see cref="T:C1.C1Preview.PageColumnDef" />.</param>
      <param name="pageColumnDef">The column definition to insert.</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Remove(C1.C1Preview.PageColumnDef)">
      <summary>
            Removes a <see cref="T:C1.C1Preview.PageColumnDef" /> from the current collection.
            </summary>
      <param name="pageColumnDef">The column definition to remove.</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.IndexOf(C1.C1Preview.PageColumnDef)">
      <summary>
            Returns the index of the specified <see cref="T:C1.C1Preview.PageColumnDef" /> in the current collection.
            </summary>
      <param name="pageColumnDef">The <see cref="T:C1.C1Preview.PageColumnDef" /> to search for.</param>
      <returns>The index of the specified column definition in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Compare(C1.C1Preview.PageColumnDefCollection)">
      <summary>
            Compares the current collection to another.
            Uses the <see cref="M:C1.C1Preview.PageColumnDef.Compare(C1.C1Preview.PageColumnDef)" /> to compare elements
            elements at the corresponding positions by their properties' values.
            </summary>
      <param name="other">The <see cref="T:C1.C1Preview.PageColumnDefCollection" /> to compare the current with.</param>
      <returns>
        <b>true</b> if the two collections have the same elements at the same positions, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.PageColumnDefCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.PageLayoutKindEnum">
      <summary>
            Identifies the set of pages to which a page layout is applied in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.None">
      <summary>
            The current page layout is not a member of any document's PageLayouts collection.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.Default">
      <summary>
            The current page layout is the default for a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.FirstPage">
      <summary>
            The current page layout is to be used for the first page of a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.LastPage">
      <summary>
            The current page layout is to be used for the last page of a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.EvenPages">
      <summary>
            The current page layout is to be used for even pages of a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.OddPages">
      <summary>
            The current page layout is to be used for odd pages of a document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageLayout">
      <summary>
            Represents the page layout of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageLayout" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageLayout.#ctor(C1.C1Preview.C1PageSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageLayout" /> class.
            </summary>
      <param name="pageSettings">The page settings to use.</param>
    </member>
    <member name="M:C1.C1Preview.PageLayout.#ctor(C1.C1Preview.C1PageSettings,C1.C1Preview.PageColumnDef[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageLayout" /> class.
            </summary>
      <param name="pageSettings">The page settings to use for the current page layout.</param>
      <param name="columns">The column defitions to use for the current page layout.</param>
    </member>
    <member name="M:C1.C1Preview.PageLayout.ShouldSerializeColumns">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.PageLayout.Columns" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.PageLayout.Columns" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PageLayout.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.PageLayout" /> object.
            All nested objects (render objects, page settings etc.) are cloned on the new object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.PageLayout" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.PageLayout.AssignFrom(C1.C1Preview.PageLayout)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.PageLayout" /> to the current object.
            All nested objects (render objects, page settings etc.) are cloned.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.PageLayout.Clear">
      <summary>
            Clears the current <see cref="T:C1.C1Preview.PageLayout" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Kind">
      <summary>
            Gets the <see cref="T:C1.C1Preview.PageLayoutKindEnum" /> associated with the current <see cref="T:C1.C1Preview.PageLayout" />
            in the document.
            If <see cref="P:C1.C1Preview.PageLayout.Document" /> is <b>null</b>, <see cref="F:C1.C1Preview.PageLayoutKindEnum.None" /> is returned.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageSettings">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.C1PageSettings" /> object associated with the current page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageHeader">
      <summary>
            Gets or sets the page header associated with the current page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageFooter">
      <summary>
            Gets or sets the page footer associated with the current page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Watermark">
      <summary>
            Gets or sets the watermark associated with the current page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Overlay">
      <summary>
            Gets or sets the overlay associated with the current page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.HasColumns">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.C1Preview.PageLayout.Columns" /> collection
            on the current page layout has been initialized and is not empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Columns">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.PageColumnDef" /> objects associated with the current page layout.
            Note that accessing this property initializes the collection of column definitions
            if it has not been initialized yet.
            Use <see cref="P:C1.C1Preview.PageLayout.HasColumns" /> to test whether any columns have been defined on this layout.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentPageLayouts">
      <summary>
            Represents the standard page layouts used in a <see cref="T:C1.C1Preview.C1PrintDocument" />
            (such as the default page layout, page layout used for first and last pages,
            and so on).
            </summary>
    </member>
    <member name="M:C1.C1Preview.DocumentPageLayouts.#ctor(C1.C1Preview.C1PrintDocument)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DocumentPageLayouts" /> class.
            </summary>
      <param name="owner">The <see cref="T:C1.C1Preview.C1PrintDocument" /> that is the owner of the current instance.</param>
    </member>
    <member name="M:C1.C1Preview.DocumentPageLayouts.Clear">
      <summary>
            Clears the current <see cref="T:C1.C1Preview.DocumentPageLayouts" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object that owns the current <see cref="T:C1.C1Preview.DocumentPageLayouts" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Item(C1.C1Preview.PageLayoutKindEnum)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.PageLayout" /> of the specified <see cref="T:C1.C1Preview.PageLayoutKindEnum" />.
            Returns <b>null</b> if the specified kind of page layout has not been specified
            for the current <see cref="T:C1.C1Preview.DocumentPageLayouts" />.
            </summary>
      <param name="kind">The kind of page layout to return.</param>
      <returns>The page layout with specified kind, or <b>null</b> if it does not exist.</returns>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.FirstPage">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.PageLayout" /> used for the first page of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.LastPage">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.PageLayout" /> used for the last page of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.EvenPages">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.PageLayout" /> used for even pages of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.OddPages">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.PageLayout" /> used for odd pages of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Default">
      <summary>
            Gets or sets the default <see cref="T:C1.C1Preview.PageLayout" /> for the current document.
            The effective page layout for each page is determined by merging this layout
            with all other applicable layouts.
            The effective layout can be accessed via the <see cref="P:C1.C1Preview.C1PrintDocument.CurrentPageLayout" /> property
            on the <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnFirstPage">
      <summary>
            Gets or sets a value indicating whether the page header should
            print on the first page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnFirstPage">
      <summary>
            Gets or sets a value indicating whether the page footer should
            print on the first page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnLastPage">
      <summary>
            Gets or sets a value indicating whether the page header should
            print on the last page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnLastPage">
      <summary>
            Gets or sets a value indicating whether the page footer should
            print on the last page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.SuppressEmptyLastPage">
      <summary>
            Gets or sets a value indicating whether to suppress adding an empty page
            at the end of the document if the last object contains a page break after itself.
            The default value is <b>false</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PrinterUtil">
      <summary>
        <para>For internal use only.</para>
            A static class providing printer-related utilities.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.CreatePrinterIC(System.String)">
      <summary>
            Creates the information context for specified printer.
            That context can be used for measurement operations, but must <b>NOT</b> be used for drawing.
            </summary>
      <param name="printerName">The printer name.</param>
      <returns>The context handle, or <b>IntPtr.Zero</b> if an error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.GetPrinterDpi(System.String)">
      <summary>
            Gets the resolution of the specified printer.
            </summary>
      <param name="printerName">The printer name.</param>
      <returns>A <see cref="T:System.Drawing.PointF" /> structure where
            <see cref="P:System.Drawing.PointF.X" /> represents the horizontal, and <see cref="P:System.Drawing.PointF.Y" /> vertical DPI.
            <see cref="F:System.Drawing.PointF.Empty" /> is returned if an error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.GetDcDpi(System.IntPtr)">
      <summary>
            Gets the resolution for the specified device context.
            </summary>
      <param name="dc">The device context to test.</param>
      <returns>A <see cref="T:System.Drawing.PointF" /> structure where
            <see cref="P:System.Drawing.PointF.X" /> represents the horizontal, and <see cref="P:System.Drawing.PointF.Y" /> vertical DPI.
            <see cref="F:System.Drawing.PointF.Empty" /> is returned if an error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.IsPrinterValid(System.String)">
      <summary>
            Tests whether the specified printer name is valid.
            </summary>
      <param name="printerName">The printer name.</param>
      <returns>
        <b>true</b> if the specified printer name is valid, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindPrinterDc(System.Single,System.IntPtr@,System.String@)">
      <summary>
            Searches for a printer with specified resulution.
            </summary>
      <param name="dpi">The required resolution.</param>
      <param name="printerDc">OUT: DC of found printer or IntPtr.Zero.</param>
      <param name="printerName">OUT: name of printer or null if not found.</param>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@,System.IntPtr@,System.String@)">
      <summary>
            Searches for a printer with the specified minimal resolution,
            and the same horizontal and vertical resolutions.
            </summary>
      <param name="minDpi">The minimum acceptable DPI.
            If this parameter is <b>0</b>, the first available printer with the same horizontal and vertical resolutions is returned.</param>
      <param name="printerDpi">OUT: dpi of found printer or <b>0</b> if printer was not found.</param>
      <param name="printerDc">OUT: DC of found printer or <b>IntPtr.Zero</b> if printer was not found.</param>
      <param name="printerName">OUT: name of found printer or <b>null</b> if printer was not found.</param>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@)">
      <summary>
            Searches for a printer with the specified minimal resolution,
            and the same horizontal and vertical resolutions.
            </summary>
      <param name="minDpi">The minimum acceptable DPI.
            If this parameter is <b>0</b>, the first available printer with the same horizontal and vertical resolutions is returned.</param>
      <param name="printerDpi">OUT: The resolution of the found printer, or <b>0</b> if a printer was not found.</param>
      <returns>The name of the found printer, or <b>null</b> if a printer was not found.</returns>
      <seealso cref="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single)" />
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single)">
      <summary>
            Searches for a printer with the specified minimal resolution,
            and the same horizontal and vertical resolutions.
            </summary>
      <param name="minDpi">The minimum acceptable DPI.
            If this parameter is <b>0</b>, the first available printer with the same horizontal and vertical resolutions is returned.</param>
      <returns>The name of the found printer, or <b>null</b> if a printer was not found.</returns>
      <seealso cref="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@)" />
    </member>
    <member name="T:C1.C1Preview.PropsHashtable`1">
      <summary>
        <para>For internal use only.</para>
            Represents a hashtable of properties and their values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.Clear">
      <summary>
            Clears the current instance.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.GetPropIndex(System.Int32)">
      <summary>
            Gets the index of a property in the <see cref="P:C1.C1Preview.PropsHashtable`1.Keys" /> and <see cref="P:C1.C1Preview.PropsHashtable`1.Values" /> arrays.
            </summary>
      <param name="propKey">The property key.</param>
      <returns>The 0-based index of the specified property in the <see cref="P:C1.C1Preview.PropsHashtable`1.Keys" /> and <see cref="P:C1.C1Preview.PropsHashtable`1.Values" /> arrays.</returns>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.SetPropValue(System.Int32,`0)">
      <summary>
            Sets the value of a property.
            </summary>
      <param name="propKey">The property key.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.DeletePropValue(System.Int32)">
      <summary>
            Deletes a property value from the current <see cref="T:C1.C1Preview.PropsHashtable`1" />.
            </summary>
      <param name="propKey">The property key to remove.</param>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.IsEmpty">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Preview.PropsHashtable`1" /> is empty.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.IsPropExists(System.Int32)">
      <summary>
            Tests whether a property is set in the current <see cref="T:C1.C1Preview.PropsHashtable`1" />.
            </summary>
      <param name="propKey">The property key.</param>
      <returns>
        <b>true</b> if the specified property has been set on the current <see cref="T:C1.C1Preview.PropsHashtable`1" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.PropsHashtable`1.Count">
      <summary>
            Gets the number of properties set on the current <see cref="T:C1.C1Preview.PropsHashtable`1" />.
            This value is equal to the number of elements in the <see cref="P:C1.C1Preview.PropsHashtable`1.Keys" /> and <see cref="P:C1.C1Preview.PropsHashtable`1.Values" /> collections.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PropsHashtable`1.Keys">
      <summary>
            Gets the array of property keys set in the current <see cref="T:C1.C1Preview.PropsHashtable`1" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PropsHashtable`1.Values">
      <summary>
            Gets the array of property values set on the current <see cref="T:C1.C1Preview.PropsHashtable`1" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderArea">
      <summary>
            Represents a general-purpose container for other <see cref="T:C1.C1Preview.RenderObject" /> objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderObject">
      <summary>
            The abstract base class for all render objects representing content of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IResolvedInfoOwner">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IResolvedInfoOwner.Document">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ISplitBehaviorObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ISplitBehaviorObject.GetPageBounds(C1.C1Preview.RenderFragment)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ISplitBehaviorObject.RenderObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderObject" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeClip">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.Clip" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeFlags">
      <summary>
            Tests whether the Flags property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeName">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeX">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.X" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeY">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.Y" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeWidth">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.Width" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeHeight">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.Height" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeSplitVertBehavior">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.SplitVertBehavior" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeSplitHorzBehavior">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeStyle">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.Style" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeChildren">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderObject.Children" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.CreateSame">
      <summary>
            Creates instance of object same type as current <see cref="T:C1.C1Preview.RenderObject" /> object.
            </summary>
      <returns>Created render object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InitRenderObject">
      <summary>
            Performs some initializations.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultClip">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.Clip" /> property.
            </summary>
      <returns>True.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultWidth">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.Width" /> property.
            </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Auto" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultHeight">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.Height" /> property.
            </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Auto" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultFlags">
      <summary>
            Gets the default value for the Flags property.
            </summary>
      <returns>0.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultSplitVertBehavior">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.SplitVertBehavior" /> property.
            </summary>
      <returns>SplitBehaviorEnum.Never</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultSplitHorzBehavior">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior" /> property.
            </summary>
      <returns>SplitBehaviorEnum.Never</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetFlag(System.Int32)">
      <summary>
            Returns the value of flag. The object has private field:
            <code>
            private int _flags;
            </code>
            This field can be used for storing various boolean properties 
            (CanSplitHorz, CanSplitVert etc), for example CanSplitHorz property defined as:
            <code>
            public bool CanSplitHorz
            {
                get { return GetFlag(c_flgCanSplitVert); }
                set { SetFlag(c_flgCanSplitVert, value); }
            }
            </code></summary>
      <param name="flagMask">Mask of flag.</param>
      <returns>Returns true if specified flag is set.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetFlag(System.Int32,System.Boolean)">
      <summary>
            Sets value of flag.
            <seealso cref="M:C1.C1Preview.RenderObject.GetFlag(System.Int32)" /></summary>
      <param name="flagMask">Mask of flag.</param>
      <param name="value">Value of flag.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnChildAdd(C1.C1Preview.RenderObject)">
      <summary>
            Called after adding new child RenderObject object to the Children collection.
            User can throw exception if this object can't be added as the child for this object.
            </summary>
      <param name="child">Child RenderObject object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnChildRemove(C1.C1Preview.RenderObject)">
      <summary>
            Called after removing child RenderObject object from the Children collection.
            User can throw exception if this object can't be removed.
            </summary>
      <param name="child">Child RenderObject object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnParentAdd(C1.C1Preview.RenderObject)">
      <summary>
            Called after adding this object to the Children collection
            of another object.
            User can throw exception if this object can't be added as the child for this object.
            </summary>
      <param name="parent">The new parent object for this object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnParentRemove(C1.C1Preview.RenderObject)">
      <summary>
            Called after removing this object from the Children collection
            of another object.
            </summary>
      <param name="parent">The parent object of this object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetWidth">
      <summary>
            Override this method to perform additional actions when value of the Width property of object is being read.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetWidth(C1.C1Preview.Unit)">
      <summary>
            Override this method to perform additional actions when value of the Width property of object is being defined.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetHeight">
      <summary>
            Override this method to perform additional actions when value of the Height property of object is being read.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetHeight(C1.C1Preview.Unit)">
      <summary>
            Override this method to perform additional actions when value of the Height property of object is being defined.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetSplitVertBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>
            Override this method to perform additional actions when value of the SplitVertBehavior property of object is being defined.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetSplitHorzBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>
            Override this method to perform additional actions when value of the SplitHorzBehavior property of object is being defined.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetAmbientPropValueForChild(C1.C1Preview.RenderObject,System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Gets the value of a child's ambient style property.
            </summary>
      <param name="roChild">The child <see cref="T:C1.C1Preview.RenderObject" />.</param>
      <param name="propKey">The style property key.</param>
      <param name="context">
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" /> to use for evaluation of calculated properties.</param>
      <returns>The style property value.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetNonAmbientPropValueForChild(C1.C1Preview.RenderObject,System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Gets the value of a child's non-ambient style property.
            </summary>
      <param name="roChild">The child <see cref="T:C1.C1Preview.RenderObject" />.</param>
      <param name="propKey">The style property key.</param>
      <param name="context">
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" /> to use for evaluation of calculated properties.</param>
      <returns>The style property value.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetAssignChildren">
      <summary>
            Override this method and return false if you want manually copy of children
            objects for this object. This method returns true by default.
            </summary>
      <returns>Boolean value indicating that the children objects must be copied in the AssignFrom method.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            The list of fragments (the <see cref="P:C1.C1Preview.RenderObject.Fragments" /> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1Preview.RenderObject.UserData" />, <see cref="P:C1.C1Preview.RenderObject.PageNumberingChange" /> are copied by reference.
            The <see cref="P:C1.C1Preview.RenderObject.Name" /> property is not copied.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            The list of fragments (the <see cref="P:C1.C1Preview.RenderObject.Fragments" /> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1Preview.RenderObject.UserData" />, <see cref="P:C1.C1Preview.RenderObject.PageNumberingChange" /> are copied by reference.
            The <see cref="P:C1.C1Preview.RenderObject.Name" /> property is not copied.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            The list of fragments (the <see cref="P:C1.C1Preview.RenderObject.Fragments" /> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1Preview.RenderObject.UserData" />, <see cref="P:C1.C1Preview.RenderObject.PageNumberingChange" /> are copied by reference.
            The <see cref="P:C1.C1Preview.RenderObject.Name" /> property is not copied.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            The list of fragments (the <see cref="P:C1.C1Preview.RenderObject.Fragments" /> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1Preview.RenderObject.UserData" />, <see cref="P:C1.C1Preview.RenderObject.PageNumberingChange" /> are copied by reference.
            The <see cref="P:C1.C1Preview.RenderObject.Name" /> property is not copied.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean)">
      <summary>
            Clones the current <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
      <param name="assignDataBinding">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property should be cloned.</param>
      <param name="assignChildren">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Children" /> property should be cloned.</param>
      <returns>The newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Clones the current <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
      <param name="assignDataBinding">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property should be cloned.</param>
      <param name="assignChildren">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Children" /> property should be cloned.</param>
      <param name="assignAnchors">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> property should be cloned.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be cloned.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be cloned.</param>
      <param name="assignStyle">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Style" /> property should be cloned.</param>
      <returns>The newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Clones the current <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
      <param name="assignDataBinding">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property should be cloned.</param>
      <param name="assignChildren">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Children" /> property should be cloned.</param>
      <param name="assignAnchors">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> property should be cloned.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be cloned.</param>
      <returns>The newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone">
      <summary>
            Clones the current <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
      <returns>The newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetOwnedObjectCount">
      <summary>
            Calculates the number of objects which are owned by the current object.
            </summary>
      <remarks>
        <para>This method takes into account:</para>
        <list type="bullet">
          <item>
            <description>Child objects and their children;</description>
          </item>
          <item>
            <description>Objects which are specified in page layouts (such as PageHeader, PageFooter etc.).</description>
          </item>
        </list>
      </remarks>
      <returns>The number of owned objects.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetNestedObjectCount">
      <summary>
            Calculates the count of objects which are nested within this object.
            This method takes into account child objects and their children.
            </summary>
      <returns>Returns the count of nested objects.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDocumentLocationDescription">
      <summary>
            Returns a human-readable textual description of the location of the current object in the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetApproximateCountOfFragmentsToProcess">
      <summary>
            Returns the approximate count of fragments in the current object
            (used to show progress during document generation).
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalClearTemporaryInfo">
      <summary>
            Clears temporary information created during document resolving.
            Override this method to clear render object type-specific data
            (but call the base method to clear common data).
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnMainFragmentBuilt">
      <summary>
            This method is called once for each object,
            override it to perform custom initialization.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResetLayoutDimensions(C1.C1Preview.RefDim)">
      <summary>
            For internal use only.
            </summary>
      <param name="dimensions">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResolvingFinished">
      <summary>
            This method is called once after the current <see cref="T:C1.C1Preview.RenderObject" /> has been fully resolved.
            At the time of the call all <see cref="T:C1.C1Preview.RenderFragment" /> objects a built and placed on their pages.
            Override it to perform custom processing at that time.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResolveCalculatedValues">
      <summary>
            Resolves the values of calculated fields of object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResolveStyles">
      <summary>
            Resolves the calculated values of object's style.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalClearCalculatedValues(System.Boolean)">
      <summary>
            Clears the values of calculated properties, called when a document is regenerated.
            </summary>
      <param name="clearDataBindingDependent">Indicates that values depending on data fields should also be cleared.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetCalculatedValue(System.Int32,System.Object@)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetCalculatedValue(System.Int32)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetCalculatedValue(System.Int32,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetCalculatedValue(System.Int32,System.Object,System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <param name="value">
      </param>
      <param name="dataDependent">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.HasCalculatedValue(System.Int32)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.CreateDataBindingCopy(C1.C1Preview.OutlineNode)">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ResolveChildrenDataBinding(C1.C1Preview.RenderObject,C1.C1Preview.OutlineNode)">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetProcessChildrenWhenDataBindingResolved">
      <summary>
            Indicates whether to automatically process data binding on child objects.
            The default implementation returns <b>true</b>,
            override it and return <b>false</b> if custom child data binding processing
            is required.
            </summary>
      <returns>
        <b>true</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDataBindingForChild(C1.C1Preview.RenderObject)">
      <summary>
            Returns the <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> object for a specified child object.
            </summary>
      <param name="child">The <see cref="T:C1.C1Preview.RenderObject" /> object that is a child of the current object.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> object for the specified child object,
            or <b>null</b> if data binding is not specified for that child.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ResolveStyleProperties(C1.C1Preview.Style,C1.C1Preview.Style)">
      <summary>
            For internal use only.
            Resolves calculated properties of the <see cref="P:C1.C1Preview.RenderObject.Style" /> object.
            </summary>
      <param name="styleWithExprs">
        <see cref="P:C1.C1Preview.RenderObject.Style" /> object properties of that should be resolved.</param>
      <param name="destStyle">
        <see cref="P:C1.C1Preview.RenderObject.Style" /> object for calculated properties.
            <paramref name="styleWithExprs" /> and <paramref name="destStyle" /> can be the same.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.IndexOfFragment(C1.C1Preview.RenderFragment)">
      <summary>
            Returns the index of the specified <see cref="T:C1.C1Preview.RenderFragment" /> of the current object
            in the <see cref="P:C1.C1Preview.RenderObject.Fragments" /> collection.
            </summary>
      <param name="rf">The <see cref="T:C1.C1Preview.RenderFragment" /> to return the index of.</param>
      <returns>The 0-based index of the specified fragment in <see cref="P:C1.C1Preview.RenderObject.Fragments" />,
            or <b>-1</b> if there are no fragments or the fragment was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.CalcSize(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Calculates the size of the current object.
            When this method is called, the object must already have been added to the document
            (e.g. to <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> or to
            <see cref="P:C1.C1Preview.RenderObject.Children" /> of another object in the document).
            See <b>remarks</b> for more details.
            </summary>
      <param name="width">The width of the current object.
            This parameter may be specified as <see cref="P:C1.C1Preview.Unit.Auto" /> or as an absolute value (but it must not reference other objects).</param>
      <param name="height">The height of the current object.
            This parameter may be specified as <see cref="P:C1.C1Preview.Unit.Auto" /> or as an absolute value (but it must not reference other objects).</param>
      <returns>The size of the current object, in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.</returns>
      <remarks>
            If the current object has not been added to the document, an exception is thrown.
            (This is because to calculate the size of an object, its style is needed, and
            due to style inheritance, the effective style of an object depends on the placement
            of that object within the document.)
            The object may be removed from the document after calling this method if desired.
            <example>
            The following C# code may be used to test whether a <see cref="T:C1.C1Preview.RenderText" /> will fit
            on the current page if inserted at the current block flow position
            (see <see cref="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowHeight" />):
            <code>
            C1PrintDocument doc = new C1PrintDocument();
            doc.StartDoc();
            RenderText rt = new RenderText("The text to measure.);
            // add the object temporarily to calculate its size:
            doc.Body.Children.Add(rt);
            // measure the object, specifying page width and auto heigh
            // (i.e. effectively, measure the text height):
            C1PageSettings ps = doc.PageLayout.PageSettings;
            double pageWidth = ps.Width.Value - ps.LeftMargin.Value - ps.RightMargin.Value;
            SizeD sz = rt.CalcSize(new Unit(pageWidth, ps.Width.Units), Unit.Auto);
            // remove the object added temporarily:
            doc.Body.Children.Remove(rt);
            // test whether the object would fit on the page:
            if (doc.AvailableBlockFlowHeight &gt;= sz.Height)
            {
                // object would fit, do something:
                doc.RenderBlockText("YES");
            }
            doc.EndDoc();
            </code></example></remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.m_Flags">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.FireProgressEvent">
      <summary>
            TBD:
            Gets or sets a value indicating whether progress events should be generated
            during resolving of this render object.
            This property is <b>false</b> by default, you can set this property to <b>true</b>
            if object is large and its resolving take a long of time, to suppress hangup time
            during document rendering.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BordersSplitVertMode">
      <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too high and is split between pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BordersSplitHorzMode">
      <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too wide and is split between horizontal pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Table">
      <summary>
            Gets the most nested <see cref="T:C1.C1Preview.RenderTable" /> containing the current render object,
            or <b>null</b> if the current object is not contained in a table.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.TableRow" />
      <seealso cref="P:C1.C1Preview.RenderObject.TableCol" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.TableRow">
      <summary>
            Gets the 0-based index of the row in the most nested <see cref="T:C1.C1Preview.RenderTable" />
            containing the current render object, or <b>-1</b> if the current object
            is not contained in a table.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Table" />
      <seealso cref="P:C1.C1Preview.RenderObject.TableCol" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.TableCol">
      <summary>
            Gets the 0-based index of the column in the most nested <see cref="T:C1.C1Preview.RenderTable" />
            containing the current render object, or <b>-1</b> if the current object
            is not contained in a table.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Table" />
      <seealso cref="P:C1.C1Preview.RenderObject.TableRow" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.Clip">
      <summary>
            Gets or sets the value indicating whether the object should be clipped.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing the current <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Collection">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderObjectCollection" /> containing the current object,
            or null if the current object has no <see cref="P:C1.C1Preview.IOwnedCollectionItem.Owner" /> or the owner is not a <see cref="T:C1.C1Preview.RenderObjectCollection" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.IndexInOwner">
      <summary>
            Gets the index of the current object within the <see cref="P:C1.C1Preview.IOwnedCollectionItem.Owner" />, or -1 if there is no owner.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Parent">
      <summary>
            Gets the parent <see cref="T:C1.C1Preview.RenderObject" /> containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Name">
      <summary>
            Gets or sets the name of the current object.
            The name can be an empty string. If it is not empty, the name must be unique
            among the current object's siblings (i.e. objects with the same <see cref="P:C1.C1Preview.IOwnedCollectionItem.Owner" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.UserData">
      <summary>
            Gets or sets arbitrary data associated with the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasChildren">
      <summary>
            Gets a value indicating whether the current object has children
            (i.e. its <see cref="P:C1.C1Preview.RenderObject.Children" /> collection contains at least one element).
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Children">
      <summary>
            Gets the collection of child render objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Stacking">
      <summary>
            Gets or sets the stacking rules used to arrange the children of the current object.
            </summary>
      <remarks>
            For block flow, the alignment of child objects within the flow is determined by the
            value of <see cref="P:C1.C1Preview.Style.FlowAlignChildren" /> property on the current object,
            and the values of <see cref="P:C1.C1Preview.Style.FlowAlign" /> properties on the children.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.SplitVertBehavior">
      <summary>
            Gets or sets the value determining how the object is treated
            when it is too high to fit in the vertical space available on the current page.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.SplitHorzBehavior">
      <summary>
            Gets or sets the value determining how the object is treated
            when it is too wide to fit in the horizontal space available on the current page.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.SplitVertBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.CanSplitHorz">
      <summary>
            Indicates whether the object can be split horizontally if it falls on a page break.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.CanSplitVert">
      <summary>
            Indicates whether the object can be split vertically if it falls on a page break.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.ZOrder">
      <summary>
            Gets or sets the Z-order of the current object.
            Objects with smaller Z-order values are drawn under objects with larger Z-order values.
            By default, this property is zero.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.X">
      <summary>
            Gets or sets the X coordinate of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1Preview.Unit.Auto" />),
            an absolute value (using <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "prev.right+2mm").
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Y">
      <summary>
            Gets or sets the Y coordinate of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1Preview.Unit.Auto" />),
            an absolute value (using <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "prev.height/2-self.height/2").
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Width">
      <summary>
            Gets or sets the width of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1Preview.Unit.Auto" />),
            a percentage of the parent's width (e.g. "50%"),
            an absolute value (using <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "Max(prev.width,6cm)").
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Height">
      <summary>
            Gets or sets the height of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1Preview.Unit.Auto" />),
            a percentage of the parent's height (e.g. "50%"),
            an absolute value (using <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "150%prev.height+1in").
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BreakBefore">
      <summary>
            Gets or sets the type of break (none, line, column, or page) to insert before the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BreakAfter">
      <summary>
            Gets or sets the type of break (none, line, column, or page) to insert after the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LayoutChangeBefore">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.LayoutChangeBase" /> object
            defining the change of page layout that will occur before the current object.
            </summary>
      <remarks>
        <see cref="T:C1.C1Preview.LayoutChangeBase" /> is an abstract class.
            Instances of the following non-abstract classes derived from it can be assigned to this property:
            <list type="bullet"><item><term><see cref="T:C1.C1Preview.LayoutChangeNoBreak" /></term><description>Does not insert a break. Provides the ability to change page layout for the next page without interrupting the current flow.</description></item><item><term><see cref="T:C1.C1Preview.LayoutChangeNewLine" /></term><description>Inserts a line break in the inline flow. Does not break the block flow.</description></item><item><term><see cref="T:C1.C1Preview.LayoutChangeNewColumn" /></term><description>Starts a new column in a multi-column layout, or a new page otherwise.</description></item><item><term><see cref="T:C1.C1Preview.LayoutChangeNewPage" /></term><description>Starts a new page.</description></item></list></remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LayoutChangeAfter">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.LayoutChangeBase" /> object
            defining the change of page layout that will occur after the current object.
            </summary>
      <remarks>
        <see cref="T:C1.C1Preview.LayoutChangeBase" /> is an abstract class.
            Instances of the following non-abstract classes derived from it can be assigned to this property:
            <list type="bullet"><item><term><see cref="T:C1.C1Preview.LayoutChangeNoBreak" /></term><description>Does not insert a break. Provides the ability to change page layout for the next page without interrupting the current flow.</description></item><item><term><see cref="T:C1.C1Preview.LayoutChangeNewLine" /></term><description>Inserts a line break in the inline flow. Does not break the block flow.</description></item><item><term><see cref="T:C1.C1Preview.LayoutChangeNewColumn" /></term><description>Starts a new column in a multi-column layout, or a new page otherwise.</description></item><item><term><see cref="T:C1.C1Preview.LayoutChangeNewPage" /></term><description>Starts a new page.</description></item></list></remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Style">
      <summary>
            Gets the <see cref="P:C1.C1Preview.RenderObject.Style" /> of the current object.
            This property cannot be assigned to. To use another style as the base
            for the current object's style, set the <see cref="P:C1.C1Preview.Style.Parent" /> to that other style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.PageNumberingChange">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.RenderObject.PageNumberingChange" /> object
            defining the page numbering change that will occur when the current object is rendered.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Hyperlink">
      <summary>
            Gets or sets the hyperlink (see <see cref="T:C1.C1Preview.C1Hyperlink" />) associated with the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Anchors">
      <summary>
            Gets the collection of anchors (elements of the type <see cref="T:C1.C1Preview.C1Anchor" />) associated with the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasAnchors">
      <summary>
            Gets a value indicating whether the current object has any anchors associated with it
            (i.e. whether the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection exists and is not empty).
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.TableCell">
      <summary>
            Gets the <see cref="P:C1.C1Preview.RenderObject.TableCell" /> object containing the current object,
            or null if the current object is not contained in a cell of a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.KeepTogether">
      <summary>
            Gets or sets a render object which should be printed on the same page
            as the current object. The specified object must have the same
            <see cref="P:C1.C1Preview.RenderObject.Parent" /> as the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Visibility">
      <summary>
            Gets or sets a value indicating the visibility of the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.CalculatedValues">
      <summary>
            Gets the hashtable containing the calculated values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasCalculatedValues">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderObject.CalculatedValues" /> hashtable exists and is not empty.
            </summary>
      <remarks>
            Because <see cref="P:C1.C1Preview.RenderObject.CalculatedValues" /> always returns a non-<b>null</b> hashtable,
            initializing it if necessary, use this property to test the existence of <see cref="P:C1.C1Preview.RenderObject.CalculatedValues" /> 
            without that side-effect.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasFragments">
      <summary>
            Gets a value indicating whether the current object's <see cref="P:C1.C1Preview.RenderObject.Fragments" />
            collection has been initialized and contains one or more fragments.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Fragments">
      <summary>
            Gets a <see cref="T:C1.C1Preview.RenderFragmentCollection" /> containing the fragments
            produced by the current object in the generated document.
            </summary>
      <remarks>
            This property always returns a non-<b>null</b> fragments collection,
            initializing it if it has not been initialized yet.
            Use <see cref="P:C1.C1Preview.RenderObject.HasFragments" /> to test whether there are any fragments
            without initializing <see cref="P:C1.C1Preview.RenderObject.Fragments" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.FirstFragment">
      <summary>
            Gets the first fragment of the current object,
            or <b>null</b> if <see cref="P:C1.C1Preview.RenderObject.Fragments" /> has not been initialized yet.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LastFragment">
      <summary>
            Gets the last fragment of the current object,
            or <b>null</b> if <see cref="P:C1.C1Preview.RenderObject.Fragments" /> has not been initialized yet.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBinding">
      <summary>
            Gets an instance of <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> class representing the 
            data binding properties of the current object.
            </summary>
      <remarks>
            This property always returns a <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> object,
            initializing it if if has not been initialized yet.
            Use <see cref="P:C1.C1Preview.RenderObject.DataBindingDefined" /> to test whether the current object
            is data bound without initializing <see cref="P:C1.C1Preview.RenderObject.DataBinding" />.
            </remarks>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBindingMode">
      <summary>
            Gets a combination of <see cref="T:C1.C1Preview.DataBindingModeEnum" /> flags
            specifying the data binding mode of the current object.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBindingDefined">
      <summary>
            Gets a value indicating whether the current object is data bound.
            Returns <b>true</b> if the object's <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property
            has been initialized and its <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Mode" /> is not <see cref="F:C1.C1Preview.DataBindingModeEnum.None" />.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.Copies">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.RenderObject" /> objects generated by data binding.
            The value of this property is <b>null</b> if the object is not data bound.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.Original">
      <summary>
            Gets the original <see cref="T:C1.C1Preview.RenderObject" /> object that produced the current object
            during data binding, or <b>null</b> if there is no such object.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.FormatDataBindingInstanceScript">
      <summary>
            Gets or sets a script that is executed each time a new instance
            of the current <see cref="T:C1.C1Preview.RenderObject" />
            is created due to data binding resolving.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.ObjectResolvedScript">
      <summary>
            Gets or sets the script that is executed when the current object has been completely resolved,
            all its fragments created and added to the <see cref="P:C1.C1Preview.RenderObject.Fragments" /> collection
            of the current object.
            </summary>
      <remarks>
            This script may be used to adjust the look of an object after resolving,
            for instance the background of the object may be set depending on whether
            the object has been split between pages (i.e. the <see cref="P:C1.C1Preview.RenderObject.Fragments" />
            collection contains more than 1 element). The following code sets the
            background of a <see cref="T:C1.C1Preview.RenderArea" /> to red if it has been split
            between pages, and to green if it has not been split:
            <code>
            C1PrintDocument doc = new C1PrintDocument();
            RenderArea ra = new RenderArea();
            ra.ObjectResolvedScript = "if RenderObject.Fragments.Count &gt; 1 then\r\n" + 
                "RenderObject.Style.BackColor = Color.Red\r\n" + 
                "else\r\n" + 
                "RenderObject.Style.BackColor = Color.Green\r\n" + 
                "end if\r\n"; 
            ra.Style.Borders.All = LineDef.DefaultBold; 
            // ... fill ra with sample content:
            for (int i = 0; i &lt; 30; i++) 
                ra.Children.Add(new RenderText("Line " + i.ToString())); 
            doc.Body.Children.Add(ra); 
            </code>
            Note that while you can adjust any style properties on the object,
            the size and position of the object will not be re-calculated even
            if a property affecting it (such as font size) changes (so, for instance,
            if the font size is increased, clipping may occur). Basically,
            this means that normally only properties that do not affect the
            object's layout (such as text and background colors) should be changed
            in this script.
            </remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "P:C1.C1Preview.RenderObject.ObjectResolvingScript" -->
    <member name="P:C1.C1Preview.RenderObject.FragmentResolvedScript">
      <summary>
            Gets or sets the script that is executed each time a <see cref="T:C1.C1Preview.RenderFragment" />
            of the current render object is created and added to the <see cref="P:C1.C1Preview.RenderObject.Fragments" /> collection
            on the current object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderArea.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArea" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderArea.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderArea" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderArea" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultFlags">
      <summary>
            Gets the default value for the Flags property.
            </summary>
      <returns>Default flags plus CanSplitHorz and CanSplitVert.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultSplitHorzBehavior">
      <summary>
            Gets the default horizontal split behavior (area is too wide).
            </summary>
      <returns>
        <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultSplitVertBehavior">
      <summary>
            Gets the default vertical split behavior (area is too high).
            </summary>
      <returns>
        <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultWidth">
      <summary>
            Gets the default area width.
            </summary>
      <returns>Parent width.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderArea" />, also copies <see cref="T:C1.C1Preview.RenderArea" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderArea.HeaderVert">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.RenderObject" /> that is repeated on all pages (or columns)
            if the current render area is split vertically when it is too high to fit on
            a single page.
            </summary>
      <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="P:C1.C1Preview.RenderObject.Children" /> collection.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderArea.HeaderHorz">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.RenderObject" /> that will be repeated on all "horizontal" pages
            if the current render area is split horizontally when it is too wide to fit on
            a single page.
            </summary>
      <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="P:C1.C1Preview.RenderObject.Children" /> collection.
            </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderEmpty">
      <summary>
            Represents an empty <see cref="T:C1.C1Preview.RenderObject" />.
            Provides a convenient placeholder for things like page breaks and so on,
            where no content needs to be rendered.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEmpty" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEmpty" /> class
            with specified width and height.
            </summary>
      <param name="width">The <see cref="T:C1.C1Preview.Unit" /> width of the current <see cref="T:C1.C1Preview.RenderEmpty" /> object.</param>
      <param name="height">The <see cref="T:C1.C1Preview.Unit" /> height of the current <see cref="T:C1.C1Preview.RenderEmpty" /> object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor(C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEmpty" /> class
            with a specified height.
            </summary>
      <param name="height">The <see cref="T:C1.C1Preview.Unit" /> height of the current <see cref="T:C1.C1Preview.RenderEmpty" /> object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor(C1.C1Preview.BreakEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEmpty" /> class
            with a zero height and a specified <see cref="P:C1.C1Preview.RenderObject.BreakAfter" /> value.
            </summary>
      <param name="brk">They type of break that is to be inserted after this object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderEmpty" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderEmpty" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.GetDefaultHeight">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.Height" /> property.
            </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Empty" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.GetDefaultWidth">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.Width" /> property.
            </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Empty" />.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderGraphics">
      <summary>
            Represents a drawing on a .NET <see cref="T:System.Drawing.Graphics" /> object
            in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderGraphics" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.ShouldSerializeContent">
      <summary>
            Indicates whether the content of the current <see cref="T:C1.C1Preview.RenderGraphics" /> object
            should be serialized (i.e. is not empty).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.ShouldSerializeOpenXmlContent">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderGraphics" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderGraphics" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderGraphics" />, also copies <see cref="T:C1.C1Preview.RenderGraphics" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.Clear">
      <summary>
            Clears the current <see cref="T:C1.C1Preview.RenderGraphics" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.UseClassicDrawMethod">
      <summary>
            Gets or sets value indicating whether Graphics.DrawImage(Image, dstRect)
            method should be used to draw content of object instead of 
            Graphics.DrawImage(Image, dstRect, srcRect, GraphicsUnit). In some rare cases
            it produces more convient results. Default is false.
            Set this value to true if problems occurs with drawing RenderGraphics content.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.GraphicsSizeEqualToObjectSize">
      <summary>
            Gets or sets value indicating whether size of <see cref="P:C1.C1Preview.RenderGraphics.Graphics" /> object
            managed by this <see cref="T:C1.C1Preview.RenderGraphics" /> same as <see cref="T:C1.C1Preview.RenderGraphics" /> size.
            Set this property to <b>true</b> if you want to create image
            with exact sizes.
            If this property is <b>true</b> then <see cref="!:Width" /> and <see cref="!:Height" />
            should be specified as absolute values (10mm, 1inch for example).
            <see cref="P:C1.C1Preview.RenderGraphics.GraphicsSizeEqualToObjectSize" /> should be specified as <b>true</b> and
            <see cref="!:Width" /> and <see cref="!:Height" /> should be specified in absolute units
            <b>before</b> accessing to <see cref="P:C1.C1Preview.RenderGraphics.Graphics" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.EmfType">
      <summary>
            Gets or sets the type of metafile created by the current <see cref="T:C1.C1Preview.RenderGraphics" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.Graphics">
      <summary>
            Gets the <see cref="T:System.Drawing.Graphics" /> object to draw on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.ReferenceGraphics">
      <summary>
            Gets the reference <see cref="T:System.Drawing.Graphics" /> used to create the underlying metafile.
            This property is simply a shortcut to the <see cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" /> property,
            and returns <b>null</b> if the current <see cref="T:C1.C1Preview.RenderGraphics" /> object has not been added
            to a <see cref="T:C1.C1Preview.C1PrintDocument" /> yet.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderImage">
      <summary>
            Represents an image in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Can also be used to show an image of a <b>System.Windows.Forms.Control</b>.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderImage" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.Drawing.Image)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderImage" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderImage.Image" /> property.
            </summary>
      <param name="image">An <see cref="T:System.Drawing.Image" /> that is assigned to the <see cref="P:C1.C1Preview.RenderImage.Image" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderImage" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderImage.ImageName" /> property.
            </summary>
      <param name="imageName">A string that is assigned to the <see cref="P:C1.C1Preview.RenderImage.ImageName" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderImage" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderImage.Image" /> property,
            and specifying a <see cref="T:C1.C1Preview.Style" /> to use.
            </summary>
      <param name="image">An <see cref="T:System.Drawing.Image" /> that is assigned to the <see cref="P:C1.C1Preview.RenderImage.Image" /> property.</param>
      <param name="style">A <see cref="T:C1.C1Preview.Style" /> to use
            (the <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" /> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1Preview.RenderObject.Style" />).</param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderImage" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderImage.Image" /> property,
            and specifying a <see cref="T:C1.C1Preview.Style" /> to use.
            </summary>
      <param name="imageName">A string that is assigned to the <see cref="P:C1.C1Preview.RenderImage.ImageName" /> property.</param>
      <param name="style">A <see cref="T:C1.C1Preview.Style" /> to use
            (the <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" /> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1Preview.RenderObject.Style" />).</param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.Drawing.Image,C1.C1Preview.ImageAlign)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderImage" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderImage.Image" /> property,
            and specifying a <see cref="T:C1.C1Preview.ImageAlign" /> to use.
            </summary>
      <param name="image">An <see cref="T:System.Drawing.Image" /> that is assigned to the <see cref="P:C1.C1Preview.RenderImage.Image" /> property.</param>
      <param name="imageAlign">An <see cref="T:C1.C1Preview.ImageAlign" /> that is assigned to <see cref="P:C1.C1Preview.Style.ImageAlign" />
            of the current object's <see cref="T:C1.C1Preview.Style" />.</param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.String,C1.C1Preview.ImageAlign)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderImage" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderImage.Image" /> property,
            and specifying a <see cref="T:C1.C1Preview.ImageAlign" /> to use.
            </summary>
      <param name="imageName">A string that is assigned to the <see cref="P:C1.C1Preview.RenderImage.ImageName" /> property.</param>
      <param name="imageAlign">An <see cref="T:C1.C1Preview.ImageAlign" /> that is assigned to <see cref="P:C1.C1Preview.Style.ImageAlign" />
            of the current object's <see cref="T:C1.C1Preview.Style" />.</param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderImage" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderImage" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderImage.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderGraphics" />, also copies <see cref="T:C1.C1Preview.RenderGraphics" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderImage.UseClassicDrawMethod">
      <summary>
            Gets or sets value indicating whether Graphics.DrawImage(Image, dstRect)
            method should be used to draw content of object instead of 
            Graphics.DrawImage(Image, dstRect, srcRect, GraphicsUnit). In some rare cases
            it produces more convient results. Default is false.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.Image">
      <summary>
            Gets or sets an <see cref="T:System.Drawing.Image" /> that is
            rendered by the current <see cref="T:C1.C1Preview.RenderImage" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.ImageName">
      <summary>
            Gets or sets the name of an image that is 
            rendered by the current <see cref="T:C1.C1Preview.RenderImage" /> object.
            When the current object renders, the actual image is retrieved by this name
            from the <see cref="P:C1.C1Preview.C1PrintDocument.Dictionary" /> of the containing <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.Control">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Forms.Control" /> object,
            an image of which is rendered by the current <see cref="T:C1.C1Preview.RenderImage" /> object.
            </summary>
      <remarks>
        <para>
            The <see cref="P:C1.C1Preview.Style.ClientAreaOnly" /> property on the <see cref="P:C1.C1Preview.RenderObject.Style" />
            of the current <b>RenderImage</b> object determines whether the whole control, or just its client area,
            is rendered.
            </para>
        <para>
            Note that this property does not cause the current object to render a real live control
            that can be used for user input, only a visual image representing the specified control.
            For real control behavior, see <see cref="T:C1.C1Preview.RenderInputBase" /> and derived classes.
            </para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.IndexEntryOccurrence">
      <summary>
            Represents a single occurrence of an <see cref="T:C1.C1Preview.IndexEntry" /> in the document.
            Elements of this type are contained in the <see cref="P:C1.C1Preview.IndexEntry.Occurrences" /> collection
            of an <see cref="T:C1.C1Preview.IndexEntry" />.
            <para>
            The main functional property of this class is <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" />,
            of the type <see cref="T:C1.C1Preview.C1LinkTarget" />, which points to the location of the occurrence
            in the document.
            </para></summary>
      <seealso cref="T:C1.C1Preview.RenderIndex" />
      <seealso cref="T:C1.C1Preview.IndexEntry" />
      <seealso cref="T:C1.C1Preview.IndexEntryCollection" />
      <seealso cref="T:C1.C1Preview.IndexEntryStyles" />
      <seealso cref="T:C1.C1Preview.C1LinkTarget" />
    </member>
    <member name="M:C1.C1Preview.IndexEntryOccurrence.#ctor(C1.C1Preview.C1LinkTarget)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> class.
            </summary>
      <param name="target">The <see cref="T:C1.C1Preview.C1LinkTarget" /> that is assigned to the <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" /> property of the current occurrence.</param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryOccurrence.#ctor(C1.C1Preview.C1LinkTarget,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> class.
            </summary>
      <param name="target">The <see cref="T:C1.C1Preview.C1LinkTarget" /> that is assigned to the <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" /> property of the current occurrence.</param>
      <param name="bold">The <b>bold</b> flag that is assigned to the <see cref="P:C1.C1Preview.IndexEntryOccurrence.Bold" /> property of the current occurrence.</param>
      <param name="italic">The <i>italic</i> flag that is assigned to the <see cref="P:C1.C1Preview.IndexEntryOccurrence.Italic" /> property of the current occurrence.</param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryOccurrence.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.IndexEntryOccurrence.Target">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.C1LinkTarget" /> that is associated with the current occurrence.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntryOccurrence.Bold">
      <summary>
            Gets or sets a Boolean value allowing to highlight the page number
            corresponding to a certain occurrence of an entry using <b>bold face</b>.
            (Can be used to highlight the location where the main definition
            of an index entry is provided, for example.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntryOccurrence.Italic">
      <summary>
            Gets or sets a Boolean value allowing to highlight the page number
            corresponding to a certain occurrence of an entry using <i>italic face</i>.
            (Can be used to highlight the location where the main definition
            of an index entry is provided, for example.)
            </summary>
    </member>
    <member name="T:C1.C1Preview.IndexEntry">
      <summary>
            Represents an entry in a word index of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Top-level entries of a <see cref="T:C1.C1Preview.RenderIndex" /> (represented by instances of this class)
            are contained in the <see cref="P:C1.C1Preview.RenderIndex.Entries" /> collection on the index object.
            Nested entries are contained in the parent entry's <see cref="P:C1.C1Preview.IndexEntry.Children" />
            The current entry's occurrences in the document are represented by instances
            of the <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> class, and are contained in the
            <see cref="P:C1.C1Preview.IndexEntry.Occurrences" /> collection of the entry.
            </summary>
      <seealso cref="P:C1.C1Preview.IndexEntry.RenderIndex" />
      <seealso cref="T:C1.C1Preview.IndexEntryOccurrence" />
      <seealso cref="T:C1.C1Preview.IndexEntryCollection" />
      <seealso cref="T:C1.C1Preview.IndexEntryStyles" />
      <seealso cref="T:C1.C1Preview.C1LinkTarget" />
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.IndexEntry" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.IndexEntry" /> class.
            </summary>
      <param name="caption">The string that is assigned to the <see cref="P:C1.C1Preview.IndexEntry.Caption" /> property of the current index entry.</param>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor(System.String,C1.C1Preview.IndexEntryOccurrence[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.IndexEntry" /> class.
            </summary>
      <param name="caption">The string that is assigned to the <see cref="P:C1.C1Preview.IndexEntry.Caption" /> property of the current index entry.</param>
      <param name="occurrences">One or more <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> objects that are added to the <see cref="P:C1.C1Preview.IndexEntry.Occurrences" /> collection of this index entry.</param>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor(System.String,C1.C1Preview.C1LinkTarget[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.IndexEntry" /> class.
            </summary>
      <param name="caption">The string that is assigned to the <see cref="P:C1.C1Preview.IndexEntry.Caption" /> property of the current index entry.</param>
      <param name="targets">A list of <see cref="T:C1.C1Preview.C1LinkTarget" /> objects; for each target in that list,
            a <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> is created and added to the <see cref="P:C1.C1Preview.IndexEntry.Occurrences" /> of the current index item.</param>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.IndexEntry" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.IndexEntry" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.AssignFrom(C1.C1Preview.IndexEntry)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.IndexEntry" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Caption">
      <summary>
            Gets or sets the string that will represent the current index entry in the generated index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Occurrences">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> objects
            representing occurrences of the current index entry in the document.
            In the generated index, each occurrence is replaced by the page number,
            which is a hyperlink to the occurrence's location in the document.
            (Consecutive page numbers are collapsed to ranges.)
            </summary>
      <remarks>
            This method always returns a non-<b>null</b><see cref="T:System.Collections.Generic.List`1" />,
            creating it if it did not exist.
            To test whether an index entry already contains occurrences
            without creating the <see cref="P:C1.C1Preview.IndexEntry.Occurrences" /> collection,
            use the <see cref="P:C1.C1Preview.IndexEntry.HasOccurrences" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.HasOccurrences">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IndexEntry.Occurrences" /> collection
            has been created and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Children">
      <summary>
            Gets the <see cref="T:C1.C1Preview.IndexEntryCollection" /> containing the nested index entries,
            i.e. sub-entries of the current index entry.
            </summary>
      <remarks>
            This method always returns a non-<b>null</b><see cref="T:C1.C1Preview.IndexEntryCollection" />,
            creating it if it did not exist.
            To test whether an index entry already contains any sub-entries
            without creating the <see cref="P:C1.C1Preview.IndexEntry.Children" /> collection,
            use the <see cref="P:C1.C1Preview.IndexEntry.HasChildren" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.HasChildren">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IndexEntry.Children" /> collection
            has been created and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.SeeAlso">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:C1.C1Preview.IndexEntry" /> objects
            related to the current index entry.
            In the generated index, those entries will be listed as "See also"
            cross-references from the current to other entries.
            </summary>
      <remarks>
            This method always returns a non-<b>null</b><see cref="T:System.Collections.Generic.List`1" />,
            creating it if it did not exist.
            To test whether an index entry already contains any "See also" references
            without creating the <see cref="P:C1.C1Preview.IndexEntry.SeeAlso" /> collection,
            use the <see cref="P:C1.C1Preview.IndexEntry.HasSeeAlso" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.HasSeeAlso">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IndexEntry.SeeAlso" /> collection
            has been created and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Style">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> for the current index entry.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.SeeAlsoStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> for the current index entry's
            "See also" references (see <see cref="P:C1.C1Preview.IndexEntry.SeeAlso" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Level">
      <summary>
            Gets the level of the current index entry.
            The top-level entries' level is <b>0</b>, sub-entries' level is <b>1</b>, and so on.
            If the current index entry has not been added to a <see cref="P:C1.C1Preview.IndexEntry.RenderIndex" /> object
            or to a nested entry of such object, this property returns <b>-1</b>.
            or to an <see cref="T:C1.C1Preview.IndexEntry" /></summary>
      <seealso cref="P:C1.C1Preview.IndexEntry.RenderIndex" />
    </member>
    <member name="P:C1.C1Preview.IndexEntry.RenderIndex">
      <summary>
            Gets the <see cref="P:C1.C1Preview.IndexEntry.RenderIndex" /> object containing the current index entry
            at some level, either at a top-level entry or a nested entry.
            </summary>
      <seealso cref="P:C1.C1Preview.IndexEntry.Level" />
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing the current index entry.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IndexEntryCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.IndexEntry" /> objects.
            The <see cref="P:C1.C1Preview.RenderIndex.Entries" /> property on the <see cref="T:C1.C1Preview.RenderIndex" /> class,
            and the <see cref="P:C1.C1Preview.IndexEntry.Children" /> property on the <see cref="T:C1.C1Preview.IndexEntry" /> class
            store collections of this type.
            </summary>
      <seealso cref="T:C1.C1Preview.RenderIndex" />
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="index">
      </param>
      <param name="oldValue">
      </param>
      <param name="newValue">
      </param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.GetItemType">
      <summary>
            Returns the type of items in the collection.
            </summary>
      <returns>
        <see cref="T:C1.C1Preview.IndexEntry" />.</returns>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.Add(C1.C1Preview.IndexEntry)">
      <summary>
            Adds an <see cref="T:C1.C1Preview.IndexEntry" /> to the current collection.
            </summary>
      <param name="item">The item to add.</param>
      <returns>The index of the newly added item in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.Remove(C1.C1Preview.IndexEntry)">
      <summary>
            Removes an <see cref="T:C1.C1Preview.IndexEntry" /> from the current collection.
            </summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.Insert(System.Int32,C1.C1Preview.IndexEntry)">
      <summary>
            Inserts an <see cref="T:C1.C1Preview.IndexEntry" /> into the current collection.
            </summary>
      <param name="index">The position of the inserted item in the collection.</param>
      <param name="item">The item to insert.</param>
    </member>
    <member name="P:C1.C1Preview.IndexEntryCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.IndexEntryStyles">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.Style" />s used to render <see cref="T:C1.C1Preview.IndexEntry" /> objects
            at different nesting levels of a <see cref="T:C1.C1Preview.RenderIndex" />.
            The style at index 0 of this collection is used to render the top-level entries,
            the style at index 1 is used to render sub-entries, and so on.
            </summary>
      <seealso cref="T:C1.C1Preview.RenderIndex" />
      <seealso cref="T:C1.C1Preview.IndexEntry" />
    </member>
    <member name="P:C1.C1Preview.IndexEntryStyles.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderIndex" /> that is the owner of the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntryStyles.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> at the specified index.
            Creates missing styles as needed (i.e. if <b>Style[2]</b> is accessed,
            elements at indices <b>0</b>, <b>1</b> and <b>2</b> are created
            if they had not been created before).
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderIndex">
      <summary>
            Represents an alphabetical, optionally multi-level, word index in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <remarks>
            To create an index, follow these steps:
            <list type="bullet"><item>
            Create an instance of the <see cref="T:C1.C1Preview.RenderIndex" /> class, store it in a local variable.
            </item><item>
            For each index entry, create an instance of the <see cref="T:C1.C1Preview.IndexEntry" /> class.
            </item><item>
            For each occurrence of each index entry in the document, create an instance of the <see cref="T:C1.C1Preview.IndexEntryOccurrence" /> class,
            and set the <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" /> on it to point to the location of that occurrence in the document.
            </item><item>
            After all occurrences have been added to their entries, and all entries have been added to the <see cref="P:C1.C1Preview.RenderIndex.Entries" />,
            add the <see cref="T:C1.C1Preview.RenderIndex" /> object created in the first step, to the document. When the document generates, that object will create
            the alphabetically sorted word index with clickable page numbers.
            </item>
            Please note that a <see cref="T:C1.C1Preview.RenderIndex" /> must be added <b>after</b> all occurrences of all entries contained in it.
            If an occurrence appears after the <see cref="T:C1.C1Preview.RenderIndex" /> containing it, it is ignored when the index is built.
            </list></remarks>
      <seealso cref="T:C1.C1Preview.IndexEntry" />
      <seealso cref="T:C1.C1Preview.IndexEntryOccurrence" />
      <seealso cref="T:C1.C1Preview.IndexEntryCollection" />
      <seealso cref="T:C1.C1Preview.IndexEntryStyles" />
      <seealso cref="T:C1.C1Preview.C1LinkTarget" />
    </member>
    <member name="M:C1.C1Preview.RenderIndex.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderIndex" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeRunInDelimiter">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.RunInDelimiter" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializePageRangeFormat">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.PageRangeFormat" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeSeeAlsoFormat">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.SeeAlsoFormat" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeOccurrenceDelimiter">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.OccurrenceDelimiter" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeTermDelimiter">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.TermDelimiter" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeLetterFormat">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.LetterFormat" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeEntryIndent">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.EntryIndent" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeEntryHangingIndent">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.EntryHangingIndent" /> property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeHeadingStyle">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.HeadingStyle" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeSeeAlsoStyle">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.RenderIndex.SeeAlsoStyle" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.InitRenderObject">
      <summary>
            Initializes the current <see cref="T:C1.C1Preview.RenderIndex" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderIndex" />, also copies <see cref="T:C1.C1Preview.RenderIndex" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntrySplitBehavior">
      <summary>
            Determines how a single entry can split vertically.
            This property applies to entries at all levels.
            <para>The default is <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfLarge" />.</para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.RunIn">
      <summary>
            Gets or sets a value indicating whether that sub-entries
            should appear inline with the main heading rather than on separate indented lines.
            <para>The default is <b>false</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.PageNumbersAtRight">
      <summary>
            Gets or sets a value indicating whether page numbers in the generated index
            should be right-aligned.
            <para>The default is <b>false</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.FillChar">
      <summary>
            Gets or sets a character used to fill the empty space between
            an index entry's <see cref="P:C1.C1Preview.IndexEntry.Caption" /> and the page number or numbers
            referencing the occurrences of that entry.
            This property is only used if <see cref="P:C1.C1Preview.RenderIndex.PageNumbersAtRight" />
            on the current <see cref="T:C1.C1Preview.RenderIndex" /> has been set to <b>true</b>.
            <para>The default is a dot (<b>'.'</b>).</para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryIndent">
      <summary>
            Gets or sets the indent of sub-entries relative to the main index entry.
            <para>The default is 1/4 of an inch.</para></summary>
      <remarks>
            While this property has the <see cref="T:C1.C1Preview.Unit" /> type,
            only absolute values (such as "10mm", "0.5in" and so on - see <see cref="P:C1.C1Preview.Unit.IsAbs" />)
            can be assigned to it.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryHangingIndent">
      <summary>
            Gets or sets the hanging indent of the first line of an entry's paragraph
            relative to the following lines (used if the list of occurrences and
            cross-references for the entry is too long to fit on a single line).
            <para>The default is 1/8 of an inch.</para></summary>
      <remarks>
            While this property has the <see cref="T:C1.C1Preview.Unit" /> type,
            only absolute values (such as "10mm", "0.5in" and so on - see <see cref="P:C1.C1Preview.Unit.IsAbs" />)
            can be assigned to it.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.Entries">
      <summary>
            Gets the collection of entries (elements of type <see cref="T:C1.C1Preview.IndexEntry" />)
            at the top level of the current index.
            </summary>
      <remarks>
            This method always returns a non-<b>null</b><see cref="T:C1.C1Preview.IndexEntryCollection" />,
            creating it if it did not exist.
            To test whether the current index already contains entries
            without creating the <see cref="P:C1.C1Preview.RenderIndex.Entries" /> collection,
            use the <see cref="P:C1.C1Preview.RenderIndex.HasEntries" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.HasEntries">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderIndex.Entries" /> collection
            has been created and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.SeeAlsoStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> of the <b>"See (...)"</b> text
            used to list cross-references between entries of the current <see cref="T:C1.C1Preview.RenderIndex" />.
            <para>
            Note that this style is only applied to the static text of the <see cref="P:C1.C1Preview.RenderIndex.SeeAlsoFormat" />
            format string, but not to the entries' list output by that format.
            </para></summary>
      <remarks>
            When the index generates, new objects are created to represent the "See also" cross-references.
            As all content objects in a <see cref="T:C1.C1Preview.C1PrintDocument" />, 
            each such object has an inline style that is used to actually render
            that object. That style is created on the fly, and the <b>SeeAlsoStyle</b>
            is assigned to <see cref="P:C1.C1Preview.Style.Parent" /> and <see cref="P:C1.C1Preview.Style.AmbientParent" /> 
            properties of that <see cref="T:C1.C1Preview.Style" />.
            </remarks>
      <seealso cref="P:C1.C1Preview.RenderIndex.SeeAlsoFormat" />
    </member>
    <member name="P:C1.C1Preview.RenderIndex.HeadingStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> used for letter headings
            generated by the current index.
            (A heading is a letter preceding the group of entries beginning with that letter.)
            </summary>
      <remarks>
            When the index generates, new objects are created to represent the headings.
            As all content objects in a <see cref="T:C1.C1Preview.C1PrintDocument" />, 
            each such object has an inline style that is used to actually render
            that object. That style is created on the fly, and the <b>HeadingStyle</b>
            is assigned to <see cref="P:C1.C1Preview.Style.Parent" /> and <see cref="P:C1.C1Preview.Style.AmbientParent" /> 
            properties of that <see cref="T:C1.C1Preview.Style" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryStyles">
      <summary>
            Gets the <see cref="T:C1.C1Preview.IndexEntryStyles" /> collection containing the styles
            used to render entries of the current <see cref="T:C1.C1Preview.RenderIndex" /> at different levels.
            </summary>
      <remarks>
            When the index generates, new objects are created to represent the index entries.
            As all content objects in a <see cref="T:C1.C1Preview.C1PrintDocument" />, 
            each such object has an inline style that is used to actually render that object.
            That style is created on the fly, and the element of the <b>EntryStyles</b>
            collection at the corresponding position (0 for top-level entries, 1 for sub-entries, and so on)
            is assigned to <see cref="P:C1.C1Preview.Style.Parent" /> and <see cref="P:C1.C1Preview.Style.AmbientParent" /> 
            properties of that <see cref="T:C1.C1Preview.Style" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryStyle">
      <summary>
            Gets the style of index entries at the top level.
            This is a shortcut to the first (with index 0)
            element of the <see cref="P:C1.C1Preview.RenderIndex.EntryStyles" /> collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.LetterSplitBehavior">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.SplitBehaviorEnum" /> that determines how a letter group
            (entries starting with the same letter) can split vertically.
            The default is <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />.
            Note that headings (represented by their letters by default)
            are always printed together with their first entry
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.LetterFormat">
      <summary>
            Gets or sets a string used to format the letter group headings.
            <para>The default is <b>"{0}"</b>.</para></summary>
      <seealso cref="P:C1.C1Preview.RenderIndex.HeadingStyle" />
    </member>
    <member name="P:C1.C1Preview.RenderIndex.TermDelimiter">
      <summary>
            Gets or sets a string used to delimit an index entry
            and the list of that entry's occurrences (page numbers) in the generated index.
            <para>The default is <b>", "</b> (comma followed by space).</para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.OccurrenceDelimiter">
      <summary>
            Gets or sets a string used to delimit the occurrences (page numbers)
            of an index entry in the generated index.
            <para>The default is <b>", "</b> (comma followed by space).</para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.PageRangeFormat">
      <summary>
            Gets or sets a format string used to format the page ranges of occurrences
            of index entries in the generated index.
            <para>The default is <b>"{0}-{1}"</b>.</para></summary>
      <remarks>
            When an index entry occurs on consecutive pages in a document (e.g. on pages 3, 4 and 5),
            those occurrences are collapsed into a range ("3-5" in that case).
            <b>PageRangeFormat</b> is used to format those ranges.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.SeeAlsoFormat">
      <summary>
            Gets or sets a format string used to format the "See also"
            cross-references in the generated index.
            <para>The default is <b>"(see {0})"</b>.</para></summary>
      <seealso cref="P:C1.C1Preview.RenderIndex.SeeAlsoStyle" />
    </member>
    <member name="P:C1.C1Preview.RenderIndex.RunInDelimiter">
      <summary>
            Gets or sets a string used to delimit entries when a run-in (see <see cref="P:C1.C1Preview.RenderIndex.RunIn" />)
            index is generated by the current <see cref="T:C1.C1Preview.RenderIndex" />.
            <para>The default is <b>";"</b> (semicolon).</para></summary>
    </member>
    <member name="T:C1.C1Preview.UserActionEnum">
      <summary>
            Specifies an end user action on a control produced by a
            <see cref="T:C1.C1Preview.RenderInputBase" />-derived object
            when the containing <see cref="T:C1.C1Preview.C1PrintDocument" /> is shown
            by a supporting viewer (e.g. by <b>C1.Win.C1Preview.C1PrintPreviewControl</b>).
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Click">
      <summary>
            The control is clicked.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseUp">
      <summary>
            The mouse pointer is over the control and a mouse button is released.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseDown">
      <summary>
            The mouse pointer is over the control and a mouse button is pressed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseEnter">
      <summary>
            The mouse pointer enters the control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseLeave">
      <summary>
            The mouse pointer leaves the control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Enter">
      <summary>
            The input focus enters the control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Leave">
      <summary>
            The input focus leaves the control.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FormsKeyActionTabEnum">
      <summary>
            Specifies an action that is to be performed when the <b>TAB</b> key is pressed
            on a page containing <see cref="T:C1.C1Preview.RenderInputBase" />-derived objects,
            while the containing <see cref="T:C1.C1Preview.C1PrintDocument" /> is shown
            by a supporting viewer (e.g. by <b>C1.Win.C1Preview.C1PrintPreviewControl</b>).
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPage">
      <summary>
            Focus moves to the next control on the current page,
            but does not leave the preview nor goes to another page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDoc">
      <summary>
            Focus moves to the next control in the document (including across pages).
            Focus does not leave the preview control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageCycle">
      <summary>
            Focus moves to the next control on the current page.
            When the last control is reached focus goes to the first control on the same page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocCycle">
      <summary>
            Focus moves to the next control in the document.
            When the last control is reached focus goes to the first control in the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageOut">
      <summary>
            Focus moves to the next control on the current page.
            When the last control on the page is reached focus leaves the preview control,
            and goes to the next control on the form.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocOut">
      <summary>
            Focus moves to the next control in the document.
            When the last control in the document is reached focus leaves the preview control,
            and goes to the next control on the form.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FormsKeyActionEnterEnum">
      <summary>
            Specifies an action that is to be performed when the <b>ENTER</b> key is pressed
            on a page containing <see cref="T:C1.C1Preview.RenderInputBase" />-derived objects,
            while the containing <see cref="T:C1.C1Preview.C1PrintDocument" /> is shown
            by a supporting viewer (e.g. by <b>C1.Win.C1Preview.C1PrintPreviewControl</b>).
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.None">
      <summary>
            No action is taken.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.LikeTab">
      <summary>
            The same action as that of the <b>TAB</b> key is taken.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.InvokeAcceptButton">
      <summary>
            The current form's <b>Accept</b> button is invoked.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerBase">
      <summary>
            The abstract base class for types representing various document-related actions
            that can be performed in response to a user action on a control
            produced by a <see cref="T:C1.C1Preview.RenderInputBase" /> object.
            </summary>
      <remarks>
        <para>
            When a <see cref="T:C1.C1Preview.C1PrintDocument" /> containing one or more <see cref="T:C1.C1Preview.RenderInputBase" />-derived objects
            is shown by a supporting viewer control such as <b>C1PrintPreviewControl</b>,
            each <b>RenderInputBase</b> object produces a corresponding control on the document page.
            E.g. a <see cref="T:C1.C1Preview.RenderInputText" /> produces a <b>textbox</b> control where the user can
            enter text, a <see cref="T:C1.C1Preview.RenderInputButton" /> produces a <b>pushbutton</b>, and so on.
            </para>
        <para>
            The functionality of those input controls in the document can be expanded via "action handlers",
            which are similar to C# or VB event handlers that can be assigned to events on many .NET components.
            The list of supported events is specified by the <see cref="T:C1.C1Preview.UserActionEnum" /> enumeration,
            and includes mouse click, mouse enter and leave, keyboard focus enter and leave,
            and mouse up and down events.
            </para>
        <para>
            To create and attach a handler to a user action on a <see cref="T:C1.C1Preview.RenderInputBase" />-derived object,
            follow these general steps:
            </para>
        <list type="bullet">
          <item>
            Create an instance of a <see cref="T:C1.C1Preview.ActionHandlerBase" />-derived class of the concrete type
            that matches the action that needs to be performed, such as a hyperlink jump or a file operation.
            (Those classes include
            <see cref="T:C1.C1Preview.ActionHandlerLink" />,
            <see cref="T:C1.C1Preview.ActionHandlerFileOpen" />,
            <see cref="T:C1.C1Preview.ActionHandlerFileSave" />,
            <see cref="T:C1.C1Preview.ActionHandlerPageSetup" />,
            <see cref="T:C1.C1Preview.ActionHandlerPrint" />,
            <see cref="T:C1.C1Preview.ActionHandlerReflow" />,
            <see cref="T:C1.C1Preview.ActionHandlerPageView" />,
            <see cref="T:C1.C1Preview.ActionHandlerHistoryPrev" /> and
            <see cref="T:C1.C1Preview.ActionHandlerHistoryNext" />.)
            </item>
          <item>
            Some of those classes expose action-specific properties
            (such as <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" />).
            Adjust the values of those properties as needed.
            </item>
          <item>
            Create an instance of the <see cref="T:C1.C1Preview.InputAction" /> class, set its <see cref="P:C1.C1Preview.InputAction.UserAction" />
            property to the desired user action (such as click or focus enter),
            and set its <see cref="P:C1.C1Preview.InputAction.ActionHandler" /> property to the
            <see cref="T:C1.C1Preview.ActionHandlerBase" /> instance created in the preceding steps.
            </item>
          <item>
            Add the <see cref="T:C1.C1Preview.InputAction" /> to the <see cref="P:C1.C1Preview.RenderInputBase.InputActions" />
            collection of the <see cref="T:C1.C1Preview.RenderInputBase" /> object.
            </item>
        </list>
        <para>Note that several <see cref="T:C1.C1Preview.InputAction" /> objects can be associated
            with a single render input control.</para>
      </remarks>
      <example>
            The following example shows how to add a button that would jump to the last page
            of the current document when clicked, to a document:
            <code>
            C1PrintDocument doc = new C1PrintDocument();
            // Create an action handler that would jump to the last page:
            ActionHandlerLink ahl = new ActionHandlerLink(new C1LinkTargetPage(PageJumpTypeEnum.Last));
            // Create an input action, set its properties:
            InputAction ia = new InputAction();
            ia.ActionHandler = ahl;
            ia.UserAction = UserActionEnum.Click;
            // Create a button, add the input action to its actions:
            RenderInputButton rbtn = new RenderInputButton("Jump to last page");
            rbtn.InputActions.Add(ia);
            // Add the button to the document:
            doc.Body.Children.Add(rbtn);
            // ...add more content to the document...
            </code></example>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerLink">
      <summary>
            Describes an <see cref="T:C1.C1Preview.ActionHandlerBase" /> that executes a hyperlink jump.
            The target of the jump is specified by the instance of <see cref="T:C1.C1Preview.C1LinkTarget" />
            that is assigned to the <see cref="P:C1.C1Preview.ActionHandlerLink.LinkTarget" /> property.
            </summary>
      <remarks>For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.</remarks>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerLink.#ctor(C1.C1Preview.C1LinkTarget)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerLink" /> class,
            assigning the <see cref="P:C1.C1Preview.ActionHandlerLink.LinkTarget" /> property.
            </summary>
      <param name="linkTarget">An instance of the <see cref="T:C1.C1Preview.C1LinkTarget" />-derived class
            to assign to the <see cref="P:C1.C1Preview.ActionHandlerLink.LinkTarget" /> property.</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerLink.LinkTarget">
      <summary>
            Gets or sets the link target associated with the current <see cref="T:C1.C1Preview.ActionHandlerLink" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFile">
      <summary>
            The abstract base class for action handlers performing a file operation such as save or open.
            </summary>
      <remarks>For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.</remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerFileOpen" />
      <seealso cref="T:C1.C1Preview.ActionHandlerFileSave" />
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerFile" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFile.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerFile" /> class,
            assigning the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> property.
            </summary>
      <param name="fileName">The file name to assign to the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> property.</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerFile.FileName">
      <summary>
            Gets or sets the name of the file associated with the current <see cref="T:C1.C1Preview.ActionHandlerFile" />.
            If empty, a file dialog will be shown to the user when the current action handler is invoked.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFileSave">
      <summary>
            Represents an action handler that saves or exports a document to a disk file.
            </summary>
      <remarks>
            If the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> is not specified when this action handler
            is invoked, a file save dialog is shown to the user.
            <para>
            For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerFile" />
      <seealso cref="T:C1.C1Preview.ActionHandlerFileOpen" />
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileSave.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerFileSave" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileSave.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerFileSave" /> class,
            assigning the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> property.
            </summary>
      <param name="fileName">The file name to assign to the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileSave.#ctor(System.String,C1.C1Preview.Export.ExportProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerFileSave" /> class,
            assigning the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> and <see cref="P:C1.C1Preview.ActionHandlerFileSave.ExportProvider" /> properties.
            </summary>
      <param name="fileName">The file name to assign to the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> property.</param>
      <param name="exportProvider">The <see cref="T:C1.C1Preview.Export.ExportProvider" /> to assign to the <see cref="P:C1.C1Preview.ActionHandlerFileSave.ExportProvider" /> property.</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerFileSave.ExportProvider">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.Export.ExportProvider" /> that will be used
            to save or export the document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFileOpen">
      <summary>
            Represents an action handler that loads a document (in C1DX or C1D formats) from a disk file.
            </summary>
      <remarks>
            If the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> is not specified when this action handler
            is invoked, a file open dialog is shown to the user.
            <para>
            For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.
            </para></remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerFile" />
      <seealso cref="T:C1.C1Preview.ActionHandlerFileSave" />
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileOpen.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerFileOpen" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileOpen.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerFileOpen" /> class,
            assigning the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> property.
            </summary>
      <param name="fileName">The file name to assign to the <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" /> property.</param>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPageSetup">
      <summary>
            Represents an <see cref="T:C1.C1Preview.ActionHandlerBase" /> that displays the page setup dialog
            allowing the end user to change the page properties of the current <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <remarks>For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.</remarks>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPrint">
      <summary>
            Represents an <see cref="T:C1.C1Preview.ActionHandlerBase" /> that prints the current <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <remarks>For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.</remarks>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerPrint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerPrint" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerPrint.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerPrint" /> class,
            assigning the <see cref="P:C1.C1Preview.ActionHandlerPrint.PrinterName" /> property.
            </summary>
      <param name="printerName">The printer name to assign to the <see cref="P:C1.C1Preview.ActionHandlerPrint.PrinterName" /> property.</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerPrint.PrinterName">
      <summary>
            Gets or sets the name of the printer to use.
            If empty, a printer select dialog will be shown to the user when the current action handler is invoked.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerReflow">
      <summary>
            Represents an <see cref="T:C1.C1Preview.ActionHandlerBase" /> that reflows the current <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <remarks>For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.</remarks>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPageView">
      <summary>
            Represents an <see cref="T:C1.C1Preview.ActionHandlerBase" /> that changes the document view
            in the current viewer control.
            </summary>
      <remarks>For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.</remarks>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerPageView.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ActionHandlerPageView" /> class,
            assigning the <see cref="P:C1.C1Preview.ActionHandlerPageView.Facing" /> and <see cref="P:C1.C1Preview.ActionHandlerPageView.Continuous" /> properties.
            </summary>
      <param name="facing">A value to assign to the <see cref="P:C1.C1Preview.ActionHandlerPageView.Facing" /> property.</param>
      <param name="continuous">A value to assign to the <see cref="P:C1.C1Preview.ActionHandlerPageView.Continuous" /> property.</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerPageView.Facing">
      <summary>
            Gets or sets a value indicating whether to change the view to <b>Facing</b> mode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerPageView.Continuous">
      <summary>
            Gets or sets a value indicating whether to change the view to <b>Continuous</b> mode.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerHistoryPrev">
      <summary>
            Represents an <see cref="T:C1.C1Preview.ActionHandlerBase" /> that switches to the previous
            history entry in the current viewer control.
            </summary>
      <remarks>For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.</remarks>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerHistoryNext">
      <summary>
            Represents an <see cref="T:C1.C1Preview.ActionHandlerBase" /> that switches to the next
            history entry in the current viewer control.
            </summary>
    </member>
    <member name="T:C1.C1Preview.InputAction">
      <summary>
            Describes the combination of a user action on a control
            produced by a <see cref="T:C1.C1Preview.RenderInputBase" />-derived object,
            and the associated handling.
            </summary>
      <remarks>
            Objects of this type, describing handling of different user actions, are stored
            in the <see cref="P:C1.C1Preview.RenderInputBase.InputActions" /> collection of a <see cref="T:C1.C1Preview.RenderInputBase" /> object,
            and define how various user actions on the control produced by that object are handled.
            <para>
            For details on the use of action handlers, see <see cref="T:C1.C1Preview.ActionHandlerBase" />.
            </para></remarks>
    </member>
    <member name="M:C1.C1Preview.InputAction.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.InputAction" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.InputAction.#ctor(C1.C1Preview.UserActionEnum,C1.C1Preview.ActionHandlerBase)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.InputAction" /> class,
            assigning the <see cref="P:C1.C1Preview.InputAction.UserAction" /> and <see cref="P:C1.C1Preview.InputAction.ActionHandler" /> properties.
            </summary>
      <param name="userAction">A value to assign to the <see cref="P:C1.C1Preview.InputAction.UserAction" /> property.</param>
      <param name="actionHandler">A value to assign to the <see cref="P:C1.C1Preview.InputAction.ActionHandler" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.InputAction.AssignFrom(C1.C1Preview.InputAction)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.InputAction" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.InputAction.UserAction">
      <summary>
            Gets or sets the kind of user action (such as click or focus enter) associated with the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.InputAction.ActionHandler">
      <summary>
            Gets or sets the action handler associated with the current object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.InputActionCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.InputAction" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Add(C1.C1Preview.InputAction)">
      <summary>
            Adds an element to the current collection.
            </summary>
      <param name="inputAction">The <see cref="T:C1.C1Preview.InputAction" /> to add.</param>
      <returns>The index of the added element in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Add(C1.C1Preview.UserActionEnum,C1.C1Preview.ActionHandlerBase)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.InputAction" /> instance based on the specified user action and handler,
            and adds it to the current collection.
            </summary>
      <param name="userAction">The <see cref="P:C1.C1Preview.InputAction.UserAction" /> of the new instance.</param>
      <param name="actionHandler">The <see cref="P:C1.C1Preview.InputAction.ActionHandler" /> of the new instance.</param>
      <returns>The index of the new element in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Insert(System.Int32,C1.C1Preview.InputAction)">
      <summary>
            Inserts an element into the current collection.
            </summary>
      <param name="index">The index where to insert the element.</param>
      <param name="inputAction">The element to insert.</param>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Remove(C1.C1Preview.InputAction)">
      <summary>
            Removes an element from the current collection.
            </summary>
      <param name="inputAction">The element to remove.</param>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.IndexOf(C1.C1Preview.InputAction)">
      <summary>
            Returns the index of the specified element in the current collection.
            </summary>
      <param name="inputAction">The element to return the index of.</param>
      <returns>The index of the specified element in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.InputActionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderInputBase">
      <summary>
            The abstract base class for all <b>Preview Forms</b> input controls. 
            Derived types represent active UI elements embedded in a <see cref="T:C1.C1Preview.C1PrintDocument" />
            when that document is shown by a supporting viewer (e.g. <b>C1.Win.C1Preview.C1PrintPreviewControl</b>).
            </summary>
      <remarks>
            Derived classes include
            <see cref="T:C1.C1Preview.RenderInputButton" />,
            <see cref="T:C1.C1Preview.RenderInputCheckBox" />,
            <see cref="T:C1.C1Preview.RenderInputComboBox" />,
            <see cref="T:C1.C1Preview.RenderInputRadioButton" /> and
            <see cref="T:C1.C1Preview.RenderInputText" />.
            </remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="T:C1.C1Preview.IValueProvider">
      <summary>
            Represents an object that exposes a <see cref="P:C1.C1Preview.IValueProvider.Value" /> property.
            Provides an event fired when the value has changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IValueProvider.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="E:C1.C1Preview.IValueProvider.ValueChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Preview.IValueProvider.Value" /> has changed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputBase" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.ShouldSerializeCursor">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderInputBase.Cursor" /> should be serialized.
            </summary>
      <returns>True if the cursor should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetDefaultFlags">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetDefaultCursor">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.InitRenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.SetSplitHorzBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.SetSplitVertBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderInputBase" />, also copies <see cref="T:C1.C1Preview.RenderInputBase" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetValue">
      <summary>
            Gets the input value.
            </summary>
      <returns>The input value.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.SetValue(System.Object)">
      <summary>
            Sets the input value.
            </summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.OnValueChanged">
      <summary>
            Called when the <see cref="P:C1.C1Preview.IValueProvider.Value" /> has changed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetControlType">
      <summary>
            Gets the control type.
            </summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Initializes the input control.
            </summary>
      <param name="control">The control to initialize.</param>
      <param name="context">Context that should be used to get calculated style properties.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>
            Returns the preffered size of the input control in pixels.
            </summary>
      <param name="context">Context that should be used to get calculated style properties.</param>
      <param name="width">OUT: Width of the control.</param>
      <param name="height">OUT: Height of the control.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.IsControlNeededParentForWmPrint">
      <summary>
            Called to test whether the underlying control requires a parent
            to correctly process the WM_PRINT message.
            </summary>
      <returns>True (override this method to change that).</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.IsResetSelectionNeeded">
      <summary>
            Called to test whether the selection on the parent control
            should be reset when the underlying control receives input focus.
            </summary>
      <returns>False (override this method to change that).</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.CreateControl(C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Creates the underlying <see cref="T:System.Windows.Forms.Control" />.
            </summary>
      <param name="context">Context that should be used to to get calculated style properties.</param>
      <returns>The newly created control.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.ReadOnly">
      <summary>
            Gets or sets a value indicating whether the current control is read-only. 
            For read-only controls, all input actions are still fired, but the control's 
            value cannot be changed. The default is <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.Printable">
      <summary>
            Gets or sets a value indicating whether the current control is printed. 
            If <b>true</b> (default), the content of the control is printed normally. 
            Otherwise, it is not printed or exported. This might be used for example 
            to provide help (invisible in the printed document)
            for form fields that are to be filled.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.StatusText">
      <summary>
            Gets or sets the text that appears in the status line of the preview control
            when the current control has focus.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.ToolTip">
      <summary>
            Gets or sets the tooltip associated with the current control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.Cursor">
      <summary>
            Gets or sets the cursor used when the mouse is over the current control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.InputActions">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.InputAction" /> objects
            describing the pairs of supported user actions and handlers associated with those actions.
            </summary>
      <remarks>
            This property always returns a non-<b>null</b> input actions' collection,
            initializing it if it has not been initialized yet.
            Use <see cref="P:C1.C1Preview.RenderInputBase.HasInputActions" /> to test whether there are any input actions
            without initializing <see cref="P:C1.C1Preview.RenderInputBase.InputActions" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.HasInputActions">
      <summary>
            Gets a value indicating whether the current object's <see cref="P:C1.C1Preview.RenderInputBase.InputActions" />
            collection has been initialized and contains one or more fragments.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputButton">
      <summary>
            Represents a <b>Preview Forms</b> pushbutton in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            When the document is shown by a supporting viewer (e.g. <b>C1.Win.C1Preview.C1PrintPreviewControl</b>),
            produces an active pushbutton control.
            </summary>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.RenderInputButtonBase" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="T:C1.C1Preview.RenderInputButtonBase">
      <summary>
            The abstract base class for button-like input controls (button, check box, radio button).
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputButtonBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.ShouldSerializeTextAlign">
      <summary>
            Indicates whether <see cref="P:C1.C1Preview.RenderInputButtonBase.TextAlign" /> should be serialized.
            </summary>
      <returns>True if TextAlign should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.GetDefaultCursor">
      <summary>
            Gets the default cursor.
            </summary>
      <returns>
        <see cref="P:System.Windows.Forms.Cursors.Hand" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.InitRenderObject">
      <summary>
            Initializes the render object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.GetDefaultTextAlign">
      <summary>
            Gets the default text alignment.
            </summary>
      <returns>
        <see cref="F:System.Drawing.ContentAlignment.MiddleCenter" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method,
            then copies <see cref="T:C1.C1Preview.RenderInputButtonBase" />-specific properties if source is a <see cref="T:C1.C1Preview.RenderInputButtonBase" />.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Initializes the control.
            </summary>
      <param name="control">The <see cref="T:System.Windows.Forms.Control" /> to initialize.</param>
      <param name="context">Context that should be used to get calculated style properties.</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputButtonBase.Text">
      <summary>
            Gets or sets the text of the button.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputButtonBase.TextAlign">
      <summary>
            Gets or sets the alignment of the button text.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputButton" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputButton" /> class,
            assigning the button text.
            </summary>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderInputButton" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderInputButton" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.GetValue">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.SetValue(System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.GetControlType">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            For internal use.
            </summary>
      <param name="control">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>
            Returns the preffered size of the control in pixels.
            </summary>
      <param name="context">Context that should be used to get calculated style properties.</param>
      <param name="width">OUT: Width of the control.</param>
      <param name="height">OUT: Height of the control.</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputButton.AcceptButton">
      <summary>
            Gets or sets a value indicating whether the current button should function
            as an "Accept button", so that its action is executed when the <b>ENTER</b> is pressed
            in a supporting viewer control showing the document containing this button.
            </summary>
    </member>
    <member name="T:C1.C1Preview.CheckMarkStyleEnum">
      <summary>
            Describes the type of mark which is used in the ScalableCheckBox
            and RenderInputCheckBoxOptions.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CheckMarkStyleEnum.Default">
      <summary>
            The default style, as in Windows.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CheckMarkStyleEnum.Cross">
      <summary>
            Cross, as in MS Word.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputCheckBox">
      <summary>
            Represents a checkbox.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputCheckBox" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputCheckBox" /> class.
            </summary>
      <param name="text">The text to use as the checkbox label.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderInputCheckBox" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderInputCheckBox" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.InitRenderObject">
      <summary>
            Initializes the render object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetDefaultTextAlign">
      <summary>
            Gets the default text alignment.
            </summary>
      <returns>
        <see cref="F:System.Drawing.ContentAlignment.MiddleLeft" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method,
            then copies <see cref="T:C1.C1Preview.RenderInputCheckBox" />-specific properties if source is a <see cref="T:C1.C1Preview.RenderInputCheckBox" />.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetValue">
      <summary>
            Gets the checkbox value.
            </summary>
      <returns>True if the checkbox is checked, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.SetValue(System.Object)">
      <summary>
            Sets the checkbox value.
            </summary>
      <param name="value">A <see cref="T:System.Boolean" /> value.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetControlType">
      <summary>
            Gets the checkbox control type.
            </summary>
      <returns>
        <see cref="T:C1.C1Preview.ScalableCheckBox" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            Initializes the control.
            </summary>
      <param name="control">The <see cref="T:C1.C1Preview.ScalableCheckBox" /> to initialize.</param>
      <param name="context">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>
            Gets the desired (auto) size of the control.
            </summary>
      <param name="context">Context that should be used to get calculated style properties.</param>
      <param name="width">OUT: the width of the control.</param>
      <param name="height">OUT: the height of the control.</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.Checked">
      <summary>
            Gets or sets the value indicating whether the check box is checked. 
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.CheckMarkStyle">
      <summary>
            Gets or sets the visual style of the check mark used by the control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.CheckAlign">
      <summary>
            Gets or sets the horizontal and vertical alignment of the check box on the control.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBoxItem">
      <summary>
            Represents an item in the <see cref="P:C1.C1Preview.RenderInputComboBox.Items" />
            collection of a <see cref="T:C1.C1Preview.RenderInputComboBox" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderInputComboBoxItem.Text" /> property.
            </summary>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputComboBoxItem.Text" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderInputComboBoxItem.Text" /> and <see cref="P:C1.C1Preview.RenderInputComboBoxItem.UserData" /> properties.
            </summary>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputComboBoxItem.Text" /> property.</param>
      <param name="userData">Arbitrary value to assign to the <see cref="P:C1.C1Preview.RenderInputComboBoxItem.UserData" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.AssignFrom(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.ToString">
      <summary>
            Returns the string representation of the current object.
            </summary>
      <returns>The value of the <see cref="P:C1.C1Preview.RenderInputComboBoxItem.Text" /> property.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItem.Text">
      <summary>
            Gets or sets a text representing the current item in the dropdown list of a <see cref="T:C1.C1Preview.RenderInputComboBox" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItem.UserData">
      <summary>
            Gets or sets arbitrary user data associated with the current item.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBoxItemCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> objects.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderInputComboBox.Items" />
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Add(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> to the current collection.
            </summary>
      <param name="item">The item to add.</param>
      <returns>Index of the added item in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Add(System.String)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderInputComboBoxItem" />, initializing its <see cref="P:C1.C1Preview.RenderInputComboBoxItem.Text" />
            with the passed string, and adds it to the current collection.
            </summary>
      <param name="itemText">The text of the item to add.</param>
      <returns>Index of the added item in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Insert(System.Int32,C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
            Inserts a <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> into the current collection.
            </summary>
      <param name="index">The position where to insert the item.</param>
      <param name="item">The item to insert.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Remove(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
            Removes a <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> from the current collection.
            </summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.IndexOf(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
            Returns the index of a <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> in the current collection.
            </summary>
      <param name="item">The item to search for.</param>
      <returns>The index of the specified item, or <b>-1</b> if none was found.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItemCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBox">
      <summary>
            Represents a <b>Preview Forms</b> combobox (a textbox with an attached dropdown) in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            When the document is shown by a supporting viewer (e.g. <b>C1.Win.C1Preview.C1PrintPreviewControl</b>),
            produces an active combobox control.
            </summary>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.RenderInputComboBoxItem" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputComboBox" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputComboBox" /> class,
            assigning <see cref="P:C1.C1Preview.RenderInputComboBox.Items" /> from the specified strings.
            </summary>
      <param name="items">The strings that are used to initialize the <see cref="P:C1.C1Preview.RenderInputComboBox.Items" /> array.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderInputComboBox" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderInputComboBox" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetDefaultCursor">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderInputComboBox" />, also copies <see cref="T:C1.C1Preview.RenderInputComboBox" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetValue">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.SetValue(System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetControlType">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            For internal use.
            </summary>
      <param name="control">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.IsResetSelectionNeeded">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>
            Returns the preffered size of the control in pixels.
            </summary>
      <param name="context">Context that should be used to get calculated style properties.</param>
      <param name="width">OUT: Width of the control.</param>
      <param name="height">OUT: Height of the control.</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.Text">
      <summary>
            Gets or sets the string shown in the textbox control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.PasswordChar">
      <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is <b>'\0'</b>, which disables hiding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.DropDownStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.ComboBoxStyle" /> of the combobox.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.Items">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.RenderInputComboBoxItem" /> objects
            representing the items in the combobox dropdown.
            </summary>
      <remarks>
            This method always returns a non-<b>null</b><see cref="T:C1.C1Preview.RenderInputComboBoxItemCollection" />,
            initializing it if it did not exist.
            To test whether a combobox already contains items
            without creating the <see cref="P:C1.C1Preview.RenderInputComboBox.Items" /> collection,
            use the <see cref="P:C1.C1Preview.RenderInputComboBox.HasItems" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.HasItems">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderInputComboBox.Items" /> collection
            has been initialized and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.AcceptsReturn">
      <summary>
            Obsolete. Not supported.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.BorderVisible">
      <summary>
            Gets or sets a value indicating whether to draw borders around the current
            input control.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputRadioButton">
      <summary>
            Represents a <b>Preview Forms</b> radio button in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            When the document is shown by a supporting viewer (e.g. <b>C1.Win.C1Preview.C1PrintPreviewControl</b>),
            produces an active radio button control.
            </summary>
      <remarks>
            Several <see cref="T:C1.C1Preview.RenderInputRadioButton" /> objects can be combined into a group,
            in which case checking one button will un-check other buttons in that group
            (see the <see cref="P:C1.C1Preview.RenderInputRadioButton.GroupIndex" /> property for details).
            </remarks>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.RenderInputButtonBase" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputRadioButton" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputRadioButton" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> property.
            </summary>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputRadioButton" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderObject.Name" /> and <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> properties.
            </summary>
      <param name="name">A string to assign to the <see cref="P:C1.C1Preview.RenderObject.Name" /> property.</param>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputRadioButton" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderObject.Name" />, <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" />
            and <see cref="P:C1.C1Preview.RenderInputRadioButton.GroupIndex" /> properties.
            </summary>
      <param name="name">A string to assign to the <see cref="P:C1.C1Preview.RenderObject.Name" /> property.</param>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> property.</param>
      <param name="groupIndex">A value to assign to the <see cref="P:C1.C1Preview.RenderInputRadioButton.GroupIndex" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputRadioButton" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> and <see cref="P:C1.C1Preview.RenderInputRadioButton.GroupIndex" /> properties.
            </summary>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputButtonBase.Text" /> property.</param>
      <param name="groupIndex">A value to assign to the <see cref="P:C1.C1Preview.RenderInputRadioButton.GroupIndex" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderInputRadioButton" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderInputRadioButton" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.InitRenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetDefaultTextAlign">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderInputRadioButton" />, also copies <see cref="T:C1.C1Preview.RenderInputRadioButton" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetValue">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.SetValue(System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetControlType">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            For internal use.
            </summary>
      <param name="control">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>
            Returns the preffered size of the control in pixels.
            </summary>
      <param name="context">Context that should be used to get calculated style properties.</param>
      <param name="width">OUT: Width of the control.</param>
      <param name="height">OUT: Height of the control.</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.Checked">
      <summary>
            Gets or sets a value indicating whether the current radio button is checked.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.CheckAlign">
      <summary>
            Gets or sets the alignment of the checkbox relative to the text of the current radio button.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.GroupIndex">
      <summary>
            Gets or sets the group index of the current radio button.
            Only one radio button in a group can be checked at any time.
            </summary>
      <remarks>
            By default, all <see cref="T:C1.C1Preview.RenderInputRadioButton" /> objects are placed in
            a single group with the <b>GroupIndex</b> set to <b>-1</b>.
            </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderInputText">
      <summary>
            Represents a <b>Preview Forms</b> textbox in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            When the document is shown by a supporting viewer (e.g. <b>C1.Win.C1Preview.C1PrintPreviewControl</b>),
            produces an active textbox control.
            </summary>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="M:C1.C1Preview.RenderInputText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputText" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderInputText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderInputText.Text" /> property.
            </summary>
      <param name="text">A string to assign to the <see cref="P:C1.C1Preview.RenderInputText.Text" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderInputText" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderInputText" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetDefaultCursor">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderInputText" />, also copies <see cref="T:C1.C1Preview.RenderInputText" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetValue">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.SetValue(System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetControlType">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            For internal use.
            </summary>
      <param name="control">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.IsResetSelectionNeeded">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>
            Returns the preffered size of the control in pixels.
            </summary>
      <param name="context">Context that should be used to get calculated style properties.</param>
      <param name="width">OUT: Width of the control.</param>
      <param name="height">OUT: Height of the control.</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.Text">
      <summary>
            Gets or sets the text shown in the textbox.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.PasswordChar">
      <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is <b>'\0'</b>, which disables hiding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.AcceptsReturn">
      <summary>
            Obsolete. Not supported.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.BorderVisible">
      <summary>
            Gets or sets a value indicating whether to draw borders around the current
            input control.
            </summary>
    </member>
    <member name="T:C1.C1Preview.BordersSplitMode">
      <summary>
            Specifies how borders are drawn when the object is split between pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BordersSplitMode.None">
      <summary>
            Borders are not drawn where the object is split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BordersSplitMode.Square">
      <summary>
            Square borders are drawn where the object is split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BordersSplitMode.Round">
      <summary>
            Borders are drawn where the object is split.
            If the border is round (see <see cref="P:C1.C1Preview.IBorders.RadiusX" />,
            <see cref="P:C1.C1Preview.IBorders.RadiusY" />),
            round borders are drawn where the object is split.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitBehaviorEnum">
      <summary>
            Defines the splitting behavior of a render object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.Never">
      <summary>
            The object should not be split between pages
            (i.e. should always be kept together on a single page).
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded">
      <summary>
            The object can be split if it does not fit onto the current page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfLarge">
      <summary>
            The object can be split only if it is too large to fit on an empty 
            page. In that case, the object is split immediately. Otherwise, a 
            new page is started and the object is placed on it without 
            splitting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitNewPage">
      <summary>
            If the object does not fit on the current page (column),
            a new page (column) is started; if the object does not fit
            on that page (column), it is split as needed after that.
            </summary>
    </member>
    <member name="T:C1.C1Preview.BreakEnum">
      <summary>
            Defines the various breaks which can be forced before or after render object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.None">
      <summary>
            No break.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Page">
      <summary>
            New page should be started.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Column">
      <summary>
            New column should be started.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Line">
      <summary>
            New line on inline flow should be started.
            </summary>
    </member>
    <member name="T:C1.C1Preview.VisibilityEnum">
      <summary>
            Specifies the visibility of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Visible">
      <summary>
            Object is visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Hidden">
      <summary>
            Object is not visible, but takes up space and affects the layout of other objects as if it were visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Collapse">
      <summary>
            Object is not visible, its size is zero and it does not affect the layout of other objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderObjectCollection">
      <summary>
            Represents the collection of RenderObject objects.
            </summary>
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.RenderObject" /> objects.
            Used to store objects in the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of a <see cref="T:C1.C1Preview.C1PrintDocument" />
            (see <see cref="P:C1.C1Preview.DocumentBody.Children" />),
            and child objects contained in another <see cref="T:C1.C1Preview.RenderObject" />
            (see <see cref="P:C1.C1Preview.RenderObject.Children" />).
            </summary>
      <seealso cref="P:C1.C1Preview.DocumentBody.Children" />
      <seealso cref="P:C1.C1Preview.RenderObject.Children" />
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnClearComplete">
      <summary>
            Called after the collection has been cleared.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Called after an item has been set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
            Called when an item is about to be set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.GetItemType">
      <summary>
            Returns typeof(<see cref="T:C1.C1Preview.RenderObject" />).
            </summary>
      <returns>typeof(<see cref="T:C1.C1Preview.RenderObject" />).</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.Add(C1.C1Preview.RenderObject)">
      <summary>
            Adds the specified <see cref="T:C1.C1Preview.RenderObject" /> to the current collection.
            </summary>
      <param name="ro">The object to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.Remove(C1.C1Preview.RenderObject)">
      <summary>
            Removes the specified <see cref="T:C1.C1Preview.RenderObject" /> from the current collection.
            </summary>
      <param name="ro">The object to remove.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.Insert(System.Int32,C1.C1Preview.RenderObject)">
      <summary>
            Inserts the specified <see cref="T:C1.C1Preview.RenderObject" /> into the current collection.
            </summary>
      <param name="index">The index where to insert the object.</param>
      <param name="ro">The object to insert.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.IndexOfName(System.String)">
      <summary>
            Searches the current collection for an object with the specified <see cref="P:C1.C1Preview.RenderObject.Name" />.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>Index of the object in the current collection, or -1 if no object was found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindByName(System.String)">
      <summary>
            Searches the current collection for an object with the specified <see cref="P:C1.C1Preview.RenderObject.Name" />.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>The object in the current collection, or null if no object was found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindByAnchorName(System.String,C1.C1Preview.C1Anchor@)">
      <summary>
            Searches the current collection for an object that contains an anchor
            with the specified name in its <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection.
            </summary>
      <param name="anchorName">The name of the anchor to search for.</param>
      <param name="anchor">OUT: contains the <see cref="T:C1.C1Preview.C1Anchor" /> object with the specified name.</param>
      <returns>Returns the found render object or null if not found.</returns>
      <returns>The object containing the specified anchor, or null if no object was found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindById(System.Int32)">
      <summary>
            Searches the current collection for a <see cref="T:C1.C1Preview.RenderObject" />
            with the specified value of the <see cref="P:C1.C1Preview.RenderObject.Id" /> property.
            </summary>
      <param name="id">The Id to search for.</param>
      <returns>The render object with the specified Id, or null of no such object was found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindByOriginal(C1.C1Preview.RenderObject)">
      <summary>
            Searches the current collection for a <see cref="T:C1.C1Preview.RenderObject" />
            with the specified vlaue of the <see cref="P:C1.C1Preview.RenderObject.Original" /> property.
            </summary>
      <param name="original">The original object to search for.</param>
      <returns>The render object with the specified <see cref="P:C1.C1Preview.RenderObject.Original" />, or null of no such object was found.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderObject" /> with the specified <see cref="P:C1.C1Preview.RenderObject.Name" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.RenderObject" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderParagraph">
      <summary>
            Represents a paragraph in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Paragraphs can contain inline text and images, possibly rendered using different styles.
            The content of a paragraph is accessible via the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> property.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextBase">
      <summary>
            The abstract base class for render object types representing text
            (<see cref="T:C1.C1Preview.RenderText" /> and <see cref="T:C1.C1Preview.RenderParagraph" />) in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderTextBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextBase.ShouldSerializeTabPositions">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderTextBase" />, also copies <see cref="T:C1.C1Preview.RenderTextBase" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.HasText">
      <summary>
            Gets a value indicating whether the current object represents a non-empty text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.TextLength">
      <summary>
            Gets the lenght of text represented by the current object.
            (Do not use this property to test whether a non-empty text is assigned to the current object,
            use <see cref="P:C1.C1Preview.RenderTextBase.HasText" /> instead.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.TabPositions">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.TabPosition" /> objects representing tab stops
            associated with the current text.
            </summary>
      <remarks>
            This method always returns a non-<b>null</b><see cref="T:C1.C1Preview.TabPositionCollection" />,
            initializing it if it did not exist.
            To test whether the current object has any tab stops defined
            without creating the <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" /> collection,
            use the <see cref="P:C1.C1Preview.RenderTextBase.HasTabPositions" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.HasTabPositions">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" /> collection
            has been initialized and contains one or more elements.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderParagraph" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderParagraph" /> class,
            specifying a <see cref="T:C1.C1Preview.Style" /> to use.
            </summary>
      <param name="style">A <see cref="T:C1.C1Preview.Style" /> to use
            (the <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" /> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1Preview.RenderObject.Style" />).</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderParagraph" /> class,
            specifying a <see cref="T:System.Drawing.Font" /> to use.
            </summary>
      <param name="font">The default font for the current paragraph.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderParagraph" /> class,
            specifying the default font and text color.
            </summary>
      <param name="font">The default font for the current paragraph.</param>
      <param name="textColor">The default text color for the current paragraph.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderParagraph" /> class,
            specifying the default font, text color and horizontal alignment.
            </summary>
      <param name="font">The default font for the current paragraph.</param>
      <param name="textColor">The default text color for the current paragraph.</param>
      <param name="horzAlign">The horizontal alignment for the current paragraph.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderParagraph" /> class,
            specifying the default font and horizontal alignment.
            </summary>
      <param name="font">The default font for the current paragraph.</param>
      <param name="horzAlign">The horizontal alignment for the current paragraph.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderParagraph" /> class,
            specifying the horizontal alignment.
            </summary>
      <param name="horzAlign">The horizontal alignment for the current paragraph.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderParagraph" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderParagraph" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderTextBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderParagraph" />, also copies <see cref="T:C1.C1Preview.RenderParagraph" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.Content">
      <summary>
            Gets the <see cref="T:C1.C1Preview.ParagraphObjectCollection" /> representing
            the content (text and images) of the current paragraph.
            </summary>
      <remarks>
            This method always returns a non-<b>null</b><see cref="T:C1.C1Preview.ParagraphObjectCollection" />,
            initializing it if it did not exist.
            To test whether a paragraph already contains content
            without creating the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> collection,
            use the <see cref="P:C1.C1Preview.RenderParagraph.HasContent" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.HasContent">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> collection
            has been initialized and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.HasText">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> collection
            has been initialized and contains one or more elements.
            <para>
            This property is an alias for the <see cref="P:C1.C1Preview.RenderParagraph.HasContent" /> property.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.TextLength">
      <summary>
            Gets the count of characters in the current paragraph.
            Each non-text object (such as <see cref="T:C1.C1Preview.ParagraphImage" />)
            counts as one character.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.Text">
      <summary>
            Gets or sets the text of the current paragraph.
            </summary>
      <remarks>
        <para>
            The getter for this property concatenates and returns 
            the texts of all <see cref="T:C1.C1Preview.ParagraphText" /> objects
            in the current paragraph.
            </para>
        <para>
            The setter clears the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of the current paragraph,
            and then adds the specified <paramref name="value" />
            as a single <see cref="T:C1.C1Preview.ParagraphText" />.
            </para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.ParagraphObject">
      <summary>
            The abstract base class for inline text and images, rendered using a single style,
            in the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of a <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            </summary>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphObject" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.ShouldSerializeStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.ParagraphObject.Style" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.ParagraphObject.Style" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.GetLength">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.CreateSame">
      <summary>
            Creates instance of object same type as current <see cref="T:C1.C1Preview.ParagraphObject" /> object.
            </summary>
      <returns>Created paragraph object.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ParagraphObject" /> to the current object.
            </summary>
      <param name="source">The object to copy the properties from.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.ParagraphObject" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.ParagraphObject" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.ClearCalculatedValues(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="clearDataBindingDependent">
      </param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.ResolveCalculatedValues">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.GetCalculatedValue(System.Int32,System.Object@)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.GetCalculatedValue(System.Int32)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.SetCalculatedValue(System.Int32,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.HasCalculatedValue(System.Int32)">
      <summary>
            For internal use.
            </summary>
      <param name="propKey">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Hyperlink">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.C1Hyperlink" /> associated with the current paragraph object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Style">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> associated with the current paragraph object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.ParagraphObjectCollection" /> containing
            the current paragraph object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.RenderParagraph">
      <summary>
            Gets the <see cref="P:C1.C1Preview.ParagraphObject.RenderParagraph" /> containing
            the current paragraph object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> containing
            the current paragraph object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.IndexInOwner">
      <summary>
            Gets the index of the current paragraph object
            in the containing <see cref="T:C1.C1Preview.ParagraphObjectCollection" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.PositionInText">
      <summary>
            Gets the character 0-based position of the current paragraph object
            in the text of the paragraph.
            <para>
            Each non-text paragraph object (<see cref="T:C1.C1Preview.ParagraphImage" />)
            counts as one character.
            </para></summary>
      <seealso cref="P:C1.C1Preview.RenderParagraph.TextLength" />
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.TextLength">
      <summary>
            Gets the length of the current paragraph object in characters.
            For non-text objects (<see cref="T:C1.C1Preview.ParagraphImage" />), this
            property returns <b>1</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.UserData">
      <summary>
            Gets or sets arbitrary data associated with the current paragraph object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.CalculatedValues">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.HasCalculatedValues">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.FirstFragment">
      <summary>
            Gets the first <see cref="T:C1.C1Preview.RenderParagraphFragment" /> of all fragments
            produced by the containing <see cref="P:C1.C1Preview.ParagraphObject.RenderParagraph" /> that contains
            the current <see cref="T:C1.C1Preview.ParagraphObject" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.LastFragment">
      <summary>
            Gets the last <see cref="T:C1.C1Preview.RenderParagraphFragment" /> of all fragments
            produced by the containing <see cref="P:C1.C1Preview.ParagraphObject.RenderParagraph" /> that contains
            the current <see cref="T:C1.C1Preview.ParagraphObject" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphText">
      <summary>
            Represents a run of text, rendered using a single style,
            in the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of a <see cref="T:C1.C1Preview.RenderParagraph" />.
            </summary>
      <seealso cref="T:C1.C1Preview.ParagraphObject" />
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the <see cref="T:C1.C1Preview.Style" />.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="style">A <see cref="T:C1.C1Preview.Style" /> to use
            (the <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" /> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1Preview.RenderObject.Style" />).</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the <see cref="T:C1.C1Preview.Style" />.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the font.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="font">The font to use.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the text color.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="textColor">The text color to use.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the text position.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="textPosition">The text position to use.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the font and text color.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="font">The font to use.</param>
      <param name="textColor">The text color to use.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the font and text position.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="font">The font to use.</param>
      <param name="textPosition">The text position to use.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the text color and position.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="textColor">The text color to use.</param>
      <param name="textPosition">The text position to use.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphText" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property,
            and specifying the font, text color and position.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.ParagraphText.Text" /> property of the current object.</param>
      <param name="font">The font to use.</param>
      <param name="textColor">The text color to use.</param>
      <param name="textPosition">The text position to use.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.ParagraphText" /> object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.ParagraphText" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.GetLength">
      <summary>
            Returns the length of this ParagraphText object.
            </summary>
      <returns>The text length.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ParagraphObject" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.ResolveCalculatedValues">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphText.Text">
      <summary>
            Gets or sets the text of the current <see cref="T:C1.C1Preview.ParagraphText" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphImage">
      <summary>
            Represents an inline image
            in the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> of a <see cref="T:C1.C1Preview.RenderParagraph" />.
            </summary>
      <seealso cref="T:C1.C1Preview.ParagraphObject" />
      <seealso cref="T:C1.C1Preview.ParagraphText" />
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphImage" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphImage" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphImage.Image" /> property,
            and specifying the <see cref="T:C1.C1Preview.Style" />.
            </summary>
      <param name="image">An image assigned to the <see cref="P:C1.C1Preview.ParagraphImage.Image" /> property of the current object.</param>
      <param name="style">A <see cref="T:C1.C1Preview.Style" /> to use
            (the <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" /> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1Preview.RenderObject.Style" />).</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphImage" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphImage.Image" /> property.
            </summary>
      <param name="image">An image assigned to the <see cref="P:C1.C1Preview.ParagraphImage.Image" /> property of the current object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ParagraphImage" /> class,
            assigning the <see cref="P:C1.C1Preview.ParagraphImage.ImageName" /> property.
            </summary>
      <param name="imageName">A string that is assigned to the <see cref="P:C1.C1Preview.ParagraphImage.ImageName" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.ParagraphImage" /> object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.ParagraphImage" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.GetLength">
      <summary>
            Returns the length of the current paragraph object.
            </summary>
      <returns>1.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ParagraphObject" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.ParagraphImage.Image">
      <summary>
            Gets or sets an <see cref="T:System.Drawing.Image" /> that is
            rendered by the current <see cref="T:C1.C1Preview.ParagraphImage" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphImage.ImageName">
      <summary>
            Gets or sets the name of an image that is 
            rendered by the current <see cref="T:C1.C1Preview.ParagraphImage" /> object.
            When the current object renders, the actual image is retrieved by this name
            from the <see cref="P:C1.C1Preview.C1PrintDocument.Dictionary" /> of the containing <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphObjectCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.ParagraphObject" /> objects
            that is the <see cref="P:C1.C1Preview.RenderParagraph.Content" />
            of a <see cref="T:C1.C1Preview.RenderParagraph" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.GetItemType">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.Add(C1.C1Preview.ParagraphObject)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.ParagraphObject" /> to the current paragraph content.
            </summary>
      <param name="po">The <see cref="T:C1.C1Preview.ParagraphObject" /> to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.Remove(C1.C1Preview.ParagraphObject)">
      <summary>
            Removes a <see cref="T:C1.C1Preview.ParagraphObject" /> from the current paragraph content.
            </summary>
      <param name="po">The object to remove.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String)">
      <summary>
            Adds a text string to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.Style)">
      <summary>
            Adds a text string with the specified style to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="style">The style to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text and style, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font)">
      <summary>
            Adds a text string with the specified font to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text and font, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color)">
      <summary>
            Adds a text string with the specified text color to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text and text color, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds a text string with the specified text position to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text and text position, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Adds a text string with the specified font and text color to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text, font and text color, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds a text string with the specified font and text position to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text, font and text position, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds a text string with the specified text color and position to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text, text color and position, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds a text string with the specified font, text color and position to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text, font, text color and position, and adds it
            to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String)">
      <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="anchorName">The name of the anchor which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="anchorName" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String,C1.C1Preview.Style)">
      <summary>
            Adds a text hyperlink with a specified style to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="anchorName">The name of the anchor which is the target of the hyperlink.</param>
      <param name="style">A style used to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text and style,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="anchorName" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget)">
      <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="target">A <see cref="T:C1.C1Preview.C1LinkTarget" /> which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="target" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget,C1.C1Preview.Style)">
      <summary>
            Adds a text hyperlink with a specified style to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="target">A <see cref="T:C1.C1Preview.C1LinkTarget" /> which is the target of the hyperlink.</param>
      <param name="style">A style used to render the string.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text and style,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="target" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.RenderObject)">
      <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="renderObject">A <see cref="T:C1.C1Preview.RenderObject" /> which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="renderObject" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.ParagraphObject)">
      <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
      <param name="text">The text string to add.</param>
      <param name="paragraphObject">A <see cref="T:C1.C1Preview.ParagraphObject" /> which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphText" /> object representing the specified text string,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphText" />,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="paragraphObject" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,System.String)">
      <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
      <param name="image">The image to add.</param>
      <param name="anchorName">The name of the anchor which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphImage" /> object representing the specified image,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphImage" />,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="anchorName" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.C1LinkTarget)">
      <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
      <param name="image">The image to add.</param>
      <param name="target">A <see cref="T:C1.C1Preview.C1LinkTarget" /> which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphImage" /> object representing the specified image,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphImage" />,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="target" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.RenderObject)">
      <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
      <param name="image">The image to add.</param>
      <param name="renderObject">A <see cref="T:C1.C1Preview.RenderObject" /> which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphImage" /> object representing the specified image,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphImage" />,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="renderObject" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.ParagraphObject)">
      <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
      <param name="image">The image to add.</param>
      <param name="paragraphObject">A <see cref="T:C1.C1Preview.ParagraphObject" /> which is the target of the hyperlink.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphImage" /> object representing the specified image,
            associated with the specified hyperlink.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphImage" />,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" /> on that object to a
            <see cref="T:C1.C1Preview.C1Hyperlink" /> initialized with <paramref name="paragraphObject" />,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image)">
      <summary>
            Adds an image to the current paragraph content.
            </summary>
      <param name="image">The image to add.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphImage" /> object representing the specified image.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphImage" />,
            initializes it with the specified image,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.String)">
      <summary>
            Adds an image to the current paragraph content.
            </summary>
      <param name="imageName">A string that is assigned to the <see cref="P:C1.C1Preview.ParagraphImage.ImageName" /> property.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphImage" /> object representing the specified named image.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphImage" />,
            initializes it with the specified image name,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
            Adds an image with a specified style to the current paragraph content.
            </summary>
      <param name="image">The image to add.</param>
      <param name="style">A style used to render the image.</param>
      <returns>A <see cref="T:C1.C1Preview.ParagraphImage" /> object representing the specified image.</returns>
      <remarks>
            This method creates a <see cref="T:C1.C1Preview.ParagraphImage" />,
            initializes it with the specified image and style,
            and adds it to the current collection.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.ParagraphObjectCollection.RenderParagraph">
      <summary>
            Gets the containing <see cref="T:C1.C1Preview.RenderParagraph" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObjectCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.ParagraphObject" /> at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.ParagraphObject" /> at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderRichText">
      <summary>
            Represents an <b>RTF</b> text in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRichText" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRichText" /> class,
            using the specified RTF string and style.
            </summary>
      <param name="rtf">A <b>RTF</b>-formatted string assigned to the <see cref="P:C1.C1Preview.RenderRichText.Rtf" /> property.</param>
      <param name="style">A <see cref="T:C1.C1Preview.Style" /> to use
            (the <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" /> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1Preview.RenderObject.Style" />).</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRichText" /> class,
            using the specified RTF string and style.
            </summary>
      <param name="rtf">A <b>RTF</b>-formatted string assigned to the <see cref="P:C1.C1Preview.RenderRichText.Rtf" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderRichText" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderRichText" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetDefaultFlags">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetDefaultSplitVertBehavior">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetDefaultWidth">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.SetWidth(C1.C1Preview.Unit)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderRichText" />, also copies <see cref="T:C1.C1Preview.RenderRichText" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.String)">
      <summary>
            Loads the content of the current <see cref="T:C1.C1Preview.RenderRichText" /> from a disk file
            containing <b>RTF</b>-formatted data.
            </summary>
      <param name="fileName">The name of the file to load.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.String,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
            Loads the content of the current <see cref="T:C1.C1Preview.RenderRichText" /> from a disk file
            containing data in a specified format.
            </summary>
      <param name="fileName">The name of the file to load.</param>
      <param name="streamType">The type of data in the file.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.IO.Stream)">
      <summary>
            Loads the content of the current <see cref="T:C1.C1Preview.RenderRichText" /> from a stream
            containing <b>RTF</b>-formatted data.
            </summary>
      <param name="stream">The stream to load data from.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
            Loads the content of the current <see cref="T:C1.C1Preview.RenderRichText" /> from a stream
            containing data in a specified format.
            </summary>
      <param name="stream">The stream to load data from.</param>
      <param name="streamType">The type of data in the stream.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetApproximateCountOfFragmentsToProcess">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.HasRtf">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderRichText.Rtf" /> property
            has been initialized and has non-zero length.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.Rtf">
      <summary>
            Gets or sets the <b>RTF</b>-formatted text represented by the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.DetectUrls">
      <summary>
            Gets or sets a value indicating whether or not the current <see cref="T:C1.C1Preview.RenderRichText" />
            will automatically format Uniform Resource Locators (URLs) 
            when those are found in text assigned to the <see cref="P:C1.C1Preview.RenderRichText.Rtf" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.TextLength">
      <summary>
            Gets the "real" length of the text assigned to the <see cref="P:C1.C1Preview.RenderRichText.Rtf" /> property.
            Only the actual text characters are counted, <b>RTF</b> tags are not included in the count.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ShapeProps">
      <summary>
            The abstract base class representing the geometric properties of a shape.
            Used by <see cref="T:C1.C1Preview.RenderShapeBase" /> and derived classes.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ShapeProps.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ShapeProps" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ShapeProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ShapeProps" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="T:C1.C1Preview.RenderShapeBase">
      <summary>
            The abstract base class for classes representing geometric shapes (lines, polygons and so on)
            in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <seealso cref="T:C1.C1Preview.RenderLineBase" />
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="T:C1.C1Preview.RenderRoundRectangle" />
    </member>
    <member name="M:C1.C1Preview.RenderShapeBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderShapeBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderShapeBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderShapeBase" />, also copies <see cref="T:C1.C1Preview.RenderShapeBase" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderShapeBase.DrawShape(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.RenderShapeBase.ShapeParams,C1.C1Preview.PageDrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="g">
      </param>
      <param name="drawBoundsPx">
      </param>
      <param name="shapeParams">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderShapeBase.Shape">
      <summary>
            Gets the <see cref="T:C1.C1Preview.ShapeProps" /> object describing the geometric shape
            represented by the current <see cref="T:C1.C1Preview.RenderShapeBase" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LinePropsBase">
      <summary>
            The abstract base class representing the geometric properties of a line shape.
            Used by <see cref="T:C1.C1Preview.RenderLineBase" /> and derived classes.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LinePropsBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LinePropsBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LinePropsBase.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ShapeProps" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="T:C1.C1Preview.RenderLineBase">
      <summary>
            The abstract base class for classes representing line-based shapes (lines and polygons)
            in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
    </member>
    <member name="M:C1.C1Preview.RenderLineBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderLineBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderLineBase.DrawShape(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.RenderShapeBase.ShapeParams,C1.C1Preview.PageDrawParams)">
      <summary>
            For internal use only.
            </summary>
      <param name="g">
      </param>
      <param name="drawBoundsPx">
      </param>
      <param name="shapeParams">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderLineBase.Line">
      <summary>
            Gets the <see cref="T:C1.C1Preview.LinePropsBase" /> object describing the geometric line
            represented by the current <see cref="T:C1.C1Preview.RenderLineBase" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LineProps">
      <summary>
            Represents the geometric properties of a <see cref="T:C1.C1Preview.RenderLine" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LineProps.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineProps" /> class.
            The points that this line connects are set to the left top and right bottom
            corners of the containing <see cref="T:C1.C1Preview.RenderLine" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.X1">
      <summary>
            Gets or sets the <b>X</b> coordinate of the first of the two points that the line connects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.Y1">
      <summary>
            Gets or sets the <b>Y</b> coordinate of the first of the two points that the line connects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.X2">
      <summary>
            Gets or sets the <b>X</b> coordinate of the second of the two points that the line connects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.Y2">
      <summary>
            Gets or sets the <b>Y</b> coordinate of the second of the two points that the line connects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderLine">
      <summary>
            Represents a line shape in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderLine.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderLine" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderLine.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderLine" /> class,
            assigning the coordinates of the two points that the line connects.
            </summary>
      <param name="x1">The <b>X</b> coordinate of the first of the two points that the line connects.</param>
      <param name="y1">The <b>Y</b> coordinate of the first of the two points that the line connects.</param>
      <param name="x2">The <b>X</b> coordinate of the second of the two points that the line connects.</param>
      <param name="y2">The <b>Y</b> coordinate of the second of the two points that the line connects.</param>
      <param name="shapeLine">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderLine.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderLine" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderLine" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderLine.Line">
      <summary>
            Gets the <see cref="T:C1.C1Preview.LineProps" /> object describing the geometric line
            represented by the current <see cref="T:C1.C1Preview.RenderLine" /> object.
            The coordinates of the line are relative to the left top corner
            of the current <see cref="T:C1.C1Preview.RenderLine" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PolygonProps">
      <summary>
            Represents the geometric properties of a <see cref="T:C1.C1Preview.RenderPolygon" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PolygonProps.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PolygonProps" /> class.
            The <see cref="P:C1.C1Preview.PolygonProps.Points" /> property is set to <b>null</b>.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PolygonProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ShapeProps" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.PolygonProps.Points">
      <summary>
            Gets or sets the array of <see cref="T:C1.C1Preview.UnitPoint" /> points
            defining the polygon.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PolygonProps.Closed">
      <summary>
            Gets or sets a value indicating whether the polygon is closed
            (i.e. the last point in the <see cref="P:C1.C1Preview.PolygonProps.Points" /> array is automatically connected to the first one)
            or not.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderPolygon">
      <summary>
            Represents an open or closed polygon shape in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderPolygon.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPolygon" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderPolygon.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderPolygon" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderPolygon" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderPolygon.CreateProps">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderPolygon.Line">
      <summary>
            Gets the <see cref="T:C1.C1Preview.PolygonProps" /> object describing the geometric polygon
            represented by the current <see cref="T:C1.C1Preview.RenderPolygon" /> object.
            The points' coordinates are relative to the left top corner
            of the current <see cref="T:C1.C1Preview.RenderPolygon" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RectangleProps">
      <summary>
            Represents the geometric properties of a rectangle,
            also serves as the base for classes describing
            certain other shapes (such as round rectangle, arc and pie).
            Used by <see cref="T:C1.C1Preview.RenderRectangle" /> and derived classes.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RectangleProps.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RectangleProps" /> class.
            The location and size of the rectangle are set to those of the containing
            <see cref="T:C1.C1Preview.RenderRectangle" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RectangleProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ShapeProps" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.X">
      <summary>
            Gets or sets the <b>X</b> coordinate of the current rectangle.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.Y">
      <summary>
            Gets or sets the <b>Y</b> coordinate of the current rectangle.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.Width">
      <summary>
            Gets or sets the width of the current rectangle.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.Height">
      <summary>
            Gets or sets the height of the current rectangle.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRectangle">
      <summary>
            Represents a rectangle in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            This is also the base class for <see cref="T:C1.C1Preview.RenderEllipse" /> and <see cref="T:C1.C1Preview.RenderRoundRectangle" /> classes.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class.
            The location and size of the rectangle are set to those of the current <see cref="T:C1.C1Preview.RenderRectangle" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the width and height of the rectangle.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRectangle" />.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the width and height of the rectangle, and the <see cref="T:C1.C1Preview.LineDef" /> used to draw it.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRectangle" />.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill color.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRectangle" />.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillColor">The color used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill brush.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRectangle" />.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the location and the size of the rectangle.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the location and the size of the rectangle,
            and the <see cref="T:C1.C1Preview.LineDef" /> used to draw it.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill color.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillColor">The color used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRectangle" /> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill brush.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderRectangle" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderRectangle" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderRectangle.Rectangle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RectangleProps" /> object describing the geometric rectangle
            represented by the current <see cref="T:C1.C1Preview.RenderRectangle" /> object.
            The coordinates of the rectangle are relative to the left top corner
            of the current <see cref="T:C1.C1Preview.RenderRectangle" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderEllipse">
      <summary>
            Represents an ellipse in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class.
            The location and size of the ellipse are set to those of the current <see cref="T:C1.C1Preview.RenderEllipse" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the width and height of the ellipse.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderEllipse" />.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the width and height of the ellipse, and the <see cref="T:C1.C1Preview.LineDef" /> used to draw it.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderEllipse" />.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the ellipse.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the width and height of the ellipse, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill color.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderEllipse" />.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the ellipse.</param>
      <param name="shapeFillColor">The fill color.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the width and height of the ellipse, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill brush.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderEllipse" />.
            </summary>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the ellipse.</param>
      <param name="shapeFillBrush">The fill brush.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the location and the size of the ellipse.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the location and the size of the ellipse, and the <see cref="T:C1.C1Preview.LineDef" /> used to draw it.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the ellipse.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the location and the size of the ellipse, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill color.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the ellipse.</param>
      <param name="shapeFillColor">The fill color.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderEllipse" /> class,
            assigning the location and the size of the ellipse, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill brush.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the ellipse.</param>
      <param name="shapeFillBrush">The fill brush.</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderEllipse" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderEllipse" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderEllipse.Ellipse">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RectangleProps" /> object describing the geometric ellipse
            represented by the current <see cref="T:C1.C1Preview.RenderEllipse" /> object.
            The coordinates of the ellipse are relative to the left top corner
            of the current <see cref="T:C1.C1Preview.RenderEllipse" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EllipsePartProps">
      <summary>
            Represents the geometric properties of a pie.
            Used by <see cref="T:C1.C1Preview.RenderPie" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EllipsePartProps.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.EllipsePartProps" /> class.
            <see cref="P:C1.C1Preview.EllipsePartProps.StartAngle" /> is set to 0, while <see cref="P:C1.C1Preview.EllipsePartProps.SweepAngle" /> is set to 360 degrees,
            thus making this a complete ellipse.
            The location and size of the ellipse are set to those of the containing object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EllipsePartProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ShapeProps" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.EllipsePartProps.StartAngle">
      <summary>
            Gets or sets the angle, measured in degrees, clockwise from the <b>X</b> axis
            to the first side of the sector defining the current shape.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EllipsePartProps.SweepAngle">
      <summary>
            Gets or sets the angle, measured in degrees, clockwise from <see cref="P:C1.C1Preview.EllipsePartProps.StartAngle" />
            to the second side of the sector defining the current shape.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderPie">
      <summary>
            Represents a pie shape (a closed shape consisting of an arc of an ellipse,
            with lines going from the start and end points of the arc to the ellipse's center)
            in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class.
            The start angle of the pie is set to 0, while the sweep angle is set to 360 degrees,
            thus making it a complete ellipse.
            The location and size of the ellipse are set to those of the current <see cref="T:C1.C1Preview.RenderPie" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the width, height, and start and sweep angles of the pie shape.
            The location of the shape is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the width, height, start and sweep angles of the pie shape,
            and the <see cref="T:C1.C1Preview.LineDef" /> used to draw the shape.
            The location of the shape is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the pie shape.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the width, height, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the shape, and the fill color.
            The location of the shape is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the pie shape.</param>
      <param name="shapeFillColor">The shape fill color.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the width, height, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the shape, and the fill brush.
            The location of the shape is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the pie shape.</param>
      <param name="shapeFillBrush">The shape fill brush.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the location, size, and start and sweep angles of the pie shape.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the location, size, start and sweep angles of the pie shape,
            and the <see cref="T:C1.C1Preview.LineDef" /> used to draw the shape.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the pie shape.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the location, size, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the shape, and the fill color.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the pie shape.</param>
      <param name="shapeFillColor">The shape fill color.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderPie" /> class,
            assigning the location, size, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the shape, and the fill brush.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
      <param name="width">The width of the ellipse containing the pie shape.</param>
      <param name="height">The height of the ellipse containing the pie shape.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the pie's arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the pie shape.</param>
      <param name="shapeFillBrush">The shape fill brush.</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderPie" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderPie" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderPie.Pie">
      <summary>
            Gets the <see cref="T:C1.C1Preview.EllipsePartProps" /> object describing the pie shape
            represented by the current <see cref="T:C1.C1Preview.RenderPie" /> object.
            The coordinates of the ellipse containing the pie shape are relative to the left top corner
            of the current <see cref="T:C1.C1Preview.RenderPie" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ArcProps">
      <summary>
            Represents the geometric properties of an arc.
            Used by <see cref="T:C1.C1Preview.RenderArc" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ArcProps.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ArcProps" /> class.
            <see cref="P:C1.C1Preview.ArcProps.Closed" /> is set to false.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ArcProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ShapeProps" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.ArcProps.Closed">
      <summary>
            Gets or sets a value indicating whether the current arc should be closed
            (i.e. the start and end points of the arc should be connected by a straight line)
            or not.
            </summary>
      <remarks>
            The default value of this property is <b>false</b>.
            </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderArc">
      <summary>
            Represents an arc of an ellipse in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class.
            The start angle of the arc is set to 0, while the sweep angle is set to 360 degrees,
            thus making it a complete ellipse.
            The location and size of the arc's ellipse are set to those of the current <see cref="T:C1.C1Preview.RenderArc" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the width, height, and start and sweep angles of the arc.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the width, height, start and sweep angles of the arc,
            and the <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the width, height, start and sweep angles of the arc,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc,
            and the color used to fill the segment formed by the arc and a line connecting its ends.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.</param>
      <param name="shapeFillColor">The fill color.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the width, height, start and sweep angles of the arc,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc,
            and the brush used to fill the segment formed by the arc and a line connecting its ends.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1Preview.RenderPie" />.
            </summary>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.</param>
      <param name="shapeFillBrush">The fill brush.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the location, size, and start and sweep angles of the arc.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the location, size, and start and sweep angles of the arc,
            and the <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the location, size, and start and sweep angles of the arc,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc,
            and the color used to fill the segment formed by the arc and a line connecting its ends.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.</param>
      <param name="shapeFillColor">The fill color.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderArc" /> class,
            assigning the location, size, and start and sweep angles of the arc,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc,
            and the brush used to fill the segment formed by the arc and a line connecting its ends.
            </summary>
      <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
      <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
      <param name="width">The width of the ellipse containing the arc.</param>
      <param name="height">The height of the ellipse containing the arc.</param>
      <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
      <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle" />
            to the end of the arc.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the arc.</param>
      <param name="shapeFillBrush">The fill brush.</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderRoundRectangle" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderRoundRectangle" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderArc.Arc">
      <summary>
            Gets the <see cref="T:C1.C1Preview.EllipsePartProps" /> object describing the arc
            represented by the current <see cref="T:C1.C1Preview.RenderArc" /> object.
            The coordinates of the ellipse containing the arc are relative to the left top corner
            of the current <see cref="T:C1.C1Preview.RenderArc" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RoundRectangleProps">
      <summary>
            Represents the geometric properties of a rectangle with rounded corners.
            Used by the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RoundRectangleProps" /> class.
            The location and size of the rectangle are set to those of the containing
            <see cref="T:C1.C1Preview.RenderRoundRectangle" /> object.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.ShouldSerializeEllipseWidth">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseWidth" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseWidth" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.ShouldSerializeEllipseHeight">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseHeight" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseHeight" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.ShapeProps" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.RoundRectangleProps.EllipseWidth">
      <summary>
            Gets or sets the width of the ellipse used to draw the rounded corners of the rectangle.
            The default value of this property is calculated as <b>5%</b> of the width of the rectangle.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RoundRectangleProps.EllipseHeight">
      <summary>
            Gets or sets the height of the ellipse used to draw the rounded corners of the rectangle.
            The default value of this property is calculated as <b>5%</b> of the height of the rectangle.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRoundRectangle">
      <summary>
            Represents a rectangle with rounded corners in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class.
            The location and size of the rectangle are set to those of the current <see cref="T:C1.C1Preview.RenderRectangle" /> object.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the width and height of the rectangle.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRoundRectangle" />.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the width and height of the rectangle, and the <see cref="T:C1.C1Preview.LineDef" /> used to draw it.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRoundRectangle" />.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill color.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRoundRectangle" />.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillColor">The color used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill brush.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1Preview.RenderRoundRectangle" />.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the location and the size of the rectangle.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the location and the size of the rectangle,
            and the <see cref="T:C1.C1Preview.LineDef" /> used to draw it.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill color.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillColor">The color used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill brush.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the location, size and roundness of the rectangle,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill color.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="ellipseWidth">The width of the ellipse used to draw the rounded corners (may be specified as <b>"5%width"</b> for example).</param>
      <param name="ellipseHeight">The height of the ellipse used to draw the rounded corners (may be specified as <b>"5%height"</b> for example).</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillColor">The color used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> class,
            assigning the location, size and roundness of the rectangle,
            the <see cref="T:C1.C1Preview.LineDef" /> used to draw it, and the fill brush.
            </summary>
      <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="ellipseWidth">The width of the ellipse used to draw the rounded corners (may be specified as <b>"5%width"</b> for example).</param>
      <param name="ellipseHeight">The height of the ellipse used to draw the rounded corners (may be specified as <b>"5%height"</b> for example).</param>
      <param name="shapeLine">The <see cref="T:C1.C1Preview.LineDef" /> used to draw the rectangle.</param>
      <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderRoundRectangle" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderRoundRectangle" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderRoundRectangle.RoundRectangle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RoundRectangleProps" /> object describing the geometric rectangle
            represented by the current <see cref="T:C1.C1Preview.RenderRoundRectangle" /> object.
            The coordinates of the rectangle are relative to the left top corner
            of the current <see cref="T:C1.C1Preview.RenderRoundRectangle" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ThreeStateEnum">
      <summary>
            Defines a value which can be in one of three states: <b>undefined</b>, <b>true</b> or <b>false</b>.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.Undefined">
      <summary>
            The value is <b>undefined</b>.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.True">
      <summary>
            The value is <b>true</b>.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.False">
      <summary>
            The value is <b>false</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableSizingModeEnum">
      <summary>
            Enumerates the sizing modes of a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Default">
      <summary>
            At table level, default is <see cref="F:C1.C1Preview.TableSizingModeEnum.Auto" /> for rows,
            and <see cref="F:C1.C1Preview.TableSizingModeEnum.Fixed" /> for columns;
            at row/column level, default inherits from the table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Fixed">
      <summary>
            Size (height for rows, width for columns) should be explicitly
            specified (if omitted, it is determined by the available space
            and row/column count).
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Auto">
      <summary>
            Size (height for rows, width for columns) is calculated
            automatically based on the content.
            </summary>
    </member>
    <member name="T:C1.C1Preview.CellSplitBehaviorEnum">
      <summary>
            Enumerates the possible handling of a <see cref="T:C1.C1Preview.RenderTable" /> cell's content
            when the cell is split between pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Split">
      <summary>
            The content of a cell should be split if the cell is split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Copy">
      <summary>
            The content of a cell should be copied each time the cell is split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Cut">
      <summary>
            The content of a cell should be printed just once,
            and cut if the cell is split and not all content fits.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageBreakBehaviorEnum">
      <summary>
            Enumerates page break options available for elements of a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.Default">
      <summary>
            A page break may be inserted if needed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.MustBreak">
      <summary>
            A page break is always inserted.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.PreferredBreak">
      <summary>
            If a page break is needed, it should be inserted here.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.NoBreak">
      <summary>
            A page break cannot be inserted.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableVector">
      <summary>
            The abstract base class for rows and columns of a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCol" />
    </member>
    <member name="M:C1.C1Preview.TableVector.ShouldSerializeSize">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.TableVector.Size" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.TableVector.Size" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVector.ShouldSerializeStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.TableVector.Style" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.TableVector.Style" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVector.ShouldSerializeCellStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.TableVector.CellStyle" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.TableVector.CellStyle" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVector.AssignFrom(C1.C1Preview.TableVector)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TableVector" /> to the current object.
            (The <see cref="P:C1.C1Preview.TableVector.Ordinal" /> property is not copied.)
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.TableVector.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableVectorCollection" /> object containing the current vector.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Table">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> object containing the current vector.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Ordinal">
      <summary>
            Gets the 0-based index of the current vector in the containing <see cref="T:C1.C1Preview.RenderTable" />
            (i.e. the row index for rows, the column index for columns).
            </summary>
      <remarks>
            In <see cref="T:C1.C1Preview.C1PrintDocument" /> tables, elements (cells, rows and columns)
            are physically created only if they contain data, or if their style differs from default.
            Hence the physical position of a <see cref="T:C1.C1Preview.TableVector" /> object (i.e. a row or a column)
            in the containing <see cref="T:C1.C1Preview.TableVectorCollection" /> (accessible via the vector's
            <see cref="P:C1.C1Preview.TableVector.Owner" /> property) is not the same as the logical index of that row or column
            in the table. The <b>Ordinal</b> property allows to retrieve that logical position.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.TableVector.Size">
      <summary>
            Gets or sets the size of the current vector
            (height if the vector is a <see cref="T:C1.C1Preview.TableRow" />,
            width if the vector is a <see cref="T:C1.C1Preview.TableCol" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.PageBreakBehavior">
      <summary>
            Gets or sets a value determining how page breaks are inserted before
            the current vector
            (regular, horizontal page breaks if the vector is a <see cref="T:C1.C1Preview.TableRow" />,
            vertical page breaks if the vector is a <see cref="T:C1.C1Preview.TableCol" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.SplitBehavior">
      <summary>
            Gets or sets a value determining how the current vector is treated
            when it is too high (if it is a row) or too wide (if it is a column)
            to fit in the vertical or horizontal space available on the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.CanSplit">
      <summary>
            Gets or sets a value indicating whether the current vector
            (row or column) can split between pages.
            The default value is <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Visible">
      <summary>
            Gets or sets a value indicating whether the current vector
            (row or column) is visible.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Style">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> of the current vector (row or column).
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.CellStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> of objects contained in the cells
            of the current vector (row or column).
            See <see cref="P:C1.C1Preview.TableCell.CellStyle" /> for details.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.SizingMode">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.TableSizingModeEnum" /> value determining
            how the size of the current vector (height for rows, width for columns)
            is calculated.
            </summary>
    </member>
    <member name="T:C1.C1Preview.StretchRowEnum">
      <summary>
            Describes how the height of a row in a <see cref="T:C1.C1Preview.RenderTable" />
            can be adjusted if required by adjustments to the height of the
            containing table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.Default">
      <summary>
            The behavior depends on the <see cref="P:C1.C1Preview.RenderTable.StretchRows" /> property
            of the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.Yes">
      <summary>
            The row can be stretched as needed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.No">
      <summary>
            The row cannot be stretched.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.IfLastOnPage">
      <summary>
            The row can be stretched if it is the last row on the page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableRow">
      <summary>
            Represents a row of a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <seealso cref="T:C1.C1Preview.TableCol" />
      <seealso cref="T:C1.C1Preview.TableCell" />
    </member>
    <member name="M:C1.C1Preview.TableRow.AssignFrom(C1.C1Preview.TableVector)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TableVector" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.TableRow.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableRowCollection" /> containing the current row.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Height">
      <summary>
            Gets or sets the height of the current row.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Stretch">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.StretchRowEnum" /> mode of the current row.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableCell" /> at the specified column index.
            This property always returns a non-<b>null</b><see cref="T:C1.C1Preview.TableCell" /> object.
            </summary>
      <param name="col">The index of the cell in the current row (i.e. the column index).</param>
      <returns>The cell at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.StretchColumnEnum">
      <summary>
            Describes how the width of a column in a <see cref="T:C1.C1Preview.RenderTable" />
            can be adjusted if required by adjustments to the width of the
            containing table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.Default">
      <summary>
            The behavior depends on the <see cref="P:C1.C1Preview.RenderTable.StretchColumns" /> property
            of the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.Yes">
      <summary>
            The column can be stretched as needed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.No">
      <summary>
            The column cannot be stretched.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.IfLastOnPage">
      <summary>
            The column can be stretched if it is the last row on the page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableCol">
      <summary>
            Represents a column of a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCell" />
    </member>
    <member name="M:C1.C1Preview.TableCol.AssignFrom(C1.C1Preview.TableVector)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TableVector" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.TableCol.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableColCollection" /> containing the current column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Width">
      <summary>
            Gets or sets the width of the current column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Stretch">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.StretchColumnEnum" /> mode of the current column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableCell" /> at the specified row index. 
            This property always returns a non-<b>null</b><see cref="T:C1.C1Preview.TableCell" /> object.
            </summary>
      <param name="row">The index of the cell in the current column (i.e. the row index).</param>
      <returns>The cell at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.TableVectorCollection">
      <summary>
            The abstract base class representing a collection of <see cref="T:C1.C1Preview.TableVector" /> objects.
            This is the base class for collections of table rows and columns,
            accessible as <see cref="P:C1.C1Preview.RenderTable.Rows" /> and <see cref="P:C1.C1Preview.RenderTable.Cols" />
            on a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <seealso cref="T:C1.C1Preview.TableRowCollection" />
      <seealso cref="T:C1.C1Preview.TableColCollection" />
      <seealso cref="T:C1.C1Preview.RenderTable" />
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)">
      <summary>
            Returns the size (height for rows, width for columns) of a <see cref="T:C1.C1Preview.TableVector" />
            (row or column) identified by its index in a <see cref="T:C1.C1Preview.RenderTable" />.
            This method does not create the specified vector if it has not been initialized
            (see <b>remarks</b> for details).
            </summary>
      <param name="index">The 0-based index (<see cref="P:C1.C1Preview.TableVector.Ordinal" />) of the row or column.</param>
      <returns>The height or width of the row or column.</returns>
      <remarks>
        <para>
            Because elements of a <see cref="T:C1.C1Preview.RenderTable" />'s collections (cells, rows and columns)
            are physically created "on demand" only when they are accessed via collections'
            indexer properties, using this method is more efficient when you only need
            to test the height/width of a row/column without creating it.
            </para>
        <para>
            For instance, the following code physically creates a <see cref="T:C1.C1Preview.TableRow" /> object
            before testing its height:
            </para>
        <code>
              RenderTable rt = new RenderTable();
              if (rt.Rows[10].Height == Unit.Auto)
                doSomething();
            </code>
            At the same time, the following code does not cause a physical row object to be created,
            while being functionally identical to the code above:
            <code>
              RenderTable rt = new RenderTable();
              if (rt.Rows.GetVectorSize(10) == Unit.Auto)
                doSomething();
            </code></remarks>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorCanSplit(System.Int32)">
      <summary>
            Returns the value of the <see cref="P:C1.C1Preview.TableVector.CanSplit" /> property of a <see cref="T:C1.C1Preview.TableVector" />
            (row or column) identified by its index in a <see cref="T:C1.C1Preview.RenderTable" />.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" /> for details).
            </summary>
      <param name="index">The 0-based index (<see cref="P:C1.C1Preview.TableVector.Ordinal" />) of the row or column.</param>
      <returns>The value of the specified vector's <see cref="P:C1.C1Preview.TableVector.CanSplit" /> property,
            or <b>false</b> if the vector has not been initialized.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorVisible(System.Int32)">
      <summary>
            Returns the value of the <see cref="P:C1.C1Preview.TableVector.Visible" /> property of a <see cref="T:C1.C1Preview.TableVector" />
            (row or column) identified by its index in a <see cref="T:C1.C1Preview.RenderTable" />.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" /> for details).
            </summary>
      <param name="index">The 0-based index (<see cref="P:C1.C1Preview.TableVector.Ordinal" />) of the row or column.</param>
      <returns>The value of the specified vector's <see cref="P:C1.C1Preview.TableVector.Visible" /> property,
            or <b>true</b> if the vector has not been initialized.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorPageBreakBehavior(System.Int32)">
      <summary>
            Returns the value of the <see cref="P:C1.C1Preview.TableVector.PageBreakBehavior" /> property of a <see cref="T:C1.C1Preview.TableVector" />
            (row or column) identified by its index in a <see cref="T:C1.C1Preview.RenderTable" />.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" /> for details).
            </summary>
      <param name="index">The 0-based index (<see cref="P:C1.C1Preview.TableVector.Ordinal" />) of the row or column.</param>
      <returns>The value of the specified vector's <see cref="P:C1.C1Preview.TableVector.PageBreakBehavior" /> property,
            or <see cref="F:C1.C1Preview.PageBreakBehaviorEnum.Default" /> if the vector has not been initialized.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorSizingMode(System.Int32)">
      <summary>
            Returns the effective <see cref="T:C1.C1Preview.TableSizingModeEnum" /> of a <see cref="T:C1.C1Preview.TableVector" />
            (row or column) identified by its index in a <see cref="T:C1.C1Preview.RenderTable" />.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" /> for details).
            </summary>
      <param name="index">The 0-based index (<see cref="P:C1.C1Preview.TableVector.Ordinal" />) of the row or column.</param>
      <returns>The effective sizing mode of the specified vector (row or column).</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts a range of rows or columns into the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <param name="position">The position where to insert rows or columns.</param>
      <param name="count">The number of rows or columns to insert.</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32,System.Int32)">
      <summary>
            Deletes a range of rows or columns from the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <param name="position">The index of the first row or column to delete.</param>
      <param name="count">The number of rows or columns to delete.</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32)">
      <summary>
            Deletes a row or column from the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <param name="position">The index of the row or column to delete.</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32)">
      <summary>
            Inserts a row or column into the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <param name="position">The position where to insert the row or column.</param>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> object containing the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Groups">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableVectorGroupCollection" /> object representing
            the groups of vectors (rows or columns) defined on the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Count">
      <summary>
            Gets or sets the logical count of vectors (rows or columns) in the current collection.
            Setting this property to <b>-1</b> (which is the default) ensures that <b>Count</b>
            is calculated automatically.
            </summary>
      <remarks>
        <see cref="T:C1.C1Preview.C1PrintDocument" /> tables are logically infinite. Simply accessing an element
            at any position expands the table to include that position. Hence by default the <b>Count</b>
            property returns the maximum row or column number that has been accessed so far.
            Assigning a non-negative value to this property allows to increase or decrease the number of rows or columns
            (if the number of vectors is decreased, elements with greater indices are cleared).
            </remarks>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.VectorCount">
      <summary>
            Gets the physical count of vectors (rows or columns)
            currently stored in this <see cref="T:C1.C1Preview.TableVectorCollection" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableRowCollection">
      <summary>
            Represents a collection of rows (objects of the <see cref="T:C1.C1Preview.TableRow" /> type)
            in a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableRowCollection.FindRow(System.Int32)">
      <summary>
            Returns the <see cref="T:C1.C1Preview.TableRow" /> with the specified index
            (the <see cref="P:C1.C1Preview.TableVector.Ordinal" /> of the row),
            or <b>null</b> if that <see cref="T:C1.C1Preview.TableRow" /> object
            has not been initialized.
            </summary>
      <param name="index">The 0-based index of the row in the containing table.</param>
      <returns>The <see cref="T:C1.C1Preview.TableRow" /> object or <b>null</b>.</returns>
      <remarks>
            Physically, rows in a <see cref="T:C1.C1Preview.RenderTable" /> are created
            when they are accessed using the indexer property on the
            <see cref="P:C1.C1Preview.RenderTable.Rows" /> collection. This method may be used
            to test whether a physical <see cref="T:C1.C1Preview.TableRow" /> object exists
            for a particular row index.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.TableRowCollection.Groups">
      <summary>
            Gets the collection of row groups defined on the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableRowCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableRow" /> object corresponding to the row
            at the specified index in the containing <see cref="T:C1.C1Preview.RenderTable" />.
            Note that a <see cref="T:C1.C1Preview.TableRow" /> will be created if it has not been
            initialized for that row index yet.
            Use <see cref="M:C1.C1Preview.TableRowCollection.FindRow(System.Int32)" /> to get a row without creating it.
            </summary>
      <param name="index">The row index in the containing table.</param>
      <returns>The <see cref="T:C1.C1Preview.TableRow" /> at the specified index in the table.</returns>
    </member>
    <member name="T:C1.C1Preview.TableColCollection">
      <summary>
            Represents a collection of columns (objects of the <see cref="T:C1.C1Preview.TableCol" /> type)
            in a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableColCollection.FindCol(System.Int32)">
      <summary>
            Returns the <see cref="T:C1.C1Preview.TableCol" /> with the specified index
            (the <see cref="P:C1.C1Preview.TableVector.Ordinal" /> of the column),
            or <b>null</b> if that <see cref="T:C1.C1Preview.TableCol" /> object
            has not been initialized.
            </summary>
      <param name="index">The 0-based index of the column in the containing table.</param>
      <returns>The <see cref="T:C1.C1Preview.TableCol" /> object or <b>null</b>.</returns>
      <remarks>
            Physically, columns in a <see cref="T:C1.C1Preview.RenderTable" /> are created
            when they are accessed using the indexer property on the
            <see cref="P:C1.C1Preview.RenderTable.Cols" /> collection. This method may be used
            to test whether a physical <see cref="T:C1.C1Preview.TableCol" /> object exists
            for a particular column index.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.TableColCollection.Groups">
      <summary>
            Gets the collection of column groups defined on the containing <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableColCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableCol" /> object corresponding to the column
            at the specified index in the containing <see cref="T:C1.C1Preview.RenderTable" />.
            Note that a <see cref="T:C1.C1Preview.TableCol" /> will be created if it has not been
            initialized for that column index yet.
            Use <see cref="M:C1.C1Preview.TableColCollection.FindCol(System.Int32)" /> to get a column without creating it.
            </summary>
      <param name="index">The column index in the containing table.</param>
      <returns>The <see cref="T:C1.C1Preview.TableCol" /> at the specified index in the table.</returns>
    </member>
    <member name="T:C1.C1Preview.TableCell">
      <summary>
            Represents a cell in a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCol" />
    </member>
    <member name="M:C1.C1Preview.TableCell.ShouldSerializeStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.TableCell.Style" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.TableCell.Style" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TableCell.ShouldSerializeCellStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.TableCell.CellStyle" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.TableCell.CellStyle" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TableCell.AssignFrom(C1.C1Preview.TableCell)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TableCell" /> to the current object.
            The <see cref="P:C1.C1Preview.TableCell.Row" /> and <see cref="P:C1.C1Preview.TableCell.Col" /> properties
            are not copied.
            A "deep" copy of the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> is made, i.e. a copy
            of the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> is created and assigned to the
            newly created cell's <see cref="P:C1.C1Preview.TableCell.RenderObject" /> property.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TableCell.IsVisible">
      <summary>
            Determines whether the current cell is visible in the containing table.
            A cell is visible if it spans at least one visible row and column
            (see <see cref="P:C1.C1Preview.TableVector.Visible" />).
            </summary>
      <returns>
        <b>true</b> if the current cell is visible, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.TableCell.Tag">
      <summary>
            Gets or sets arbitrary data associated with the current cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableCellCollection" /> containing the current cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Table">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> containing the current cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Row">
      <summary>
            Gets the 0-based index in the table of the row containing the current cell.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTable.Rows" />
      <seealso cref="T:C1.C1Preview.TableRow" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Col">
      <summary>
            Gets the 0-based index in the table of the column containing the current cell.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTable.Cols" />
      <seealso cref="T:C1.C1Preview.TableCol" />
    </member>
    <member name="P:C1.C1Preview.TableCell.SpanCols">
      <summary>
            Gets or sets the number of columns spanned by the current cell.
            Cannot be less than <b>1</b>, which is the default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.SpanRows">
      <summary>
            Gets or sets the number of rows spanned by the current cell.
            Cannot be less than <b>1</b>, which is the default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.LastCol">
      <summary>
            Gets the index of the last column spanned by the current cell.
            If <see cref="P:C1.C1Preview.TableCell.SpanCols" /> is <b>1</b>, the value of this property is equal to <see cref="P:C1.C1Preview.TableCell.Col" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.LastRow">
      <summary>
            Gets the index of the last row spanned by the current cell.
            If <see cref="P:C1.C1Preview.TableCell.SpanRows" /> is <b>1</b>, the value of this property is equal to <see cref="P:C1.C1Preview.TableCell.Row" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.RenderObject">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> contained in the current cell.
            </summary>
      <seealso cref="P:C1.C1Preview.TableCell.Text" />
      <seealso cref="P:C1.C1Preview.TableCell.Image" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Text">
      <summary>
            Gets or sets the text contained in the current cell.
            </summary>
      <remarks>
        <para>
            Setting this property checks the current value of the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> property.
            If it is a <see cref="T:C1.C1Preview.RenderText" />, the <paramref name="value" /> is assigned to that object's
            <see cref="P:C1.C1Preview.RenderText.Text" />.
            </para>
        <para>
            Otherwise, a new <see cref="T:C1.C1Preview.RenderText" /> initialized with <paramref name="value" />
            is created and assigned to <see cref="P:C1.C1Preview.TableCell.RenderObject" />.
            Note that properties from the old <see cref="P:C1.C1Preview.TableCell.RenderObject" /> are copied
            to the newly created <see cref="T:C1.C1Preview.RenderText" /> using the
            <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)" /> method.
            In particular, this copies the style from the old object to the new one.
            </para>
        <para>
            Getting this property returns <see cref="P:C1.C1Preview.RenderText.Text" /> of <see cref="T:C1.C1Preview.RenderText" />
            assigned to the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> on the current cell, or an empty string
            if the current value of <see cref="P:C1.C1Preview.TableCell.RenderObject" /> is not a <see cref="T:C1.C1Preview.RenderText" />.
            </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.RenderObject" />
      <seealso cref="P:C1.C1Preview.TableCell.Image" />
      <seealso cref="P:C1.C1Preview.TableCell.Area" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Image">
      <summary>
            Gets or sets the image contained in the current cell.
            </summary>
      <remarks>
        <para>
            Setting this property checks the current value of the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> property.
            If it is a <see cref="T:C1.C1Preview.RenderImage" />, the <paramref name="value" /> is assigned to that object's
            <see cref="P:C1.C1Preview.RenderImage.Image" />.
            </para>
        <para>
            Otherwise, a new <see cref="T:C1.C1Preview.RenderImage" /> initialized with <paramref name="value" />
            is created and assigned to <see cref="P:C1.C1Preview.TableCell.RenderObject" />.
            Note that properties from the old <see cref="P:C1.C1Preview.TableCell.RenderObject" /> are copied
            to the newly created <see cref="T:C1.C1Preview.RenderImage" /> using the
            <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)" /> method.
            In particular, this copies the style from the old object to the new one.
            </para>
        <para>
            Getting this property returns <see cref="P:C1.C1Preview.RenderImage.Image" /> of <see cref="T:C1.C1Preview.RenderImage" />
            assigned to the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> on the current cell, or <b>null</b>
            if the current value of <see cref="P:C1.C1Preview.TableCell.RenderObject" /> is not a <see cref="T:C1.C1Preview.RenderImage" />.
            </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.RenderObject" />
      <seealso cref="P:C1.C1Preview.TableCell.Text" />
      <seealso cref="P:C1.C1Preview.TableCell.Area" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Area">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderArea" /> contained in the current cell.
            </summary>
      <remarks>
        <para>
            Getting this property checks the current value of the <see cref="P:C1.C1Preview.TableCell.RenderObject" /> property.
            If it is a <see cref="T:C1.C1Preview.RenderArea" />, it is returned.
            </para>
        <para>
            Otherwise, a new <see cref="T:C1.C1Preview.RenderArea" /> is created, assigned to <see cref="P:C1.C1Preview.TableCell.RenderObject" />,
            and returned.
            </para>
        <para>
            Note that properties from the old <see cref="P:C1.C1Preview.TableCell.RenderObject" /> are copied
            to the newly created <see cref="T:C1.C1Preview.RenderArea" /> using the
            <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)" /> method.
            In particular, this copies the style from the old object to the new one.
            </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.RenderObject" />
      <seealso cref="P:C1.C1Preview.TableCell.Text" />
      <seealso cref="P:C1.C1Preview.TableCell.Image" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Style">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> of the current cell.
            </summary>
      <remarks>
        <para>
            The value of this property affects both ambient and non-ambient
            style attributes of the cell itself and, through object containment,
            ambient attributes of the cell's content.
            </para>
        <para>
            For example, because <see cref="P:C1.C1Preview.Style.Spacing" /> is ignored
            for table cells, the following code does not affect the look of a table:
            <code>
              RenderTable rt = new RenderTable();
              rt.Cells[1, 2].Text = "My text.";
              rt.Cells[1, 2].Style.Spacing.All = "3mm";
            </code>
            while the following code adds 3mm of whie space around the text in the
            cell:
            <code>
              RenderTable rt = new RenderTable();
              rt.Cells[1, 2].Text = "My text.";
              rt.Cells[1, 2].CellStyle.Spacing.All = "3mm";
            </code></para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.CellStyle" />
    </member>
    <member name="P:C1.C1Preview.TableCell.CellStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> that is used to render the content of the current cell.
            </summary>
      <remarks>
            This style is not applied to the current cell itself,
            rather it is applied to the cell's content (<see cref="P:C1.C1Preview.TableCell.RenderObject" />),
            affecting both ambient and non-ambient style attributes of that object.
            <para>For an example, see <b>remarks</b> in <see cref="P:C1.C1Preview.TableCell.Style" />.</para></remarks>
      <seealso cref="P:C1.C1Preview.TableCell.Style" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Bounds">
      <summary>
            Gets a <see cref="T:System.Drawing.Rectangle" /> describing the geometry of the current cell in the table.
            <para>
            The location of the returned rectangle defines the location (column and row) of the current cell,
            while its size defines the number of columns and rows spanned by the current cell.
            </para></summary>
      <seealso cref="P:C1.C1Preview.TableCell.Col" />
      <seealso cref="P:C1.C1Preview.TableCell.Row" />
      <seealso cref="P:C1.C1Preview.TableCell.SpanCols" />
      <seealso cref="P:C1.C1Preview.TableCell.SpanRows" />
    </member>
    <member name="P:C1.C1Preview.TableCell.HorzSplitBehavior">
      <summary>
            Gets or sets a value indicating how the content of the current cell is treated
            when the cell is split vertically between two horizontal (extension,
            created when the document is too wide) pages.
            (<see cref="P:C1.C1Preview.TableVector.CanSplit" /> should be <b>true</b> for this to happen).
            </summary>
      <seealso cref="P:C1.C1Preview.TableVector.CanSplit" />
      <seealso cref="P:C1.C1Preview.TableCell.VertSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.TableCell.VertSplitBehavior">
      <summary>
            Gets or sets a value indicating how the content of the current cell is treated
            when the cell is split horizontally between two vertical (regular) pages
            (<see cref="P:C1.C1Preview.TableVector.CanSplit" /> should be <b>true</b> for this to happen).
            </summary>
      <seealso cref="P:C1.C1Preview.TableVector.CanSplit" />
      <seealso cref="P:C1.C1Preview.TableCell.HorzSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.TableCell.RepeatGridLinesVert">
      <summary>
            Gets or sets a value indicating whether horizontal gridlines should
            be drawn when the cell is split between two vertical (regular) pages.
            </summary>
      <seealso cref="P:C1.C1Preview.TableCell.VertSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.TableCell.RepeatGridLinesHorz">
      <summary>
            Gets or sets a value indicating whether vertical gridlines should
            be drawn when the cell is split between two horizontal (extension,
            created when the document is too wide) pages.
            </summary>
      <seealso cref="P:C1.C1Preview.TableCell.HorzSplitBehavior" />
    </member>
    <member name="T:C1.C1Preview.TableCellCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.RenderTable" /> cells
            (objects of the type <see cref="T:C1.C1Preview.TableCell" />).
            A collection of this type is returned by the <see cref="P:C1.C1Preview.RenderTable.Cells" /> property
            of a table.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)">
      <summary>
            Returns the <see cref="T:C1.C1Preview.TableCell" /> object at the specified row and column in the containing <see cref="T:C1.C1Preview.RenderTable" />,
            or <b>null</b> if that object has not been initialized.
            </summary>
      <param name="row">The 0-based row index of the cell.</param>
      <param name="col">The 0-based column index of the cell.</param>
      <returns>The <see cref="T:C1.C1Preview.TableCell" /> object at the specified row and column, or <b>null</b>.</returns>
      <remarks>
            The cells of a table are not initialized unless they are accessed via the indexer property
            on the cells collection. Unlike the indexer, this method can be used to test whether
            a <see cref="T:C1.C1Preview.TableCell" /> object has been created for a cell, without initializing it.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.GetRightBottomBounds">
      <summary>
            Gets the bounds of the initialized cells area.
            The returned <see cref="T:System.Drawing.Size" /> structure's <see cref="P:System.Drawing.Size.Width" />
            contains the column index of the rightmost initialized cell + 1,
            while <see cref="P:System.Drawing.Size.Height" />
            contains the row index of the bottommost initialized cell + 1.
            </summary>
      <returns>The size of the initialized cells area.</returns>
      <seealso cref="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)" />
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.AssignFrom(C1.C1Preview.TableCellCollection)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TableCellCollection" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.TableCellCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> containing the current collection of cells.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTable.Cells" />
    </member>
    <member name="P:C1.C1Preview.TableCellCollection.Item(System.Int32,System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableCell" /> at the intersection of the specified row and column.
            This property always returns a non-<b>null</b><see cref="T:C1.C1Preview.TableCell" /> object.
            </summary>
      <param name="row">The 0-based row index.</param>
      <param name="col">The 0-based column index.</param>
      <returns>The cell at the intersection of the specified row and column.</returns>
      <seealso cref="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)" />
    </member>
    <member name="T:C1.C1Preview.TableHeaderEnum">
      <summary>
            Flags specifying how a table header is repeated in a <see cref="T:C1.C1Preview.RenderTable" />.
            This is the type of <see cref="P:C1.C1Preview.TableVectorGroup.Header" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.None">
      <summary>
            The header is printed once at the top of the table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.Page">
      <summary>
            The header is repeated at the top of each page. If there are multiple columns
            per page, the header is repeated only at the top of the first column on the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.Column">
      <summary>
            The header is repeated only if there are multiple columns per page, at the top
            of each column except the first on the page. If there is only one column,
            the header is not printed at all.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.All">
      <summary>
            The header is repeated at the top of all pages. If there are multiple columns per page,
            the header is repeated at the top of each column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableFooterEnum">
      <summary>
            Flags specifying how a table footer is repeated in a <see cref="T:C1.C1Preview.RenderTable" />.
            This is the type of <see cref="P:C1.C1Preview.TableVectorGroup.Footer" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.None">
      <summary>
            The footer is printed once at the end of the table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.Page">
      <summary>
            The footer is repeated at the bottom of each page. If there are multiple columns
            per page, the footer is repeated only at the bottom of the last column on the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.Column">
      <summary>
            The footer is repeated only if there are multiple columns per page, at the bottom
            of each column except the last on the page. If there is only one column,
            the footer is not printed at all.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.All">
      <summary>
            The footer is repeated at the bottom of all pages. If there are multiple columns per page,
            the footer is repeated at the bottom of each column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableVectorGroup">
      <summary>
            Represents a group of <see cref="T:C1.C1Preview.RenderTable" /> rows or columns
            (see <see cref="P:C1.C1Preview.RenderTable.RowGroups" /> and <see cref="P:C1.C1Preview.RenderTable.ColGroups" />).
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroup.ShouldSerializeStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.TableVectorGroup.Style" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.TableVectorGroup.Style" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroup.ShouldSerializeCellStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.TableVectorGroup.CellStyle" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.TableVectorGroup.CellStyle" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroup.AssignFrom(C1.C1Preview.TableVectorGroup)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TableVectorGroup" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.TableVectorGroupCollection" /> containing the current group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Table">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> containing the current group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Position">
      <summary>
            Gets the 0-based index in the containing <see cref="T:C1.C1Preview.RenderTable" />
            of the first row or column in the current group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Count">
      <summary>
            Gets the number of rows or columns in the current group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.LastPosition">
      <summary>
            Gets the 0-based index in the containing <see cref="T:C1.C1Preview.RenderTable" />
            of the last row or column in the current group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.SplitBehavior">
      <summary>
            Gets or sets a value determining how the current group is treated
            when it is too high (if it is a group of rows) or too wide (if it
            is a group of columns) to fit in the vertical or horizontal space
            available on the current page.
            <para>
            The default value is <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.CanSplit">
      <summary>
            Gets or sets a value indicating whether the current group can split between pages.
            The default is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.PageHeader">
      <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table header on each page where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.PageFooter">
      <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table footer on each page where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.ColumnHeader">
      <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table header on each column where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.ColumnFooter">
      <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table footer on each column where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Header">
      <summary>
            Gets or sets flags indicating whether the current group
            should be treated as a table header repeated on each
            page and/or column.
            </summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.PageHeader" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.ColumnHeader" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Footer">
      <summary>
            Gets or sets flags indicating whether the current group
            should be treated as a table footer repeated on each
            page and/or column.
            </summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.PageFooter" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.ColumnFooter" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.MinVectorsBefore">
      <summary>
            Gets or sets the minimum number of rows or columns that must be printed
            on the same page before the current group, to allow a page break to be inserted.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.MinVectorsAfter">
      <summary>
            Gets or sets the minimum number of rows or columns that must be printed
            on the same page after the current group, to allow a page break to be inserted.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Style">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> associated with the current group.
            This style affects ambient and non-ambient attributes of the group as a whole,
            and ambient properties of the elements contained in the group.
            </summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.CellStyle" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.CellStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> that is used to initialize <see cref="P:C1.C1Preview.TableCell.CellStyle" />
            of cells in the current group.
            </summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Style" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBinding">
      <summary>
            Gets an instance of <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> class representing the 
            data binding properties of the current table row/column group.
            </summary>
      <remarks>
            This property always returns a <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> object,
            initializing it if if has not been initialized yet.
            Use <see cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" /> to test whether the current group
            is data bound without initializing <see cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />.
            </remarks>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.SpanVectors">
      <summary>
            Gets or sets an array of table vectors' (rows or columns) ordinals
            that will span over the whole group.
            This property is used only in databound tables, and allows to specify
            the number of vectors in which the cells will be merged for the current
            vector group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBindingDefined">
      <summary>
            Gets a value indicating whether the current row/column group is data bound.
            Returns <b>true</b> if the group's <see cref="P:C1.C1Preview.TableVectorGroup.DataBinding" /> property
            has been initialized and its <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Mode" /> is not <see cref="F:C1.C1Preview.DataBindingModeEnum.None" />.
            </summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBindingMode">
      <summary>
            Gets a combination of <see cref="T:C1.C1Preview.DataBindingModeEnum" /> flags
            specifying the data binding mode of the current row/column group.
            </summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="T:C1.C1Preview.TableVectorGroupCollection">
      <summary>
            Represents a collection of row or column groups in a <see cref="T:C1.C1Preview.RenderTable" />.
            This is the type of <see cref="P:C1.C1Preview.RenderTable.RowGroups" /> and <see cref="P:C1.C1Preview.RenderTable.ColGroups" />
            collections.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.AssignFrom(C1.C1Preview.TableVectorGroupCollection)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TableVectorGroupCollection" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetPageHeader">
      <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1Preview.TableVectorGroup.PageHeader" />
            property set to <b>true</b>.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.TableVectorGroup" /> which is a table header repeated on each page,
            or <b>null</b> if such group does not exist.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetPageFooter">
      <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1Preview.TableVectorGroup.PageFooter" />
            property set to <b>true</b>.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.TableVectorGroup" /> which is a table footer repeated on each page,
            or <b>null</b> if such group does not exist.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetColumnHeader">
      <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1Preview.TableVectorGroup.ColumnHeader" />
            property set to <b>true</b>.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.TableVectorGroup" /> which is a table header repeated on each column,
            or <b>null</b> if such group does not exist.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetColumnFooter">
      <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1Preview.TableVectorGroup.ColumnFooter" />
            property set to <b>true</b>.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.TableVectorGroup" /> which is a table footer repeated on each column,
            or <b>null</b> if such group does not exist.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetBound">
      <summary>
            Gets the bound of the current group collection,
            i.e. the index of the last row or column in the contained groups plus 1.
            </summary>
      <returns>The bound of the current group collection.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroup(System.Int32,System.Int32)">
      <summary>
            Searches the current collection for a group with the specified
            position (row or column index) in the containing table, and count of elements.
            </summary>
      <param name="position">The starting position (row or column index) of the group in the containing table.</param>
      <param name="count">The count of rows or columns in the group.</param>
      <returns>The group matching the search criteria, or <b>null</b> if such group does not exist.</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroupsAtPos(System.Int32)">
      <summary>
            Searches the current collection for all groups that contain
            the row or column with the specified index in the containing table,
            returns the array of all groups that were found.
            </summary>
      <param name="position">The row or column index.</param>
      <returns>The array of <see cref="T:C1.C1Preview.TableVectorGroup" /> objects that were found.</returns>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.Table">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> containing the current collection of row or column groups.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.Item(System.Int32,System.Int32)">
      <summary>
            Gets the row or column group that has the specified position in the containing table and element count.
            This property always returns a <see cref="T:C1.C1Preview.TableVectorGroup" /> object. If the group with the specified
            parameters did not exist, it is created and added to the current collection.
            </summary>
      <param name="position">The index in the containing table of the first row or column in the group.</param>
      <param name="count">The number of rows or columns in the group.</param>
      <returns>The <see cref="T:C1.C1Preview.TableVectorGroup" /> with the specified criteria.</returns>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingDefined">
      <summary>
            Gets a value indicating whether at least one group
            in the current collection of row/column groups is data bound.
            </summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingMode">
      <summary>
            Gets a combination of <see cref="T:C1.C1Preview.DataBindingModeEnum" /> flags
            specifying the data binding mode of the current collection of row/column groups.
            This property returns:
            <list type="bullet"><item><see cref="F:C1.C1Preview.DataBindingModeEnum.None" /> if no groups in the collection are data bound;</item><item><see cref="F:C1.C1Preview.DataBindingModeEnum.List" /> if at least one group in the collection is data bound.</item></list></summary>
    </member>
    <member name="T:C1.C1Preview.UserCellGroup">
      <summary>
            Represents a (possibly sparse) user-defined group of cells
            (objects of type <see cref="T:C1.C1Preview.TableCell" />) in a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.UserCellGroup" /> class,
            includes a range of cells identified by a rectangular area, in the group.
            </summary>
      <param name="range">Identifies a rectangluar range of cells as follows:
            <list type="bullet"><item>range.X is the column index of the top left cell;</item><item>range.Y is the row index of the top left cell;</item><item>range.Width is the number of columns;</item><item>range.Height is the number of rows.</item></list></param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Point)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.UserCellGroup" /> class,
            includes a single cell identified by its coordinates, in the group.
            </summary>
      <param name="cell">Identifies a cell as follows:
            <list type="bullet"><item>cell.X is the column index of the cell;</item><item>cell.Y is the row index of the cell.</item></list></param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Rectangle[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.UserCellGroup" /> class,
            includes a range of cells identified by a list of rectangular areas, in the group.
            </summary>
      <param name="ranges">The list of rectangular areas to include in the group,
            each area is identified by a <see cref="T:System.Drawing.Rectangle" /> structure as follows:
            <list type="bullet"><item><see cref="P:System.Drawing.Rectangle.X" /> is the column index of the top left cell;</item><item><see cref="P:System.Drawing.Rectangle.Y" /> is the row index of the top left cell;</item><item><see cref="P:System.Drawing.Rectangle.Width" /> is the number of columns;</item><item><see cref="P:System.Drawing.Rectangle.X" /> is the number of rows.</item></list></param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Point[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.UserCellGroup" /> class,
            includes a range of cells identified by a list of cell coordinates, in the group.
            </summary>
      <param name="cells">The list of cell coordinates to include in the group,
            each cell is identified by a <see cref="T:System.Drawing.Point" /> structure as follows:
            <list type="bullet"><item><see cref="P:System.Drawing.Point.X" /> is the column index of the cell;</item><item><see cref="P:System.Drawing.Point.Y" /> is the row index of the cell.</item></list></param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.UserCellGroup" /> class,
            includes a range of cells identified by a list of rectangular areas or individual cell coordnates, in the group.
            </summary>
      <param name="areas">
        <para>
            The list of rectangular areas or individual cell coordnates to include in the group,
            each item in the list may be either a <see cref="T:System.Drawing.Rectangle" /> or a <see cref="T:System.Drawing.Point" /> structure.
            </para>
            If the item is a <see cref="T:System.Drawing.Rectangle" />, it identifies an area to include as follows:
            <list type="bullet"><item><see cref="P:System.Drawing.Rectangle.X" /> is the column index of the top left cell;</item><item><see cref="P:System.Drawing.Rectangle.Y" /> is the row index of the top left cell;</item><item><see cref="P:System.Drawing.Rectangle.Width" /> is the number of columns;</item><item><see cref="P:System.Drawing.Rectangle.X" /> is the number of rows.</item></list>
            If the item is a <see cref="T:System.Drawing.Point" />, it identifies a cell to include as follows:
            <list type="bullet"><item><see cref="P:System.Drawing.Point.X" /> is the column index of the cell;</item><item><see cref="P:System.Drawing.Point.Y" /> is the row index of the cell.</item></list></param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.ShouldSerializeStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.UserCellGroup.Style" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.UserCellGroup.Style" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.ShouldSerializeCellStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.UserCellGroup.CellStyle" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.UserCellGroup.CellStyle" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.AssignFrom(C1.C1Preview.UserCellGroup)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.UserCellGroup" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.ContainsCell(System.Int32,System.Int32)">
      <summary>
            Tests whether the current cell group contains a cell with the specified row and column indices.
            </summary>
      <param name="row">The row index of the cell.</param>
      <param name="col">The column index of the cell.</param>
      <returns>
        <b>true</b> if the current group contains the specified cell, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.UserCellGroupCollection" /> containing the current cell group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Table">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> containing the current cell group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Style">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> of the current cell group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.CellStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> of objects contained in the cells
            of the current cell group.
            See <see cref="P:C1.C1Preview.TableCell.CellStyle" /> for details.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Ranges">
      <summary>
            Gets an array of <see cref="T:System.Drawing.Rectangle" /> structures identifying all cells
            included in the current group.
            For details, <see cref="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Rectangle)" />
            (lone cells are represented by rectangles with both dimensions set to <b>1</b>).
            </summary>
    </member>
    <member name="T:C1.C1Preview.UserCellGroupCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.UserCellGroup" /> objects.
            This is the type of the <see cref="P:C1.C1Preview.RenderTable.UserCellGroups" /> property of a <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.AssignFrom(C1.C1Preview.UserCellGroupCollection)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.Add(C1.C1Preview.UserCellGroup)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.UserCellGroup" /> to the current collection.
            </summary>
      <param name="cellGroup">The user cell group to add.</param>
      <returns>The index of the newly added group in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.FindGroupsAtPos(System.Int32,System.Int32)">
      <summary>
            Finds all user cell groups (objects of type <see cref="T:C1.C1Preview.UserCellGroup" />)
            that contain the cell at the specified row and column indices.
            </summary>
      <param name="row">The row index of the cell.</param>
      <param name="col">The column index of the cell.</param>
      <returns>A <see cref="T:System.Collections.ArrayList" /> containing all <see cref="T:C1.C1Preview.UserCellGroup" /> objects from the current collection
            that contain the cell at the specified position in the table.</returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.GetRightBottomBounds">
      <summary>
            Gets the bounding rectangle that includes all cells in all groups in the current collection.
            </summary>
      <returns>
            A <see cref="T:System.Drawing.Size" /> structure, the <see cref="P:System.Drawing.Size.Width" /> of which contains the column index + 1
            of the rightmost cell, while the <see cref="P:System.Drawing.Size.Height" /> contains the row index + 1
            of the bottommost cell.</returns>
    </member>
    <member name="P:C1.C1Preview.UserCellGroupCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> object containing the current collection of user cell groups.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroupCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.UserCellGroup" /> at the specified index in the current collection.
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.UserCellGroup" /> at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.StretchTableEnum">
      <summary>
            Enumerates the modes of stretching the rows or columns of a <see cref="T:C1.C1Preview.RenderTable" />
            when filling an empty space below or on the right of the table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.None">
      <summary>
            Rows or columns of a table do no stretch.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.AllVectors">
      <summary>
            All rows or columns of a table are stretched equally to fill the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.AllColumns">
      <summary>
            All columns of a table are stretched equally to fill the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.LastVectorOnPage">
      <summary>
            Only the last row or column on a page is stretched to fill it.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.LastColumnOnPage">
      <summary>
            Only the last column on a page is stretched to fill it.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTable">
      <summary>
            Represents a table in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <seealso cref="T:C1.C1Preview.TableVector" />
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCol" />
      <seealso cref="T:C1.C1Preview.TableCell" />
      <seealso cref="T:C1.C1Preview.TableVectorGroup" />
      <seealso cref="T:C1.C1Preview.UserCellGroup" />
      <seealso cref="T:C1.C1Preview.TableRowCollection" />
      <seealso cref="T:C1.C1Preview.TableColCollection" />
      <seealso cref="T:C1.C1Preview.TableCellCollection" />
      <seealso cref="T:C1.C1Preview.TableVectorGroupCollection" />
      <seealso cref="T:C1.C1Preview.UserCellGroupCollection" />
    </member>
    <member name="M:C1.C1Preview.RenderTable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderTable" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTable.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderTable" /> class,
            assigning the row and column counts
            (see <see cref="P:C1.C1Preview.TableVectorCollection.Count" />).
            </summary>
      <param name="rowCount">The count assigned to <see cref="P:C1.C1Preview.TableVectorCollection.Count" /> on the <see cref="P:C1.C1Preview.RenderTable.Rows" /> collection.</param>
      <param name="colCount">The count assigned to <see cref="P:C1.C1Preview.TableVectorCollection.Count" /> on the <see cref="P:C1.C1Preview.RenderTable.Cols" /> collection.</param>
    </member>
    <member name="M:C1.C1Preview.RenderTable.ShouldSerializeCellStyle">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderTable.CellStyle" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderTable.CellStyle" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTable.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderTable" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderTable" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderTable" />, also copies <see cref="T:C1.C1Preview.RenderTable" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignElements">Indicates whether rows, columns, cells, row, column and user cell groups should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderTable" />, also copies <see cref="T:C1.C1Preview.RenderTable" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowSizingMode">
      <summary>
            Gets or sets a value determining how the heights of table rows are
            calculated. The default is <see cref="F:C1.C1Preview.TableSizingModeEnum.Auto" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColumnSizingMode">
      <summary>
            Gets or sets a value determining how the widths of table columns are
            calculated. The default is <see cref="F:C1.C1Preview.TableSizingModeEnum.Fixed" />.
            </summary>
      <remarks>
            To make a table with automatically calculated columns' widths,
            set this property to <see cref="F:C1.C1Preview.TableSizingModeEnum.Auto" />,
            and the <see cref="P:C1.C1Preview.RenderObject.Width" /> on the <see cref="T:C1.C1Preview.RenderTable" />
            to <see cref="P:C1.C1Preview.Unit.Auto" />, e.g.:
            <code>
              RenderTable rt = new RenderTable();
              rt.ColumnSizingMode = TableSizingModeEnum.Auto;
              rt.Width = Unit.Auto;
            </code></remarks>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Rows">
      <summary>
            Gets the collection of rows of the current <see cref="T:C1.C1Preview.RenderTable" />.
            Getting a row with an arbitrary index on this collection
            always returns a <see cref="T:C1.C1Preview.TableRow" /> object, initializing it if necessary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Cols">
      <summary>
            Gets the collection of columns of the current <see cref="T:C1.C1Preview.RenderTable" />.
            Getting a column with an arbitrary index on this collection
            always returns a <see cref="T:C1.C1Preview.TableCol" /> object, initializing it if necessary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowGroups">
      <summary>
            Gets the collection of row groups defined on the current <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColGroups">
      <summary>
            Gets the collection of column groups defined on the current <see cref="T:C1.C1Preview.RenderTable" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Cells">
      <summary>
            Gets the collection of cells of the current <see cref="T:C1.C1Preview.RenderTable" />.
            Getting a cell with arbitrary row and column indices on this collection
            always returns a <see cref="T:C1.C1Preview.TableCell" /> object, initializing it if necessary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.UserCellGroups">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.UserCellGroup" /> objects defined on the current table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Stretch">
      <summary>
            Obsolete. Use <see cref="P:C1.C1Preview.RenderTable.StretchColumns" /> instead.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.StretchColumns">
      <summary>
            Gets or sets the mode of stretching the columns of the current table
            when filling an empty space on the right of the table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.StretchRows">
      <summary>
            Gets or sets the mode of stretching the rows of the current table
            when filling an empty space below the table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.CellStyle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> of objects contained in the cells
            of the current table.
            See <see cref="P:C1.C1Preview.TableCell.CellStyle" /> for details.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.VertPageHeaderOnFirstPage">
      <summary>
            Gets or sets a value indicating whether a vertical page header, if defined (see <b>remarks</b>),
            should be printed on the first of the horizontal pages spanned by the current table.
            </summary>
      <remarks>
            To define a vertical page header, create a column group on the current table,
            and mark it as a page or column header, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.ColGroups[0, 2].Header = TableHeaderEnum.All;
            </code></remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.ColGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Header" />
      <seealso cref="T:C1.C1Preview.TableHeaderEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.HorzPageHeaderOnFirstPage">
      <summary>
            Gets or sets a value indicating whether a horizontal page header, if defined (see <b>remarks</b>),
            should be printed on the first of the pages spanned by the current table.
            </summary>
      <remarks>
            To define a horizontal page header, create a row group on the current table,
            and mark it as a page or column header, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.RowGroups[0, 2].Header = TableHeaderEnum.All;
            </code></remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.RowGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Header" />
      <seealso cref="T:C1.C1Preview.TableHeaderEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.VertPageFooterOnLastPage">
      <summary>
            Gets or sets a value indicating whether a vertical page footer, if defined (see <b>remarks</b>),
            should be printed on the last of the horizontal pages spanned by the current table.
            </summary>
      <remarks>
            To define a vertical page footer, create a column group on the current table,
            and mark it as a page or column footer, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.ColGroups[10, 2].Footer = TableFooterEnum.All;
            </code></remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.ColGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Footer" />
      <seealso cref="T:C1.C1Preview.TableFooterEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.HorzPageFooterOnLastPage">
      <summary>
            Gets or sets a value indicating whether a horizontal page footer, if defined (see <b>remarks</b>),
            should be printed on the last of the pages spanned by the current table.
            </summary>
      <remarks>
            To define a horizontal page footer, create a row group on the current table,
            and mark it as a page or column footer, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.RowGroups[10, 2].Footer = TableFooterEnum.All;
            </code></remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.RowGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Footer" />
      <seealso cref="T:C1.C1Preview.TableFooterEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesVert">
      <summary>
            Gets or sets a value indicating whether vertical gridlines (see <see cref="P:C1.C1Preview.Style.GridLines" />)
            should be drawn when the current table is split between two or more horizontal (extender) pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesHorz">
      <summary>
            Gets or sets a value indicating whether horizontal gridlines (see <see cref="P:C1.C1Preview.Style.GridLines" />)
            should be drawn when the current table is split between two or more pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowsSplitBehavior">
      <summary>
            Gets or sets a value determining how a table row is treated
            when it is too high to fit in the vertical space available on the current page.
            (you can override this value for individual rows using
            <see cref="P:C1.C1Preview.TableVector.SplitBehavior" /> property).
            <para>The default is <see cref="F:C1.C1Preview.SplitBehaviorEnum.Never" />.</para></summary>
      <seealso cref="P:C1.C1Preview.RenderTable.ColsSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowsCanSplit">
      <summary>
            Gets or sets a value indicating whether table rows can split between
            pages (you can override this value for individual rows using
            <see cref="P:C1.C1Preview.TableVector.CanSplit" /> property). The default is false.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColsSplitBehavior">
      <summary>
            Gets or sets a value determining how a table column is treated
            when it is too wide to fit in the horizontal space available on the current page.
            (you can override this value for individual columns using
            <see cref="P:C1.C1Preview.TableVector.SplitBehavior" /> property).
            <para>The default is <see cref="F:C1.C1Preview.SplitBehaviorEnum.Never" />.</para></summary>
      <seealso cref="P:C1.C1Preview.RenderTable.RowsSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColsCanSplit">
      <summary>
            Gets or sets a value indicating whether table columns can split between
            pages (you can override this value for individual columns using
            <see cref="P:C1.C1Preview.TableVector.CanSplit" /> property). The default is false.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.DataBindingMode">
      <summary>
            Gets a combination of <see cref="T:C1.C1Preview.DataBindingModeEnum" /> flags
            specifying the data binding mode of the current object.
            Takes into consideration data binding of row and column groups.
            </summary>
      <seealso cref="N:C1.C1Preview.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="T:C1.C1Preview.RenderText">
      <summary>
            Represents a run of text in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Text is drawn using a single style (see <see cref="T:C1.C1Preview.RenderParagraph" /> for multi-style text).
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property and style.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
      <param name="style">A <see cref="T:C1.C1Preview.Style" /> to use
            (the <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" /> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1Preview.RenderObject.Style" />).</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property and font.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
      <param name="font">The font used to render the text.</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property,
            font and text color.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
      <param name="font">The font used to render the text.</param>
      <param name="textColor">The text color used to render the text.</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property,
            font, text color and alignment.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
      <param name="font">The font used to render the text.</param>
      <param name="textColor">The text color used to render the text.</param>
      <param name="horzAlign">The horizontal text alignment.</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property,
            font and text alignment.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
      <param name="font">The font used to render the text.</param>
      <param name="horzAlign">The horizontal text alignment.</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property,
            and text alignment.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
      <param name="horzAlign">The horizontal text alignment.</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,C1.C1Preview.Style,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderText" /> class,
            assigning the <see cref="P:C1.C1Preview.RenderText.Text" /> property,
            and the parent styles.
            </summary>
      <param name="text">A string assigned to the <see cref="P:C1.C1Preview.RenderText.Text" /> property.</param>
      <param name="parentStyle">The style assigned to the <see cref="P:C1.C1Preview.Style.Parent" /> property of the current object's style.</param>
      <param name="ambientParentStyle">The style assigned to the <see cref="P:C1.C1Preview.Style.AmbientParent" /> property of the current object's style.</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.ShouldSerializeText">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderText.Text" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderText.Text" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderText.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderText" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderText" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderText.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderText" />, also copies <see cref="T:C1.C1Preview.RenderText" />-specific properties.
            </summary>
      <param name="source">
      </param>
      <param name="assignDataBinding">
      </param>
      <param name="assignChildren">
      </param>
      <param name="assignAnchors">
      </param>
      <param name="assignHyperlink">
      </param>
      <param name="assignName">
      </param>
      <param name="assignStyle">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderText.Text">
      <summary>
            Gets or sets the text of the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderText.HasText">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderText.Text" /> property of the current object is
            not <b>null</b> and has a greater than zero length.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderText.TextLength">
      <summary>
            Gets the length of the string returned by the <see cref="P:C1.C1Preview.RenderText.Text" /> property.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TabAlignmentEnum">
      <summary>
            Specifies the text alignment on a tab position.
            See <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" /> for details.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TabAlignmentEnum.Left">
      <summary>
            Text is left-aligned on the tab position (text starts at the tab stop).
            </summary>
    </member>
    <member name="F:C1.C1Preview.TabAlignmentEnum.Center">
      <summary>
            Text is centered around the tab position.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TabAlignmentEnum.Right">
      <summary>
            Text is right-aligned on the tab position (text ends at the tab stop).
            </summary>
    </member>
    <member name="T:C1.C1Preview.TabPosition">
      <summary>
            Represents a tab stop in a text in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            To set a tab stop, add it to the <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" />
            collection on the text or paragraph.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TabPosition.#ctor(C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TabPosition" /> class,
            at the specified position, with the default (<see cref="F:C1.C1Preview.TabAlignmentEnum.Left" />) text alignment.
            </summary>
      <param name="position">The tab position, relative to the left edge of the text area.</param>
    </member>
    <member name="M:C1.C1Preview.TabPosition.#ctor(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TabPosition" /> class,
            at the specified position and with the specified text alignment.
            </summary>
      <param name="position">The tab position, relative to the left edge of the text area.</param>
      <param name="alignment">The text alignment at this tab position.</param>
    </member>
    <member name="M:C1.C1Preview.TabPosition.#ctor(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum,System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TabPosition" /> class,
            at the specified position and with the specified text alignment and fill character.
            </summary>
      <param name="position">The tab position, relative to the left edge of the text area.</param>
      <param name="alignment">The text alignment at this tab position.</param>
      <param name="fillChar">The character used to fill the area between the preceding and the current tab stops.</param>
    </member>
    <member name="M:C1.C1Preview.TabPosition.AssignFrom(C1.C1Preview.TabPosition)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.TabPosition" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.TabPosition.Position">
      <summary>
            Gets or sets the tab stop position, relative to the left of the text area.
            </summary>
      <remarks>
            The tab stop position is relative to the left edge of the text area.
            That area does not include any padding or borders, so for example
            if a <see cref="T:C1.C1Preview.RenderText" /> has a 1 inch left padding,
            and the first <see cref="T:C1.C1Preview.TabPosition" /> is set to 1 inch,
            any text after the first tab char will be positioned 2 inches
            to the right of the <see cref="T:C1.C1Preview.RenderText" />'s X coordinate.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.TabPosition.Alignment">
      <summary>
            Gets or sets the text alignment at the current tab.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TabPosition.FillChar">
      <summary>
            Gets or sets the char used to fill the space between the current and the preceding tabs.
            </summary>
      <remarks>
            This feature's main use is in <see cref="T:C1.C1Preview.RenderToc" />, where it fills the space
            between left-aligned TOC entries and right-aligned page numbers.
            </remarks>
    </member>
    <member name="T:C1.C1Preview.TabPositionCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.TabPosition" /> objects.
            This is the type of <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" /> property.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.Unit)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.TabPosition" /> object,
            initializes it with the specified tab stop position,
            and adds it to the current collection.
            </summary>
      <param name="tabPosition">The position of the tab stop relative to the left edge of the text area.</param>
      <returns>The index of the added <see cref="T:C1.C1Preview.TabPosition" /> object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.TabPosition" /> object,
            initializes it with the specified tab stop position and text alignment,
            and adds it to the current collection.
            </summary>
      <param name="tabPosition">The position of the tab stop relative to the left edge of the text area.</param>
      <param name="tabAlignment">The text alignment at the specified tab stop.</param>
      <returns>The index of the added <see cref="T:C1.C1Preview.TabPosition" /> object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum,System.Char)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.TabPosition" /> object,
            initializes it with the specified tab stop position, text alignment and fill char,
            and adds it to the current collection.
            </summary>
      <param name="tabPosition">The position of the tab stop relative to the left edge of the text area.</param>
      <param name="tabAlignment">The text alignment at the specified tab stop.</param>
      <param name="fillChar">The fill char between the preceding and the added tab stop.</param>
      <returns>The index of the added <see cref="T:C1.C1Preview.TabPosition" /> object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.TabPosition)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.TabPosition" /> object to the current collection.
            </summary>
      <param name="tabPosition">The object to add.</param>
      <returns>The index of <paramref name="tabPosition" /> in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Insert(System.Int32,C1.C1Preview.TabPosition)">
      <summary>
            Inserts a <see cref="T:C1.C1Preview.TabPosition" /> object at the specified position into the current collection.
            </summary>
      <param name="index">The index at which to insert <paramref name="tabPosition" />.</param>
      <param name="tabPosition">The object to insert.</param>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Remove(C1.C1Preview.TabPosition)">
      <summary>
            Removes a <see cref="T:C1.C1Preview.TabPosition" /> object from the current collection.
            </summary>
      <param name="tabPosition">The object to remove.</param>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.IndexOf(C1.C1Preview.TabPosition)">
      <summary>
            Gets the index of a <see cref="T:C1.C1Preview.TabPosition" /> object in the current collection.
            </summary>
      <param name="tabPosition">The object to get the index of.</param>
      <returns>The index of <paramref name="tabPosition" /> in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.TabPositionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.TabPosition" /> at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The TabPosition at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderTocItem">
      <summary>
            Represents a single entry in the table of contents (TOC; <see cref="P:C1.C1Preview.RenderTocItem.RenderToc" />) in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTocItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderTocItem" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.RenderToc">
      <summary>
            Gets the <see cref="P:C1.C1Preview.RenderTocItem.RenderToc" /> object containing the current TOC entry.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.HasText">
      <summary>
            Gets a value indicating whether the current TOC entry will produce visible
            output in the generated document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.TextLength">
      <summary>
            Gets the count of characters in the current TOC entry.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.Level">
      <summary>
            Gets or sets the level of the current entry in the TOC.
            This value is 1-based, and determines the indentation of the current item in the generated TOC.
            The default value is <b>1</b>, which does not indent the entry.
            Nested levels are indented by the <see cref="P:C1.C1Preview.RenderToc.LevelSpacing" /> amount.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderToc">
      <summary>
            Represents a table of contents (TOC) in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Individual TOC entries are represented by <see cref="T:C1.C1Preview.RenderTocItem" /> objects.
            This object may also contain other types of render objects
            (this may be used e.g. to show a TOC header).
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderToc.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderToc" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderToc.ShouldSerializeLevelSpacing">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderToc.LevelSpacing" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderToc.LevelSpacing" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderToc" />, also copies <see cref="T:C1.C1Preview.RenderToc" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.C1Hyperlink)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text and hyperlink, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="hyperlink">A <see cref="T:C1.C1Preview.C1Hyperlink" /> which is the target of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.C1Hyperlink,System.Int32)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text, hyperlink and level, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="hyperlink">A <see cref="T:C1.C1Preview.C1Hyperlink" /> which is the target of the TOC item.</param>
      <param name="level">The <see cref="P:C1.C1Preview.RenderTocItem.Level" /> of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,System.Int32)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text and target page number, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="pageNo">The page number which is the target of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,System.Int32,System.Int32)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text, target page number and level, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="pageNo">The page number which is the target of the TOC item.</param>
      <param name="level">The <see cref="P:C1.C1Preview.RenderTocItem.Level" /> of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.RenderObject)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text and target <see cref="T:C1.C1Preview.RenderObject" />, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="target">A <see cref="T:C1.C1Preview.RenderObject" /> which is the target of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.RenderObject,System.Int32)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text, target <see cref="T:C1.C1Preview.RenderObject" /> and level, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="target">A <see cref="T:C1.C1Preview.RenderObject" /> which is the target of the TOC item.</param>
      <param name="level">The <see cref="P:C1.C1Preview.RenderTocItem.Level" /> of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.ParagraphObject)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text and target <see cref="T:C1.C1Preview.ParagraphObject" />, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="target">A <see cref="T:C1.C1Preview.ParagraphObject" /> which is the target of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.ParagraphObject,System.Int32)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RenderTocItem" /> initialized with the specified
            text, target <see cref="T:C1.C1Preview.ParagraphObject" /> and level, and adds it to the current TOC.
            </summary>
      <param name="text">A text representing the TOC item that is being added.</param>
      <param name="target">A <see cref="T:C1.C1Preview.ParagraphObject" /> which is the target of the TOC item.</param>
      <param name="level">The <see cref="P:C1.C1Preview.RenderTocItem.Level" /> of the TOC item.</param>
      <returns>The <see cref="T:C1.C1Preview.RenderTocItem" /> that was created and added to the current TOC.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderToc.ShowPageNumbers">
      <summary>
            Gets or sets a value indicating whether page numbers should be displayed in the current TOC.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.PageNumbersAtRight">
      <summary>
            Gets or sets a value indicating whether page numbers should be right-aligned within the current TOC.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.LinksOnPageNumbersOnly">
      <summary>
            Gets or sets a value indicating whether only the page numbers in the
            rendered TOC represent clickable hyperlinks (otherwise, the entire
            area between an entry's caption and page number can be clicked).
            The default value is false.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.FillChar">
      <summary>
            Gets or sets a character used to fill empty spaces between TOC items and corresponding page numbers.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.LevelSpacing">
      <summary>
            Gets or sets the indentation step of TOC items.
            Items with <see cref="P:C1.C1Preview.RenderTocItem.Level" /> equal to 1 are not indented,
            each next level is indented by this value.
            The default value is <b>10mm</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalText">
      <summary>
            Represents a run of vertical text in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            <para>
            Designed primarily for rendering of Asian (e.g. Japanese) text in the traditional manner,
            vertically from right to left.
            </para><para>
            Text is drawn using a single style (see <see cref="T:C1.C1Preview.RenderVerticalParagraph" /> for multi-style text).
            </para></summary>
      <remarks>
        <para>
            The default height and width of <see cref="T:C1.C1Preview.RenderVerticalText" /> is <c>auto</c>.
            In particular, that means that text without line breaks will by default stretch
            downwards indefinitely. To make text wrap at the bottom, the height of
            the <see cref="T:C1.C1Preview.RenderVerticalText" /> object must be explicitly set.
            </para>
        <para>
            Note that while the main use of this class is to output text in Asian languages, you can also
            print English text in this manner. To do so, add hex code 0xFEE0 to each English letter.
            </para>
      </remarks>
      <example>
            The code below prints "CASINO ROYAL" and digits "12345" vertically:
            <code>
            private static string ToVertical(string s)
            {
                StringBuilder sb = new StringBuilder(s.Length);
                for (int i = 0; i &lt; s.Length; i++)
                    if (s[i] == ' ')
                        sb.Append(s[i]);
                    else
                        sb.Append((char)((int)s[i] + (0xFF10 - (int)'0')));
                return sb.ToString();
            }
            
            private C1PrintDocument CreateDocument()
            {
                C1PrintDocument doc = new C1PrintDocument();
                doc.FontHandling = FontHandling.EmbedActualFonts;
            
                RenderVerticalText rt;
            
                rt = new RenderVerticalText();
                rt.Style.Borders.All = LineDef.Default;
                rt.Style.Font = new Font("Arial", 18);
                rt.Text = ToVertical("CASINO ROYAL");
                doc.Body.Children.Add(rt);
            
                rt = new RenderVerticalText();
                rt.Style.Borders.All = LineDef.Default;
                rt.Style.Font = new Font("Arial", 18);
                rt.Text = ToVertical("Digits: (12345)");
                doc.Body.Children.Add(rt);
            
                return doc;
            }
            </code></example>
      <seealso cref="T:C1.C1Preview.RenderVerticalParagraph" />
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderVerticalText" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultHeight">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultWidth">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultSplitHorzBehavior">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultSplitVertBehavior">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalParagraph">
      <summary>
            Represents a paragraph of vertical text in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Paragraphs can contain inline text and images, possibly rendered using different styles.
            The content of a paragraph is accessible via the <see cref="P:C1.C1Preview.RenderParagraph.Content" /> property.
            <para>
            Designed primarily for rendering of Asian (e.g. Japanese) text in the traditional manner,
            vertically from right to left.
            </para></summary>
      <remarks>
        <para>
            The default height and width of <see cref="T:C1.C1Preview.RenderVerticalParagraph" /> is <c>auto</c>.
            In particular, that means that text without line breaks will by default stretch
            downwards indefinitely. To make text wrap at the bottom, the height of
            the <see cref="T:C1.C1Preview.RenderVerticalParagraph" /> object must be explicitly set.
            </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderVerticalText" />
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultHeight">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultWidth">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultSplitHorzBehavior">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultSplitVertBehavior">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1TypeSerializationEnum">
      <summary>
            For internal use.
            Determines how item types are serialized
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1IgnoreTypeConverterAttribute">
      <summary>
            For internal use.
            Forces the serializer to do not use TypeConverter during serialization of the property.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1TypeSerializationAttribute">
      <summary>
            For internal use.
            Forces the serializer to serialize the type name of a property or field.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1CollectionSerializationAttribute">
      <summary>
            For internal use.
            This attribute defines additional properties for collections properties or fields.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.Aliases">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.Types">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ParentReferenceAttribute">
      <summary>
            For internal use.
            Allows to mark field or property as "parent reference".
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ClassSerializationAttribute">
      <summary>
            For internal use.
            Allows to define additional properties for class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ReferenceAttribute">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ReferenceDestAttribute">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1CheckSerializableAttribute">
      <summary>
            For internal use.
            Indicates that the object should be serialized only if it supports deserialization.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1IgnoreDeserializeErrorAttribute">
      <summary>
            For internal use.
            Indicates that the error occurs on deserialization value of this property should be ignored.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1C1dOnlySerializableAttribute">
      <summary>
            For internal use.
            Indicates that the property or field is serializable only in C1D format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1OpenXmlOnlySerializableAttribute">
      <summary>
            For internal use.
            Indicates that the property or field is serializable only in C1DX format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1OpenXmlSerializationAttribute">
      <summary>
            For internal use.
            Defines options for serialization in Open Xml format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1SerializeIgnoreAttribute">
      <summary>
            For internal use.
            If defined then property/field will be ignored ONLY during serialization,
            can be used to support backward compatibility.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.IC1SerializeContext">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.IC1SerializeContext.Serializer">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.ZipStructureException">
      <summary>
            Represents an exception that occurred during C1DX or C1MDX serialization/deserialization
            if the underlying zip stream has invalid format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.SerializeExceptionBase">
      <summary>
            Abstract base class for <see cref="T:C1.C1Preview.Serialization.SerializeException" /> and <see cref="T:C1.C1Preview.Serialization.DeserializeException" />
            classes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.SerializeExceptionBase.Log">
      <summary>
            Gets the list of strings describing the actions that lead to the exception that occurred
            during serialization or deserialization.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.SerializeException">
      <summary>
            Represents an exception that occurred during serialization.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.DeserializeException">
      <summary>
            Represents an exception that occurred during deserialization.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.DeserializeException.LineNumber">
      <summary>
            Gets the line number associated with the exception.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.DeserializeException.LinePosition">
      <summary>
            Gets the position in line associated with the exception.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.Serializer">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Serialization.Serializer.c_DefWhiteSpaceHandling">
      <summary>
            Indicates the default white space handling.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.#ctor">
      <summary>
            Initializes a new instance of the <b>Serializer</b> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.InternalSerialize(System.IO.Stream,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="stream">
      </param>
      <param name="o">
      </param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.InternalDeserialize(System.IO.Stream,System.Object,System.Type)">
      <summary>
            For internal use.
            </summary>
      <param name="stream">
      </param>
      <param name="o">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DBrush">
      <summary>
            For internal use only.
            Serializes the Brush class as XmlElement.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DImageData">
      <summary>
            For internal use only.
            Class with the only purpose in life - serialize images.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DImageData.TypeConverter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DIconData">
      <summary>
            For internal use only.
            Class with the only purpose in life - serialize icons.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DIconData.TypeConverter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DData">
      <summary>
            For internal use only.
            Class with the only purpose in life - serialize images.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DData.TypeConverter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FlowAlignEnum">
      <summary>
            Specifies the alignment within their container of objects in the block flow
            (see <see cref="P:C1.C1Preview.RenderObject.Stacking" />).
            This is the type of <see cref="P:C1.C1Preview.Style.FlowAlignChildren" /> and <see cref="P:C1.C1Preview.Style.FlowAlign" />
            properties.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Default">
      <summary>
        <para>
            If specified for a child object's <see cref="P:C1.C1Preview.Style.FlowAlign" />,
            indicates that the parent's <see cref="P:C1.C1Preview.Style.FlowAlignChildren" /> value is used.
            </para>
        <para>
            If specified for a <see cref="P:C1.C1Preview.Style.FlowAlignChildren" />, equivalent to
            <see cref="F:C1.C1Preview.FlowAlignEnum.Near" />.
            </para>
      </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Near">
      <summary>
            Objects are left-aligned for top to bottom flow (<see cref="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom" />),
            and top-aligned for left to right flow (<see cref="F:C1.C1Preview.StackingRulesEnum.BlockLeftToRight" />).
            </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Center">
      <summary>
            Objects are centered horizontally for top to bottom flow (<see cref="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom" />),
            and vertically for left to right flow (<see cref="F:C1.C1Preview.StackingRulesEnum.BlockLeftToRight" />).
            </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Far">
      <summary>
            Objects are right-aligned for top to bottom flow (<see cref="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom" />),
            and bottom-aligned for left to right flow (<see cref="F:C1.C1Preview.StackingRulesEnum.BlockLeftToRight" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.WordWrapMode">
      <summary>
            Specifies how to break words when lines of text wrap.
            </summary>
    </member>
    <member name="F:C1.C1Preview.WordWrapMode.Normal">
      <summary>
            Default. A word is not split unless it is too long to fit within the boundaries of the container by itself.
            </summary>
    </member>
    <member name="F:C1.C1Preview.WordWrapMode.BreakWord">
      <summary>
            A word can be split at any position if needed.
            </summary>
    </member>
    <member name="T:C1.C1Preview.AlignHorzEnum">
      <summary>
            Specifies the horizontal alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.C1Preview.Style.TextAlignHorz" /> property.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Left">
      <summary>
            The text is left-aligned.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Center">
      <summary>
            The text is centered horizontally.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Right">
      <summary>
            The text is right-aligned.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Justify">
      <summary>
            The text is justified horizontally by widening the white spaces existing in the text.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.JustifyChars">
      <summary>
            The text is justified horizontally by adding white spaces between all characters in the text.
            <!-- TODO: remove this limitation: -->
            (Note that if <see cref="P:C1.C1Preview.C1PrintDocument.UseGdiPlusTextRendering" /> is <b>false</b>,
            this mode is not supported, and <see cref="F:C1.C1Preview.AlignHorzEnum.Justify" /> is used instead.)
            </summary>
    </member>
    <member name="T:C1.C1Preview.AlignVertEnum">
      <summary>
            Specifies the vertical alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.C1Preview.Style.TextAlignVert" /> property.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Top">
      <summary>
            The text is top-aligned.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Center">
      <summary>
            The text is centered vertically.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Bottom">
      <summary>
            The text is bottom-aligned.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Justify">
      <summary>
            The text is justified vertically.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.JustifyChars">
      <summary>
            When applied to vertical text (<see cref="T:C1.C1Preview.RenderVerticalText" />, <see cref="T:C1.C1Preview.RenderVerticalParagraph" />),
            justifies text vertically by adding white spaces between all characters.
            <!-- TODO: remove this limitation: -->
            (Note that if <see cref="P:C1.C1Preview.C1PrintDocument.UseGdiPlusTextRendering" /> is <b>false</b>,
            this mode is not supported, and <see cref="F:C1.C1Preview.AlignVertEnum.Justify" /> is used instead.)
            </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlignHorzEnum">
      <summary>
            Specifies the horizontal alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.C1Preview.ImageAlign.AlignHorz" /> property
            on <see cref="P:C1.C1Preview.Style.ImageAlign" /> and <see cref="P:C1.C1Preview.Style.BackgroundImageAlign" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Left">
      <summary>
            The image is left-aligned.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Center">
      <summary>
            The image is centered horizontally.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Right">
      <summary>
            The image is right-aligned.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlignVertEnum">
      <summary>
            Specifies the vertical alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.C1Preview.ImageAlign.AlignVert" /> property
            on <see cref="P:C1.C1Preview.Style.ImageAlign" /> and <see cref="P:C1.C1Preview.Style.BackgroundImageAlign" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Top">
      <summary>
            The image is top-aligned.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Center">
      <summary>
            The image is centered vertically.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Bottom">
      <summary>
            The image is bottom-aligned.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TextPositionEnum">
      <summary>
            Specifies the subscript and superscript properties of text.
            
            This is the type of <see cref="P:C1.C1Preview.Style.TextPosition" /> property.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Normal">
      <summary>
            The text is positioned and sized normally.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Subscript">
      <summary>
            The text is positioned and sized as subscript.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Superscript">
      <summary>
            The text is positioned and sized as superscript.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IImageAlign">
      <summary>
            Defines image alignment properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetAlignHorz">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IImageAlign.AlignHorz" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetAlignVert">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IImageAlign.AlignVert" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetStretchHorz">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IImageAlign.StretchHorz" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetStretchVert">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IImageAlign.StretchVert" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetKeepAspectRatio">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IImageAlign.KeepAspectRatio" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetTileHorz">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IImageAlign.TileHorz" /> property to an undefuned state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetTileVert">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IImageAlign.TileVert" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetAll">
      <summary>
            Resets all properties to an undefined state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignHorz">
      <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasAlignHorz">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IImageAlign.AlignHorz" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignVert">
      <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasAlignVert">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IImageAlign.AlignVert" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchHorz">
      <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasStretchHorz">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IImageAlign.StretchHorz" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchVert">
      <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasStretchVert">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IImageAlign.StretchVert" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.KeepAspectRatio">
      <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasKeepAspectRatio">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IImageAlign.KeepAspectRatio" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileHorz">
      <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasTileHorz">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IImageAlign.TileHorz" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileVert">
      <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasTileVert">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IImageAlign.TileVert" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.BestFit">
      <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignHorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IImageAlign.AlignHorz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignVertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IImageAlign.AlignVert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchHorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IImageAlign.StretchHorz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchVertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IImageAlign.StretchVert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.KeepAspectRatioExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IImageAlign.KeepAspectRatio" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileHorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IImageAlign.TileHorz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileVertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IImageAlign.TileVert" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlign">
      <summary>
            Represents the alignment of an image within its container.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ImageAlign.#ctor(C1.C1Preview.ImageAlignHorzEnum,C1.C1Preview.ImageAlignVertEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ImageAlign" /> class.
            </summary>
      <param name="alignHorz">A value assigned to <see cref="P:C1.C1Preview.ImageAlign.AlignHorz" />.</param>
      <param name="alignVert">A value assigned to <see cref="P:C1.C1Preview.ImageAlign.AlignVert" />.</param>
      <param name="stretchHorz">A value assigned to <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />.</param>
      <param name="stretchVert">A value assigned to <see cref="P:C1.C1Preview.ImageAlign.StretchVert" />.</param>
      <param name="keepAspectRatio">A value assigned to <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" />.</param>
      <param name="tileHorz">A value assigned to <see cref="P:C1.C1Preview.ImageAlign.TileHorz" />.</param>
      <param name="tileVert">A value assigned to <see cref="P:C1.C1Preview.ImageAlign.TileVert" />.</param>
    </member>
    <member name="M:C1.C1Preview.ImageAlign.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:C1.C1Preview.ImageAlign" />.
            </summary>
      <returns>A string that represents the current <see cref="T:C1.C1Preview.ImageAlign" />.</returns>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignHorz">
      <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignVert">
      <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchHorz">
      <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchVert">
      <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.KeepAspectRatio">
      <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            Used when <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" /> or <see cref="P:C1.C1Preview.ImageAlign.StretchVert" /> is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileHorz">
      <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            Ignored if <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" /> is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileVert">
      <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            Ignored if <see cref="P:C1.C1Preview.ImageAlign.StretchVert" /> is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.BestFit">
      <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            See <b>remarks</b> for details.
            </summary>
      <remarks>
        <para>
            Getting this property returns a Boolean conjunction (<b>AND</b>) of the
            <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />, <see cref="P:C1.C1Preview.ImageAlign.StretchVert" /> and <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" /> values.
            </para>
        <para>
            Setting this property to a <b>true</b> value sets
            <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />, <see cref="P:C1.C1Preview.ImageAlign.StretchVert" /> and <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" /> to <b>true</b>.
            </para>
        <para>
            Setting this property to a <b>false</b> value sets
            <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" /> only to <b>false</b>.
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignHorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.ImageAlign.AlignHorz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignVertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.ImageAlign.AlignVert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchHorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchVertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.ImageAlign.StretchVert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.KeepAspectRatioExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileHorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.ImageAlign.TileHorz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileVertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.ImageAlign.TileVert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.Default">
      <summary>
            Gets the default image alignment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Offsets">
      <summary>
            A structure representing four <see cref="T:C1.C1Preview.Unit" /> values
            corresponding to the four sides of a rectangluar area.
            Used by <see cref="P:C1.C1Preview.Style.Padding" /> and <see cref="P:C1.C1Preview.Style.Spacing" /> properties.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IOffsets">
      <summary>
            Describes four <see cref="T:C1.C1Preview.Unit" /> values
            corresponding to the four sides of a rectangluar area.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetLeft">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IOffsets.Left" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetTop">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IOffsets.Top" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetRight">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IOffsets.Right" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetBottom">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IOffsets.Bottom" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetAll">
      <summary>
            Resets all properties to an undefined state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Left">
      <summary>
            Gets or sets the left offset value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasLeft">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IOffsets.Left" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Top">
      <summary>
            Gets or sets the top offset value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasTop">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IOffsets.Top" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Right">
      <summary>
            Gets or sets the right offset value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasRight">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IOffsets.Right" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Bottom">
      <summary>
            Gets or sets the bottom offset value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasBottom">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IOffsets.Bottom" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.All">
      <summary>
            Sets all four offset values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.LeftExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IOffsets.Left" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.TopExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IOffsets.Top" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.RightExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IOffsets.Right" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.BottomExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IOffsets.Bottom" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Offsets.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Offsets" /> structure,
            assigning the <see cref="P:C1.C1Preview.Offsets.Left" />, <see cref="P:C1.C1Preview.Offsets.Top" />, <see cref="P:C1.C1Preview.Offsets.Right" /> and <see cref="P:C1.C1Preview.Offsets.Bottom" />
            values.
            </summary>
      <param name="left">A string representing the <see cref="T:C1.C1Preview.Unit" /> value assigned to the <see cref="P:C1.C1Preview.Offsets.Left" /> property.</param>
      <param name="top">A string representing the <see cref="T:C1.C1Preview.Unit" /> value assigned to the <see cref="P:C1.C1Preview.Offsets.Top" /> property.</param>
      <param name="right">A string representing the <see cref="T:C1.C1Preview.Unit" /> value assigned to the <see cref="P:C1.C1Preview.Offsets.Right" /> property.</param>
      <param name="bottom">A string representing the <see cref="T:C1.C1Preview.Unit" /> value assigned to the <see cref="P:C1.C1Preview.Offsets.Bottom" /> property.</param>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.Offsets.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Offsets" /> structure,
            assigning a single value to all four offset properties.
            </summary>
      <param name="all">A string representing the <see cref="T:C1.C1Preview.Unit" /> value assigned to all four offsets.</param>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.Offsets.#ctor(C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Offsets" /> structure,
            assigning a single value to all four offset properties.
            </summary>
      <param name="all">A <see cref="T:C1.C1Preview.Unit" /> value assigned to all four offsets.</param>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Left">
      <summary>
            Gets or sets the left offset value.
            </summary>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Top">
      <summary>
            Gets or sets the top offset value.
            </summary>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Right">
      <summary>
            Gets or sets the right offset value.
            </summary>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Bottom">
      <summary>
            Gets or sets the bottom offset value.
            </summary>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.All">
      <summary>
            Sets all four offset values.
            </summary>
      <remarks>
            Only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "1mm" or "8in") are allowed.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.LeftExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Offsets.Left" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.TopExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Offsets.Top" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.RightExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Offsets.Right" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.BottomExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Offsets.Bottom" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LineDef">
      <summary>
            Represents a set of attributes used to draw lines.
            This class is immutable.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineDef" /> class
            with default values (1pt wide black line).
            </summary>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineDef" /> class,
            assigning line color.
            </summary>
      <param name="color">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineDef" /> class,
            assigning line width and color.
            </summary>
      <param name="width">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="color">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineDef" /> class,
            assigning line width, color and dash style.
            </summary>
      <param name="width">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="color">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="style">A value assigned to the <see cref="P:C1.C1Preview.LineDef.DashStyle" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineDef" /> class,
            assigning line width, color and dash pattern.
            <see cref="P:C1.C1Preview.LineDef.DashStyle" /> is set to <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom" />.
            </summary>
      <param name="width">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="color">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="dashPattern">A value assigned to the <see cref="P:C1.C1Preview.LineDef.DashPattern" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineDef" /> class,
            assigning line width, color, dash background color and dash style.
            </summary>
      <param name="width">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="color">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="backColor">A value assigned to the <see cref="P:C1.C1Preview.LineDef.BackColor" /> property.</param>
      <param name="style">A value assigned to the <see cref="P:C1.C1Preview.LineDef.DashStyle" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Drawing.Color,System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LineDef" /> class,
            assigning line width, color, dash background color and dash pattern.
            <see cref="P:C1.C1Preview.LineDef.DashStyle" /> is set to <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom" />.
            </summary>
      <param name="width">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="color">A value assigned to the <see cref="P:C1.C1Preview.LineDef.Color" /> property.</param>
      <param name="backColor">A value assigned to the <see cref="P:C1.C1Preview.LineDef.BackColor" /> property.</param>
      <param name="dashPattern">A value assigned to the <see cref="P:C1.C1Preview.LineDef.DashPattern" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.LineDef.IsSameStyle(C1.C1Preview.LineDef)">
      <summary>
            Tests whether the current and another <see cref="T:C1.C1Preview.LineDef" /> objects define
            same line styles - i.e. whether the values of <see cref="P:C1.C1Preview.LineDef.Color" />,
            <see cref="P:C1.C1Preview.LineDef.BackColor" />, <see cref="P:C1.C1Preview.LineDef.DashStyle" /> and
            <see cref="P:C1.C1Preview.LineDef.DashPattern" /> properties are the same.
            Note that this method does NOT compare the lines' widths.
            </summary>
      <param name="line">A <see cref="T:C1.C1Preview.LineDef" /> to compare to the current one.</param>
      <returns>
        <b>true</b> if the two lines have same styles, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:C1.C1Preview.LineDef" /> object is equal to the current object.
            This method compares the property values on the objects.
            </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <b>true</b> if the specified object's properties are equal to the current one's, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.GetHashCode">
      <summary>
            Serves as a hash function for the <see cref="T:C1.C1Preview.LineDef" /> type.
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.Parse(System.String,System.Boolean)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.LineDef" /> object, and initialises it with values
            acquired by parsing a string representation of a <see cref="T:C1.C1Preview.LineDef" />.
            </summary>
      <param name="s">A string representing a <see cref="T:C1.C1Preview.LineDef" /> (see <see cref="M:C1.C1Preview.LineDef.ToString" />).</param>
      <param name="throwOnError">If <b>true</b>, an exception is thrown if an error occurs while parsing; otherwise, errors are ignored.</param>
      <returns>The new <see cref="T:C1.C1Preview.LineDef" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.Parse(System.String,System.Boolean,System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            For internal use only.
            </summary>
      <param name="s">
      </param>
      <param name="throwOnError">
      </param>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.LineDef.Color">
      <summary>
            Gets the line color.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Width">
      <summary>
            Gets the line width (thickness).
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.BackColor">
      <summary>
            Gets the the background color of spaces between the dashes of a dashed line.
            Not used if <see cref="P:C1.C1Preview.LineDef.DashStyle" /> is <see cref="F:System.Drawing.Drawing2D.DashStyle.Solid" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DashStyle">
      <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> of the current <see cref="T:C1.C1Preview.LineDef" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DashPattern">
      <summary>
            Gets an array of custom dashes and spaces.
            </summary>
      <remarks>
            This property is used only if
            <see cref="P:C1.C1Preview.LineDef.DashStyle" /> is set to <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.LineDef.Empty">
      <summary>
            Represents an empty line (with emtpy color and zero width).
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Default">
      <summary>
            Represents the default regular line (solid black, 1pt wide).
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DefaultBold">
      <summary>
            Represents the default bold line (solid black, 2pt wide).
            </summary>
    </member>
    <member name="T:C1.C1Preview.LineDef.TypeConverter">
      <summary>
            Used to convert objects of <see cref="T:C1.C1Preview.LineDef" /> type.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LineDef.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.LineDef" />.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.LineDef" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Preview.Borders">
      <summary>
            A structure defining the four borders around a rectangular area.
            Each border is represented by a <see cref="T:C1.C1Preview.LineDef" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IBorders">
      <summary>
            Describes four borders around a rectangular area.
            Each border is represented by a <see cref="T:C1.C1Preview.LineDef" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetLeft">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IBorders.Left" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetTop">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IBorders.Top" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetRight">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IBorders.Right" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetBottom">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IBorders.Bottom" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetRadiusX">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IBorders.RadiusX" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetRadiusY">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IBorders.RadiusY" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetAll">
      <summary>
            Resets all properties to an undefined state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Left">
      <summary>
            Gets or sets the left border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasLeft">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IBorders.Left" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Top">
      <summary>
            Gets or sets the top border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasTop">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IBorders.Top" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Right">
      <summary>
            Gets or sets the right border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasRight">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IBorders.Right" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Bottom">
      <summary>
            Gets or sets the bottom border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasBottom">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IBorders.Bottom" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusX">
      <summary>
            Gets or sets the width of the ellipse used to draw the rounded corners of the border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasRadiusX">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IBorders.RadiusX" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusY">
      <summary>
            Gets or sets the height of the ellipse used to draw the rounded corners of the border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasRadiusY">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IBorders.RadiusY" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.All">
      <summary>
            Sets all four borders.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.IsRound">
      <summary>
            Gets a value indicating whether the current borders is rounded
            (i.e. whether both <see cref="P:C1.C1Preview.IBorders.RadiusX" /> and <see cref="P:C1.C1Preview.IBorders.RadiusY" /> have non-zero values).
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.LeftExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IBorders.Left" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.TopExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IBorders.Top" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RightExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IBorders.Right" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.BottomExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IBorders.Bottom" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusXExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IBorders.RadiusX" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusYExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IBorders.RadiusY" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Left">
      <summary>
            Gets or sets the left border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Top">
      <summary>
            Gets or sets the top border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Right">
      <summary>
            Gets or sets the right border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Bottom">
      <summary>
            Gets or sets the bottom border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.All">
      <summary>
            Sets all four borders to a single value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusX">
      <summary>
            Gets or sets the x-radius of the ellipse used to draw the rounded corners of the border.
            </summary>
      <remarks>
            If both this and <see cref="P:C1.C1Preview.Borders.RadiusY" /> are non-zero, all borders are drawn using the 
            same (<see cref="P:C1.C1Preview.Borders.Top" />) border thickness.
            <para>
            If this value is less than the border thickness, border thickness is used as the radius.
            </para></remarks>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusY">
      <summary>
            Gets or sets the y-radius of the ellipse used to draw the rounded corners of the border.
            </summary>
      <remarks>
            If both this and <see cref="P:C1.C1Preview.Borders.RadiusX" /> are non-zero, all borders are drawn using the 
            same (<see cref="P:C1.C1Preview.Borders.Top" />) border thickness.
            <para>
            If this value is less than the border thickness, border thickness is used as the radius.
            </para></remarks>
    </member>
    <member name="P:C1.C1Preview.Borders.IsRound">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Preview.Borders" /> structure
            defines rounded borders (i.e. whether both <see cref="P:C1.C1Preview.Borders.RadiusX" /> and
            <see cref="P:C1.C1Preview.Borders.RadiusY" /> have non-zero values).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.LeftExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Borders.Left" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.TopExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Borders.Top" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RightExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Borders.Right" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.BottomExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Borders.Bottom" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusXExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Borders.RadiusX" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusYExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Borders.RadiusY" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.GridLines">
      <summary>
            A structure defining the grid lines (four borders and two internal lines) 
            used to draw a <see cref="T:C1.C1Preview.RenderTable" />.
            Each line is represented by a <see cref="T:C1.C1Preview.LineDef" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IGridLines">
      <summary>
            Describes the grid lines used to draw a <see cref="T:C1.C1Preview.RenderTable" />.
            Each line is represented by a <see cref="T:C1.C1Preview.LineDef" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetLeft">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IGridLines.Left" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetTop">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IGridLines.Top" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetRight">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IGridLines.Right" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetBottom">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IGridLines.Bottom" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetVert">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IGridLines.Vert" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetHorz">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IGridLines.Horz" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetAll">
      <summary>
            Resets all properties to an undefined state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Left">
      <summary>
            Gets or sets the left outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasLeft">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IGridLines.Left" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Top">
      <summary>
            Gets or sets the top outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasTop">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IGridLines.Top" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Right">
      <summary>
            Gets or sets the right outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasRight">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IGridLines.Right" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Bottom">
      <summary>
            Gets or sets the bottom outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasBottom">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IGridLines.Bottom" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Vert">
      <summary>
            Gets or sets the vertical inner lines in a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasVert">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IGridLines.Vert" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Horz">
      <summary>
            Gets or sets the horizontal inner lines in a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasHorz">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IGridLines.Horz" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.All">
      <summary>
            Sets all six lines to a single value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.LeftExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IGridLines.Left" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.TopExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IGridLines.Top" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.RightExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IGridLines.Right" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.BottomExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IGridLines.Bottom" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.VertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IGridLines.Vert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IGridLines.Horz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Left">
      <summary>
            Gets or sets the left outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Top">
      <summary>
            Gets or sets the top outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Right">
      <summary>
            Gets or sets the right outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Bottom">
      <summary>
            Gets or sets the bottom outer border of a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Vert">
      <summary>
            Gets or sets the vertical inner lines in a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Horz">
      <summary>
            Gets or sets the horizontal inner lines in a table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.All">
      <summary>
            Sets all six lines to a single value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.LeftExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.GridLines.Left" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.TopExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.GridLines.Top" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.RightExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.GridLines.Right" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.BottomExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.GridLines.Bottom" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.VertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.GridLines.Vert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.HorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.GridLines.Horz" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkAttrs">
      <summary>
            Represents the visual attributes of a hyperlink in a certain state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkAttrs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkAttrs" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkAttrs.IsDefault">
      <summary>
            Checks whether the current <see cref="T:C1.C1Preview.C1HyperlinkAttrs" /> has all default values.
            </summary>
      <returns>
        <b>true</b> if all properties on the current object have default values, <b>false</b> otherwise.</returns>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkTextAttrs">
      <summary>
            Represents the visual attributes of a text hyperlink in a certain state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkTextAttrs" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.#ctor(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkTextAttrs" /> class,
            assigning background and foreground colors and <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.Underline" /> property.
            </summary>
      <param name="backColor">The background color of the hyperlink text.</param>
      <param name="foreColor">The foreground color of the hyperlink text.</param>
      <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkTextAttrs" /> class,
            assigning <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.Underline" /> property.
            </summary>
      <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.ShouldSerializeBackColor">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.ShouldSerializeForeColor">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.IsDefault">
      <summary>
            Checks whether the current <see cref="T:C1.C1Preview.C1HyperlinkTextAttrs" /> has all default values.
            </summary>
      <returns>
        <b>true</b> if all properties on the current object have default values, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            This method compares properties on the two objects.
            </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <b>true</b> if the specified Object is equal to the current object; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.GetHashCode">
      <summary>
            Serves as a hash function for <see cref="T:C1.C1Preview.C1HyperlinkTextAttrs" />.
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor">
      <summary>
            Gets the background color.
            If this value indicates an empty or transparent color,
            the background color of a hyperlink is not changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor">
      <summary>
            Gets the foreground (text) color.
            If this value indicates an empty or transparent color,
            the text color of a hyperlink is not changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.Underline">
      <summary>
            Gets a value indicating whether the text of a hyperlink is underlined.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.VisitedDefault">
      <summary>
            Gets the default attributes of visited hyperlinks.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.NormalDefault">
      <summary>
            Gets the default attributes of "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.HoverDefault">
      <summary>
            Gets the default attributes of highlighted hyperlinks.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Shadow">
      <summary>
            Represents the shadow cast by a <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IShadow">
      <summary>
            Represents the shadow cast by a <see cref="T:C1.C1Preview.RenderObject" />.
            This interface is implemented by <see cref="T:C1.C1Preview.Shadow" /> structure.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetTransparency">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IShadow.Transparency" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetSize">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IShadow.Size" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetDistance">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IShadow.Distance" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetAngle">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IShadow.Angle" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetColor">
      <summary>
            Resets value of the <see cref="P:C1.C1Preview.IShadow.Color" /> property.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetAll">
      <summary>
            Resets all properties to an undefined state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Transparency">
      <summary>
            Gets or sets the transparency of the shadow, in percent.
            A value of <b>0</b> defines a solid (non-transparent) shadow,
            a value of <b>100</b> (which is the default) defines a fully transparent (invisible) shadow.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasTransparency">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IShadow.Transparency" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Size">
      <summary>
            Gets or sets the size of the shadow relative to the size of the object, in percent.
            A value of 100 (which is the default) indicates that the shadow has the same size
            as the object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasSize">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IShadow.Size" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Distance">
      <summary>
            Gets or sets the distance that the shadow's center is offset from the the object's center.
            Note that only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "0.5in" or "4mm") can
            be assigned to this property.
            <para>The default is <b>2mm</b>.</para></summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasDistance">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IShadow.Distance" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Angle">
      <summary>
            Gets or sets the angle, in degrees, of the shadow. The angle is measured relative
            to the three o'clock position clockwise. The default is <b>45</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasAngle">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IShadow.Angle" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Color">
      <summary>
            Resets the <see cref="P:C1.C1Preview.IShadow.Color" /> property to an undefined state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasColor">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.IShadow.Color" /> property is defined
            on the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.TransparencyExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IShadow.Transparency" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.SizeExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IShadow.Size" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.DistanceExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IShadow.Distance" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.AngleExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IShadow.Angle" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.ColorExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.IShadow.Color" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Shadow.#ctor(System.Single,System.Single,C1.C1Preview.Unit,System.Single,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Shadow" /> structure,
            assigning <see cref="P:C1.C1Preview.Shadow.Transparency" />, <see cref="P:C1.C1Preview.Shadow.Size" />, <see cref="P:C1.C1Preview.Shadow.Distance" /> and <see cref="P:C1.C1Preview.Shadow.Angle" />
            values.
            </summary>
      <param name="transparency">A value assigned to the <see cref="P:C1.C1Preview.Shadow.Transparency" /> property.</param>
      <param name="size">A value assigned to the <see cref="P:C1.C1Preview.Shadow.Size" /> property.</param>
      <param name="distance">An absolute <see cref="T:C1.C1Preview.Unit" /> value assigned to the <see cref="P:C1.C1Preview.Shadow.Distance" /> property.</param>
      <param name="angle">A value assigned to the <see cref="P:C1.C1Preview.Shadow.Angle" /> property.</param>
      <param name="color">A value assigned to the <see cref="P:C1.C1Preview.Shadow.Color" /> property.</param>
    </member>
    <member name="P:C1.C1Preview.Shadow.Transparency">
      <summary>
            Gets or sets the transparency of the shadow, in percent.
            A value of <b>0</b> defines a solid (non-transparent) shadow,
            a value of <b>100</b> defines a fully transparent (invisible) shadow.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Size">
      <summary>
            Gets or sets the size of the shadow relative to the size of the object, in percent.
            A value of 100 indicates that the shadow has the same size
            as the object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Distance">
      <summary>
            Gets or sets the distance that the shadow's center is offset from the the object's center.
            Note that only absolute <see cref="T:C1.C1Preview.Unit" /> values (such as "0.5in" or "4mm") can
            be assigned to this property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Angle">
      <summary>
            Gets or sets the angle, in degrees, of the shadow. The angle is measured relative
            to the three o'clock position clockwise.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Color">
      <summary>
            Gets or sets the color of the shadow.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.TransparencyExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Shadow.Transparency" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.SizeExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Shadow.Size" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.DistanceExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Shadow.Distance" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.AngleExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Shadow.Angle" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.ColorExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Shadow.Color" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Style">
      <summary>
            Represents the style of an object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.Clear">
      <summary>
            Clears the current style, resets all properties so that they
            inherit from the parent style.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)">
      <summary>
            Copies to the current style all properties of another <see cref="T:C1.C1Preview.Style" /> object
            that have been explicitly set on that other style,
            plus the values of the <see cref="P:C1.C1Preview.Style.Parent" /> and <see cref="P:C1.C1Preview.Style.AmbientParent" /> properties.
            </summary>
      <param name="source">The source <see cref="T:C1.C1Preview.Style" /> object to copy properties from.</param>
      <remarks>
            Effectively, this method makes the current <see cref="T:C1.C1Preview.Style" />
            a complete copy of the <paramref name="source" /> style.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.Style.ResetBackgroundImage">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.BackgroundImage" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetBrush">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.Brush" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextColor">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.TextColor" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextAngle">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.TextAngle" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextAlignHorz">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.TextAlignHorz" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextAlignVert">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.TextAlignVert" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetLineSpacing">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.LineSpacing" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetWordWrap">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.WordWrap" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextPosition">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.TextPosition" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetHyperlinkAttrs">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.HyperlinkAttrs" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetVisitedHyperlinkAttrs">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.VisitedHyperlinkAttrs" /> property to undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetHoverHyperlinkAttrs">
      <summary>
            Resets value of the <see cref="P:C1.C1Preview.Style.HoverHyperlinkAttrs" /> property.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetActiveHyperlinkAttrs">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.ActiveHyperlinkAttrs" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetMeasureTrailingSpaces">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.MeasureTrailingSpaces" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetBackColor">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.BackColor" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetMinOrphanLines">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.MinOrphanLines" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetClientAreaOnly">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.ClientAreaOnly" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetShapeFillBrush">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.ShapeFillBrush" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetShapeFillColor">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.ShapeFillColor" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetShapeLine">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.ShapeLine" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFlowAlign">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FlowAlign" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFlowAlignChildren">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FlowAlignChildren" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextIndent">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.TextIndent" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetCharSpacing">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.CharSpacing" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetCharWidth">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.CharWidth" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetJustifyLastLine">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.JustifyLastLine" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetJustifyEndOfLines">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.JustifyEndOfLines" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetWordWrapMode">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.WordWrapMode" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetRightToLeft">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.RightToLeft" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFont">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.Font" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontName">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FontName" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontSize">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FontSize" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontBold">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FontBold" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontItalic">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FontItalic" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontUnderline">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FontUnderline" /> property to an undefined state.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontStrikeout">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Style.FontStrikeout" /> property to an undefined state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasExprs">
      <summary>
            Gets a value indicating whether the current style has calculated properties.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Owner">
      <summary>
            Gets the owner of the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Parent">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.Style" /> that is the parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for non-ambient properties
            of the current style that have not been explicitly set.
            </para><para>
            If <b>null</b>, such properties have default values.
            </para><para>
            This property is <b>null</b> by default.
            </para></summary>
      <remarks>
            Initially a <see cref="T:C1.C1Preview.Style" /> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, while the effective values
            of all non-ambient properties (such as borders) are inherited
            from the style specified by this property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Parents">
      <summary>
            Sets both parents (<see cref="P:C1.C1Preview.Style.Parent" /> and <see cref="P:C1.C1Preview.Style.AmbientParent" />) to the same value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Children">
      <summary>
            Gets the collection of child styles
            (i.e. <see cref="T:C1.C1Preview.Style" /> objects that have their <see cref="P:C1.C1Preview.Style.Parent" />
            set to the current style).
            </summary>
      <remarks>
            This method always returns a non-<b>null</b> collection of child styles,
            initializing it if it did not exist.
            To test whether a style already has child styles
            without creating the <see cref="P:C1.C1Preview.Style.Children" /> collection,
            use the <see cref="P:C1.C1Preview.Style.HasChildren" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasChildren">
      <summary>
            Gets a value indicating whether the current style's <see cref="P:C1.C1Preview.Style.Children" />
            collection has been initialized and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.AmbientParent">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.Style" /> that is the ambient parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for ambient properties
            of the current style that have not been explicitly set.
            </para><para>
            If <b>null</b>, such properties are inherited from the style of the containing object.
            </para><para>
            This property is <b>null</b> by default.
            </para></summary>
      <remarks>
            Initially a <see cref="T:C1.C1Preview.Style" /> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, unless this property has
            been set to a non-<b>null</b> value, in which case they are
            inherited from that style.
            <para>
            Note that even if an <b>AmbientParent</b> has been specified,
            only ambient properties that have been explicitly set on
            that style or any of its own ambient parents (styles or containing objects)
            propagate to the current style. See example below for details.
            </para></remarks>
      <example>
            For instance, the following code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            still prints "my text" in bold, while this code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                doc.Style.FontBold = false; // this line makes the difference!
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            prints "my text" using regular (non-bold) font. This is because
            <see cref="P:C1.C1Preview.Style.FontBold" /> has been explicitly set to <b>false</b>
            on the style assigned to the <b>AmbientParent</b> on the text object.
            </example>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImage">
      <summary>
            Gets or sets the background image.
            The image is aligned using <see cref="P:C1.C1Preview.Style.BackgroundImageAlign" />.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is no image.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageName">
      <summary>
            Gets or sets the name of the background image
            in <see cref="P:C1.C1Preview.C1PrintDocument.Dictionary" /> on the current document.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is emtpy string.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasBackgroundImage">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.BackgroundImage" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Brush">
      <summary>
            Gets or sets the brush used to fill the background.
            If both this and <see cref="P:C1.C1Preview.Style.BackColor" /> properties are specified for a style,
            the <b>BackColor</b> takes precedence.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is no brush.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasBrush">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.Brush" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextColor">
      <summary>
            Gets or sets the text (foreground) color.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is black color.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextColor">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.TextColor" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAngle">
      <summary>
            Gets or sets the text rotation angle,
            in degrees counterclockwise from the <b>X</b> axis.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is 0.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextAngle">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.TextAngle" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignHorz">
      <summary>
            Gets or sets the horizontal text alignment.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is left alignment.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextAlignHorz">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.TextAlignHorz" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignVert">
      <summary>
            Gets or sets the vertical text alignment.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is top alignment.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextAlignVert">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.TextAlignVert" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.LineSpacing">
      <summary>
            Gets or sets the line spacing of a text in percent.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100% (normal line spacing).</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasLineSpacing">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.LineSpacing" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrap">
      <summary>
            Gets or sets a value indicating whether text automatically
            wraps to the next line when there is not enough space left on the current line.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasWordWrap">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.WordWrap" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextPosition">
      <summary>
            Gets or sets a value indicating whether text is rendered
            normally, or as superscript or subscript.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is normal text.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextPosition">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.TextPosition" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HyperlinkAttrs">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.C1HyperlinkAttrs" /> for "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight hyperlinks with blue text color.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasHyperlinkAttrs">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.HyperlinkAttrs" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.VisitedHyperlinkAttrs">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.C1HyperlinkAttrs" /> for visited hyperlinks.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight visited hyperlinks with magenta text color.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasVisitedHyperlinkAttrs">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.VisitedHyperlinkAttrs" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HoverHyperlinkAttrs">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.C1HyperlinkAttrs" /> for highlighted hyperlinks.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to underline text on a hyperlinks under mouse.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasHoverHyperlinkAttrs">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.HoverHyperlinkAttrs" /> property is specified
            for current <see cref="T:C1.C1Preview.Style" /> object.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ActiveHyperlinkAttrs">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.C1HyperlinkAttrs" /> for active hyperlinks.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to not highlight active hyperlinks.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasActiveHyperlinkAttrs">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.ActiveHyperlinkAttrs" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MeasureTrailingSpaces">
      <summary>
            Gets or sets a value indicating whether spaces at ends of text lines
            are taken into account when measuring the text.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasMeasureTrailingSpaces">
      <summary>
            Gets a value indicating whether the <see cref="!:MeasureTralingSpaces" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Padding">
      <summary>
            Gets or sets the padding (white space added between the style owner's content and borders).
            </summary>
      <remarks>
            Padding is within <see cref="P:C1.C1Preview.Style.Borders" /> (if any), while <see cref="P:C1.C1Preview.Style.Spacing" /> is added outside of borders.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            </para><para>The default is no padding.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Spacing">
      <summary>
            Gets or sets the spacing between the the current style's owner and the surrounding objects.
            </summary>
      <remarks>
            Spacing is outside of <see cref="P:C1.C1Preview.Style.Borders" /> (which, in turn, contain <see cref="P:C1.C1Preview.Style.Padding" />).
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            </para><para>The default is no spacing.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Borders">
      <summary>
            Gets or sets the borders drawn around the current style's owner object.
            </summary>
      <remarks>
            Borders are drawn within the <see cref="P:C1.C1Preview.Style.Spacing" /> area, and contain <see cref="P:C1.C1Preview.Style.Padding" />.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            </para><para>The default is no borders.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Shadow">
      <summary>
            Gets or sets properties of the shadow cast by the current object.
            By default the shadow is invisible due to being 100% transparent.
            Set <b>Shadow.Transparency</b> to a value less than 100, to show shadow.
            Other properties can be adjusted as needed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.GridLines">
      <summary>
            Gets or sets the grid lines used to draw tables.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is no grid lines.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.ImageAlign">
      <summary>
            Gets or sets the foreground image alignment.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para></remarks>
      <seealso cref="P:C1.C1Preview.Style.BackgroundImageAlign" />
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageAlign">
      <summary>
            Gets or sets the background image alignment.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para></remarks>
      <seealso cref="P:C1.C1Preview.Style.ImageAlign" />
    </member>
    <member name="P:C1.C1Preview.Style.BackColor">
      <summary>
            Gets or sets the background color.
            If both this and <see cref="P:C1.C1Preview.Style.Brush" /> properties are specified for a style,
            this property takes precedence.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is transparent background color.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasBackColor">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.BackColor" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MinOrphanLines">
      <summary>
            Gets or sets the minimum number of orphan text lines allowed on a page
            before or after a page break.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is 0.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasMinOrphanLines">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.MinOrphanLines" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ClientAreaOnly">
      <summary>
            Gets or sets a value indicating whether just the client area of a <see cref="T:System.Windows.Forms.Control" />,
            or the whole control, is rendered by the <see cref="T:C1.C1Preview.RenderImage" /> object owning the current style.
            </summary>
      <remarks>
        <para>
            A <see cref="T:C1.C1Preview.RenderImage" /> can render an image of a <see cref="T:System.Windows.Forms.Control" />
            if it is assigned to the <b>RenderImage</b>'s <see cref="P:C1.C1Preview.RenderImage.Control" /> property.
            <b>ClientAreaOnly</b> can be used to indicate that only the client area of that control should be rendered.
            </para>
        <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            </para>
        <para>The default is <b>false</b>.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasClientAreaOnly">
      <summary>
            Gets a value indicating whether the <see cref="!:ClietAreaOnly" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillBrush">
      <summary>
            Gets or sets the brush used to fill internal areas of shapes
            (objects derived from <see cref="T:C1.C1Preview.RenderShapeBase" />).
            If for a style both this and <see cref="P:C1.C1Preview.Style.ShapeFillColor" /> are specified,
            <b>ShapeFillColor</b> takes precedence.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is no brush.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasShapeFillBrush">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.ShapeFillBrush" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillColor">
      <summary>
            Gets or sets the color used to fill internal areas of shapes
            (objects derived from <see cref="T:C1.C1Preview.RenderShapeBase" />).
            If for a style both this and <see cref="P:C1.C1Preview.Style.ShapeFillBrush" /> are specified,
            this property takes precedence.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is transparent fill color.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasShapeFillColor">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.ShapeFillColor" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeLine">
      <summary>
            Gets or sets the style of lines used to draw shape objects (RenderLine, RenderRectangle etc).
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is a black line, 1pt thick.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasShapeLine">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.ShapeLine" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlign">
      <summary>
            Gets or sets the alignment of the current style's owner object within its container in a block flow.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is <see cref="F:C1.C1Preview.FlowAlignEnum.Default" />.</para></remarks>
      <seealso cref="P:C1.C1Preview.Style.FlowAlignChildren" />
      <seealso cref="P:C1.C1Preview.RenderObject.Stacking" />
    </member>
    <member name="P:C1.C1Preview.Style.HasFlowAlign">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FlowAlign" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlignChildren">
      <summary>
            Gets or sets the alignment of children of the current style's owner object in a block flow.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is <see cref="F:C1.C1Preview.FlowAlignEnum.Near" />.</para></remarks>
      <seealso cref="P:C1.C1Preview.Style.FlowAlign" />
      <seealso cref="P:C1.C1Preview.RenderObject.Stacking" />
    </member>
    <member name="P:C1.C1Preview.Style.HasFlowAlignChildren">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FlowAlignChildren" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextIndent">
      <summary>
            Gets or sets the indentation of the first line in a block of text.
            </summary>
      <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1Preview.Style.Parent" /> of the current style if not explicitly set).
            <para>The default is 0.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextIndent">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.TextIndent" /> property is defined
            on the current style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharSpacing">
      <summary>
            Gets or sets the spacing between characters in a text.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 0 (normal spacing).</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasCharSpacing">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.CharSpacing" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharWidth">
      <summary>
            Gets or sets the amount (in percent) by which to increase or decrease
            the widths of characters in a text.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100 (normal width).</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasCharWidth">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.CharWidth" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyLastLine">
      <summary>
            Gets or sets a value indicating whether the last line of text should be justified
            if the current style has <see cref="P:C1.C1Preview.Style.TextAlignHorz" /> set to
            <see cref="F:C1.C1Preview.AlignHorzEnum.Justify" /> or <see cref="F:C1.C1Preview.AlignHorzEnum.JustifyChars" />.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasJustifyLastLine">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.JustifyLastLine" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyEndOfLines">
      <summary>
            Gets or sets a value indicating whether lines of text
            ending with a newline character should be justified
            if the current style has <see cref="P:C1.C1Preview.Style.TextAlignHorz" /> set to
            <see cref="F:C1.C1Preview.AlignHorzEnum.Justify" /> or <see cref="F:C1.C1Preview.AlignHorzEnum.JustifyChars" />.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasJustifyEndOfLines">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.JustifyEndOfLines" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrapMode">
      <summary>
            Gets or sets a value indicating how words can be split when text lines wrap.
            <para>
            This property is ignored if <see cref="P:C1.C1Preview.Style.WordWrap" /> is <b>false</b>.
            </para><para>
            The default value is <see cref="F:C1.C1Preview.WordWrapMode.Normal" /></para></summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasWordWrapMode">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.WordWrapMode" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.RightToLeft">
      <summary>
            Gets or sets a value indicating whether right-to-left text rendering rules should be used.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasRightToLeft">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.RightToLeft" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Font">
      <summary>
            Gets or sets the font.
            </summary>
      <remarks>
            Note that setting this property resets properies specifying individual font attributes:
            <see cref="P:C1.C1Preview.Style.FontName" />,
            <see cref="P:C1.C1Preview.Style.FontSize" />,
            <see cref="P:C1.C1Preview.Style.FontBold" />,
            <see cref="P:C1.C1Preview.Style.FontItalic" />,
            <see cref="P:C1.C1Preview.Style.FontUnderline" /> and
            <see cref="P:C1.C1Preview.Style.FontStrikeout" />.
            <para>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            </para><para>The default is Arial, 10pt.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasFont">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.Font" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontName">
      <summary>
            Gets or sets the face name of the font.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is Arial.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontName">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FontName" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontSize">
      <summary>
            Gets or sets the em-size of the font.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 10.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontSize">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FontSize" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontBold">
      <summary>
            Gets or sets a value indicating whether the font is bold.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontBold">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FontBold" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontItalic">
      <summary>
            Gets or sets a value indicating whether the font is italic.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontItalic">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FontItalic" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontUnderline">
      <summary>
            Gets or sets a value indicating whether the font is underlined.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontUnderline">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FontUnderline" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontStrikeout">
      <summary>
            Gets or sets a value indicating whether the font is strikeout.
            </summary>
      <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para></remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontStrikeout">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.Style.FontStrikeout" /> property is defined
            on the current style.
            If false, the actual value of the property is fetched from the parent
            (container) object's style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BackColorExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.BackColor" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.BackgroundImage" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BrushExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.Brush" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextColorExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.TextColor" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAngleExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.TextAngle" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignHorzExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.TextAlignHorz" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignVertExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.TextAlignVert" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.LineSpacingExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.LineSpacing" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrapExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.WordWrap" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextPositionExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.TextPosition" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HyperlinkAttrsExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.HyperlinkAttrs" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.VisitedHyperlinkAttrsExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.VisitedHyperlinkAttrs" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HoverHyperlinkAttrsExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.HoverHyperlinkAttrs" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ActiveHyperlinkAttrsExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.ActiveHyperlinkAttrs" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MeasureTrailingSpacesExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.MeasureTrailingSpaces" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MinOrphanLinesExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.MinOrphanLines" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ClientAreaOnlyExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.ClientAreaOnly" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillBrushExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.ShapeFillBrush" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillColorExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.ShapeFillBrush" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeLineExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.ShapeLine" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlignExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FlowAlign" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlignChildrenExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FlowAlignChildren" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextIndentExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.TextIndent" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharSpacingExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.CharSpacing" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharWidthExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.CharWidth" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyLastLineExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.JustifyLastLine" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyEndOfLinesExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.JustifyEndOfLines" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrapModeExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.WordWrapMode" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontNameExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FontName" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontSizeExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FontSize" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontBoldExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FontBold" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontItalicExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FontItalic" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontUnderlineExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FontUnderline" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontStrikeoutExpr">
      <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1Preview.Style.FontStrikeout" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.StyleCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.Style" /> objects.
            This is the type of the <see cref="P:C1.C1Preview.Style.Children" /> collection
            on a <see cref="T:C1.C1Preview.Style" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.StyleCollection.Add">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.Style" /> object and adds it to the current collection.
            </summary>
      <returns>The created <see cref="T:C1.C1Preview.Style" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.StyleCollection.Owner">
      <summary>
            Gets <see cref="T:C1.C1Preview.Style" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.StyleCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Style" /> object at the specified index in the current collection.
            </summary>
      <param name="index">The index of the element.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.SystemInfo">
      <summary>
            Represents operating system related information in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SystemInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.SystemInfo" /> class.
            Note that the property values are not updated by this constructor,
            the <see cref="M:C1.C1Preview.SystemInfo.Initialize" /> method should be used to actually
            fill the current object with system info data.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SystemInfo.Initialize">
      <summary>
            Updates the properties of the current <see cref="T:C1.C1Preview.SystemInfo" /> object
            with the current system info data.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.ScreenCount">
      <summary>
            Gets the number of system screens.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.LogicalDpiX">
      <summary>
            Gets the logical horizontal resolution (DPI) of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.LogicalDpiY">
      <summary>
            Gets the logical vertical resolution (DPI) of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.PhysicalDpiX">
      <summary>
            Gets the physical horizontal resolution (DPI) of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.PhysicalDpiY">
      <summary>
            Gets the physical vertical resolution (DPI) of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.PrimaryScreenBounds">
      <summary>
            Gets the bounds of the screen as returned by <see cref="P:System.Windows.Forms.Screen.Bounds" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementDevice">
      <summary>
            Gets the measurement device as returned by <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementPrinterName">
      <summary>
            Gets the measurement printer name as returned by <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementDpi">
      <summary>
            Gets the measurement resolution as returned by <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDpi" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementDeviceDescription">
      <summary>
            Gets the <see cref="P:C1.C1Preview.SystemInfo.MeasurementPrinterName" /> if <see cref="P:C1.C1Preview.SystemInfo.MeasurementDevice" /> is a printer,
            or the word <b>"Screen"</b> if it is the screen.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.DocumentFormatVersion">
      <summary>
            Gets a string representing the format version used to serialize a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Format versions are backward-compatible, but not necessarily forward-compatible.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.AssemblyVersion">
      <summary>
            Gets the assembly version of the assembly containing the <see cref="T:C1.C1Preview.C1PrintDocument" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.Culture">
      <summary>
            Gets the current culture.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.OSVersion">
      <summary>
            Gets the OS version as returned by <see cref="P:System.OperatingSystem.VersionString" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagBase">
      <summary>
            The abstract base class for system (<see cref="T:C1.C1Preview.TagSys" />) and user defined (<see cref="T:C1.C1Preview.Tag" />) tags.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagBase.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing the current tag.
            Can return <b>null</b> if the tag has not been added to a document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagBase.Value">
      <summary>
            Gets or sets the value of the current tag.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagSys">
      <summary>
            The abstract base class for system defined tags such as <see cref="T:C1.C1Preview.TagPageNo" /> and <see cref="T:C1.C1Preview.TagPageCount" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagSys.GetName">
      <summary>
            Gets the name of the current tag.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.TagSys.SetName(System.String)">
      <summary>
            Sets the name of the current tag.
            </summary>
      <param name="newName">The new tag name.</param>
    </member>
    <member name="M:C1.C1Preview.TagSys.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.TagSys.Value">
      <summary>
            Gets or sets the value of the current tag.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagPage">
      <summary>
            The abstract base class for system tags that evaluate to a page number or count.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagPageNo">
      <summary>
            Represents the current page number system tag.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagPageNo.GetName">
      <summary>
            Returns the name of the current tag ("PageNo").
            </summary>
      <returns>"PageNo".</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageCount">
      <summary>
            Represents the total page count system tag.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagPageCount.GetName">
      <summary>
            Returns the name of the current tag ("PageCount").
            </summary>
      <returns>"PageCount".</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageX">
      <summary>
            Represents the current horizontal page number system tag.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagPageX.GetName">
      <summary>
            Returns the name of the current tag ("PageX").
            </summary>
      <returns>"PageX".</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageXCount">
      <summary>
            Represents the horizontal page count system tag.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagPageXCount.GetName">
      <summary>
            Returns the name of the current tag ("PageXCount").
            </summary>
      <returns>"PageXCount".</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageY">
      <summary>
            Represents the current vertical page number system tag.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagPageY.GetName">
      <summary>
            Returns the name of the current tag ("PageY").
            </summary>
      <returns>"PageY".</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageYCount">
      <summary>
            Represents the vertical page count system tag.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagPageYCount.GetName">
      <summary>
            Returns the name of the current tag ("PageYCount").
            </summary>
      <returns>"PageYCount".</returns>
    </member>
    <member name="T:C1.C1Preview.TagHyperlinkPageNo">
      <summary>
            Represents a system tag that is replaced by the page number of a hyperlink target.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagHyperlinkPageNo.GetName">
      <summary>
            Returns the name of the current tag ("HyperlinkPageNo").
            </summary>
      <returns>"HyperlinkPageNo".</returns>
    </member>
    <member name="T:C1.C1Preview.TagUsageInfo">
      <summary>
            The abstract base class for system tags that return
            data from <see cref="P:C1.C1Preview.C1PrintDocument.UsageInfo" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagGeneratedDateTime">
      <summary>
            Represents a system tag returning the date and time when the document was last generated.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagGeneratedDateTime.GetName">
      <summary>
            Returns the name of the current tag ("GeneratedDateTime").
            </summary>
      <returns>"GeneratedDateTime".</returns>
    </member>
    <member name="T:C1.C1Preview.TagPrintedDateTime">
      <summary>
            Represents a system tag returning the date and time when the document was last printed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagPrintedDateTime.GetName">
      <summary>
            Returns the name of the current tag ("PrintedDateTime").
            </summary>
      <returns>"PrintedDateTime".</returns>
    </member>
    <member name="T:C1.C1Preview.TagLastFileName">
      <summary>
            Represents a system tag returning the file name last used to save or load the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagLastFileName.GetName">
      <summary>
            Returns the name of the current tag ("LastFileName").
            </summary>
      <returns>"LastFileName".</returns>
    </member>
    <member name="T:C1.C1Preview.TagLastPrinterName">
      <summary>
            Represents a system tag returning the name of the printer last used to print the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagLastPrinterName.GetName">
      <summary>
            Returns the name of the current tag ("LastPrinterName").
            </summary>
      <returns>"LastPrinterName".</returns>
    </member>
    <member name="T:C1.C1Preview.Tag">
      <summary>
            Represents a user-defined tag.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Tag.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Tag" /> class with the specified name and value.
            </summary>
      <param name="name">The name of the tag.</param>
      <param name="value">The value of the tag.</param>
    </member>
    <member name="M:C1.C1Preview.Tag.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Tag" /> class with the specified name.
            </summary>
      <param name="name">The name of the tag.</param>
    </member>
    <member name="M:C1.C1Preview.Tag.#ctor(System.String,System.Object,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Tag" /> class with the specified name, value and type.
            </summary>
      <param name="name">The name of the tag.</param>
      <param name="value">The value of the tag.</param>
      <param name="type">The type of the tag.</param>
    </member>
    <member name="M:C1.C1Preview.Tag.SetName(System.String)">
      <summary>
            Sets the name of the current tag.
            </summary>
      <param name="newName">The new tag name.</param>
    </member>
    <member name="M:C1.C1Preview.Tag.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.Tag.SerializeValue">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.C1Preview.Tag.Value" /> of the current tag
            should be serialized. The default is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.ShowInDialog">
      <summary>
            Gets or sets a value indicating whether to show the current tag and
            allow the user to edit its <see cref="P:C1.C1Preview.Tag.Value" /> in the tags input dialog.
            The default is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Calculated">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.C1Preview.Tag.Value" />
            property contains a string with a script expression
            which must be evaluated when the tag is rendered.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Description">
      <summary>
            Gets or sets the description of the tag.
            If not empty, used as the label in the tag input dialog.
            (If Description is empty, <see cref="P:C1.C1Preview.NamedCollectionItem.Name" /> is shown in the input dialog instead.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Type">
      <summary>
            Gets or sets the current tag type.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Value">
      <summary>
            Gets or sets the current tag value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.InputParams">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.TagInputParams" /> object that is used by the tag input dialog
            to customize the editor for the current tag. By default, this property is null.
            </summary>
      <remarks>
            The <see cref="T:C1.C1Preview.TagInputParams" /> class is abstract, the following types derived from it
            can be used, depending on the current tag's type:
            <list type="bullet"><item><term><see cref="T:C1.C1Preview.TagStringInputParams" /></term><description>Used to customize input of a string value.</description></item><item><term><see cref="T:C1.C1Preview.TagDateTimeInputParams" /></term><description>Used to customize input of a <see cref="T:System.DateTime" /> value.</description></item><item><term><see cref="T:C1.C1Preview.TagListInputParams" /></term><description>Allows to use a <see cref="T:System.Windows.Forms.ListBox" /> or <see cref="T:System.Windows.Forms.ComboBox" /> for input of the tag's value.</description></item><item><term><see cref="T:C1.C1Preview.TagBoolInputParams" /></term><description>Allows to input a Boolean value using a check box.</description></item><item><term><see cref="T:C1.C1Preview.TagNumericInputParams" /></term><description>Used to customize input of a numeric value.</description></item></list></remarks>
    </member>
    <member name="T:C1.C1Preview.Tag.TagConverter">
      <summary>
            Converts <see cref="T:C1.C1Preview.Tag" /> objects to/from other types.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Tag.TagConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Tests whether this converter can convert the object to the specified type.
            </summary>
      <param name="context">An <b>ITypeDescriptorContext</b> that provides a format context.</param>
      <param name="type">The target type.</param>
      <returns>
        <b>true</b> if the conversion can be performed, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Tag.TagConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type.
            </summary>
      <param name="context">An <b>ITypeDescriptorContext</b> that provides a format context.</param>
      <param name="culture">The culture into which <paramref name="value" /> will be converted.</param>
      <param name="value">The object to convert.</param>
      <param name="type">The target type.</param>
      <returns>An object representing the converted value.</returns>
    </member>
    <member name="T:C1.C1Preview.Tag.TagValueConverter">
      <summary>
            Converts <see cref="T:C1.C1Preview.Tag" /> values to/from other types.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Tag.TagValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to a <see cref="T:C1.C1Preview.Tag" /> object.
            </summary>
      <param name="context">An <b>ITypeDescriptorContext</b> that provides a format context.</param>
      <param name="culture">The culture into which <paramref name="value" /> will be converted.</param>
      <param name="value">The object to convert.</param>
      <returns>An object representing the converted value.</returns>
    </member>
    <member name="T:C1.C1Preview.TagCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.Tag" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagCollection" /> class.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="M:C1.C1Preview.TagCollection.Add(C1.C1Preview.Tag)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.Tag" /> object to the current collection.
            </summary>
      <param name="tag">The object to add.</param>
      <returns>The index of the newly added object.</returns>
    </member>
    <member name="M:C1.C1Preview.TagCollection.Remove(C1.C1Preview.Tag)">
      <summary>
            Removes a <see cref="T:C1.C1Preview.Tag" /> object from the current collection.
            </summary>
      <param name="tag">The object to remove.</param>
    </member>
    <member name="M:C1.C1Preview.TagCollection.IndexByName(System.String)">
      <summary>
            Finds the index of the object with the specified name in the collection.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>The index of the found object.</returns>
    </member>
    <member name="P:C1.C1Preview.TagCollection.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.Tag" /> in the current collection by its index.
            </summary>
      <param name="index">The index of the <see cref="T:C1.C1Preview.Tag" /> in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.Tag" /> with the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.TagCollection.Item(System.String)">
      <summary>
            Gets a <see cref="T:C1.C1Preview.Tag" /> in the current collection by its <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />.
            </summary>
      <param name="tagName">The name of the <see cref="T:C1.C1Preview.Tag" />.</param>
      <returns>The <see cref="T:C1.C1Preview.Tag" /> with the specified name.</returns>
    </member>
    <member name="T:C1.C1Preview.TagInputParams">
      <summary>
            The abstract base class for specialized classes used by the
            tag input dialog to customize input of individual tags.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.Clone">
      <summary>
            Creates a copy of the current object.
            </summary>
      <returns>The newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.IsShowLabel">
      <summary>
            Returns a value indicating whether the input form should show the label with the tag's
            description adjacent to the input control.
            </summary>
      <returns>True if the label is to be shown, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
            Creates a control that can be used to input the tag value.
            </summary>
      <param name="tag">The tag to edit.</param>
      <param name="maxWidth">The maximum width of the control.</param>
      <returns>The newly created control.</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>
            Checks the value contained in the control.
            </summary>
      <param name="control">The control used to enter the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is to be assigned.</param>
      <param name="errorMessage">The error message, assigned if the check fails.</param>
      <returns>True if the value is valid, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the control to the tag.
            </summary>
      <param name="control">The source control containing the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is assigned.</param>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the tag to the control.
            </summary>
      <param name="control">The control to which the value is copied.</param>
      <param name="tag">That source <see cref="T:C1.C1Preview.Tag" /> containing the value.</param>
    </member>
    <member name="T:C1.C1Preview.TagStringInputParams">
      <summary>
            Represents customization parameters for input of string tag values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagStringInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagStringInputParams" /> class.
            </summary>
      <param name="maxLength">The maximum length of the input string.</param>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
            Creates a <see cref="T:System.Windows.Forms.TextBox" />.
            </summary>
      <param name="tag">The tag to edit.</param>
      <param name="maxWidth">The maximum width of the control.</param>
      <returns>The newly created control.</returns>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>
            Returns true.
            </summary>
      <param name="control">The control used to enter the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is to be assigned.</param>
      <param name="errorMessage">The error message, assigned if the check fails.</param>
      <returns>True.</returns>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the control to the tag.
            </summary>
      <param name="control">The source control containing the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is assigned.</param>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the tag to the control.
            </summary>
      <param name="control">The control to which the value is copied.</param>
      <param name="tag">That source <see cref="T:C1.C1Preview.Tag" /> containing the value.</param>
    </member>
    <member name="P:C1.C1Preview.TagStringInputParams.MaxLength">
      <summary>
            Gets or sets the maximum length of the input string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagDateTimeInputParams">
      <summary>
            Represents customization parameters for input of <see cref="T:System.DateTime" /> tag values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagDateTimeInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.#ctor(System.DateTime,System.DateTime,System.Windows.Forms.DateTimePickerFormat,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagDateTimeInputParams" /> class.
            </summary>
      <param name="minDate">The minimum allowed date.</param>
      <param name="maxDate">The maximum allowed date.</param>
      <param name="format">The format to use in the date/time picker.</param>
      <param name="customFormat">The custom date/time format string.</param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.#ctor(System.Windows.Forms.DateTimePickerFormat,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagDateTimeInputParams" /> class.
            </summary>
      <param name="format">The format to use in the date/time picker.</param>
      <param name="customFormat">The custom date/time format string.</param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
            Creates a <see cref="T:System.Windows.Forms.DateTimePicker" />.
            </summary>
      <param name="tag">The tag to edit.</param>
      <param name="maxWidth">The maximum width of the control.</param>
      <returns>The newly created control.</returns>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>
            Checks the value contained in the control.
            </summary>
      <param name="control">The control used to enter the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is to be assigned.</param>
      <param name="errorMessage">The error message, assigned if the check fails.</param>
      <returns>True if the value falls between the minimum and maximum allowable dates, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the control to the tag.
            </summary>
      <param name="control">The source control containing the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is assigned.</param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the tag to the control.
            </summary>
      <param name="control">The control to which the value is copied.</param>
      <param name="tag">That source <see cref="T:C1.C1Preview.Tag" /> containing the value.</param>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.CustomFormat">
      <summary>
            Gets or sets the custom date/time format string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.MinDate">
      <summary>
            Gets or sets the minimum allowed date.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.MaxDate">
      <summary>
            Gets or sets the maximum allowed date.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.Format">
      <summary>
            Gets or sets the format to use in the date/time picker.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParamsTypeEnum">
      <summary>
            Specifies the type of list for <see cref="T:C1.C1Preview.TagListInputParams" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TagListInputParamsTypeEnum.ListBox">
      <summary>
            The <see cref="T:System.Windows.Forms.ListBox" /> is used for input.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TagListInputParamsTypeEnum.ComboBox">
      <summary>
            The <see cref="T:System.Windows.Forms.ComboBox" /> is used for input.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParams">
      <summary>
            Represents customization parameters for input of tag values that can be selected from a list.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagListInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.#ctor(C1.C1Preview.TagListInputParamsTypeEnum,C1.C1Preview.TagListInputParamsItem[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagListInputParams" /> class.
            </summary>
      <param name="type">The type of list input to use.</param>
      <param name="items">The collection of list items.</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
            Creates a <see cref="T:System.Windows.Forms.ListBox" /> or a <see cref="T:System.Windows.Forms.ComboBox" />, depending on the <see cref="P:C1.C1Preview.TagListInputParams.Type" /> of list input.
            </summary>
      <param name="tag">The tag to edit.</param>
      <param name="maxWidth">The maximum width of the control.</param>
      <returns>The newly created control.</returns>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>
            Checks the value contained in the control.
            </summary>
      <param name="control">The control used to enter the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is to be assigned.</param>
      <param name="errorMessage">The error message, assigned if the check fails.</param>
      <returns>True if the value falls between the minimum and maximum allowable dates, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the control to the tag.
            </summary>
      <param name="control">The source control containing the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is assigned.</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the tag to the control.
            </summary>
      <param name="control">The control to which the value is copied.</param>
      <param name="tag">That source <see cref="T:C1.C1Preview.Tag" /> containing the value.</param>
    </member>
    <member name="P:C1.C1Preview.TagListInputParams.Type">
      <summary>
            Gets or sets the type of list input to use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagListInputParams.HasItems">
      <summary>
            Gets the value indicating whether the list contains any items.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagListInputParams.Items">
      <summary>
            Gets the collection of list items.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParamsItem">
      <summary>
            Represents a list item for <see cref="T:C1.C1Preview.TagListInputParams" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItem.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagListInputParamsItem" /> class.
            </summary>
      <param name="name">The item name.</param>
      <param name="value">The item value.</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItem.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItem.ToString">
      <summary>
            Returns the string representation of the current <see cref="T:C1.C1Preview.TagListInputParamsItem" />.
            </summary>
      <returns>The string representing the current item.</returns>
    </member>
    <member name="P:C1.C1Preview.TagListInputParamsItem.Value">
      <summary>
            Gets or sets the current item's value.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParamsItemCollection">
      <summary>
            Represents a collection of list items for <see cref="T:C1.C1Preview.TagListInputParams" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItemCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagListInputParamsItemCollection" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItemCollection.Add(C1.C1Preview.TagListInputParamsItem)">
      <summary>
            Adds an item to the current collection.
            </summary>
      <param name="item">The item to add.</param>
      <returns>The index of the newly added item.</returns>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItemCollection.Remove(C1.C1Preview.TagListInputParamsItem)">
      <summary>
            Removes an item from the current collection.
            </summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="P:C1.C1Preview.TagListInputParamsItemCollection.Item(System.Int32)">
      <summary>
            Gets or set the item with the specified index.
            </summary>
      <param name="index">The index of the item.</param>
      <returns>The item with the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.TagListInputParamsItemCollection.Item(System.String)">
      <summary>
            Gets or set the item with the specified name.
            </summary>
      <param name="tagName">The name of the item.</param>
      <returns>The item with the specified name.</returns>
    </member>
    <member name="T:C1.C1Preview.TagBoolInputParams">
      <summary>
            Represents customization parameters for input of Booleand tag values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagBoolInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.IsShowLabel">
      <summary>
            Returns false.
            </summary>
      <returns>False.</returns>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
            Creates a <see cref="T:System.Windows.Forms.CheckBox" />.
            </summary>
      <param name="tag">The tag to edit.</param>
      <param name="maxWidth">The maximum width of the control.</param>
      <returns>The newly created control.</returns>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>
            Returns true.
            </summary>
      <param name="control">The control used to enter the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is to be assigned.</param>
      <param name="errorMessage">The error message, assigned if the check fails.</param>
      <returns>True.</returns>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the control to the tag.
            </summary>
      <param name="control">The source control containing the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is assigned.</param>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the tag to the control.
            </summary>
      <param name="control">The control to which the value is copied.</param>
      <param name="tag">That source <see cref="T:C1.C1Preview.Tag" /> containing the value.</param>
    </member>
    <member name="T:C1.C1Preview.TagNumericInputParams">
      <summary>
            Represents customization parameters for input of numeric tag values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagNumericInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagNumericInputParams" /> class.
            </summary>
      <param name="minimum">The minimum allowed value.</param>
      <param name="maximum">The maximum allowed value.</param>
      <param name="increment">Increment for the spin buttons.</param>
      <param name="decimalPlaces">Editor precision (decimal places).</param>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>
            Copies the properties of the specified object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
            Creates a <see cref="T:System.Windows.Forms.NumericUpDown" />.
            </summary>
      <param name="tag">The tag to edit.</param>
      <param name="maxWidth">The maximum width of the control.</param>
      <returns>The newly created control.</returns>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>
            Checks the value contained in the control.
            </summary>
      <param name="control">The control used to enter the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is to be assigned.</param>
      <param name="errorMessage">The error message, assigned if the check fails.</param>
      <returns>True if the value falls between the minimum and maximum allowable values, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the control to the tag.
            </summary>
      <param name="control">The source control containing the value.</param>
      <param name="tag">The <see cref="T:C1.C1Preview.Tag" /> to which the value is assigned.</param>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>
            Copies the value from the tag to the control.
            </summary>
      <param name="control">The control to which the value is copied.</param>
      <param name="tag">That source <see cref="T:C1.C1Preview.Tag" /> containing the value.</param>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.Minimum">
      <summary>
            Gets or sets the minimum allowed value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.Maximum">
      <summary>
            Gets or sets the maximum allowed value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.Increment">
      <summary>
            Gets or sets the increment for the spin buttons.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.DecimalPlaces">
      <summary>
            Gets or sets the editor precision (decimal places).
            </summary>
    </member>
    <member name="T:C1.C1Preview.ReferenceEnum">
      <summary>
        <para>For internal use.</para>
            Specifies a referenced object in an expression in a <see cref="T:C1.C1Preview.Unit" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Parent">
      <summary>
            The parent of the current object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Next">
      <summary>
            The next object at the same level as the current object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Prev">
      <summary>
            The previous object at the same level as the current object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Self">
      <summary>
            The current object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Name">
      <summary>
            An object with the specified name.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Page">
      <summary>
            The current page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Column">
      <summary>
            The current page column.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Id">
      <summary>
            An object with the specified Id
            (provided for backward compatibility only).
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.PageIndex">
      <summary>
            A page with the specifid index.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DimensionEnum">
      <summary>
        <para>For internal use.</para>
            Enumerates the single-dimensional coordinates and sizes of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Default">
      <summary>
            The default dimension.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Left">
      <summary>
            The left edge of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Top">
      <summary>
            The top edge of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Right">
      <summary>
            The right edge of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Bottom">
      <summary>
            The bottom edge of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Width">
      <summary>
            The width of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Height">
      <summary>
            The height of an object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UnitTypeEnum">
      <summary>
            Enumerates units of measurement used in a <see cref="T:C1.C1Preview.C1PrintDocument" />,
            used by <see cref="T:C1.C1Preview.Unit" /> and related types.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Default">
      <summary>
            Units specified by a document's <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" /> are used.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Document">
      <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Inch">
      <summary>
            Specifies the inch as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Mm">
      <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Pica">
      <summary>
            Specifies the pica unit (1/6 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Pixel">
      <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Point">
      <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Twip">
      <summary>
            Specifies a twip (1/1440 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.InHs">
      <summary>
            Specifies a hundredths of an inch as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Display">
      <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Cm">
      <summary>
            Specifies centimetre's as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Em">
      <summary>
            Measurement is relative to the height of the element's font. 
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Ex">
      <summary>
            Measurement is relative to the height of the lowercase letter x of the element's font.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.LineSpacing">
      <summary>
            Measurement is relative to the spacing between two lines of element's font.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthBase">
      <summary>
        <para>For internal use.</para>
            The abstract base class representing a single coordinate or dimension of an object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthBase.StringToUnitType(System.String,C1.C1Preview.UnitTypeEnum@)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.UnitTypeEnum" /> value. The string can be one of the following:
            "def", "doc", "in", "mm", "pc", "pix", "pt", "tw", "inhs".
            This method is case-insensitive.
            </summary>
      <param name="s">The string to convert. If it is null or empty, <see cref="F:C1.C1Preview.UnitTypeEnum.Default" /> is returned.</param>
      <param name="units">OUT: On exit, contains the <see cref="T:C1.C1Preview.UnitTypeEnum" /> value.</param>
      <returns>
        <b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.UnitTypeToString(C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.UnitTypeEnum" /> value to a string representation as in
            the following table:
            <list type="bullet"><item><description><term>Default</term>Empty string</description></item><item><description><term>Document</term>"doc"</description></item><item><description><term>Inch</term>"in"</description></item><item><description><term>Millimeter</term>"mm"</description></item><item><description><term>Pica</term>"pc"</description></item><item><description><term>Pixel</term>"pix"</description></item><item><description><term>Point</term>"pt"</description></item><item><description><term>Twip</term>"tw"</description></item><item><description><term>InHs</term>"inhs"</description></item></list></summary>
      <param name="units">A <see cref="T:C1.C1Preview.UnitTypeEnum" /> to convert.</param>
      <returns>The string representing <paramref name="units" />.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.StringToDimension(System.String,C1.C1Preview.DimensionEnum@)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.DimensionEnum" /> value.
            The string can be one of the following:
            "left", "top", "right", "bottom", "width", "height".
            This method is not case sensitive.
            </summary>
      <param name="s">The string to convert. If s is <b>null</b> or empty, <see cref="F:C1.C1Preview.DimensionEnum.Default" /> is returned.</param>
      <param name="dimension">OUT: A <see cref="T:C1.C1Preview.DimensionEnum" /> corresponding to the specified string.</param>
      <returns>
        <b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.Parse(System.String,System.Boolean)">
      <summary>
            Parses a string and creates a <see cref="T:C1.C1Preview.LengthBase" /> instance from that string.
            </summary>
      <param name="s">The string to parse.</param>
      <param name="throwException">Indicates whether to throw an exception if the string cannot be parsed.</param>
      <returns>A <see cref="T:C1.C1Preview.LengthBase" /> instance. Depending on <paramref name="s" />,
            this may be a <see cref="T:C1.C1Preview.LengthAbs" />, a <see cref="T:C1.C1Preview.LengthRef" />, a <see cref="T:C1.C1Preview.LengthExp" /> or a <see cref="T:C1.C1Preview.LengthAuto" />.
            If <paramref name="throwException" /> is <b>false</b>, <b>null</b> is returned if an error occurred.</returns>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsAuto">
      <summary>
            Gets a value indicating whether the current object represents an auto length.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsEmpty">
      <summary>
            Gets a value indicating whether the current object represents a zero length.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsAbs">
      <summary>
            Gets a value indicating whether the current object represents an absolute length.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.Auto">
      <summary>
            Gets an instance of <see cref="T:C1.C1Preview.LengthAuto" /> representing an auto length.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthBase.TypeConverter">
      <summary>
            Converts <see cref="T:C1.C1Preview.LengthBase" /> to/from other types.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthBase.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.LengthBase" />.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>A <see cref="T:C1.C1Preview.LengthBase" /> representing <paramref name="str" />.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Preview.LengthAuto">
      <summary>
        <para>For internal use.</para>
            Represents an automatic dimension or coordinate.
            Only one instance of this type can be created, it can be accessed via <see cref="P:C1.C1Preview.LengthBase.Auto" />.
            The string <b>"auto"</b> can be used in expressions as an alias for this type.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthAuto.Equals(System.Object)">
      <summary>
            Compares the current length with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAuto.GetHashCode">
      <summary>
            Gets the hash code for the current object,
            based on the length value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAuto.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>"auto".</returns>
    </member>
    <member name="T:C1.C1Preview.LengthAbs">
      <summary>
        <para>For internal use.</para>
            Represents an absolute length value, such as "5mm", "10in", "20" and so on.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthAbs" /> class
            from a string representing the length value.
            </summary>
      <param name="s">The string used to initialize the value, such as "5mm" or "10in".</param>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.#ctor(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthAbs" /> class
            from a value and unit of measurement.
            </summary>
      <param name="value">The length value.</param>
      <param name="units">Unit of measurement of <paramref name="value" />.</param>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.Equals(System.Object)">
      <summary>
            Compares the current length with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.GetHashCode">
      <summary>
            Gets the hash code for the current object,
            based on the length value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.ToString">
      <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1Preview.Unit" /> to the same value).
            </summary>
      <returns>The string representing the current length value.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.Compare(C1.C1Preview.LengthAbs,C1.C1Preview.C1PrintDocument,System.Drawing.Font)">
      <summary>
            Compares the current object with another <see cref="T:C1.C1Preview.LengthAbs" /> object.
            </summary>
      <param name="other">A <see cref="T:C1.C1Preview.LengthAbs" /> object to compare the current one with.</param>
      <param name="doc">The document providing the context for comparison.</param>
      <param name="font">The font providing the context for comparison.</param>
      <returns>0 if the two objects represent equal lengths,
            -1 if the current length is less than the other,
            1 if the current length is greater than the other,
            -2 if the units of measurement cannot be compared.</returns>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Value">
      <summary>
            Gets the numeric value (expressed in <see cref="P:C1.C1Preview.LengthAbs.Units" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Units">
      <summary>
            Gets the unit of measurement used by <see cref="P:C1.C1Preview.LengthAbs.Value" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthAbs.Predefined">
      <summary>
            Contains predefined <see cref="T:C1.C1Preview.LengthAbs" /> values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.Empty">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthAbs" /> instance representing an empty length
            (defined as "0mm").
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.LineWidth">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthAbs" /> instance representing the default line thickness
            (equal to 1pt).
            This is used for borders, grid lines etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.BoldLineWidth">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthAbs" /> instance representing the default bold line thickness
            (equal to 2pt).
            This is used for borders, grid lines etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.Values">
      <summary>
            Gets an array of predefined <see cref="T:C1.C1Preview.LengthAbs" /> values
            (<see cref="P:C1.C1Preview.LengthAbs.Predefined.Empty" />, <see cref="P:C1.C1Preview.LengthAbs.Predefined.LineWidth" /> and <see cref="P:C1.C1Preview.LengthAbs.Predefined.BoldLineWidth" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthRef">
      <summary>
        <para>For internal use.</para>
            Represents a length value that references a coordinate or a dimension of another object.
            <para>
            (Examples of such references are "parent.width", "MyObjectName.right", "prev.height"
            or "MyObjectName.MySubObjectName.Width".)
            </para></summary>
    </member>
    <member name="M:C1.C1Preview.LengthRef.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthRef" /> class
            from a string representing the length reference.
            </summary>
      <param name="s">The string used to initialize the value, such as "parent.width" or "MyObject.right".</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.#ctor(C1.C1Preview.LengthRef.UnitRefElem,C1.C1Preview.DimensionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthRef" /> class
            from a nested object reference and a dimension.
            </summary>
      <param name="element">A <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" /> identifying the referenced object.</param>
      <param name="dimension">The target dimension of this <b>LengthRef</b>.</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.#ctor(C1.C1Preview.ReferenceEnum,C1.C1Preview.DimensionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthRef" /> class
            from a predefined source reference and a dimension.
            </summary>
      <param name="source">A <see cref="T:C1.C1Preview.ReferenceEnum" /> identifying the referenced object.</param>
      <param name="dimension">The target dimension of this <b>LengthRef</b>.</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.Equals(System.Object)">
      <summary>
            Compares the current length with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthRef.GetHashCode">
      <summary>
            Gets the hash code for the current object,
            based on the length value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthRef.ToString">
      <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1Preview.Unit" /> to the same value).
            </summary>
      <returns>The string representing the current length value.</returns>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Elements">
      <summary>
            Gets the array of objects composing the path to the target object of the current reference length.
            If the current reference 
            </summary>
      <remarks>
        <para>
            If the current object uses a simple (not nested) reference such as "parent.width",
            this array contains just one element, corresponding to the <b>parent</b> object.
            </para>
        <para>
            If the current object uses a nested reference such as "parent.MyChildName.width",
            this array contains a <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" /> element for each object in the hierarchy
            (one for <b>parent</b>, and one for <b>MyChildName</b> in this example).
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Dimension">
      <summary>
            Gets the target dimension of the referenced object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthRef.UnitRefElem">
      <summary>
            A structure representing a single referenced object in a <see cref="T:C1.C1Preview.LengthRef" />
            (if the <b>LengthRef</b> uses a hierarchical reference, each object in the hierarchy
            of nested objects is represented by an instance of this structure).
            </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.Source">
      <summary>
            Specifies the referenced object as a <see cref="T:C1.C1Preview.ReferenceEnum" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceName">
      <summary>
            Specifies the name of the referenced object if <see cref="F:C1.C1Preview.LengthRef.UnitRefElem.Source" /> is <see cref="F:C1.C1Preview.ReferenceEnum.Name" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceNo">
      <summary>
            Specifies the page or column number if <see cref="F:C1.C1Preview.LengthRef.UnitRefElem.Source" /> is <see cref="F:C1.C1Preview.ReferenceEnum.Page" />
            or <see cref="F:C1.C1Preview.ReferenceEnum.Column" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(C1.C1Preview.ReferenceEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" /> structure
            with the specified source.
            </summary>
      <param name="source">A <see cref="T:C1.C1Preview.ReferenceEnum" /> identifying the source of the current reference.</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(C1.C1Preview.ReferenceEnum,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" /> structure
            with the specified source, source name and page/column number.
            </summary>
      <param name="source">A <see cref="T:C1.C1Preview.ReferenceEnum" /> identifying the source of the current reference.</param>
      <param name="sourceName">The source name
            (used if <paramref name="source" /> is <see cref="F:C1.C1Preview.ReferenceEnum.Name" />).</param>
      <param name="sourceNo">The source page/column number
            (used if <paramref name="source" /> is <see cref="F:C1.C1Preview.ReferenceEnum.Page" />
            or <see cref="F:C1.C1Preview.ReferenceEnum.Column" />).</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(C1.C1Preview.ReferenceEnum,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" /> structure
            with the specified source and page/column number.
            </summary>
      <param name="source">A <see cref="T:C1.C1Preview.ReferenceEnum" /> identifying the source of the current reference.</param>
      <param name="sourceNo">The source page/column number
            (used if <paramref name="source" /> is <see cref="F:C1.C1Preview.ReferenceEnum.Page" />
            or <see cref="F:C1.C1Preview.ReferenceEnum.Column" />).</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" /> structure
            with the specified source name.
            </summary>
      <param name="sourceName">The source name
            (<see cref="F:C1.C1Preview.LengthRef.UnitRefElem.Source" /> is set to <see cref="F:C1.C1Preview.ReferenceEnum.Name" /> by this constructor).</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.ToString">
      <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1Preview.Unit" /> to the same value).
            </summary>
      <returns>The string representing the current length value.</returns>
    </member>
    <member name="T:C1.C1Preview.LengthRef.Predefined">
      <summary>
            Contains and provides access to a number of commonly used
            predefined <see cref="T:C1.C1Preview.LengthRef" /> objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentLeft">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Parent.Left" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentTop">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Parent.Top" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentWidth">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Parent.Width" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentHeight">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Parent.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevRight">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Prev.Right" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevBottom">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Prev.Bottom" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevHeight">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Prev.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.NextHeight">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Next.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Parent">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Parent.Default" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Self">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Self.Default" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentRight">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Parent.Right" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentBottom">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Parent.Bottom" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.SelfWidth">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Self.Width" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.SelfHeight">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Self.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PageWidth">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the the "Page.Width" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PageHeight">
      <summary>
            Gets a <see cref="T:C1.C1Preview.LengthRef" /> instance representing the "Page.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Values">
      <summary>
            Gets a collection of <see cref="T:C1.C1Preview.LengthRef" /> containing all lengths
            defined by the <see cref="T:C1.C1Preview.LengthRef.Predefined" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp">
      <summary>
        <para>For internal use.</para>
            Represents a length value which is an expression comprising instances of
            <see cref="T:C1.C1Preview.LengthRef" />, <see cref="T:C1.C1Preview.LengthAbs" />, and operations on them
            (represented by static properties of <see cref="T:C1.C1Preview.LengthExp.Operation" /> type, such as <b>LengthExp.Add</b>) .
            <para>
            (Examples of such expressions are "parent.width + 5mm", "80%parent.width", and so on.)
            </para></summary>
    </member>
    <member name="M:C1.C1Preview.LengthExp.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.LengthExp" /> class
            with an array of operands and operations in inverse Polish notation order.
            </summary>
      <param name="elements">The operands and operations comprising the current <see cref="T:C1.C1Preview.LengthExp" />,
            in inverse Polish notation order.</param>
      <remarks>
            The <paramref name="elements" /> array should be a valid inverse Polish notation
            stack of operands and operations such as:
            <list type="bullet"><item><see cref="T:C1.C1Preview.LengthAbs" />: represents an absolute length value;
            </item><item><see cref="T:C1.C1Preview.LengthExp" />: represents a coordinate or dimension of another object;
            </item><item><see cref="T:System.String" />: represents <see cref="T:C1.C1Preview.LengthAbs" /> or <see cref="T:C1.C1Preview.LengthRef" /> object;
            </item><item>
            Number, it converted to <see cref="T:C1.C1Preview.LengthAbs" /> with Unit equals to <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />;
            </item><item>
            A built-in function:
            <list type="bullet"><item><see cref="P:C1.C1Preview.LengthExp.Max" />: maximum;</item><item><see cref="P:C1.C1Preview.LengthExp.Min" />: minimum.</item></list></item><item>
            An operation:
            <list type="bullet"><item><see cref="P:C1.C1Preview.LengthExp.Add" />: add;</item><item><see cref="P:C1.C1Preview.LengthExp.Sub" />: subtract;</item><item><see cref="P:C1.C1Preview.LengthExp.Mul" />: multiply;</item><item><see cref="P:C1.C1Preview.LengthExp.Div" />: divide;</item><item><see cref="P:C1.C1Preview.LengthExp.Percent" />: percentage;</item><item><see cref="P:C1.C1Preview.LengthExp.UnMinus" />: unary minus;</item><item><see cref="P:C1.C1Preview.LengthExp.UnPlus" />: unary plus;</item><item><see cref="P:C1.C1Preview.LengthExp.Bracket" />: bracket (opening or closing);</item><item><see cref="P:C1.C1Preview.LengthExp.EmptyArg" />: empty argument.</item></list></item></list>
            Examples:
            <code>
            LengthExp l = new LengthExp("parent.width", "2mm", LengthExp.Sub);
            LengthExp l = new LengthExp(LengthRef.Predefined.ParentWidth, new LengthAbs(5, UnitTypeEnum.Mm), LengthExp.Sub);
            LengthExp l = new LengthExp(LengthRef.Predefined.ParentWidth, 5, LengthExp.Add);
            </code></remarks>
    </member>
    <member name="M:C1.C1Preview.LengthExp.Equals(System.Object[])">
      <summary>
            Compares the current <see cref="T:C1.C1Preview.LengthExp" /> object with another stack of
            operands and operations in inverse Polish notation
            (see remarks in <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> for details).
            This method compares values of the two stacks.
            </summary>
      <param name="elements">A inverse Polish notation stack of operands and operations that are compared to the current expression.</param>
    </member>
    <member name="M:C1.C1Preview.LengthExp.Equals(System.Object)">
      <summary>
            Compares the current length expression with another object.
            This method compares operation stacks of the two objects
            using the <see cref="M:C1.C1Preview.LengthExp.Equals(System.Object[])" /> method.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthExp.GetHashCode">
      <summary>
            Gets the hash code for the current object,
            based on the values in the length expression stack.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthExp.ToString">
      <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1Preview.Unit" /> to the same value).
            </summary>
      <returns>The string representing the current length value.</returns>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Elements">
      <summary>
            Gets the expression stack, as described in remarks
            to <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Operations">
      <summary>
            Gets an array of all registered (supported) operators.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.UnaryOperations">
      <summary>
            Gets an array of all registered (supported) unary operators.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Functions">
      <summary>
            Gets an array of all registered (supported) functions.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Add">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpAdd" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Sub">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpSub" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Mul">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpMul" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Div">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpDiv" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Percent">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpPercent" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.UnMinus">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpUnMinus" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.UnPlus">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpUnPlus" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Bracket">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpBracket" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.EmptyArg">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.OpEmptyArg" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Max">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.MaxFunction" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Min">
      <summary>
            Gets the static instance of the <see cref="T:C1.C1Preview.LengthExp.MinFunction" /> class,
            can be used in the <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" /> constructor.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.IExecuteContext">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthExp.IExecuteContext.GetDim(System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="callbackData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.LengthExp.FunctionAlg">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.MaxFunction">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.MinFunction">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.MinFunction.Ident">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Operation">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Compiler">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpAdd">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpSub">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpMul">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpDiv">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpPercent">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpUnMinus">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpUnPlus">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpFunction">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpBracket">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpEmptyArg">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Predefined">
      <summary>
        <para>For internal use.</para>
            Holds some predefined LengthExp objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Coord">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Unit">
      <summary>
            A structure representing a single coordinate or dimension of an object
            (e.g. <see cref="P:C1.C1Preview.RenderObject.X" /> or <see cref="P:C1.C1Preview.RenderObject.Height" /> of a <see cref="T:C1.C1Preview.RenderObject" />)
            in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <remarks>
        <para>
            The value may be "auto", absolute (e.g. "5mm"), or an expression (e.g. "prev.width + 12mm").
            See <see cref="M:C1.C1Preview.Unit.#ctor(System.String)" /> for more details.
            <!--TBD: add more info (copy from descriptive doc?)--><!--TBD: add examples--></para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Unit.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Unit" /> structure
            from a string. See <b>remarks</b> for details.
            </summary>
      <param name="str">A string representing the value.</param>
      <remarks>
        <para>(In the description that follows, <b>"object"</b> means a <see cref="T:C1.C1Preview.RenderObject" />
            or another document object on which the current <b>Unit</b> represents a dimension
            or a coordinate, not the <b>Unit</b> structure itself.)
            </para>
            
            The <paramref name="str" /> string should contain a valid <see cref="T:C1.C1Preview.Unit" /> value
            in one of the following forms:
            <list type="bullet"><item>
            Auto, represented by the string <b>"auto"</b>.
            The exact semantics depend on the type of object with which the current unit is associated.
            </item><item>
            An unqualified numeric value, e.g. <b>"8"</b> or <b>"100.12"</b>.
            <para>In this case <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" /> determines the unit of measurement.</para></item><item>
            A numeric value qualified with unit of measurement, e.g. <b>"28mm"</b> or <b>"7in"</b>.
            
            <para>The following unit type qualifiers are supported
            (for each type, the corresponding element of the <see cref="T:C1.C1Preview.UnitTypeEnum" /> enumeration is listed):</para><list type="bullet"><item><term>def</term><description><see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" /> is used
            (<see cref="F:C1.C1Preview.UnitTypeEnum.Default" />; this is equivalent to not specifying untis at all);</description></item><item><term>doc</term><description>"Document" units (<see cref="F:C1.C1Preview.UnitTypeEnum.Document" />; 1/300th of an inch);</description></item><item><term>in</term><description>Inches (<see cref="F:C1.C1Preview.UnitTypeEnum.Inch" />);</description></item><item><term>mm</term><description>Millimeters (<see cref="F:C1.C1Preview.UnitTypeEnum.Mm" />);</description></item><item><term>pc</term><description>Picas (<see cref="F:C1.C1Preview.UnitTypeEnum.Pica" />; 1/6 of an inch);</description></item><item><term>pix</term><description>Device pixels (<see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />; depend on <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDpi" />);</description></item><item><term>pt</term><description>Points (<see cref="F:C1.C1Preview.UnitTypeEnum.Point" />; 1/72 of a inch);</description></item><item><term>tw</term><description>Twips (<see cref="F:C1.C1Preview.UnitTypeEnum.Twip" />; 1/1440 of a inch);</description></item><item><term>inhs</term><description>1/100 of an inch (<see cref="F:C1.C1Preview.UnitTypeEnum.InHs" />);</description></item><item><term>dsp</term><description>"Display" units (<see cref="F:C1.C1Preview.UnitTypeEnum.Display" />; 1/75 of an inch);</description></item><item><term>cm</term><description>Centimeters (<see cref="F:C1.C1Preview.UnitTypeEnum.Cm" />);</description></item><item><term>em</term><description>"Em size" (<see cref="F:C1.C1Preview.UnitTypeEnum.Em" />; object font's height);</description></item><item><term>ex</term><description>"Ex size" (<see cref="F:C1.C1Preview.UnitTypeEnum.Ex" />; object font lowercase <b>x</b>'s height);</description></item><item><term>ls</term><description>Object font's line spacing (<see cref="F:C1.C1Preview.UnitTypeEnum.LineSpacing" />).</description></item></list></item><item>
            A percentage of the object's parent size, optionally qualified with the parent's dimension
            ("width" or "height"; if a dimension is not specified, the dimension the current unit referes to is assumed),
            e.g. <b>"50%width"</b> or <b>"120%"</b>.
            <para>(Percentage can only be used to specify width or height, and is not valid for coordinates.)</para></item><item>
            A reference to a dimension or coordinate of another object,
            e.g. <b>"prev.width"</b>, <b>"next.bottom"</b> or <b>"page1column2.width"</b>.
            
            <para>The referenced object may be identified by any of the following key words:</para><list type="bullet"><item><term>self</term><description>The current object. Default, may be omitted;</description></item><item><term>parent</term><description>The current object's parent (container);</description></item><item><term>prev</term><description>The previous sibling of the current object;</description></item><item><term>next</term><description>The next sibling of the current object;</description></item><item><term>page</term><description>The current page;</description></item><item><term>column</term><description>The current page column;</description></item><item><term>page<i>N</i></term><description>Page by number, <b>N</b> is 1-based
            (e.g. <b>"page8"</b>; the page must already exist - forward references using this notation are not supported);</description></item><item><term>pageindex<i>N</i></term><description>Page by index, <b>N</b> is 0-based
            (e.g. <b>"page0"</b>);</description></item><item><term>column<i>M</i></term><description>Column by number, <b>M</b> is 1-based, on the current page (e.g. <b>"column2"</b>);</description></item><item><term>page<i>N</i>.column<i>M</i></term><description>Column <b>M</b> on page <b>N</b>, <b>M</b> and <b>N</b> are 1-based (e.g. <b>"page8.column2"</b>);</description></item><item><term><i>object name</i></term><description>Object with the specified name (see <see cref="P:C1.C1Preview.RenderObject.Name" />).
            The object is first searched among the siblings of the current object, then among its children.</description></item></list>
            
            The referenced dimension or coordinate may be specified using any of the following key words:
            <list type="bullet"><item><term>left</term><description>The <b>X</b> coordinate of the left edge of an object;</description></item><item><term>top</term><description>The <b>Y</b> coordinate of the top edge of an object;</description></item><item><term>right</term><description>The <b>X</b> coordinate of the right edge of an object;</description></item><item><term>bottom</term><description>The <b>Y</b> coordinate of the bottom edge of an object;</description></item><item><term>width</term><description>The width of an object;</description></item><item><term>height</term><description>The height of an object.</description></item></list></item><item>
            A <b>Max</b> or <b>Min</b> built-in function call, e.g. <b>"Max(prev.width,6cm)"</b> or <b>"Min(0.5in,next.height)"</b>.
            </item><item>
            An expression using operands in any of the forms described above (except <b>"auto"</b>),
            combined using operators <b>+</b> (add), <b>-</b> (subtract), <b>*</b> (multiply), <b>/</b> (divide), <b>%</b> (percent),
            functions <b>Min</b> and <b>Max</b>, and parentheses <b>(</b> and <b>)</b>.
            
            <para>Examples of unit expressions are:</para><list type="bullet"><item><term>prev.width + 50%prev.width</term><description>This expression can be used to specify the width of an object being 1.5 times the width of its previous sibling</description></item><item><term>150%prev</term><description>Same as above</description></item><item><term>prev * 1.5</term><description>Same as above but using multiplication instead of percentage</description></item></list></item></list></remarks>
    </member>
    <member name="M:C1.C1Preview.Unit.#ctor(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Unit" /> structure
            with an absolute length value.
            </summary>
      <param name="value">The unit value.</param>
      <param name="unitType">The unit of measurement.</param>
    </member>
    <member name="M:C1.C1Preview.Unit.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.Equals(System.Object)">
      <summary>
            Compares the current unit value with another object.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same unit value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.GetHashCode">
      <summary>
            Gets the hash code for the current unit value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.ConvertUnit(C1.C1Preview.UnitTypeEnum)">
      <summary>
            Attempts to convert the current unit value to other unit of measurement.
            <para>Only absolute units can be converted.
            This method throws an exception if the conversion cannot be performed.</para></summary>
      <param name="destUnitType">The target <see cref="T:C1.C1Preview.UnitTypeEnum" />.</param>
      <returns>The value in <paramref name="destUnitType" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.ConvertUnit(C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Attempts to convert the current unit value to other unit of measurement.
            <para>Only absolute units can be converted.
            This method throws an exception if the conversion cannot be performed.</para></summary>
      <param name="destUnitType">The target <see cref="T:C1.C1Preview.UnitTypeEnum" />.</param>
      <param name="destDpi">The target resolution (used if <paramref name="destUnitType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>The value in <paramref name="destUnitType" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.ConvertUnit(System.Single,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Attempts to convert the current unit value to other unit of measurement.
            <para>Only absolute units can be converted.
            This method throws an exception if the conversion cannot be performed.</para></summary>
      <param name="sourceDpi">The current unit value's resolution (used if <see cref="P:C1.C1Preview.Unit.Units" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <param name="destUnitType">The target <see cref="T:C1.C1Preview.UnitTypeEnum" />.</param>
      <param name="destDpi">The target resolution (used if <paramref name="destUnitType" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>The value in <paramref name="destUnitType" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.FromObject(System.Object)">
      <summary>
            Attempts to convert an object to a unit value.
            This method throws an exception if the conversion cannot be performed.
            </summary>
      <param name="obj">An object to convert.</param>
      <returns>A unit value representing <paramref name="obj" />.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Equality(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Tests whether the two unit values are equal.
            </summary>
      <param name="u1">The first unit value.</param>
      <param name="u2">The second unit value.</param>
      <returns>
        <b>true</b> if the two units are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Inequality(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Tests whether the two unit values are not equal.
            </summary>
      <param name="u1">The first unit value.</param>
      <param name="u2">The second unit value.</param>
      <returns>
        <b>true</b> if the two units are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(C1.C1Preview.Unit)~System.Double">
      <summary>
            Returns the absolute value of a <see cref="T:C1.C1Preview.Unit" /> expressed in <see cref="F:C1.C1Preview.UnitTypeEnum.Default" /> units.
            <para>Throws exception if the operation cannot be performed.</para></summary>
      <param name="value">The unit value to convert.</param>
      <returns>The absolute value.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(C1.C1Preview.Unit)~System.String">
      <summary>
            Converts a unit value to a string.
            </summary>
      <param name="value">The unit to convert.</param>
      <returns>The string representing the unit value.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(System.Double)~C1.C1Preview.Unit">
      <summary>
            Converts a <b>double</b> value to a <see cref="T:C1.C1Preview.Unit" /> using <see cref="F:C1.C1Preview.UnitTypeEnum.Default" /> units.
            </summary>
      <param name="value">The <b>double</b> value.</param>
      <returns>The unit value.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(System.Int32)~C1.C1Preview.Unit">
      <summary>
            Converts an integer value to a <see cref="T:C1.C1Preview.Unit" /> using <see cref="F:C1.C1Preview.UnitTypeEnum.Default" /> units.
            </summary>
      <param name="value">The integer value.</param>
      <returns>The unit value.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(System.String)~C1.C1Preview.Unit">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.Unit" /> value (see <see cref="M:C1.C1Preview.Unit.#ctor(System.String)" />.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The unit value.</returns>
    </member>
    <member name="P:C1.C1Preview.Unit.IsEmpty">
      <summary>
            Gets a value indicating whether the current unit represents an empty value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Value">
      <summary>
            Gets the absolute value of the current unit (in <see cref="P:C1.C1Preview.Unit.Units" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Units">
      <summary>
            Gets the unit of measurement of the current unit.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsAuto">
      <summary>
            Gets a value indicating whether the current unit represents an <b>"auto"</b> value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsAbs">
      <summary>
            Gets a value indicating whether the current unit represents an absolute value
            (such as "1mm", "2in", "3em" and so on).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParentWidth">
      <summary>
            Gets a value indicating whether the current unit is specified as "parent.width".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParentHeight">
      <summary>
            Gets a value indicating whether the current unit is specified as "parent.height".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParent">
      <summary>
            Gets a value indicating whether the current unit is specified as "parent".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Auto">
      <summary>
            Gets a <see cref="T:C1.C1Preview.Unit" /> representing an <b>"auto"</b> value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Empty">
      <summary>
            Gets a <see cref="T:C1.C1Preview.Unit" /> representing an emtpy (zero) value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.LineWidth">
      <summary>
            Gets a <see cref="T:C1.C1Preview.Unit" /> value representing the default line thickness (1 point wide).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.BoldLineWidth">
      <summary>
            Gets a <see cref="T:C1.C1Preview.Unit" /> value representing the default "bold" line thickness (2 points wide).
            </summary>
    </member>
    <member name="T:C1.C1Preview.Unit.TypeConverter">
      <summary>
            Provides type conversions for <see cref="T:C1.C1Preview.Unit" /> values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.PageNumberingChange" /> object.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Tests whether an object can be converted to the specified type.
            </summary>
      <param name="context">The conversion context.</param>
      <param name="type">The target type.</param>
      <returns>
        <b>true</b> if the conversion can be performed, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts an object to the specified type.
            </summary>
      <param name="context">The conversion context.</param>
      <param name="culture">The culture to use.</param>
      <param name="value">The value to convert.</param>
      <param name="type">The target type.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="T:C1.C1Preview.UnitPoint">
      <summary>
            Represents a point on a two-dimensional surface,
            with coordinates specified as <see cref="T:C1.C1Preview.Unit" /> values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.UnitPoint" /> structure.
            </summary>
      <param name="x">The <b>X</b> coordinate.</param>
      <param name="y">The <b>Y</b> coordinate.</param>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.ToString">
      <summary>
            Converts the current value to a human-readable string.
            </summary>
      <returns>The string representing the current value.</returns>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.Parse(System.String,C1.C1Preview.UnitPoint@,System.Boolean)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.UnitPoint" /> structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">OUT: The <see cref="T:C1.C1Preview.UnitPoint" /> structure representing <paramref name="s" />.</param>
      <param name="throwException">Indicates whether an exception should be thrown if the conversion cannot be performed
            (if an error occurs, and this value is <b>false</b>, <paramref name="result" /> is set to <see cref="P:C1.C1Preview.UnitPoint.Empty" />).</param>
      <returns>
        <b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.X">
      <summary>
            Gets or sets the <b>X</b> coordinate of the current point.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.Y">
      <summary>
            Gets or sets the <b>Y</b> coordinate of the current point.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.Empty">
      <summary>
            Represents a <see cref="T:C1.C1Preview.UnitPoint" /> with zero coordinates.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UnitPoint.TypeConverter">
      <summary>
            Provides type conversions for <see cref="T:C1.C1Preview.UnitPoint" /> values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.UnitPoint" /> value.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Preview.Utils">
      <summary>
            Contains common functions.
            </summary>
      <summary>
            Contains common functions.
            </summary>
      <summary>
            Contains common functions.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Utils.MmPerInch">
      <summary>Millimeters per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DocumentUnitsPerInch">
      <summary>Document units per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PointsPerInch">
      <summary>Points per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.TwipsPerInch">
      <summary>Twips per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PicaPerInch">
      <summary>Picas per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.CmPerInch">
      <summary>Centimeters per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DisplayPerInch">
      <summary>Display units per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DipPerInch">
      <summary>DIP (device independent pixel 1/96inch) per inch as double.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.MmPerInchF">
      <summary>Millimeters per inch as float.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DocumentUnitsPerInchF">
      <summary>Document units per inch as float.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PointsPerInchF">
      <summary>Points per inch as float.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.TwipsPerInchF">
      <summary>Twips per inch as float.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PicaPerInchF">
      <summary>Picas per inch as float.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.CmPerInchF">
      <summary>Centimeters per inch as float.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DisplayPerInchF">
      <summary>Display units per inch as float.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.TransparentColor">
      <summary> For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.WhiteColor">
      <summary> For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.BlackColor">
      <summary> For internal use only.</summary>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorEmpty(System.Drawing.Color)">
      <summary>
            Tests whether the specified color is invisible
            (i.e. equals <see cref="F:System.Drawing.Color.Empty" /> or <see cref="P:System.Drawing.Color.Transparent" />).
            </summary>
      <param name="color">The color to test.</param>
      <returns>
        <b>true</b> if the specified color is invisible, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorEquals(System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Tests whether specified colors are equal.
            </summary>
      <param name="color1">First color.</param>
      <param name="color2">Second color</param>
      <returns>
        <b>true</b> if the specified colors are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorWhite(System.Drawing.Color)">
      <summary>
            Tests whether specified color is white.
            </summary>
      <param name="color">The color to test.</param>
      <returns>
        <b>true</b> if the specified color is white, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorBlack(System.Drawing.Color)">
      <summary>
            Tests whether specified color is black.
            </summary>
      <param name="color">The color to test.</param>
      <returns>
        <b>true</b> if the specified color is black, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorTransparent(System.Drawing.Color)">
      <summary>
            Tests whether specified color is transparent.
            </summary>
      <param name="color">The color to test.</param>
      <returns>
        <b>true</b> if the specified color is transparent, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ToWpfColor(System.Drawing.Color)">
      <summary>
            For internal use only.
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.FromWpfColor(System.Drawing.Color)">
      <summary>
            For internal use only.
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.SamePaperSizes(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
            Tests two sizes for equality allowing a small margin for rounding errors.
            </summary>
      <param name="size1">The first size to compare.</param>
      <param name="size2">The second size to compare.</param>
      <returns>True if the two sizes are reasonably close, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1Document(System.Object)">
      <summary>
            Tests whether an object can be represented as a <see cref="T:C1.C1Preview.IC1Document" />.
            </summary>
      <param name="o">The object to test.</param>
      <returns>
        <b>true</b> if the object supports a <see cref="T:C1.C1Preview.IC1Document" />,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.AsC1Document(System.Object)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.IC1Document" /> representing the passed object,
            If the passed document is a <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Preview.C1MultiDocument" />, returns that object.
            Otherwise, if the passed document is a <see cref="T:C1.C1Report.C1Report" />,
            returns that report's <see cref="P:C1.C1Report.C1Report.C1Document" /> property.
            Otherwise, returns <b>null</b>.
            </summary>
      <param name="o">A document to test/convert.</param>
      <returns>
        <see cref="T:C1.C1Preview.IC1Document" /> representing the passed object, or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1DocumentType(System.Type)">
      <summary>
            Tests whether an object of the specified type can be represented
            as a <see cref="T:C1.C1Preview.IC1Document" />.
            </summary>
      <param name="type">The type to test.</param>
      <returns>
        <b>true</b> if the specified type can be represented as a <see cref="T:C1.C1Preview.IC1Document" />,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1PrintDocument(System.Object)">
      <summary>
            Tests whether an object can be represented as a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <param name="o">The object to test.</param>
      <returns>
        <b>true</b> if the object is a <see cref="T:C1.C1Preview.C1PrintDocument" /> or a <see cref="N:C1.C1Report" />,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.AsC1PrintDocument(System.Object)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> representing the passed object,
            If the passed document is a <see cref="T:C1.C1Preview.C1PrintDocument" />, returns that object.
            Otherwise, if the passed document is a <see cref="T:C1.C1Report.C1Report" />,
            returns that report's <see cref="P:C1.C1Report.C1Report.C1Document" /> property.
            Otherwise, returns <b>null</b>.
            </summary>
      <param name="o">A document to test/convert.</param>
      <returns>
        <see cref="T:C1.C1Preview.C1PrintDocument" /> representing the passed object, or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1PrintDocumentType(System.Type)">
      <summary>
            Tests whether an object of the specified type can be represented
            as a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <param name="type">The type to test.</param>
      <returns>
        <b>true</b> if the specified type can be represented as a <see cref="T:C1.C1Preview.C1PrintDocument" />,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ConvertUnits(System.Double,C1.C1Preview.UnitTypeEnum,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Converts a value from one unit of measurement to another.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="from">The source unit of measurement.</param>
      <param name="to">The target unit of measurement.</param>
      <param name="fromDpi">The source DPI (used if <paramref name="from" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <param name="toDpi">The target DPI (used if <paramref name="to" /> is <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />).</param>
      <returns>
        <paramref name="value" /> converted to <paramref name="to" /> units.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.GetResourceImage(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="imageName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.Round(C1.C1Preview.RectangleD)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.Round(C1.C1Preview.PointD)">
      <summary>
            For internal use.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Utils.FC">
      <summary>
        <para>For internal use.</para>
            Implements the static methods for comparing the float and double numbers
            with specified precision.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Utils.FC.IsIntersect(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>
            For internal use.
            </summary>
      <param name="r1">
      </param>
      <param name="r2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.FC.IsPiecesIntersect(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            For internal use.
            </summary>
      <param name="p11">
      </param>
      <param name="p12">
      </param>
      <param name="p21">
      </param>
      <param name="p22">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Util.CodeRange">
      <summary>
            Represents range of character codes.
            </summary>
    </member>
    <member name="M:C1.Util.CodeRange.#ctor(System.Char)">
      <summary>
            Initialization of the range of character codes
            </summary>
      <param name="ch">Adding character.</param>
    </member>
    <member name="M:C1.Util.CodeRange.#ctor(System.Char,System.Char)">
      <summary>
            Initialization of the range of character codes
            </summary>
      <param name="first">The first character code.</param>
      <param name="last">The last character code.</param>
    </member>
    <member name="M:C1.Util.CodeRange.Clone">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.CodeRange.Contains(C1.Util.CodeRange)">
      <summary>
      </summary>
      <param name="cr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Util.CodeRange.First">
      <summary>The begin code of character.</summary>
    </member>
    <member name="P:C1.Util.CodeRange.Last">
      <summary>The end code of character.</summary>
    </member>
    <member name="T:C1.Util.CodeRanges">
      <summary>
            Represents collection of unique <see cref="T:C1.Util.CodeRange" /> objects.
            All CodeRange objects within collection not intersect and sorted
            by First field.
            </summary>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Char[])">
      <summary>
      </summary>
      <param name="chars">
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.String)">
      <summary>
      </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Char)">
      <summary>
      </summary>
      <param name="c">
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(C1.Util.CodeRange)">
      <summary>
      </summary>
      <param name="cr">
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Char,System.Char)">
      <summary>
      </summary>
      <param name="first">
      </param>
      <param name="last">
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.AddNoCheck(C1.Util.CodeRange)">
      <summary>
            Adds <see cref="T:C1.Util.CodeRange" /> object to current without any check, typically used during deserialization.
            </summary>
      <param name="cr">
        <see cref="T:C1.Util.CodeRange" /> to add.</param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Collections.Generic.IEnumerable{C1.Util.CodeRange})">
      <summary>
      </summary>
      <param name="crs">
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.GetGlyphs">
      <summary>
            Gets the array of chars contained in this list of code ranges.
            </summary>
      <returns>Array of char</returns>
    </member>
    <member name="M:C1.Util.CodeRanges.Clone">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.CodeRanges.AssignFrom(C1.Util.CodeRanges)">
      <summary>
      </summary>
      <param name="source">
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.ContainsAllChars">
      <summary>
            Gets a value indicating whether the <see cref="T:C1.Util.CodeRanges" /> collection
            contains all characters from 0x0000 to 0xFFFF.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Util.FontKey">
      <summary>
            Unique identifier of font in various font
            processing algorithms of C1Preview:
            - font substitution
            - font embedding
            </summary>
    </member>
    <member name="F:C1.Util.FontKey.c_flgBold">
      <summary>Bold constant.</summary>
    </member>
    <member name="F:C1.Util.FontKey.c_flgItalic">
      <summary>Italic constant.</summary>
    </member>
    <member name="M:C1.Util.FontKey.#ctor(System.String,System.Byte)">
      <summary>
      </summary>
      <param name="name">
      </param>
      <param name="flags">
      </param>
    </member>
    <member name="M:C1.Util.FontKey.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
      </summary>
      <param name="name">
      </param>
      <param name="bold">
      </param>
      <param name="italic">
      </param>
    </member>
    <member name="M:C1.Util.FontKey.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontKey.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontKey.op_Equality(C1.Util.FontKey,C1.Util.FontKey)">
      <summary>
      </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontKey.op_Inequality(C1.Util.FontKey,C1.Util.FontKey)">
      <summary>
      </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Util.FontKey.Name">
      <summary>
            Gets name of the font.
            </summary>
    </member>
    <member name="P:C1.Util.FontKey.Flags">
      <summary>
            Gets flags of the font.
            </summary>
    </member>
    <member name="P:C1.Util.FontKey.Bold">
      <summary>
            Gets bold flag of the font.
            </summary>
    </member>
    <member name="P:C1.Util.FontKey.Italic">
      <summary>
            Gets italic flag of the font.
            </summary>
    </member>
    <member name="P:C1.Util.FontKey.Style">
      <summary>
            Gets style of the font.
            </summary>
    </member>
    <member name="T:C1.Util.GlyphMetrics">
      <summary>
            The glyph metrics for the font subset.
            </summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Char">
      <summary>Gets or sets character for metrics.</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Index">
      <summary>Gets or sets glyph index.</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Width">
      <summary>Gets or sets glyph width.</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.IsEmpty">
      <summary>Gets empty flag for this structure.</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Empty">
      <summary>Gets empty glyph metrics.</summary>
    </member>
    <member name="T:C1.Util.FontSubSet">
      <summary>
            The font object for build subsets.
            </summary>
    </member>
    <member name="M:C1.Util.FontSubSet.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:C1.Util.FontSubSet.#ctor(C1.Util.FontKey)">
      <summary>
      </summary>
      <param name="fontKey">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.ReadCMap">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetTableCode(System.String)">
      <summary>
      </summary>
      <param name="tableName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.Init">
      <summary>
            Initialization fields.
            </summary>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontTableStream(System.String)">
      <summary>
            Gets stream for the font table block by name.
            </summary>
      <param name="name">The name of the font table block.</param>
      <returns>Returns the font table stream, otherwise <b>null</b>.</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.IsCharSupported(System.Char)">
      <summary>
            Returns true if current font contains glyph for character with specified code.
            </summary>
      <param name="ch">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetPanoseIndex(C1.Util.FontSubSet)">
      <summary>
      </summary>
      <param name="fss">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetGlyphWidth(System.Int32)">
      <summary>
            Gets width of the glyph index from font data.
            </summary>
      <param name="glyph">The glyph index.</param>
      <returns>Gets width of the glyph index.</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetMetrics(System.Char,System.Boolean)">
      <summary>
            Gets the glyph index and metrics for a character
            returns an integer array with {glyph index, width}
            </summary>
      <param name="ch">The code (Unicode) of character.</param>
      <param name="vertical">The vertical mapping flag.</param>
      <returns>Gets integer array with glyph index and glyph width.</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetCountMetrics(System.String)">
      <summary>
            Counts the number of chars in <paramref name="text" /> that do have
            corresponding glyphs in this font.
            </summary>
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.IsSupportAllSymbols(System.String)">
      <summary>
            Returns true if current FontSubSetBase object can show
            all chars in specified string excluding control chars (chars for that char.IsControl() ==  true).
            </summary>
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetCharForGlyph(System.Int32)">
      <summary>
            Gets the char for the glyph index.
            </summary>
      <param name="glyphIndex">The glyph index.</param>
      <returns>Returns character for glyph index.</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontDifference(System.String,C1.Util.FontSubSet,System.Int32@,System.Int32@)">
      <summary>
            Calculates "panse index" (panoseIndex) and count of chars that can be displayed by fss.
            panoseIndex represents difference between 
            current FontSubSetBase object and fss object.
            Minimal number defines minimal difference, i.e. 0 means that current FontSubSetBase object and fss very similar.
            -1 means that fss can not be used as alternative for current object to display s.
            </summary>
      <param name="text">
      </param>
      <param name="fss">
      </param>
      <param name="panoseIndex">
      </param>
      <param name="supportedGlyphCount">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.GetAlternativeFont(System.String,System.Collections.Generic.IEnumerable{C1.Util.FontSubSet})">
      <summary>
            Search best alternative for text in font subset array.
            </summary>
      <param name="text">The text for substitution.</param>
      <param name="substitutions">The font subset list.</param>
      <returns>The index of best alternative font (font subset).</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetDiffPanoseIndex(C1.Util.FontSubSet)">
      <summary>
            Calculate diff panose index.
            </summary>
      <param name="fss">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontSubSet(System.Drawing.Font)">
      <summary>
            Create <see cref="T:C1.Util.FontSubSet" /> object using font name and styles.
            </summary>
      <param name="font">The font object.</param>
      <returns>The <see cref="T:C1.Util.FontSubSet" /> object.</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontSubSet(System.String,System.Boolean,System.Boolean)">
      <summary>
            Create <see cref="T:C1.Util.FontSubSet" /> object using font name and styles.
            </summary>
      <param name="fontName">The font name.</param>
      <param name="bold">The bold flag of the font.</param>
      <param name="italic">The italic flag of the font.</param>
      <returns>The <see cref="T:C1.Util.FontSubSet" /> object.</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontSubSet(C1.Util.FontKey)">
      <summary>
            Create <see cref="T:C1.Util.FontSubSet" /> object using font name and styles.
            </summary>
      <param name="fk">The font key object.</param>
      <returns>The <see cref="T:C1.Util.FontSubSet" /> object.</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.SetFontSubSet(C1.Util.FontSubSet)">
      <summary>
            Sets already exist <see cref="T:C1.Util.FontSubSet" /> object to cache.
            </summary>
      <param name="fss">The exist <see cref="T:C1.Util.FontSubSet" /> object.</param>
    </member>
    <member name="M:C1.Util.FontSubSet.SetFontSubSet(C1.Util.FontKey,C1.Util.FontSubSet)">
      <summary>
            Sets already exist <see cref="T:C1.Util.FontSubSet" /> object to cache.
            </summary>
      <param name="fk">The exist <see cref="P:C1.Util.FontSubSet.FontKey" /> object.</param>
      <param name="fss">The exist <see cref="T:C1.Util.FontSubSet" /> object.</param>
    </member>
    <member name="P:C1.Util.FontSubSet.FontName">
      <summary>
            Gets "original" font name that was specified when FontSubSetBase object was requested.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontStyle">
      <summary>
            Gets "original" font style that was specified when FontSubSetBase object was requested.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontBold">
      <summary>
            Gets "original" Font.Bold that was specified when FontSubSetBase object was requested.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontItalic">
      <summary>
            Gets "original" Font.Italic that was specified when FontSubSetBase object was requested.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontFileName">
      <summary>
            Gets font name that was read from font's data, see also <see cref="P:C1.Util.FontSubSet.FontFamilyName" />.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontFamilyName">
      <summary>
            Gets font family name that was read from font's data, this property should be used
            to create GDI and GDI+ fonts.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.BaseFont2Name">
      <summary>
            Gets base font name that was read from font's data, this property should be used
            to create PDF fonts.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FamilyClass">
      <summary>
            Gets family class.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontKey">
      <summary>
            Gets or sets font key (font identifier).
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.CoreFontBold">
      <summary>
            Gets Font.Bold that was read form font's data.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.CoreFontItalic">
      <summary>
            Gets Font.Italic that was read form font's data.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.CanEmbed">
      <summary>
            Gets flag that this font can embed as font's data.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.MustRestrict">
      <summary>
            Gets flag that this font can embed as font's data.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.MustObfuscate">
      <summary>
            Gets flag that this font must obfuscate.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.CanSubset">
      <summary>
            Gets flag that this font can use as subset of the font's data.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.IsInvalid">
      <summary>
            Gets or sets value indicating that this <see cref="T:C1.Util.FontSubSet" /> object
            invalid (error occurs during getting font's data) and can not be used.
            </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.IsFontSpecific">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.LocaShortTable">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.NumberOfMetrics">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Panose">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.ItalicAngle">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FirstChar">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.LastChar">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Ascent">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Descent">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Height">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.ExternalLeading">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.InternalLeading">
      <summary>
      </summary>
    </member>
    <member name="T:C1.Util.FontSubSet.BigEndianBinaryReader">
      <summary>
            TTF files are stored in big-endian format, we need special 
            readers and writers
            </summary>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.#ctor(System.IO.Stream)">
      <summary>
      </summary>
      <param name="stream">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
      </summary>
      <param name="stream">
      </param>
      <param name="leaveOpen">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.Dispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadInt16">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadInt32">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadInt64">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadUInt16">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadUInt32">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadUInt64">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadChar">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadChars(System.Int32)">
      <summary>
      </summary>
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadSingle">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadDouble">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Util.FontSubSet.BigEndianBinaryWriter">
      <summary>
            Big endian binary writer.
            </summary>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.#ctor(System.IO.Stream)">
      <summary>
      </summary>
      <param name="stream">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
      </summary>
      <param name="stream">
      </param>
      <param name="encoding">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.Int16)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.Int32)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.Int64)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.String)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="T:C1.Util.FontBuilder">
      <summary>
            The font subset builder.
            </summary>
    </member>
    <member name="F:C1.Util.FontBuilder.s_tableNamesSimple">
      <summary>The simple table of font's names.</summary>
    </member>
    <member name="F:C1.Util.FontBuilder.s_tableNamesCMap">
      <summary>The table with CMAP of font's names.</summary>
    </member>
    <member name="M:C1.Util.FontBuilder.NewLocaGlyphTables">
      <summary>
      </summary>
    </member>
    <member name="M:C1.Util.FontBuilder.GetFontData(C1.Util.FontSubSet,C1.Util.CodeRange,System.Boolean)">
      <summary>
      </summary>
      <param name="fss">
      </param>
      <param name="codeRange">
      </param>
      <param name="includeCMap">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontBuilder.GetFontData(C1.Util.FontSubSet,C1.Util.CodeRanges,System.Boolean)">
      <summary>
      </summary>
      <param name="fss">
      </param>
      <param name="codeRanges">
      </param>
      <param name="includeCMap">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Util.FontBuilder.GetFontData(C1.Util.FontSubSet,System.Collections.Generic.IEnumerable{C1.Util.GlyphMetrics},System.Boolean)">
      <summary>
      </summary>
      <param name="fss">
      </param>
      <param name="metrics">
      </param>
      <param name="includeCMap">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Util.FontBuilder.FullCodeRange">
      <summary>
            Gets full code range of this font.
            </summary>
    </member>
    <member name="T:C1.C1Preview.BarcodeSizeMode">
      <summary>
            Specifies the various barcode sizing modes.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarcodeSizeMode.Normal">
      <summary>
            The size of the barcode image is determined by properties like BarcodeSizeOptions.NarrowBarWidth, BarcodeSizeOptions.NarrowWideRatio etc.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarcodeSizeMode.Scale">
      <summary>
            The barcode image is scaled to fit the <see cref="T:C1.C1Report.Field" /> area.
            </summary>
    </member>
    <member name="T:C1.C1Preview.BarcodeSizeOptions">
      <summary>
            Specifies the options affecting the size of a barcode, such as the width of narrow bars, 
            narrow to wide bars' ratio etc.
            </summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.BarcodeSizeOptions" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.Equals(System.Object)">
      <summary>
            Compares this <see cref="T:C1.C1Preview.BarcodeSizeOptions" /> to the specified object to determine whether the two are equal.
            </summary>
      <param name="obj">The object to which the current BarcodeSizeOptions is compared.</param>
      <returns>True if the two objects specify the same options, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.Clone">
      <summary>
            Makes a copy of the current object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.AssignFrom(C1.BarCode.BarCodeOptionsBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.BarCode.BarCodeOptionsBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.GetHashCode">
      <summary>
            Calculates and retrieves a hash code based on the current values of specified options.
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.ModuleSize">
      <summary>
            Gets or sets the barcode module size in twips.
            <para>Zero means the default value which is different for different barcode types:</para><list type="bullet"><item>15 twips for simple "bar" barcodes.</item><item>75 twips for matrix barcodes (QRCode, DataMatrix).</item><item>45 twips for RSS stacked barcodes (RSSStacked, RSSExpandedStacked).</item><item>45 twips for composite barcodes.</item></list></summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.NarrowWideRatio">
      <summary>
            Gets or sets the ratio between narrow and wide bars.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.SizeMode">
      <summary>
            Gets or sets the barcode sizing mode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.BarHeight">
      <summary>
            Gets or sets the bar height in twips.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.SupplementSpacing">
      <summary>
            Gets or sets the spacing between the main and the supplement bacodes in twips.
            </summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeOptions.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:C1.C1Preview.BarcodeOptions" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeOptions.AssignFrom(C1.C1Preview.BarcodeOptions)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.BarcodeOptions" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.BarcodeOptions.Clone">
      <summary>
            Creates a clone of the current object.
            </summary>
      <returns>The clone object.</returns>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.SizeOptions">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.BarcodeSizeOptions" /> object which specifies options affecting the size of the barcode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.CaptionGrouping">
      <summary>
            Gets or sets a value indicating whether to split the caption text into groups for barcode types that support it.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.CaptionPosition">
      <summary>
            Gets or sets the vertical position of caption relative to barcode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.CheckSumEnabled">
      <summary>
            Gets or sets a value indicating whether a checksum of the barcode will be computed and included in the barcode when applicable.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.SupplementNumber">
      <summary>
            Gets or sets the supplement for the barcode data, supplement is 2/5 digit for EAN/UPC symbologies.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.TextAlign">
      <summary>
            Gets or sets the caption text alignment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.BarDirection">
      <summary>
            Gets or sets the direction of the barcode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.Code49">
      <summary>
            Gets or sets a <see cref="T:C1.BarCode.Code49Options" /> object specifying additional options for Code49 barcodes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.QRCode">
      <summary>
            Gets or sets a <see cref="T:C1.BarCode.QRCodeOptions" /> object specifying additional options for QR barcodes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.PDF417">
      <summary>
            Gets or sets a <see cref="T:C1.BarCode.PDF417Options" /> object specifying additional options for PDF417 barcodes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.MicroPDF417">
      <summary>
            Gets or sets a <see cref="T:C1.BarCode.MicroPDF417Options" /> object specifying additional options for MicroPDF417 barcodes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.GS1Composite">
      <summary>
            Gets or sets a <see cref="T:C1.BarCode.GS1CompositeOptions" /> object specifying additional options for composite barcodes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.RssExpandedStacked">
      <summary>
            Gets or sets a <see cref="T:C1.BarCode.RssExpandedStackedOptions" /> object specifying additional options for RSS expanded stacked barcodes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.DataMatrix">
      <summary>
            Gets or sets a <see cref="T:C1.BarCode.DataMatrixOptions" /> object specifying additional options for DataMatrix barcodes.
            </summary>
    </member>
    <member name="T:C1.C1Report.OrientationEnum">
      <summary>
            Specifies the page orientation.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the 
            <see cref="P:C1.C1Report.Layout.Orientation" /> property in the <see cref="T:C1.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Auto">
      <summary>
            Set the orientation automatically, based on the current <see cref="P:C1.C1Report.Layout.PaperSize" /> 
            and report width (<see cref="P:C1.C1Report.Layout.Width" />).
            </summary>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Portrait">
      <summary>
            Use Portrait orientation (tall).
            </summary>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Landscape">
      <summary>
            Use Landscape orientation (wide).
            </summary>
    </member>
    <member name="T:C1.C1Report.HdrFtrEnum">
      <summary>
            Specifies where the Page Footer and Page Header sections are displayed.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Layout.PageFooter" /> and <see cref="P:C1.C1Report.Layout.PageHeader" /> properties 
            in the <see cref="T:C1.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.AllPages">
      <summary>
            The page footer and header are printed on all pages of a report. 
            </summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportHdr">
      <summary>
            The page header isn't printed on the same page as the report header. 
            </summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportFtr">
      <summary>
            The page footer isn't printed on the same page as the report footer. 
            </summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportHdrFtr">
      <summary>
            The page footer and header are not printed on a page that has either a report header or a report footer.
            </summary>
    </member>
    <member name="T:C1.C1Report.PictureShowEnum">
      <summary>
            Specifies where the background picture is displayed.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.C1Report.Layout.PictureShow" /> property in the <see cref="T:C1.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.NoPages">
      <summary>
            Do not show the background picture.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.AllPages">
      <summary>
            Show the background picture on all pages.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.FirstPage">
      <summary>
            Show the background picture on the first page only.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.AllButFirstPage">
      <summary>
            Show the background picture on all pages but the first.
            </summary>
    </member>
    <member name="T:C1.C1Report.FieldAlignEnum">
      <summary>
            Specifies the alignment of text within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.Align" /> property in the <see cref="T:C1.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.General">
      <summary>
            Align numbers to the right, other values to the left.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightTop">
      <summary>
            Align to the right and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustTop">
      <summary>
            Justify and align to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustBottom">
      <summary>
            Justify and align to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustMiddle">
      <summary>
            Justify and align to the middle of the field box.
            </summary>
    </member>
    <member name="T:C1.C1Report.PictureAlignEnum">
      <summary>
            Specifies the alignment of images within the field's rectangle.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the 
            <see cref="P:C1.C1Report.Field.PictureAlign" /> and <see cref="P:C1.C1Report.Layout.PictureAlign" /> properties 
            in the <see cref="T:C1.C1Report.Field" /> and <see cref="T:C1.C1Report.Layout" /> classes.
            </remarks>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightTop">
      <summary>
            Align to the right and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Clip">
      <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Zoom">
      <summary>
            Scale the picture to use as much of the page as possible, 
            while preserving the picture's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Stretch">
      <summary>
            Stretch the picture to fill the page.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Tile">
      <summary>
            Tile the picture to fill the page.
            </summary>
    </member>
    <member name="T:C1.C1Report.PictureScaleEnum">
      <summary>
            Specifies the scaling of images within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.C1Report.Field.PictureScale" /> 
            and <see cref="P:C1.C1Report.Layout.PictureScale" /> properties in the <see cref="T:C1.C1Report.Field" /> and <see cref="T:C1.C1Report.Layout" /> classes.
            </remarks>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Clip">
      <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Stretch">
      <summary>
            Stretch the picture to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Scale">
      <summary>
            Scale the picture to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Tile">
      <summary>
            Tile the picture to fill the display area.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Hide">
      <summary>
            Hide the picture.
            </summary>
    </member>
    <member name="T:C1.C1Report.CheckBoxEnum">
      <summary>
            Specifies how boolean values are translated into check boxes.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.CheckBox" /> property in the <see cref="T:C1.C1Report.Field" /> class. 
            This property is useful when you wish to display boolean values graphically, 
            rather than using text.
            </remarks>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.NoCheckBox">
      <summary>
            No checkbox (display as text).
            </summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.CheckBox">
      <summary>
            Checkbox.
            </summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.CrossBox">
      <summary>
            Crossbox.
            </summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.RadioButton">
      <summary>
            Radio button.
            </summary>
    </member>
    <member name="T:C1.C1Report.BorderStyleEnum">
      <summary>
            Specifies the Field’s border style.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.BorderStyle" /> property in the <see cref="T:C1.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Transparent">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Solid">
      <summary>
            Solid border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Dash">
      <summary>
            Dashed border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Dot">
      <summary>
            Dotted border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.DashDot">
      <summary>
            Dash-dot border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.DashDotDot">
      <summary>
            Dash-dot-dot border.
            </summary>
    </member>
    <member name="T:C1.C1Report.LineSlantEnum">
      <summary>
            Determines whether/how a line should be drawn across the field 
            (as opposed to a box around the field).
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.LineSlant" /> property in the <see cref="T:C1.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.NoLine">
      <summary>
            Regular field (not a line).
            </summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.NoSlant">
      <summary>
            Render field as a vertical line (if Height &gt; Width) 
            or as a horizontal line (if Width &gt; Height).
            </summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.Down">
      <summary>
            Render field as a line between the left-top 
            and right-bottom corners of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.Up">
      <summary>
            Render field as a line between the left-bottom 
            and right-top corners of the field box.
            </summary>
    </member>
    <member name="T:C1.C1Report.ForcePageBreakEnum">
      <summary>
            Determines whether page breaks should be inserted before or after a field or section.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.C1Report.Field.ForcePageBreak" /> and 
            <see cref="P:C1.C1Report.Section.ForcePageBreak" /> properties in the <see cref="T:C1.C1Report.Field" /> and <see cref="T:C1.C1Report.Section" /> classes.
            </remarks>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.None">
      <summary>
            No page breaks.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.Before">
      <summary>
            A page break is inserted before the field or section.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.After">
      <summary>
            A page break is inserted after the field or section.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.BeforeAndAfter">
      <summary>
            Page breaks are inserted before and after the field or section.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.PageBefore">
      <summary>
            In multi-column reports, a page break is inserted before the field or section instead of column break.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.PageAfter">
      <summary>
            In multi-column reports, a page break is inserted after the field or section instead of column break.
            </summary>
    </member>
    <member name="T:C1.C1Report.TextDirectionEnum">
      <summary>
            Specifies the direction of the text in the field.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.TextDirection" /> property in the <see cref="T:C1.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Normal">
      <summary>
            Text direction is normal.
            </summary>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Up">
      <summary>
            Text direction is up.
            </summary>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Down">
      <summary>
            Text direction is down.
            </summary>
    </member>
    <member name="T:C1.C1Report.BarCodeEnum">
      <summary>
            Determines what type of barcode will be used in the field.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.BarCode" /> property in the <see cref="T:C1.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.None">
      <summary>
            No barcode.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ansi39">
      <summary>
            ANSI 3 of 9 (Code 39) uses upper case, numbers, - , * $ / + %.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ansi39x">
      <summary>
            ANSI Extended 3 of 9 (Extended Code 39) uses the complete ASCII character set.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code39">
      <summary>
            Alpha-numeric, (Code 3 of 9).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code39x">
      <summary>
            Extended Code 39 uses the complete ASCII character set.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code93">
      <summary>
            Alpha-numeric.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code93x">
      <summary>
            Extended Code 93 uses the complete ASCII character set.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128_A">
      <summary>
            Code 128 A uses control characters, numbers, punctuation, and upper case.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128_B">
      <summary>
            Code 128 B uses punctuation, numbers, upper case and lower case.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128_C">
      <summary>
            Code 128 C uses only numbers.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128auto">
      <summary>
            Code 128 Auto uses the complete ASCII character set.  
            Automatically selects between Code 128 A, B and C to give the smallest barcode.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code128">
      <summary>
            Alpha-numeric, denser than Code39 and required at least 6 characters.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_2_of_5">
      <summary>
            Code 2 of 5 uses only numbers.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code25intlv">
      <summary>
            Interleaved 2 of 5 uses only numbers.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.CodeI2of5">
      <summary>
            Numeric only.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Codabar">
      <summary>
            Numeric only, slightly denser than Code39.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Matrix_2_of_5">
      <summary>
            Matrix 2 of 5 is a higher density barcode consisting of 3 black bars and 2 white bars. 
            Matrix_2_of_5 uses only numbers.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.MSI">
      <summary>
            MSI Code uses only numbers.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.PostNet">
      <summary>
            Numeric only, US Postal Service.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.EAN_13">
      <summary>
            EAN-13 uses only numbers (12 numbers and a check digit). 
            If there are only 12 numbers in the string, it calculates a checksum and adds it to the thirteenth position. 
            If there are 13, it validates the checksum and throws an error if it is incorrect.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean13">
      <summary>
            EAN-13 barcode. EAN-13 encodes 12-digit article codes 
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.EAN_8">
      <summary>
            EAN-8 uses only numbers (7 numbers and a check digit).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean8">
      <summary>
            EAN-8 barcode. EAN-8 encodes 7-digit article codes 
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UPC_A">
      <summary>
            UPC-A uses only numbers (11 numbers and a check digit).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UpcA">
      <summary>
            UPC-A barcode. UPC-A encodes 11-digit article codes
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UPC_E0">
      <summary>
            UPC-E0 uses only numbers.
            Used for zero-compression UPC symbols.  
            For the Caption property, you may enter either a six-digit UPC-E code or a complete 11-digit (includes code type, which must be 0 (zero)) UPC-A code.  
            If an 11-digit code is entered, the Barcode control will convert it to a six-digit UPC-E code, if possible. 
            If it is not possible to convert from the 11-digit code to the six-digit code, nothing is displayed.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UpcE">
      <summary>
        <para>UPC-E is a variation of UPC-A which allows for a more compact barcode by eliminating 
            "extra" zeros. Since the resulting UPC-E barcode is about half the size as an UPC-A 
            barcode, it is generally used on products with very small packaging.</para>
        <para>When using the UpcE encoding, set the Text property to an 11-digit string as
            if you were using the UpcA encoding.</para>
        <para>Note that not all UpcA codes can be encoded in UpcE. 
            If the manufacturer code ends with "000", "100", or "200", the product number must be &lt;= 900.
            If the manufacturer code ends with "00" but not with "100", "200", or "300", then the product number must be &lt;= 90.
            If the manufacturer code ends with "0" but not with "00", then the product number must be &lt;= 9.
            If the manufacturer code does not end with "0", then the product number must be between 5 and 9.
            </para>
      </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UPC_E1">
      <summary>
            UPC-E1 uses only numbers.  Used typically for shelf labeling in the retail environment.  
            The length of the input string for U.P.C. E1 is six numeric characters.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RM4SCC">
      <summary>
            Royal Mail RM4SCC uses only letters and numbers (with a check digit).  
            This is the barcode used by the Royal Mail in the United Kingdom.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UCCEAN128">
      <summary>
            UCC/EAN –128 uses the complete ASCII character Set.  
            This is a special version of Code 128 used in HIBC applications.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.QRCode">
      <summary>
            QRCode is a 2D symbology that is capable of handling numeric, alphanumeric and byte data as well as Japanese kanji and kana characters. 
            This symbology can encode up to 7,366 characters.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code49">
      <summary>
            Code 49 is a 2D high-density stacked barcode. Encodes the complete ASCII character set. 
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.JapanesePostal">
      <summary>
            This is the barcode used by the Japanese Postal system. 
            Encodes alpha and numeric characters consisting of 18 digits including a 7-digit postal code number, optionally followed by block and house number information. 
            The data to be encoded can include hyphens.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Pdf417">
      <summary>
            Pdf417 is a popular high-density 2-dimensional symbology that encodes up to 1108 bytes of information. 
            This barcode consists of a stacked set of smaller barcodes. 
            Encodes the full ASCII character set. 
            Capable of encoding as many as 2725 data characters.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.EAN128FNC1">
      <summary>
            EAN128FNC1 is a UCC/EAN-128 (EAN128) type barcode that allows you to insert FNC1 character at any place and adjust the bar size etc, which is not available in UCC/EAN-128.
            To insert FNC1 character, set “\n” for C#, or “vbLf” for VB to Text property at runtime.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean128">
      <summary>
            The purpose of GS1-128 (formerly known as UCC-128 or EAN-128) is to
            establish a standard way of labeling a package with more information
            than just a product code.
            It provides supplemental information such as batch number and "use before" dates.
            There are two main components of UCC/EAN/GS1-128: the data with its Application
            Identifier and the bar code symbology used to code the data.
            The bar code symbology is code 128.
            The difference is the use of defined Application Identifiers with data
            encoded into the code 128 symbol.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14">
      <summary>
            RSS14 is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification for use with omnidirectional point-of-sale scanners.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14Truncated">
      <summary>
            RSS14Truncated is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification plus Indicator digits for use on small items, not for point-of-sale scanners.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14Stacked">
      <summary>
            RSS14Stacked is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is the same as RSS14Truncated, but stacked in two rows when RSS14Truncated is too wide.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14StackedOmnidirectional">
      <summary>
            RSS14StackedOmnidirectional is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is the same as RSS14, but stacked in two rows when RSS14 is too wide.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSSExpanded">
      <summary>
            RSSExpanded is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification plus AI element strings (expiration date, weight, etc.) for use with omnidirectional point-of-sale scanners.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSSExpandedStacked">
      <summary>
            RSSExpandedStacked is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is the same as RSSExpanded, but stacked in two rows when RSSExpanded is too wide.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSSLimited">
      <summary>
            RSS Limited is a Reduced Space Symbology that encodes Composite Component (CC) extended EAN and UPC information in less space. 
            This version is a 14-digit EAN.UCC item identification with indicator digits of 0 or 1 in a small symbol that is not scanned by point-of-sale scanners.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.DataMatrix">
      <summary>
            Data Matrix is a high density, two-dimensional barcode with square modules arranged in a square or rectangular matrix pattern.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.MicroPDF417">
      <summary>
            MicroPDF417 is two-dimensional (2D), multi-row symbology, derived from PDF417. 
            Micro-PDF417 is designed for applications that need to encode data in a two-dimensional (2D) symbol (up to 150 bytes, 250 alphanumeric characters, or 366 numeric digits) with the minimal symbol size.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.IntelligentMail">
      <summary>
            Intelligent Mail, formerly known as the 4-State Customer Barcode, is a 65-bar code used for domestic mail in the U.S.
            </summary>
    </member>
    <member name="T:C1.C1Report.CompatibilityOptions">
      <summary>
            Specifies compatibility options for a <see cref="T:C1.C1Report.C1Report" />.
            Properties in this class can be used to control compatibility
            with older versions of <b>C1Report</b>.
            </summary>
    </member>
    <member name="M:C1.C1Report.CompatibilityOptions.Clear">
      <summary>
            Resets all properties to their default values.
            </summary>
    </member>
    <member name="M:C1.C1Report.CompatibilityOptions.AssignFrom(C1.C1Report.CompatibilityOptions)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Report.CompatibilityOptions" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.OldTypesConversion">
      <summary>
            Gets or sets a value indicating whether to use the old method of type conversion
            in report script functions CStr, CDbl and CDate.
            <para>The default is <b>false</b>. See remarks for details.</para></summary>
      <remarks>
            In versions of <b>C1Report</b> prior to 2012 v1, the following rules were used by
            type conversion script functions CStr, CDbl, CDate:
            <list type="bullet"><item>CStr used Application.CurrentCulture.</item><item>CDbl used InvariantCulture, if that failed Application.CurrentCulture was used.</item><item>CDate used InvariantCulture.</item></list>
            Starting with the 2012 v1 release, the rules changed to:
            <list type="bullet"><item>CStr uses Application.CurrentCulture.</item><item>CDbl and CDate use Application.CurrentCulture, if that fails then InvariantCulture is used.</item></list></remarks>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.StretchBarCodesAsImages">
      <summary>
            Gets or sets a value indicating whether to stretch barcodes as images.
            <para>The default value is false, which is compatible with previous versions.</para></summary>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.UseGdiLinesInPdfExport">
      <summary>
            Gets or sets a value indicating whether GDI functions should be used to draw lines when rendering for output to PDF.
            The default value is false. Setting this property to true may result in much smaller file sizes in reports
            containing many dashed/dotted lines.
            </summary>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.UseTextFilterClassic">
      <summary>
            Gets or sets a value indicating whether to use the old version of text filter (TextFilterClassic).
            </summary>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.IgnoreInvisibleFieldsInGrowShrinkSections">
      <summary>
            Gets or sets a value indicating whether invisible fields should be ignored
            when calculating the heights of CanGrow/CanShrink sections.
            </summary>
    </member>
    <member name="T:C1.C1Report.DataLinkParams">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.DataLinkBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.DbLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.OledbLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.SqlServerCe3_5Link">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.SqlServerCe4_0Link">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.OdbcLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.XmlLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.ExternalObjectLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Report.DataProvider">
      <summary>
            Specifies the type of the data source.
            Different data sources use different connection string and query command syntaxes.
            </summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.Auto">
      <summary>
            The data source type is automatically determined base on connection string.
            Using this value is not recommended as connecting to the data source may be very slow.
            </summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.OLEDB">
      <summary>
            Specifies an OLE DB data source.
            </summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.ODBC">
      <summary>
            Specifies an ODBC data source.
            </summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.SqlServerCe3_5">
      <summary>
            Specifies an SQL server compact edition version 3.5 data source.
            </summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.SqlServerCe4_0">
      <summary>
            Specifies an SQL server compact edition version 4.0 data source.
            </summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.XmlFile">
      <summary>
            Specifies that connection string is the name of an XML file containing a DataSet object.
            </summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.ExternalObject">
      <summary>
            Specifies that connection string is the name of an assembly that contains objects
            which implement the  <see cref="T:C1.C1Report.IC1ReportExternalRecordset" /> interface.
            </summary>
    </member>
    <member name="T:C1.C1Report.DataSourceInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Report.FieldInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Report.DataSource">
      <summary>
            Provides data for reports.
            </summary>
      <remarks>
        <para>Most reports specify their data sources by setting the <see cref="P:C1.C1Report.DataSource.ConnectionString" /> and 
            <see cref="P:C1.C1Report.DataSource.RecordSource" /> properties. The <b>DataSource</b> object uses these values to connect
            to a database and retrieve the report data.</para>
        <para>Alternatively, you can assign data objects directly to the <see cref="P:C1.C1Report.DataSource.Recordset" /> property.
            This approach is more efficient in scenarios where the data has already been loaded by the 
            application for other purposes, and can be used in the report directly instead of loading a copy.</para>
      </remarks>
    </member>
    <member name="F:C1.C1Report.DataSource.c_DefIsolationLevel">
      <summary>
            Defines default IsolationLevel for transaction used to get report data.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataSource.ToString">
      <summary>
            Returns a string representation of <see cref="T:C1.C1Report.DataSource" /> object.
            </summary>
      <returns>The value of <see cref="P:C1.C1Report.DataSource.RecordSource" /> property if supplied by the user,
            or "(none)" otherwise.</returns>
    </member>
    <member name="M:C1.C1Report.DataSource.GetRecordSource(System.Boolean)">
      <summary>
            Processes the <b>PARAMETERS</b> clause in the <see cref="P:C1.C1Report.DataSource.RecordSource" /> string and returns the result.
            </summary>
      <remarks>
        <para>This property is related to the <see cref="P:C1.C1Report.DataSource.RecordSource" /> property. 
            The <see cref="P:C1.C1Report.DataSource.RecordSource" /> property sets or returns a string that specifies the source 
            dataset for the report, and it may contain a <b>PARAMETERS</b> clause that causes <see cref="T:C1.C1Report.C1Report" /> 
            to prompt the user for information.</para>
        <para>If you wanted to use the value of the <see cref="P:C1.C1Report.DataSource.RecordSource" /> property to open a dataset 
            directly from your program, you would have to parse the <b>PARAMETERS</b> clause yourself.</para>
      </remarks>
      <param name="prompt">If set to true, user will be prompted for the parameters 
            before the method returns. If set to false, the default values will be used.</param>
      <returns>The string (SQL statement or table name) that can be used to open a recordset.</returns>
    </member>
    <member name="M:C1.C1Report.DataSource.GetFieldValue(System.Int32)">
      <summary>
            Gets the value of the given field, at the cursor position.
            </summary>
      <param name="fieldIndex">Index of the field.</param>
      <returns>Value of the field.</returns>
    </member>
    <member name="M:C1.C1Report.DataSource.BOF">
      <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataSource.EOF">
      <summary>
            Returns true if the cursor is pointing at the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MoveFirst">
      <summary>
            Moves the cursor to the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MoveLast">
      <summary>
            Moves the cursor to the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MovePrevious">
      <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MoveNext">
      <summary>
            Moves the cursor to the next record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataSource.GetBookmark">
      <summary>
            Returns the current cursor position.
            </summary>
      <returns>Index of current record.</returns>
    </member>
    <member name="M:C1.C1Report.DataSource.SetBookmark(System.Int32)">
      <summary>
            Sets the current cursor position to supplied value.
            </summary>
      <param name="bkmk">Index of record.</param>
    </member>
    <member name="P:C1.C1Report.DataSource.DataProvider">
      <summary>
            Gets or sets the type of the data source.
            The data source type determines the syntaxes of connection string and query (record source).
            The default is Auto but it is recommended that you change that value to one of specific
            data source types, as automatic determination of the data source type may be very time consuming.
            </summary>
    </member>
    <member name="P:C1.C1Report.DataSource.ConnectionString">
      <summary>
            Gets or sets the string used to open a database.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.C1Report.DataSource.ConnectionString" /> is used by the <see cref="T:C1.C1Report.DataSource" /> class to load the report data.</para>
        <para>The <see cref="T:C1.C1Report.DataSource" /> class uses an <see cref="T:System.Data.OleDb.OleDbConnection" /> object to retrieve the data, 
            so the syntax for the <see cref="P:C1.C1Report.DataSource.ConnectionString" /> is the one used OleDb connection strings. For details on 
            the syntax, see the documentation for the <see cref="T:System.Data.OleDb.OleDbConnection" /> class.</para>
        <para>The <see cref="P:C1.C1Report.DataSource.ConnectionString" /> specifies the database that contains the report data. 
            The <see cref="P:C1.C1Report.DataSource.RecordSource" /> property specifies which table, stored procedure, or Sql command to use for 
            retrieving the data.</para>
        <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection" />,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable" /> object, you can assign the data 
            directly to the <see cref="P:C1.C1Report.DataSource.Recordset" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.DataSource.RecordSource">
      <summary>
            Gets or sets a string that specifies which table, stored procedure, or Sql command
            to use for retrieving the report data.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.C1Report.DataSource.ConnectionString" /> specifies the database that contains the report data. 
            The <see cref="P:C1.C1Report.DataSource.RecordSource" /> property specifies which table, stored procedure, or Sql command to use for 
            retrieving the data.</para>
        <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection" />,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable" /> object, you can assign the 
            data directly to the <see cref="P:C1.C1Report.DataSource.Recordset" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.DataSource.Filter">
      <summary>
            Gets or sets the expression used to filter which data rows are included in the report.
            </summary>
      <remarks>
        <para>Use the <b>Filter</b> property to restrict the records that you want to include in a 
            report without modifying the <see cref="P:C1.C1Report.DataSource.RecordSource" /> property.</para>
        <para>Using a filter is similar to specifying a WHERE clause in the SQL statement assigned to
            the <see cref="P:C1.C1Report.DataSource.RecordSource" /> property. Both techniques will filter the data according to the
            condition specified. The difference is that the <b>Filter</b> property is applied to a table
            that has already been loaded in memory, while the WHERE statement causes only the filtered
            records to be loaded from the database into memory.</para>
        <para>When creating reports that include only small subsets large tables, the WHERE statement
            is a better option, because it doesn't require the entire table to be loaded into memory.
            On the other hand, if the table has already been loaded in memory, the <b>Filter</b> property
            is a better option, since it does not require any additional data to be loaded.</para>
        <para>The syntax for the filter expression is the same used to specify the <see cref="P:System.Data.DataView.RowFilter" />
            property for <see cref="T:System.Data.DataView" /> objects. The expressions consist of conditions in the form
            <i>ColumnName</i><i>Operator</i><i>Value</i>, where <i>ColumnName</i> is the name of a column in 
            the data source (optionally enclosed in square brackets), <i>Operator</i> is one of the regular 
            Visual Basic comparison operators, and <i>Value</i> is a literal enclosed in single quotes. Conditions
            may be concatenated using <b>AND</b> and <b>OR</b> operators.</para>
      </remarks>
      <example>
            The code below shows how to apply a filter to a data source using the <c>Filter</c> property and
            using a WHERE clause in a SQL statement:
            <code>
            if (useFilterProperty)
            {
            	// load all records, filter in memory
                _c1r.DataSource.RecordSource = "SELECT * from Employees";
                _c1r.DataSource.Filter = "HireDate &gt;= '1/1/1993' AND Country = 'UK'";
            }
            else
            {
            	// load selected records only
                _c1r.DataSource.RecordSource = "SELECT * from Employees " +
                    "WHERE HireDate &gt;= #1/1/1993# AND Country = 'UK'";
            </code></example>
    </member>
    <member name="P:C1.C1Report.DataSource.MaxRecords">
      <summary>
            Gets or sets the maximum number of data rows to be included in the report (set to zero to include all rows).
            </summary>
      <remarks>
        <para>This property is useful if you want to limit the size of a report. For example, you may write a report 
            designer with a preview window that shows only the first 500 records from the database.</para>
        <para>Setting this property to zero causes the control to retrieve all records.</para>
        <para>You can also limit the size of reports by setting the <see cref="P:C1.C1Report.C1Report.MaxPages" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.DataSource.Recordset">
      <summary>
            Sets or gets the data source object that provides data to the report.
            </summary>
      <remarks>
        <para>Usually, the control creates a <see cref="T:System.Data.DataTable" /> object based on the value of the 
            <see cref="P:C1.C1Report.DataSource.ConnectionString" /> and <see cref="P:C1.C1Report.DataSource.RecordSource" /> properties, and uses that object 
            as the report data source.</para>
        <para>Alternatively, you may want to create the data source object yourself, and assign it to 
            the control. You can do that by assigning your data source object to the <b>Recordset</b>
            property.</para>
        <para>When a <b>DataTable</b> or <b>DataView</b> object is assigned to the <b>Recordset</b>
            property, C1Report automatically creates an internal wrapper class that implements 
            the <see cref="T:C1.C1Report.IC1ReportRecordset" /> interface. Because of this, you can't get the original
            <b>DataTable</b> or <b>DataView</b> objects back by reading the property value. Instead,
            you must cast the wrapper object to an <see cref="T:System.ComponentModel.IListSource" /> and use the 
            <see cref="M:System.ComponentModel.IListSource.GetList" /> method instead, as shown in the example below.</para>
        <value>
            You can assign objects of the following types to the <see cref="P:C1.C1Report.DataSource.Recordset" /> property:
            (1) <see cref="T:System.Data.DataTable" /> objects, (2) <see cref="T:System.Data.DataView" /> objects, or (3) any 
            object that implements the <see cref="T:C1.C1Report.IC1ReportRecordset" /> interface.
            </value>
      </remarks>
      <example>
        <code>
            // create a DataTable
            DataTable dt = new DataTable("my table");
            
            // assign it to c1report
            // automatically creates IC1ReportRecordset wrapper
            c1r.DataSource.Recordset = dt;
            
            // 1) this doesn't work (dbBad == null)
            object wrapper = c1Report1.DataSource.Recordset;
            DataTable dtBad = wrapper as DataTable;
            
            // 2) this does (dtGood == dt)
            DataView dv = ((IListSource)wrapper).GetList() as DataView;
            DataTable dtGood = dv.Table;
            </code>
      </example>
    </member>
    <member name="P:C1.C1Report.DataSource.CommandTimeOut">
      <summary>
            Gets or sets the number of seconds to wait before the data connection times out 
            (set to -1 to use the default value, usually 30s).
            </summary>
    </member>
    <member name="P:C1.C1Report.DataSource.ParentReport">
      <summary>
            Gets the report that contains this <see cref="T:C1.C1Report.DataSource" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.DataSource.IsolationLevel">
      <summary>
            Gets or sets the isolation level for <b>OleDBTransaction</b>
            used to retrieve the report data.
            <para>The default is <b>IsolationLevel.ReadCommitted</b>.</para></summary>
    </member>
    <member name="T:C1.C1Report.ExportFilter">
      <summary>
            Base class for all export filters, used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render 
            reports into different formats.
            </summary>
      <remarks>
        <para>
          <b>ExportFilter</b> is an abstract class used as a base class for all the built-in export filter classes, 
            <see cref="T:C1.C1Report.HtmlFilter" />, <see cref="T:C1.C1Report.PdfFilter" />, <see cref="T:C1.C1Report.RtfFilter" />, <see cref="T:C1.C1Report.XlsFilter" />, 
            <see cref="T:C1.C1Report.TextFilterClassic" />, and <see cref="T:C1.C1Report.TiffFilter" />.</para>
        <para>You can write your own export filters by deriving from <b>ExportFilter</b>.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.ExportFilter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Report.ExportFilter.Dispose">
      <summary>
            Releases the resources used by the filter.
            </summary>
      <remarks>
            Override this method in derived classes to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The <see cref="T:C1.C1Report.Section" /> to render.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.EndSection(C1.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each <see cref="T:C1.C1Report.Section" />.
            </summary>
      <param name="section">
        <see cref="T:C1.C1Report.Section" /> that was rendered.</param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.C1Report.ExportFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.C1Report.ExportFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.C1Report.ExportFilter.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
      <remarks>
        <para>Overlay fields are used only in reports that contain calculated fields which use the <b>Pages</b>
            property.</para>
        <para>This value is not known until the report has been generated, and is therefore rendered on a second pass.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.AddOutlineEntry(System.String,System.Int32,System.Double,System.Double)">
      <summary>
            Called when the component renders the beginning of a report group. 
            </summary>
      <param name="heading">Outline header.</param>
      <param name="level">Outline level.</param>
      <param name="x">Left position of the outline, in twips.</param>
      <param name="y">Top position of the outline, in twips.</param>
      <remarks>
            This method allows the filter to build a report outline.
            </remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <remarks>
        <para>When generating paged reports, the component calls the filter's <see cref="M:C1.C1Report.ExportFilter.NewPage" />
            method on page breaks and updates the value of the <see cref="P:C1.C1Report.C1Report.Page" /> property.</para>
        <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
      </remarks>
      <returns>True if report is paged.</returns>
    </member>
    <member name="M:C1.C1Report.ExportFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter requires page images to be generated.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.C1Report.C1Report" /> will render the report into the filter 
            and also into its own <see cref="P:C1.C1Report.C1Report.PageImages" /> collection.</para>
        <para>Some filters use these images to generate their output (e.g. PDF, TIFF). Other filters 
            don't need the images (e.g. HTML, RTF) and therefore this method returns false, which saves some 
            resources while rendering long reports.</para>
      </remarks>
      <returns>True if the filter requires page images.</returns>
    </member>
    <member name="T:C1.C1Report.HtmlFilter">
      <summary>
            Used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into HTML streams or files. 
            </summary>
      <remarks>
            Creating an <b>HtmlFilter</b> and using it in a call to the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />
            method is similar to using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> or <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>HtmlFilter</b> object
            before calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.HtmlFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Contains the name of the file to be created. 
            If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
      <param name="idPrefix">A unique report identifier used to avoid duplicate style names 
            when adding several reports to the same HTML stream.</param>
      <param name="fileName">Path and template of file name for member files (pictures etc).</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <remarks>
        <para>When generating paged reports, the component calls the filter's <see cref="M:C1.C1Report.HtmlFilter.NewPage" />
            method on page breaks and updates the value of the <see cref="P:C1.C1Report.C1Report.Page" /> property.</para>
        <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
      </remarks>
      <returns>True if report is paged.</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <remarks>
        <para>By default, C1Report will render the report into the filter and also into its own 
            <see cref="P:C1.C1Report.C1Report.PageImages" /> collection. </para>
        <para>
          <see cref="T:C1.C1Report.HtmlFilter" /> doesn't need the images and therefore this method always 
            returns false, which saves some resources while rendering long reports.</para>
      </remarks>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.C1Report.HtmlFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The section being rendered.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.EndSection(C1.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each section.
            </summary>
      <param name="section">Section that was rendered.</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
      <param name="field">The field to be rendered.</param>
      <param name="rc">Rectangle that determines the field position on the current page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
      <remarks>
        <para>Overlay fields are used only in reports that contain calculated fields which use 
            the <b>Pages</b> variable.</para>
        <para>This value is not known until the report has been generated, and is therefore 
            rendered on a second pass.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.CreateStyleSheet">
      <summary>
            Create and save style sheet for the report.
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.SaveStyleSheet(System.IO.StreamWriter,System.Boolean)">
      <summary>
            Save style sheet into the given <see cref="T:System.IO.StreamWriter" />.
            </summary>
      <param name="sw">
        <see cref="T:System.IO.StreamWriter" /> that will contain the style sheet.</param>
      <param name="startCollapsed">Whether the style sheet should be initially configured in the collapsed state.</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartPage">
      <summary>
            Encodes the start of a new page.
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.EndPage">
      <summary>
            Encodes the end of the current page.
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.BreakPages(System.String)">
      <summary>
            Breaks up an HTML output file containing multiple pages into multiple files.
            </summary>
      <param name="fileName">Name of the file to break up into pages.</param>
      <returns>True if the file was broken up successfully.</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlFieldBackgroundPicture(C1.C1Report.Field,System.Drawing.Image)">
      <summary>
            Gets a CSS style fragment that represents a field's background image.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> that contains the image.</param>
      <param name="img">
        <see cref="T:System.Drawing.Image" /> to be rendered in the field.</param>
      <returns>A CSS style fragment that represents a field's background image.</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlFieldPicture(C1.C1Report.Field,System.Drawing.Image,System.Boolean)">
      <summary>
            Gets an HTML tag that represents an image in a field.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> that contains the image.</param>
      <param name="img">
        <see cref="T:System.Drawing.Image" /> to be rendered in the field.</param>
      <param name="absolutePositioning">Whether to use absolute positioning in the HTML IMG tag.</param>
      <returns>An HTML IMG tag to show the image, or an empty string if the field has no image.</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlFieldLink(C1.C1Report.Field)">
      <summary>
            Gets an HTML tag that represents a link in a field.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> that contains the link.</param>
      <returns>An HTML tag that represents a link in a field.</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlPlainText(C1.C1Report.Field,System.String)">
      <summary>
            Gets a plain text version of an RTF string.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> that owns the text.</param>
      <param name="text">Text to encode.</param>
      <returns>An plain text version of the RTF string.</returns>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.Paged">
      <summary>
            Specifies whether the filter should produce a continuous 
            report into a single HTML file or a paged report into a set of HTML files.
            </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.MultiFile">
      <summary>
            Specifies whether the built-in HTML filter should break paged reports 
            into multiple HTML files (one per page).
            </summary>
      <remarks>
            Set this property to false to create a single HTML file containing all pages, 
            with &lt;BR&gt; elements at the page breaks.
            </remarks>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.DrillDown">
      <summary>
            Specifies whether the user should be able to expand and collapse groups by clicking on their header sections.
            </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.StartCollapsed">
      <summary>
            Specifies whether <see cref="P:C1.C1Report.HtmlFilter.DrillDown" /> reports should be initially displayed in a collapsed state.
            </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.EncodeHtml">
      <summary>
            Specifies whether field contents should be encoded or rendered in raw format. 
            This property allows you to render fields that contain HTML formatting.
            </summary>
      <remarks>
        <para>By default, field contents are encoded, so a field containing the string "A&lt;B&gt;C" 
            would be rendered as "A&amp;lt;B&amp;gt;C", which would appear as the original string 
            in the browser.</para>
        <para>If you set <see cref="P:C1.C1Report.HtmlFilter.EncodeHtml" /> to False, the same string would be rendered in 
            raw format, causing the browser to display it as "A&lt;B&gt;C" (the "C" would be bold).</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.OwnerReport">
      <summary>
            Gets a reference to the <see cref="T:C1.C1Report.C1Report" /> that owns this filter.
            </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.HtmlStreamWriter">
      <summary>
            Gets a reference to the <see cref="T:System.IO.StreamWriter" /> being used to create the HTML output.
            </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.StylePrefix">
      <summary>
            Gets a string to be used as a prefix for style names.
            </summary>
    </member>
    <member name="T:C1.C1Report.HtmlTableFilter">
      <summary>
            Class is used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into 
            table-based HTML streams or files. 
            </summary>
      <remarks>
        <para>This filter is similar to the plain <see cref="T:C1.C1Report.HtmlFilter" />, except if generates reports
            based on TABLE tags as opposed to absolutely-positioned DIV tags. The resulting files are 
            usually less accurate than the ones created with the plain DIV-based <see cref="T:C1.C1Report.HtmlFilter" />,
            but they have three significant advantages:</para>
        <para>1) TABLE-based reports are easier to edit in regular HTML editors. You can easily insert rows for example.</para>
        <para>2) TABLE-based reports support clipboard operations better. For example, you can copy report sections 
            in the browser and paste them into Excel.</para>
        <para>3) TABLE-based reports support vertical alignment within fields.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.HtmlFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Contains the name of the file to be created. 
            If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
      <param name="idPrefix">A unique report identifier used to avoid duplicate style names 
            when adding several reports to the same HTML stream.</param>
      <param name="fileName">Path and template of file name for member files (pictures etc).</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The section being rendered.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.EndSection(C1.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each section.
            </summary>
      <param name="section">Section that was rendered.</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
      <param name="field">The field to be rendered.</param>
      <param name="rc">Rectangle that determines the field position on the current page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.CreateStyleSheet">
      <summary>
            Create and save style sheet for the report.
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.SaveStyleSheet(System.IO.StreamWriter,System.Boolean)">
      <summary>
            Save style sheet into the given <see cref="T:System.IO.StreamWriter" />.
            </summary>
      <param name="sw">
        <see cref="T:System.IO.StreamWriter" /> that will contain the style sheet.</param>
      <param name="startCollapsed">Whether the style sheet should be initially configured in the collapsed state.</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.StartPage">
      <summary>
            Encodes the end of a new page.
            </summary>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.EndPage">
      <summary>
            Encodes the end of the current page.
            </summary>
    </member>
    <member name="P:C1.C1Report.HtmlTableFilter.CellSpacing">
      <summary>
            Gets or sets the number of pixels between adjacent cells in the output table.
            </summary>
    </member>
    <member name="P:C1.C1Report.HtmlTableFilter.CellPadding">
      <summary>
            Gets or sets the number of pixels between the edge of the cell and its contents.
            </summary>
    </member>
    <member name="T:C1.C1Report.MetafileFilter">
      <summary>
            Used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into compressed metafile files. 
            </summary>
      <remarks>
            This filter creates zip files containing one metafile for each report page.
            </remarks>
    </member>
    <member name="M:C1.C1Report.MetafileFilter.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Report.MetafileFilter" /> class.
            </summary>
      <param name="fileName">Name of the zip file that will contain the report metafiles.</param>
    </member>
    <member name="M:C1.C1Report.MetafileFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.MetafileFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="P:C1.C1Report.MetafileFilter.MetafileType">
      <summary>
            Gets or sets the type of metafile this <see cref="T:C1.C1Report.MetafileFilter" /> will generate.
            </summary>
    </member>
    <member name="T:C1.C1Report.PdfFilter">
      <summary>
            Used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into PDF (portable document format)
            streams or files. 
            </summary>
      <remarks>
            Creating a <b>PdfFilter</b> and using it in a call to <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> is similar to 
            using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> or <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" /> methods, 
            but offers some extra flexibility because you can set properties on the <b>PdfFilter</b> before calling 
            <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Report.PdfFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.PdfFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.PdfFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.PdfFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.PdfFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.PdfFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfFilter.PdfACompatible">
      <summary>
            Gets or sets a value indicating whether to generate PDF/A compatible document.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfFilter.EmbedFonts">
      <summary>
            Specifies whether the filter should embed font information into the PDF output.
            </summary>
      <remarks>
        <para>Embedding font information makes the PDF document substantially larger, but it allows the file to be 
            viewed faithfully in systems that don't have all the necessary fonts installed.</para>
        <para>Embedding fonts is not necessary if the target systems have the necessary <b>TrueType</b>
            fonts installed.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.PdfFilter.Password">
      <summary>
            Gets or sets the owner password associated with the PDF document. 
            </summary>
      <remarks>
        <para>The owner password is required for making changes to the document.</para>
        <para>This property is deprecated. The new <see cref="P:C1.C1Report.PdfFilter.PdfSecurityOptions" /> property 
            allows you to set owner and user passwords, as well as permissions for editing and 
            printing the document.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.PdfFilter.Outline">
      <summary>
            Specifies whether the PDF output should include an outline tree. 
            </summary>
      <remarks>
        <para>The outline tree is created automatically based on the report groups and 
            can be used to navigate through the report in the Adobe Acrobat viewer.</para>
        <para>Each node in the tree corresponds to a group header section in the report.
            Invisible group header sections do not generate outline entries in the PDF document.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.PdfFilter.PdfSecurityOptions">
      <summary>
            Gets a <see cref="P:C1.C1Report.PdfFilter.PdfSecurityOptions" /> object that specifies who can use the Pdf document and what actions are allowed.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfFilter.PdfViewerOptions">
      <summary>
            Gets a <see cref="P:C1.C1Report.PdfFilter.PdfViewerOptions" /> object that specifies how the viewer should display the Pdf document.
            </summary>
    </member>
    <member name="T:C1.C1Report.PdfSecurityOptions">
      <summary>
            Contains options that determine who can use the Pdf document and what actions are allowed.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowCopyContent">
      <summary>
            Gets or sets whether the user can copy contents from the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowEditAnnotations">
      <summary>
            Gets or sets whether the user can edit annotations in the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowEditContent">
      <summary>
            Gets or sets whether the user can edit the contents of the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowPrint">
      <summary>
            Gets or sets whether the user can print the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.OwnerPassword">
      <summary>
            Gets or sets the password required to change permissions for the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.UserPassword">
      <summary>
            Gets or sets the password required to open the Pdf document.
            </summary>
    </member>
    <member name="T:C1.C1Report.PageLayoutEnum">
      <summary>
            Specifies the page layout to be used when the Pdf document is opened.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.ViewerDefault">
      <summary>
            Do not specify a layout and use the current viewer default.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.SinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.OneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.TwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.TwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="T:C1.C1Report.PageModeEnum">
      <summary>
            Specifies how the Pdf document should be displayed when opened.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.Automatic">
      <summary>
            Document outline visible if available.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.UseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.UseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.UseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.FullScreen">
      <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="T:C1.C1Report.PdfViewerOptions">
      <summary>
            Contains options that determine how the viewer should display the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.CenterWindow">
      <summary>
            Gets or sets whether to position the document's window in the center of the screen.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.FitWindow">
      <summary>
            Gets or sets whether to resize the document's window to fit the size of the first displayed page.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.HideMenuBar">
      <summary>
            Gets or sets whether to hide the viewer menu bar when the document is active.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.HideToolBar">
      <summary>
            Gets or sets whether to hide the viewer tool bars when the document is active.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.PageLayout">
      <summary>
            Gets or sets the page layout to be used when the Pdf document is opened.
            </summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.PageMode">
      <summary>
            Gets or sets how the document should be displayed when opened.
            </summary>
    </member>
    <member name="T:C1.C1Report.RtfTargetEnum">
      <summary>
            Specifies the format of the export file.
            </summary>
      <remarks>Use the members of this enumeration to set 
            <see cref="P:C1.C1Report.RtfFilter.RtfTarget" /> property of the <see cref="T:C1.C1Report.RtfFilter" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.RtfTargetEnum.Portable">
      <summary>
            This setting creates RTF content that can be viewed in Microsoft Word, 
            WordPad and RichTextBox.
            </summary>
    </member>
    <member name="F:C1.C1Report.RtfTargetEnum.MSWord">
      <summary>
            This setting creates RTF content that can be viewed in Microsoft Word. 
            It is useful for exporting high quality images. Documents with such images 
            are significantly larger than with images in Portable format.
            </summary>
    </member>
    <member name="T:C1.C1Report.RtfFilter">
      <summary>
            Used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into RTF (rich text format)
            streams or files. 
            </summary>
      <remarks>
            Creating an <b>RtfFilter</b> and using it in a call to the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method 
            is similar to using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> or <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>RtfFilter</b>
            before calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Report.RtfFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.RtfFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.RtfFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:C1.C1Report.RtfFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.C1Report.RtfFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.C1Report.RtfFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.C1Report.RtfFilter.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
    </member>
    <member name="M:C1.C1Report.RtfFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.C1Report.RtfFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="M:C1.C1Report.RtfFilter.GetRTFFont(C1.C1Report.Field,System.Boolean)">
      <summary>
            Gets an RTF representation of a field's <see cref="T:System.Drawing.Font" />.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> that contains the font.</param>
      <param name="ignoreBackColor">Indicates that <see cref="P:C1.C1Report.Field.BackColor" /> should be ignored.</param>
      <returns>A string containing the RTF representation of the font.</returns>
    </member>
    <member name="P:C1.C1Report.RtfFilter.EmbedPictures">
      <summary>
            Specifies whether filter should embed images in the RTF document. 
            </summary>
      <remarks>
            Documents with embedded images are significantly larger than text-only documents.
            </remarks>
    </member>
    <member name="P:C1.C1Report.RtfFilter.RtfTarget">
      <summary>
            Gets or sets the format used to export images. 
            </summary>
      <seealso cref="T:C1.C1Report.RtfTargetEnum" />
    </member>
    <member name="P:C1.C1Report.RtfFilter.StreamWriter">
      <summary>
            Gets the <see cref="P:C1.C1Report.RtfFilter.StreamWriter" /> object used by filter.
            </summary>
    </member>
    <member name="P:C1.C1Report.RtfFilter.MarginLeft">
      <summary>
            Gets the left margin of the page.
            </summary>
    </member>
    <member name="P:C1.C1Report.RtfFilter.MarginTop">
      <summary>
            Gets the top margin of the page.
            </summary>
    </member>
    <member name="T:C1.C1Report.RtfLabelFilter">
      <summary>
            Class is used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into RTF
            (rich text format) streams or files. 
            </summary>
      <remarks>
        <para>This filter is similar to the plain <see cref="T:C1.C1Report.RtfFilter" />, except if generates RTF fields with
            absolute positioning. The resulting files are more accurate than the ones created with the plain RTF
            filter, but they are harder to edit and can only be opened in Microsoft Word (WordPad and other simple
            editors do not support RTF absolute positioning).</para>
        <para>Creating an <b>RtfLabelFilter</b> and using it in a call to the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method 
            is similar to using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> or <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>RtfLabelFilter</b>
            before calling <b>RenderToFilter</b>.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.RtfLabelFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.RtfLabelFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.RtfLabelFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.RtfLabelFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.RtfLabelFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
      <param name="field">The field to be rendered.</param>
      <param name="rc">Rectangle that determines the field position on the current page, 
            in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="T:C1.C1Report.TextFilter">
      <summary>
            Used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into plain text streams or files. 
            </summary>
      <remarks>
            Creating a <b>TextFilter</b> and using it in a call to the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />
            method is similar to using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> or <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>TextFilter</b> before
            calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Report.TextFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.TextFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.TextFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.Dispose">
      <summary>
            Releases the resources used by the filter.
            </summary>
    </member>
    <member name="M:C1.C1Report.TextFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The <see cref="T:C1.C1Report.Section" /> to render.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.EndSection(C1.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each <see cref="T:C1.C1Report.Section" />.
            </summary>
      <param name="section">
        <see cref="T:C1.C1Report.Section" /> that was rendered.</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <remarks>
        <para>When generating paged reports, the component calls the filter's <see cref="M:C1.C1Report.TextFilter.NewPage" />
            method on page breaks and updates the value of the <see cref="P:C1.C1Report.C1Report.Page" /> property.</para>
        <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
      </remarks>
      <returns>True if report is paged.</returns>
    </member>
    <member name="M:C1.C1Report.TextFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.C1Report.TextFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.C1Report.TextFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter requires page images to be generated.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.C1Report.C1Report" /> will render the report into the filter 
            and also into its own <see cref="P:C1.C1Report.C1Report.PageImages" /> collection.</para>
        <para>Some filters use these images to generate their output (e.g. PDF, TIFF). Other filters 
            don't need the images (e.g. HTML, RTF) and therefore this method returns false, which saves some 
            resources while rendering long reports.</para>
      </remarks>
      <returns>True if the filter requires page images.</returns>
    </member>
    <member name="P:C1.C1Report.TextFilter.Paged">
      <summary>
            Gets or sets a value indicating whether the filter should produce a continuous report
            or a report with page break characters and page header and footer sections.
            </summary>
    </member>
    <member name="P:C1.C1Report.TextFilter.MaxTextWidth">
      <summary>
            Gets or sets the maximum width of text lines, in characters.
            <para>-1 (the default) indicates that this value will be calculated automatically.</para></summary>
    </member>
    <member name="P:C1.C1Report.TextFilter.Encoding">
      <summary>
            Gets or sets the text encoding.
            The default is Encoding.Default.
            </summary>
    </member>
    <member name="T:C1.C1Report.TextFilterClassic">
      <summary>
            Used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into plain text streams or files. 
            </summary>
      <remarks>
            Creating a <b>TextFilter</b> and using it in a call to the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />
            method is similar to using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> or <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>TextFilter</b> before
            calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.TextFilterClassic" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.TextFilterClassic" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <remarks>
        <para>When generating paged reports, the component calls the filter's <see cref="M:C1.C1Report.TextFilterClassic.NewPage" />
            method on page breaks and updates the value of the <see cref="P:C1.C1Report.C1Report.Page" /> property.</para>
        <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
      </remarks>
      <returns>True if report is paged.</returns>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.C1Report.TextFilterClassic.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="P:C1.C1Report.TextFilterClassic.Paged">
      <summary>
            Specifies whether the filter should produce a continuous report or a report with
            page break characters and page header and footer sections.
            </summary>
    </member>
    <member name="T:C1.C1Report.TiffFilter">
      <summary>
            Used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method to render reports into TIFF streams or files. 
            </summary>
      <remarks>
            Creating a <b>TiffFilter</b> and using it in a call to the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />
            method is similar to using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> or <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>TiffFilter</b> before
            calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Report.TiffFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.TiffFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.C1Report.TiffFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.TiffFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.C1Report.TiffFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.TiffFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="P:C1.C1Report.TiffFilter.Resolution">
      <summary>
            Gets or sets the resolution of the TIFF document, in dots per inch. 
            </summary>
      <remarks>
        <para>The default value for this property is 300 DPI.</para>
        <para>Setting the resolution to higher values result in documents with higher quality
            but significantly larger size, especially if the <see cref="P:C1.C1Report.TiffFilter.Monochrome" /> property
            is set to false.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.TiffFilter.Monochrome">
      <summary>
            Gets or sets whether the TIFF document should be saved in monochrome format.
            </summary>
      <remarks>
        <para>The default value for this property is true, which results in much smaller documents that are compatible
            with fax machines (the compression used is CompressionCCITT4).</para>
        <para>Set this property to false to generate color documents which use LZW compression but are substantially 
            larger than monochrome documents (often 100 times larger using the same resolution).</para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.XlsFilter">
      <summary>
            Class used with the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />method to render reports into Microsoft Excel (XLS) files. 
            </summary>
      <remarks>
            Creating an <b>XlsFilter</b> and using it in a call to the <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" /> method is similar 
            to using the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> method, but offers some extra flexibility because you can set 
            properties on the <b>XlsFilter</b> before calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.C1Report.XlsFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.XlsFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created.</param>
      <remarks>
            If the file already exists, the filter will open it and will add a new sheet with the report.
            </remarks>
    </member>
    <member name="M:C1.C1Report.XlsFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.XlsFilter" /> class attached to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> where the sheet will be saved.</param>
    </member>
    <member name="M:C1.C1Report.XlsFilter.StartReport(C1.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.C1Report.XlsFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.C1Report.XlsFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.C1Report.XlsFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.C1Report.XlsFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.C1Report.XlsFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.SheetName">
      <summary>
            Gets or sets the name of the worksheet to be used when saving the report into the Excel workbook file.
            </summary>
      <remarks>
            You can use this property to save multiple reports into a single Excel workbook file, one on each sheet.
            </remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.Shading">
      <summary>
            Gets or sets a value that determines whether cells should be shaded in the Excel workbook file.
            </summary>
      <remarks>
            Set this property to false to create smaller files without any cell shading.
            </remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.Images">
      <summary>
            Gets or sets a value that determines whether images should be exported to the Excel workbook file.
            </summary>
      <remarks>
            Set this property to false to create smaller files without any images.
            </remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.FreezePageHeader">
      <summary>
            Gets or sets a value that determines whether header sections should be frozen on the sheet.
            </summary>
      <remarks>
            Set this property to true to freeze rows that contain the ReportHeader and PageHeader sections.
            Frozen rows remain visible when the user scrolls the sheet.
            </remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.DataOnly">
      <summary>
            Gets or sets a value indicating whether the Excel workbook file should only include
            the report's data and ignore formatting.
            </summary>
    </member>
    <member name="P:C1.C1Report.XlsFilter.OpenXml">
      <summary>
            Gets or sets whether to export the file using the OpenXml format used by Microsoft Excel 2007 and later.
            </summary>
    </member>
    <member name="T:C1.C1Report.RunningSumEnum">
      <summary>
            Determines whether to calculate a running sum.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.RunningSum" /> property in the <see cref="T:C1.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.RunningSumEnum.NoRunningSum">
      <summary>
            Do not treat field as a running sum.
            </summary>
    </member>
    <member name="F:C1.C1Report.RunningSumEnum.SumOverGroup">
      <summary>
            Calculate running sum over each group.
            </summary>
    </member>
    <member name="F:C1.C1Report.RunningSumEnum.SumOverAll">
      <summary>
            Calculate running sum over the whole report.
            </summary>
    </member>
    <member name="T:C1.C1Report.AnchorEnum">
      <summary>
            Determines how the field is positioned with respect to its containing section 
            when the section grows or shrinks as a result of the section's 
            <see cref="P:C1.C1Report.Section.CanGrow" /> and <see cref="P:C1.C1Report.Section.CanShrink" /> properties.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Report.Field.Anchor" /> property in the <see cref="T:C1.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.AnchorEnum.Top">
      <summary>
            The field does not move. The space between the top of the field 
            and the top of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.C1Report.AnchorEnum.Bottom">
      <summary>
            The field moves vertically. The space between the bottom of the field 
            and the bottom of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.C1Report.AnchorEnum.TopAndBottom">
      <summary>
            The field grows or shrinks. The space between field and the section 
            remains the same (above and below).
            </summary>
    </member>
    <member name="T:C1.C1Report.BackStyleEnum">
      <summary>
            Determines whether the field will be rendered with an opaque or transparent background.
            </summary>
    </member>
    <member name="F:C1.C1Report.BackStyleEnum.Transparent">
      <summary>
            Transparent background.
            </summary>
    </member>
    <member name="F:C1.C1Report.BackStyleEnum.Opaque">
      <summary>
            Opaque background.
            </summary>
    </member>
    <member name="T:C1.C1Report.Field">
      <summary>
            Displays individual data items in a report. 
            </summary>
      <remarks>
            Every element visible in a report is represented by a <b>Field</b> object. 
            Fields can display text, images, expressions, lines, rectangles, or subreports.
            </remarks>
    </member>
    <member name="M:C1.C1Report.Field.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.Field" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Report.Field.GetRenderContent(System.String@,System.Drawing.Image@,System.Boolean)">
      <summary>
            Selects the text or image that will be rendered by the field.
            </summary>
      <param name="value">Field text.</param>
      <param name="img">Chart image.</param>
      <param name="designTime">This parameter allows the field to render differently at design time or run time. 
            This is usually needed for bound controls, since no data is available at design time.</param>
      <remarks>Override this method in derived classes to provide custom text or images to be rendered in the report.</remarks>
    </member>
    <member name="M:C1.C1Report.Field.Load(System.Xml.XmlNodeList)">
      <summary>
            Override in derived classes to provide advanced persistence mechanism.
            </summary>
      <param name="properties">
      </param>
    </member>
    <member name="M:C1.C1Report.Field.Save(System.Xml.XmlWriter)">
      <summary>
            Override in derived classes to provide advanced persistence mechanism.
            </summary>
      <param name="properties">
      </param>
    </member>
    <member name="M:C1.C1Report.Field.Clone">
      <summary>
            Creates a new object that is a copy of the current <see cref="T:C1.C1Report.Field" /> object.
            </summary>
      <returns>Copy of the current <see cref="T:C1.C1Report.Field" /> object.</returns>
    </member>
    <member name="M:C1.C1Report.Field.ToString">
      <summary>
            Returns a description of the field (name, location, size).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Report.Field.SetZOrder(System.Boolean)">
      <summary>
            Brings a field to the front or sends it to the back of the <b>ZOrder</b>.
            </summary>
      <param name="front">Determines whether the field is brought to the front or sent to the back
            of the <b>ZOrder</b>.</param>
    </member>
    <member name="P:C1.C1Report.Field.SubreportHasData">
      <summary>
            Returns whether a subreport has data and suppresses rendering if it doesn't.
            </summary>
      <remarks>
            This property allows you to check whether a subreport has data and prevent it from rendering if it doesn't. 
            </remarks>
      <example>
            The code below uses script to hide sections with empty subreports:
            <code>
            _c1r.Sections.Detail.OnPrint = "Detail.Visible = fSubreport.SubreportHasData"
            </code>
            The code below uses script to hide a field containing an empty subreport and show another field instead:
            <code>
            _c1r.Sections.Detail.OnPrint = 
                "hasData = fSubreport.SubreportHasData\r\n" +
                "fSubreport.Visible = hasData" +
                "fNoData.Visible = Not hasData\r\n" +
            </code></example>
    </member>
    <member name="P:C1.C1Report.Field.ShapeType">
      <summary>
            Gets or sets the type of geometric shape drawn by the current field.
            <para>The default is <b>None</b>.</para></summary>
    </member>
    <member name="P:C1.C1Report.Field.Shape">
      <summary>
            Gets or sets an instance of the <see cref="T:C1.C1Report.ShapeBase" />-derived class specifying
            properties of the geometric shape drawn by this field (if <see cref="P:C1.C1Report.Field.ShapeType" /> is not <b>None</b>).
            </summary>
      <seealso cref="P:C1.C1Report.Field.ShapeType" />
    </member>
    <member name="P:C1.C1Report.Field.Name">
      <summary>
            Gets or sets the field name.
            </summary>
      <remarks>
        <para>The field name can be used as an index into the control's <see cref="P:C1.C1Report.C1Report.Fields" /> collection.</para>
        <para>Field names are also used to identify fields in <b>VBScript</b> expressions, as shown in the example
            below.</para>
        <para>Duplicate and empty field names are allowed, but should be avoided if you plan to use the field names 
            in scripts or as indexers.</para>
      </remarks>
      <example>
            The code below assigns a script to the report's <see cref="F:C1.C1Report.SectionTypeEnum.Detail" /> section. The script 
            changes a field's <see cref="P:C1.C1Report.Field.ForeColor" /> property depending on a value.
            <code>
            _c1r.Sections.Fields["sampleField"].ForeColor = Color.Black;
            _c1r.Sections.Detail.OnFormat = 
                "sampleField.ForeColor = iif(someValue &lt; 5, vbRed, vbBlack)";
            </code></example>
    </member>
    <member name="P:C1.C1Report.Field.Visible">
      <summary>
            Specifies whether the <see cref="T:C1.C1Report.Field" /> will be rendered in the report.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.Tag">
      <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.Index">
      <summary>
            Returns the position of the field in the parent report's <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.Section">
      <summary>
            Gets or sets the section to which the field belongs.
            </summary>
      <remarks>
            To move a field from one section to another, set its <see cref="P:C1.C1Report.Field.Section" /> property to a new value.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.ParentReport">
      <summary>
            Gets the <see cref="T:C1.C1Report.C1Report" /> that contains this field.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.ParentSection">
      <summary>
            Gets the <see cref="P:C1.C1Report.Field.Section" /> that contains this field.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.Text">
      <summary>
            Gets or sets the field's text.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.C1Report.Field.Text" /> property contains the text that will be rendered on the report.</para>
        <para>This value may be rendered literally (without any translation) or it may be evaluated as a 
            <b>VBScript</b> expression, depending on the setting of the <see cref="P:C1.C1Report.Field.Calculated" /> property.</para>
      </remarks>
      <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code></example>
    </member>
    <member name="P:C1.C1Report.Field.Calculated">
      <summary>
            Specifies whether the <see cref="P:C1.C1Report.Field.Text" /> property should be interpreted as a literal value
            or as a calculated expression.
            </summary>
      <remarks>
        <para>If this property is set to false, the value of the <see cref="P:C1.C1Report.Field.Text" /> property is rendered 
            on the report without any further processing.</para>
        <para>If it is set to true, the value of the <see cref="P:C1.C1Report.Field.Text" /> property is evaluated as a 
            <b>VBScript</b> expression and the result of the expression is rendered on the report.</para>
      </remarks>
      <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code></example>
    </member>
    <member name="P:C1.C1Report.Field.Value">
      <summary>
            Gets or sets the field's calculated value.
            </summary>
      <remarks>
        <para>When a field's <see cref="P:C1.C1Report.Field.Calculated" /> property is set to true, the control evaluates 
            the expression stored in the <see cref="P:C1.C1Report.Field.Text" /> property and stores the result in the 
            <see cref="P:C1.C1Report.Field.Value" /> property, which gets rendered into the report.</para>
        <para>This is the field's default property, so when you use a field name in a <b>VBScript</b>
            expression, you are actually referring to the field's <see cref="P:C1.C1Report.Field.Value" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.HideDuplicates">
      <summary>
            Specifies whether duplicate values in consecutive records should be suppressed.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Report.Field.HideDuplicates" /> property to hide a field on a report 
            when its value is the same as in the preceding record.</para>
        <para>For example, on a report listing suppliers and their products, each supplier's name 
            can appear once for each group of products, rather than once for each product.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.RunningSum">
      <summary>
            Specifies whether to show a running sum for the field.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Report.Field.RunningSum" /> property to calculate record-by-record or 
            group-by-group totals in a report.</para>
        <para>The <see cref="P:C1.C1Report.Field.RunningSum" /> property specifies whether a calculated field on a report 
            displays a running total and lets you set the range over which values are accumulated.</para>
      </remarks>
      <seealso cref="T:C1.C1Report.RunningSumEnum" />
    </member>
    <member name="P:C1.C1Report.Field.Left">
      <summary>
            Gets or sets the x-coordinate of the field's left edge in twips.
            </summary>
      <remarks>
        <para>A field's location is the distance from its upper left corner to the upper left corner
            of its containing <see cref="P:C1.C1Report.Field.Section" />.</para>
        <para>Setting the <see cref="P:C1.C1Report.Field.Left" /> or <see cref="P:C1.C1Report.Field.Top" /> property to zero places the field at 
            the very left or top of its containing section.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Top">
      <summary>
            Gets or sets the y-coordinate of the field's top edge in twips.
            </summary>
      <remarks>
        <para>A field's location is the distance from its upper left corner to the upper left corner of its containing 
            <see cref="P:C1.C1Report.Field.Section" />.</para>
        <para>If the field's <see cref="P:C1.C1Report.Field.CanGrow" /> or <see cref="P:C1.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.C1Report.Field.Top" /> and <see cref="P:C1.C1Report.Field.Height" /> properties is not affected.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Width">
      <summary>
            Gets or sets the width of the field in twips.
            </summary>
      <remarks>
        <para>Every <see cref="T:C1.C1Report.Field" /> object has a rectangle, or "field box", where the field contents are rendered.</para>
        <para>The field box is defined by the <see cref="P:C1.C1Report.Field.Left" />, <see cref="P:C1.C1Report.Field.Top" />, <see cref="P:C1.C1Report.Field.Width" />, and <see cref="P:C1.C1Report.Field.Height" /> properties.</para>
        <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Height">
      <summary>
            Gets or sets the height of the field in twips.
            </summary>
      <remarks>
        <para>Every <see cref="T:C1.C1Report.Field" /> object has a rectangle, or "field box", where the field contents are rendered.</para>
        <para>The field box is defined by the <see cref="P:C1.C1Report.Field.Left" />, <see cref="P:C1.C1Report.Field.Top" />, <see cref="P:C1.C1Report.Field.Width" />, and <see cref="P:C1.C1Report.Field.Height" /> properties.</para>
        <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
        <para>The field's <see cref="P:C1.C1Report.Field.Height" /> property should be set to a value larger than or equal to the height of the 
            field's <see cref="P:C1.C1Report.Field.Font" />, or no text will appear in the field.</para>
        <para>If the field's <see cref="P:C1.C1Report.Field.CanGrow" /> or <see cref="P:C1.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.C1Report.Field.Top" /> and <see cref="P:C1.C1Report.Field.Height" /> properties is not affected.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.ForcePageBreak">
      <summary>
            Specifies whether to insert page breaks before or after the field.
            </summary>
      <seealso cref="T:C1.C1Report.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.C1Report.Field.CanGrow">
      <summary>
            Specifies whether the field height should be automatically increased to fit the field's contents.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Report.Field.CanGrow" /> and <see cref="P:C1.C1Report.Field.CanShrink" /> properties to control 
            the appearance of report fields and sections. When you set both properties to true, the field 
            or section automatically adjusts so any amount of data can be printed. When a field grows or 
            shrinks, the fields below it move down or up the page.</para>
        <para>If you set a field's <see cref="P:C1.C1Report.Field.CanGrow" /> property to true, the control automatically 
            sets the <see cref="P:C1.C1Report.Field.CanGrow" /> property of the containing section to true. (However, if you 
            set a control's <see cref="P:C1.C1Report.Field.CanShrink" /> property to true, the control doesn't set the section's 
            <see cref="P:C1.C1Report.Field.CanShrink" /> property to true.)</para>
        <para>When you use the <see cref="P:C1.C1Report.Field.CanGrow" /> and <see cref="P:C1.C1Report.Field.CanShrink" /> properties, remember that:</para>
        <para>1. The property settings don't affect the horizontal spacing between fields; they affect 
            only the vertical space the fields occupy.</para>
        <para>2. The height of a large field can prevent fields beside it from shrinking. For example, 
            if several short controls are on the left side of a report's detail section and one tall control, 
            such as an unbound object frame, is on the right side, the controls on the left won't shrink,
            even if they contain no data.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.CanShrink">
      <summary>
            Specifies whether the field height should be automatically reduced to fit the field's contents.
            </summary>
      <seealso cref="P:C1.C1Report.Field.CanGrow" />
    </member>
    <member name="P:C1.C1Report.Field.KeepTogether">
      <summary>
            Specifies whether the field should be kept together on a page.
            </summary>
      <remarks>
        <para>If this property is set to true, the control will insert page breaks in order to keep 
            the field contents together on a page.</para>
        <para>If it is set to false, and the containing <see cref="P:C1.C1Report.Field.Section" /> also has its 
            <see cref="P:C1.C1Report.Section.KeepTogether" /> property set to false, then the field may be rendered across
            two or more pages.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Anchor">
      <summary>
            Gets or sets the field's vertical position relative to its containing <see cref="P:C1.C1Report.Field.Section" />.
            </summary>
      <remarks>
        <para>Normally, fields do not move when sections grow or shrink. In some cases, however, you may want
            fields to grow with the section or to stay in the same position relative to the bottom of the
            section.</para>
        <para>This is especially common for fields used to create vertical lines that should extend
            the entire height of the section.</para>
      </remarks>
      <seealso cref="T:C1.C1Report.AnchorEnum" />
    </member>
    <member name="P:C1.C1Report.Field.ZOrder">
      <summary>
            Gets or sets the <b>ZOrder</b> for the field.
            </summary>
      <remarks>
        <para>The <b>ZOrder</b> of a field determines whether it is rendered in front of or behind 
            other fields that overlap with it.</para>
        <para>High <b>ZOrder</b> values bring the field to the front, low values send it to the back.</para>
        <para>Because <b>ZOrder</b> values are relative, it is usually easier to call the <see cref="M:C1.C1Report.Field.SetZOrder(System.Boolean)" /> 
            method, which ensures the field is rendered in front of or behind all other overlapping fields.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.RenderTop">
      <summary>
            Gets the y-coordinate of the field's top edge in twips after the <see cref="P:C1.C1Report.Field.CanGrow" /> and 
            <see cref="P:C1.C1Report.Field.CanShrink" /> properties have been applied to the containing <see cref="P:C1.C1Report.Field.Section" />.
            </summary>
      <remarks>
            If the field's <see cref="P:C1.C1Report.Field.CanGrow" /> or <see cref="P:C1.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.C1Report.Field.Top" /> and <see cref="P:C1.C1Report.Field.Height" /> properties is not affected.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.RenderHeight">
      <summary>
            Gets the height of the field in twips after the <see cref="P:C1.C1Report.Field.CanGrow" /> and <see cref="P:C1.C1Report.Field.CanShrink" />
            properties have been applied to the field.
            </summary>
      <remarks>
            If the field's <see cref="P:C1.C1Report.Field.CanGrow" /> or <see cref="P:C1.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.C1Report.Field.Top" /> and <see cref="P:C1.C1Report.Field.Height" /> properties is not affected.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Bounds">
      <summary>
            Gets or sets the field's size and location within the section, in twips.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.Size">
      <summary>
            Gets or sets the field's size, in twips.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.Location">
      <summary>
            Gets or sets the field's location within the section, in twips.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.RightToLeft">
      <summary>
            Gets or sets a value indicating whether right-to-left text rendering rules should be used.
            If null (which is the default), the property <see cref="P:C1.C1Report.C1Report.RightToLeft" /> defined on the report is used.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.ActualRightToLeft">
      <summary>
            Gets the actual right-to-left value that is being used. 
            If the field's own <see cref="P:C1.C1Report.Field.RightToLeft" /> is not null, that value is returned.
            Otherwise the <see cref="P:C1.C1Report.Field.ActualRightToLeft" /> defined on the report is returned.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.Font">
      <summary>
            Gets or sets the field's font.
            </summary>
      <remarks>If you set a field's font <see cref="P:C1.C1Report.Util.FontHolder.Size" /> property to a value that 
            is too large to fit the field box (defined by the <see cref="P:C1.C1Report.Field.Height" /> property), 
            no text will appear in the field.
            </remarks>
      <seealso cref="T:C1.C1Report.Util.FontHolder" />
    </member>
    <member name="P:C1.C1Report.Field.BackColor">
      <summary>
            Gets or sets the field's background color. 
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.ForeColor">
      <summary>
            Gets or sets the field's foreground color.
            </summary>
      <remarks>
            Use the <b>ForeColor</b> property to specify the color for text in a field. You can use this property to make 
            fields easy to read or to convey a special meaning.
            </remarks>
      <example>
            The code below uses script to change the color of the text in the <i>UnitsInStock</i> field when its value 
            falls below the reorder level.
            <code>
            // build script
            string script = "UnitsInStock.ForeColor = " +
            	"IIF(UnitsInStock &lt; ReorderLevel, vbRed, vbBlack)";
            	
            // assign script to detail section
            _c1r.Sections.Detail.OnPrint = script;
            </code></example>
    </member>
    <member name="P:C1.C1Report.Field.Format">
      <summary>
            Gets or sets a string used to format the field value.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Report.Field.Format" /> property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
        <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.C1Report.Field.Format" /> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
        <para>You can use the <see cref="P:C1.C1Report.Field.Format" /> property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
        <para>The syntax for the format string is the same used with the .NET <see cref="M:System.String.Format(System.String,System.Object)" /> method.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Align">
      <summary>
            Gets or sets how text is aligned within the field.
            </summary>
      <seealso cref="T:C1.C1Report.FieldAlignEnum" />
      <remarks>
        <para>This property determines how text is aligned within the field.</para>
        <para>To control picture alignment, use the <see cref="P:C1.C1Preview.C1Report.Field.PictureAlign" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.WordWrap">
      <summary>
            Specifies whether the field's contents should be allowed to wrap within the field rectangle.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.TextDirection">
      <summary>
            Gets or sets the direction of text within the field.
            </summary>
    </member>
    <member name="P:C1.C1Report.Field.TextAngle">
      <summary>
            Gets or sets the angle of text rotation within the field (including barcodes).
            </summary>
      <remarks>
            Note that some output/export formats (such as HTML, RTF and plain text) do not support rotated text.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.LineSpacing">
      <summary>
            Gets or sets the line spacing between text lines in the field, in percent.
            The default is 100 which corresponds to normal line spacing.
            <para>
            Note that this property is ignored if <see cref="P:C1.C1Report.Field.RTF" /> is <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Report.Field.MarginLeft">
      <summary>
            Gets or sets the spacing between the left edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.MarginTop">
      <summary>
            Gets or sets the spacing between the top edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.MarginRight">
      <summary>
            Gets or sets the spacing between the right edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.MarginBottom">
      <summary>
            Gets or sets the spacing between the bottom edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.BorderStyle">
      <summary>
            Gets or sets the field's border style.
            </summary>
      <remarks>
        <para>To draw a border around a field, set the following properties:</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.BorderColor" /> to define the border color.</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.BorderStyle" /> to define the border style (e.g., solid, dashed, etc.).</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.LineWidth" /> to define the border width (in twips).</para>
        <para>When you create fields with text and a border, text will be positioned very close to the border. You can control 
            the distance between the text and the border using the <see cref="P:C1.C1Report.Field.MarginLeft" />, <see cref="P:C1.C1Report.Field.MarginRight" />,
            <see cref="P:C1.C1Report.Field.MarginTop" />, and <see cref="P:C1.C1Report.Field.MarginBottom" /> properties.</para>
        <para>To draw lines, see the <see cref="P:C1.C1Report.Field.LineSlant" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.LineWidth">
      <summary>
            Gets or sets the width of the field's border or line.
            </summary>
      <remarks>
        <para>To draw a border around a field, set the following properties:</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.BorderColor" /> to define the border color.</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.BorderStyle" /> to define the border style (e.g., solid, dashed, etc.).</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.LineWidth" /> to define the border width (in twips).</para>
        <para>To draw lines, see the <see cref="P:C1.C1Report.Field.LineSlant" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.BorderColor">
      <summary>
            Gets or sets the field's border color.
            </summary>
      <seealso cref="P:C1.C1Report.Field.BorderStyle" />
      <remarks>
        <para>To draw a border around a field, set the following properties:</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.BorderColor" /> to define the border color.</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.BorderStyle" /> to define the border style (e.g., solid, dashed, etc.).</para>
        <para>
          <see cref="P:C1.C1Preview.C1Report.Field.LineWidth" /> to define the border width (in twips).</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.LineSlant">
      <summary>
            Specifies whether a line should be drawn across the field (as opposed to a box around the field).
            </summary>
      <seealso cref="T:C1.C1Report.LineSlantEnum" />
      <remarks>
            The color, style, and thickness of the line are determined by the <see cref="P:C1.C1Report.Field.BorderColor" />, <see cref="P:C1.C1Report.Field.BorderStyle" />, 
            and <see cref="P:C1.C1Report.Field.LineWidth" /> properties.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Picture">
      <summary>
            Gets or sets a picture to display on the field.
            </summary>
      <remarks>
        <para>You may set this property to three types of object:</para>
        <para>1) Regular .NET <see cref="T:System.Drawing.Image" /> objects.</para>
        <para>2) Strings containing image file names or Urls.</para>
        <para>3) Strings containing names of image fields in the report data source.</para>
        <para>Options 1 and 2 are used to create unbound images, such as logos. These images do not 
            depend on the report data.</para>
        <para>Option 3 is used to create bound images, such as product or employee pictures. These 
            are images stored with the report data.</para>
      </remarks>
      <seealso cref="P:C1.C1Report.Field.PictureAlign" />
      <seealso cref="P:C1.C1Report.Field.PictureScale" />
    </member>
    <member name="P:C1.C1Report.Field.PictureAlign">
      <summary>
            Gets or sets how field pictures should be the aligned.
            </summary>
      <seealso cref="P:C1.C1Report.Field.Picture" />
      <seealso cref="P:C1.C1Report.Field.PictureScale" />
      <seealso cref="T:C1.C1Report.PictureAlignEnum" />
    </member>
    <member name="P:C1.C1Report.Field.PictureScale">
      <summary>
            Gets or sets how images should be the scaled to fit within the field area.
            </summary>
      <remarks>
        <para>Depending on the setting of this property, images may be clipped, stretched, scaled (which preserves the 
            image's aspect ratio), tiled, or hidden.</para>
        <para>
          <b>PictureScale</b> works with the <see cref="P:C1.C1Report.Field.PictureAlign" /> property so you can control image scaling and 
            alignment independently.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.CheckBox">
      <summary>
            Specifies whether the field should be displayed as a checkbox.
            </summary>
      <remarks>
            This property allows you to display boolean values graphically, rather than as plain text.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.RTF">
      <summary>
            Specifies whether the field should render string enclosed in curly brackets as RTF.
            </summary>
      <remarks>If you set this property to true, any fields containing text 
            enclosed in curly brackets will be rendered as RTF. 
            This allows you to add complex formatting within a field.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Field.BarCode">
      <summary>
            Allows fields to be rendered in barcode format.
            </summary>
      <seealso cref="T:C1.C1Report.BarCodeEnum" />
    </member>
    <member name="P:C1.C1Report.Field.BarcodeOptions">
      <summary>
            TBD:
            Gets <see cref="P:C1.C1Report.Field.BarcodeOptions" /> object which allows to define additional options for barcode rendering.
            </summary>
      <seealso cref="T:C1.C1Report.BarCodeEnum" />
    </member>
    <member name="P:C1.C1Report.Field.LinkTarget">
      <summary>
            Gets or sets an expression that evaluates to a URL to be visited when the field is clicked.
            </summary>
      <remarks>
        <para>If not empty, this should be an expression that evaluates to a URL. After the report is generated, 
            clicking on the field will cause the report viewer to navigate to the URL. The report viewer can be a web browser 
            (for HTML reports), Adobe Acrobat (for PDF reports), or other viewer applications.</para>
        <para>Not all report viewers support hyperlinks. The <b>PrintPreview</b> control that ships with .NET, for example, 
            does not.</para>
        <para>The field will be displayed as usual, based on the contents of its <see cref="P:C1.C1Report.Field.Text" /> and <see cref="P:C1.C1Report.Field.Picture" /> 
            properties.</para>
        <para>The <see cref="P:C1.C1Report.Field.LinkTarget" /> expression is always evaluated, regardless of the setting of the <see cref="P:C1.C1Report.Field.Calculated" /> 
            property (which only applies to the display text). This allows you to bind the <see cref="P:C1.C1Report.Field.LinkTarget" /> to a field in the 
            data source, as show in the example below.</para>
      </remarks>
      <example>
            The code below creates two hyperlink fields, one with a static value and one based on a database value.
            <code>
            // set up a static link
            Field f = c1r.Fields["companyInfoLink"];
            f.Calculated = false;
            f.Text = "click here for more info on our company";
            f.LinkTarget = "http://myrealty.com";
            
            // set up a databound link
            Field f = c1r.Fields["propertyInfoLink"];
            f.Calculated = false;
            f.Text = "click here for more info on this property";
            f.LinkTarget = "\"http://myrealty.com/moreinfo?id=\" &amp; propertyID";
            </code></example>
    </member>
    <member name="P:C1.C1Report.Field.Subreport">
      <summary>
            Gets or sets a reference to another report to be rendered within the field (a <i>subreport</i>).
            </summary>
      <remarks>
        <para>A subreport is a report that is inserted in another report. Subreports are useful when you want to combine 
            several reports into one. For example, you may have a main report that integrates several subreports into a single 
            main report. Or you can use the main report to show detailed information and use subreports to show summary data 
            at the beginning of each group.</para>
        <para>For some real-world examples, check the "Sales By Category" and "Sales By Year" reports in the NWIND.XML
            sample that ships with the control.</para>
        <para>To define a field as a subreport, you should start by loading the subreport, then assign the subreport 
            control to the field's <see cref="P:C1.C1Report.Field.Subreport" /> property.</para>
        <para>Next, link the subreport to the main report using the subreport field's <see cref="P:C1.C1Report.Field.Text" /> property (this is 
            analogous to setting the <b>LinkChildFields/LinkMasterFields</b> properties in a Microsoft  Access subreport). The 
            <b>Text</b> property in a subreport field is used as a filter. It specifies which records in the source recordset 
            should be used to render the subreport based on the current record for the main report.</para>
        <para>When the main report is being rendered and reaches the subreport field, the <b>Text</b> expression is evaluated 
            and the result is uses as a filter condition for the subreport.</para>
        <para>Building the link expression is not difficult, but it is a little tricky because it requires you to create a 
            string that contains quotes, and these internal quotes must be doubled (written as "").</para>
        <para>If you are creating reports using the Report Designer, you don't have to worry about building the link expressions 
            in code. Instead, right-click the subreport field and select the <b>Link Subreport...</b> menu. This will show a dialog 
            where you can select the master and detail fields. When you click OK, the Report Designer will build the link expression 
            and assign it to the <b>Text</b> property of the subreport field automatically.</para>
        <para>Subreport fields usually have the <see cref="P:C1.C1Report.Field.CanGrow" /> property set to true, so the subreport field can expand to 
            include all its records.</para>
        <para>Subreports may contain other subreports. There's no set limit for the depth of report nesting you can have. 
            However, there must be no circular references to reports. In other words, a report cannot contain a reference to itself 
            as a subreport.</para>
      </remarks>
      <example>
        <code>
            // load subreport and assign it to a field in the main report
            string sSub = "Sales By Category Subreport";
            c1Sub.Load("NWIND.XML", sSub);
            c1rMain.Fields[sSub].Subreport = c1Sub;
            
            // set up connection between main report and subreport
            c1rMain.Fields[sSub].Calculated = true;
            c1rMain.Fields[sSub].Text = "\"CategoryName = '\" &amp; [CategoryName] &amp; \"'\"";
            </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.LinkValue">
      <summary>
            Returns the value of the LinkTarget expression.
            </summary>
    </member>
    <member name="T:C1.C1Report.FieldCollection">
      <summary>
            FieldCollection class represents a collection of the <see cref="T:C1.C1Report.Field" /> objects. 
            </summary>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Add(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a field to a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
      <param name="text">Contains the value for the new field's <see cref="P:C1.C1Report.Field.Text" /> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.C1Report.Field.Calculated" /> property. By default, <see cref="P:C1.C1Report.Field.Calculated" /> is set to false and the text 
            is rendered as-is.</param>
      <param name="left">Left coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="top">Top coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="width">Width of the new field, in twips.</param>
      <param name="height">Height of the new field, in twips.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
        <para>If you add a field to a section's <see cref="P:C1.C1Report.Section.Fields" /> collection, the new field is automatically 
            assigned to that section.</para>
        <para>If you add a field to the control's <see cref="P:C1.C1Report.C1Report.Fields" /> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="P:C1.C1Report.Field.Section" /> property or it will not be 
            rendered in the report.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Add(System.String,System.String,System.Drawing.Rectangle)">
      <summary>
            Adds a field to a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
      <param name="text">Contains the value for the new field's <see cref="P:C1.C1Report.Field.Text" /> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.C1Report.Field.Calculated" /> property. By default, <see cref="P:C1.C1Report.Field.Calculated" /> is set to false and the text 
            is rendered as-is.</param>
      <param name="rc">Defines the position of the field, in twips, with respect to its containing section.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
        <para>If you add a field to a section's <see cref="P:C1.C1Report.Section.Fields" /> collection, the new field is automatically 
            assigned to that section.</para>
        <para>If you add a field to the control's <see cref="P:C1.C1Report.C1Report.Fields" /> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="P:C1.C1Report.Field.Section" /> property or it will not be 
            rendered in the report.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Add(C1.C1Report.Field)">
      <summary>
            Adds a field or a clone of a field to a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="field">A <see cref="T:C1.C1Report.Field" /> object to add to the collection.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
            In the field does not belong to any reports, it is added to the collection. If the field already
            belongs to a report, a clone is created and added to the collection.
            </remarks>
    </member>
    <member name="M:C1.C1Report.FieldCollection.RemoveAt(System.Int32)">
      <summary>
            Removes a field from a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="index">Specifies the field to be removed.</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Remove(System.Int32)">
      <summary>
            Removes a field from a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="index">Specifies the field to be removed.</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Remove(System.String)">
      <summary>
            Removes a field from a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="name">The name of the field to be removed.</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Remove(C1.C1Report.Field)">
      <summary>
            Removes a field from a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="f">The field to be removed.</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Contains(System.String)">
      <summary>
            Determines whether the collection contains a specific field.
            </summary>
      <param name="name">The name of the field.</param>
      <returns>True if the collection contains a field with the specified name;
             otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Contains(C1.C1Report.Field)">
      <summary>
            Determines whether the collection contains a specific field.
            </summary>
      <param name="f">Reference to the <see cref="T:C1.C1Report.Field" /> object.</param>
      <returns>True if the collection contains specified field;
             otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Report.FieldCollection.CopyTo(C1.C1Report.Field[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from collection. 
            The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:C1.C1Report.FieldCollection.Item(System.Int32)">
      <summary>
            Returns a field from a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <remarks>The index parameter may be an integer between zero and <see cref="P:C1.C1Report.FieldCollection.Count" />-1.
            </remarks>
    </member>
    <member name="P:C1.C1Report.FieldCollection.Item(System.String)">
      <summary>
            Returns a field from a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
      <remarks>The name parameter may be a string containing a field name.
            </remarks>
    </member>
    <member name="P:C1.C1Report.FieldCollection.Count">
      <summary>
            Returns the number of fields in a <see cref="P:C1.C1Report.C1Report.Fields" /> collection.
            </summary>
    </member>
    <member name="T:C1.C1Report.SortEnum">
      <summary>
            Specifies how groups should be sorted.
            </summary>
      <remarks>Use the members of this enumeration to set the value of 
            the <see cref="P:C1.C1Report.Group.Sort" /> property in the <see cref="T:C1.C1Report.Group" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.SortEnum.NoSort">
      <summary>
            Do not sort records for this group.
            </summary>
    </member>
    <member name="F:C1.C1Report.SortEnum.Ascending">
      <summary>
            Sort records in ascending order.
            </summary>
    </member>
    <member name="F:C1.C1Report.SortEnum.Descending">
      <summary>
            Sort records in descending order.
            </summary>
    </member>
    <member name="T:C1.C1Report.KeepTogetherEnum">
      <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.C1Report.Group.KeepTogether" /> and 
            <see cref="P:C1.C1Report.Section.KeepTogether" /> property in the <see cref="T:C1.C1Report.Group" /> and <see cref="T:C1.C1Report.Section" /> classes.
            </remarks>
    </member>
    <member name="F:C1.C1Report.KeepTogetherEnum.KeepNothing">
      <summary>
            Do not try to keep the group together.
            </summary>
    </member>
    <member name="F:C1.C1Report.KeepTogetherEnum.KeepWholeGroup">
      <summary>
            Keep the group header, detail, and footer together on a page.
            </summary>
    </member>
    <member name="F:C1.C1Report.KeepTogetherEnum.KeepFirstDetail">
      <summary>
            Keep the group header and first detail section together on a page.
            </summary>
    </member>
    <member name="T:C1.C1Report.Group">
      <summary>
            Object used to sort and group report data. 
            </summary>
      <remarks>
            Each <b>Group</b> has a Header section and a Footer section that can be used to display
            aggregate information for the group.
            </remarks>
    </member>
    <member name="M:C1.C1Report.Group.Move(System.Int32,System.Boolean)">
      <summary>
            Moves a group to a new position in the <see cref="P:C1.C1Report.C1Report.Groups" /> collection, optionally 
            adjusting its <see cref="P:C1.C1Report.C1Report.Sections" /> and <see cref="P:C1.C1Report.C1Report.Fields" />.
            </summary>
      <param name="newIndex">Contains the new position for the group (index into the <see cref="P:C1.C1Report.C1Report.Groups" /> collection).</param>
      <param name="adjustSections">Determines whether only the group should be moved or whether its header and footer sections, 
            along with all the fields in those sections, should also be moved.</param>
      <remarks>
            This method is useful in designer applications, when you want to allow users to change the grouping order.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Group.Name">
      <summary>
            Gets or sets the group name.
            </summary>
      <remarks>The group name can be used as an index into the control's <see cref="P:C1.C1Report.C1Report.Groups" /> collection.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Group.GroupBy">
      <summary>
            Gets or sets the expression used to break records into groups.
            </summary>
      <remarks>This property contains a <b>VBScript</b> expression that is evaluated for every record 
            in the source recordset. A new group is started whenever the value of this expression changes. 
            </remarks>
    </member>
    <member name="P:C1.C1Report.Group.Sort">
      <summary>
            Gets or sets how the group is sorted.
            </summary>
      <remarks>
        <para>The specified sorting is applied to the content of the <see cref="P:C1.C1Report.Group.GroupBy" /> property. For example, 
            if <see cref="P:C1.C1Report.Group.GroupBy" /> contains the expression "FirstName" and <see cref="P:C1.C1Report.Group.Sort" /> is set to "Ascending", 
            then the group will be sorted in ascending order based on the content of the "FirstName" column in the data source.</para>
        <para>Note that the sorting is performed by the data source itself, not by C1Report. Because of this, sorting 
            is always based on column names rather than calculated expressions. If the <see cref="P:C1.C1Report.Group.GroupBy" /> property contains a
            calculated expression, the component will extract the first column name from the expression and will sort based on that 
            value. For example, if <see cref="P:C1.C1Report.Group.GroupBy" /> is set to "Left(FirstName, 3)", the sorting will be based on the 
            "FirstName" column, not on the first three characters of the first names.</para>
        <para>This can present problems in a few cases, especially if you want to sort based on date parts (year, month, quarter). 
            In these cases, the recommended procedure is to add a calculated column to the data source (by changing the SQL statement 
            used to retrieve the data), then set the <see cref="P:C1.C1Report.Group.GroupBy" /> property to the name of the calculated column.</para>
      </remarks>
      <example>
            The code below uses a SQL statement to add a "HireQuarter" column to the data source, then sorts a group based on 
            this new column. The report will show employees sorted by the quarter when they were hired.
            <code>
            string sql = 
                "SELECT *, DATEPART('q', HireDate) AS HireQuarter " +
                "FROM Employees";
            c1r.DataSource.RecordSource = sql;
            c1r.Groups[0].GroupBy = "HireQuarter";
            c1r.Groups[0].Sort = SortEnum.Ascending;
            </code></example>
    </member>
    <member name="P:C1.C1Report.Group.KeepTogether">
      <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
      <seealso cref="T:C1.C1Report.KeepTogetherEnum" />
    </member>
    <member name="P:C1.C1Report.Group.SectionHeader">
      <summary>
            Returns the <see cref="T:C1.C1Report.Section" /> used as this group's header.
            </summary>
    </member>
    <member name="P:C1.C1Report.Group.SectionFooter">
      <summary>
            Returns the <see cref="T:C1.C1Report.Section" /> used as this group's footer.
            </summary>
    </member>
    <member name="P:C1.C1Report.Group.Tag">
      <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
    </member>
    <member name="P:C1.C1Report.Group.ParentReport">
      <summary>
            Gets the <see cref="T:C1.C1Report.C1Report" /> object that contains this <see cref="T:C1.C1Report.Group" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.GroupCollection">
      <summary>
            GroupCollection class represents a collection of the <see cref="T:C1.C1Report.Group" /> objects. 
            </summary>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Add(System.String,System.String,C1.C1Report.SortEnum)">
      <summary>
            Adds a new <see cref="T:C1.C1Report.Group" /> to the collection, along with header and footer sections for the new group. 
            </summary>
      <param name="name">Contains the name of the new group.</param>
      <param name="groupBy">Contains the value of the <see cref="P:C1.C1Report.Group.GroupBy" /> property for the new group.</param>
      <param name="sort">Contains the value of the <see cref="P:C1.C1Report.Group.Sort" /> property for the new group.</param>
      <returns>A reference to the newly added group.</returns>
      <remarks>
            When a group is added to a report, the control automatically adds two new sections, the group header and group 
            footer sections for the new group. These new sections are invisible by default.
            </remarks>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Remove(System.Int32)">
      <summary>
            Removes a <see cref="T:C1.C1Report.Group" /> from the <see cref="P:C1.C1Report.C1Report.Groups" /> collection, 
            and its header/footer sections from the <see cref="P:C1.C1Report.C1Report.Sections" /> collection.
            </summary>
      <param name="index">Specifies the group to be removed.</param>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Remove(System.String)">
      <summary>
            Removes a <see cref="T:C1.C1Report.Group" /> from the <see cref="P:C1.C1Report.C1Report.Groups" /> collection, 
            and its header/footer sections from the <see cref="P:C1.C1Report.C1Report.Sections" /> collection.
            </summary>
      <param name="name">The name of the group to be removed.</param>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Remove(C1.C1Report.Group)">
      <summary>
            Removes a <see cref="T:C1.C1Report.Group" /> from the <see cref="P:C1.C1Report.C1Report.Groups" /> collection, 
            and its header/footer sections from the <see cref="P:C1.C1Report.C1Report.Sections" /> collection.
            </summary>
      <param name="group">The group to be removed.</param>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Contains(System.String)">
      <summary>
            Determines whether the collection contains a specific group.
            </summary>
      <param name="name">The name of the group.</param>
      <returns>True if the collection contains a group with the specified name;
             otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Contains(C1.C1Report.Group)">
      <summary>
            Determines whether the collection contains a specific group.
            </summary>
      <param name="g">Reference to the <see cref="T:C1.C1Report.Group" /> object.</param>
      <returns>True if the collection contains specified field;
             otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Report.GroupCollection.CopyTo(C1.C1Report.Group[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied 
            from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:C1.C1Report.GroupCollection.Item(System.Int32)">
      <summary>
            Returns a group from a <see cref="P:C1.C1Report.C1Report.Groups" /> collection.
            </summary>
      <remarks>The index parameter may be an integer between zero and <see cref="P:C1.C1Report.GroupCollection.Count" />-1.
            </remarks>
    </member>
    <member name="P:C1.C1Report.GroupCollection.Item(System.String)">
      <summary>
            Returns a group from a <see cref="P:C1.C1Report.C1Report.Groups" /> collection.
            </summary>
      <remarks>The name parameter may be a string containing a group name.
            </remarks>
    </member>
    <member name="P:C1.C1Report.GroupCollection.Count">
      <summary>
            Returns the number of groups in a <see cref="P:C1.C1Report.C1Report.Groups" /> collection.
            </summary>
    </member>
    <member name="T:C1.C1Report.ColumnLayoutEnum">
      <summary>
            Specifies the layout for the columns (down or across).
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.C1Report.Layout.ColumnLayout" /> property 
            in the <see cref="T:C1.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.ColumnLayoutEnum.Down">
      <summary>
            Columns are laid out down the page, then across.
            </summary>
    </member>
    <member name="F:C1.C1Report.ColumnLayoutEnum.Across">
      <summary>
            Columns are laid out across the page, then down.
            </summary>
    </member>
    <member name="F:C1.C1Report.ColumnLayoutEnum.Labels">
      <summary>
            Causes the report designer to discount label spacing in the design surface, 
            hide header/footer sections, disable grouping button, 
            and disable automatic section resizing when fields are moved or dragged.
            </summary>
    </member>
    <member name="T:C1.C1Report.Layout">
      <summary>
            The Layout object controls how the report is rendered on pages.
            </summary>
    </member>
    <member name="M:C1.C1Report.Layout.ToString">
      <summary>
            Returns a description of layout to show it in designer. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Report.Layout.UpdateFromPrintDoc">
      <summary>
            Copies information from the <b>PrintDocument.PageSettings</b> to the C1Report's <see cref="T:C1.C1Report.Layout" />.
            </summary>
      <returns>True if <see cref="T:C1.C1Report.Layout" /> object was changed.</returns>
      <remarks>This is useful if you want to make changes to the <see cref="T:System.Drawing.Printing.PageSettings" />
            object instead of the <see cref="T:C1.C1Report.Layout" /> object.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.Width">
      <summary>
            Gets or sets the width of the report's detail section, in twips.
            </summary>
      <remarks>
        <para>This property determines the width of the detail section of the report.</para>
        <para>Multi-column reports have header and footer sections that span all columns so their actual width is 
            <see cref="P:C1.C1Report.Layout.Width" /> * <see cref="P:C1.C1Report.Layout.Columns" />.</para>
        <para>For example, a two-column report with a one-inch wide detail section would have <b>Width</b> = 1440, 
            and its total width would be 2 * 1440 = 2880.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginLeft">
      <summary>
            Gets or sets the left margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.C1Report.Layout.PaperSize" /> and <see cref="P:C1.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginRight">
      <summary>
            Gets or sets the right margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.C1Report.Layout.PaperSize" /> and <see cref="P:C1.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginTop">
      <summary>
            Gets or sets the top margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.C1Report.Layout.PaperSize" /> and <see cref="P:C1.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginBottom">
      <summary>
            Gets or sets the bottom margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.C1Report.Layout.PaperSize" /> and <see cref="P:C1.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.Columns">
      <summary>
            Gets or sets the number of detail columns.
            </summary>
      <remarks>
        <para>Use this property to create multi-column reports.</para>
        <para>In multi-column reports, header and footer sections span the full width of the report. 
            Only the detail section is rendered in multiple columns. Use the <see cref="P:C1.C1Report.Layout.Width" /> property to specify the width 
            of each column, and the <see cref="P:C1.C1Report.Layout.ColumnLayout" /> property to specify whether columns should be laid out across 
            the page or down the page.</para>
        <para>Multi-column reports are useful for printing reports on mailing labels and other types of multi-column 
            pre-printed forms. They are also useful for creating compact reports where detail information is laid out across 
            the page.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.ColumnLayout">
      <summary>
            Gets or sets the layout for the columns (down or across).
            </summary>
      <seealso cref="T:C1.C1Report.ColumnLayoutEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.PaperSize">
      <summary>
            Gets or sets the paper size for the report.
            </summary>
      <seealso cref="T:System.Drawing.Printing.PaperKind" />
    </member>
    <member name="P:C1.C1Report.Layout.CustomWidth">
      <summary>
            Gets or sets the custom width for the report, in twips.
            </summary>
      <remarks>
        <para>To create reports using custom paper sizes, set the <see cref="P:C1.C1Report.Layout.PaperSize" /> property to 
            <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, then set the <see cref="P:C1.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.C1Report.Layout.CustomHeight" /> properties 
            to the size of the page measured in twips.</para>
        <para>If the <see cref="P:C1.C1Report.Layout.PaperSize" /> is set to a value other than <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, the paper size 
            is determined by that setting. The <see cref="P:C1.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.C1Report.Layout.CustomHeight" /> properties are not 
            used in this case.</para>
        <para>If the <see cref="P:C1.C1Report.Layout.PaperSize" /> is set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" /> and the <see cref="P:C1.C1Report.Layout.CustomWidth" /> or 
            <see cref="P:C1.C1Report.Layout.CustomHeight" /> properties are set to zero, the printer's default paper size is used.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.CustomHeight">
      <summary>
            Gets or sets the custom height for the report, in twips.
            </summary>
      <remarks>
        <para>To create reports using custom paper sizes, set the <see cref="P:C1.C1Report.Layout.PaperSize" /> property to 
            <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, then set the <see cref="P:C1.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.C1Report.Layout.CustomHeight" /> properties 
            to the size of the page measured in twips.</para>
        <para>If the <see cref="P:C1.C1Report.Layout.PaperSize" /> is set to a value other than <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, the paper size 
            is determined by that setting. The <see cref="P:C1.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.C1Report.Layout.CustomHeight" /> properties are not 
            used in this case.</para>
        <para>If the <see cref="P:C1.C1Report.Layout.PaperSize" /> is set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" /> and the <see cref="P:C1.C1Report.Layout.CustomWidth" /> or 
            <see cref="P:C1.C1Report.Layout.CustomHeight" /> properties are set to zero, the printer's default paper size is used.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.Orientation">
      <summary>
            Gets or sets the page orientation.
            </summary>
      <seealso cref="T:C1.C1Report.OrientationEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.PageHeader">
      <summary>
            Gets or sets a value that determines on which pages the Page Header section should be displayed.
            </summary>
      <remarks>
        <para>You can use the <b>PageHeader</b> and <b>PageFooter</b> properties to specify whether a report's page header or 
            page footer should be printed on the same page as a report header or report footer.</para>
        <para>For example, you might not want to print a page header containing the page number on the first page of a report 
            if the report header is a cover sheet.</para>
      </remarks>
      <seealso cref="T:C1.C1Report.HdrFtrEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.PageFooter">
      <summary>
            Gets or sets a value that determines on which pages the Page Footer section should be displayed.
            </summary>
      <seealso cref="T:C1.C1Report.HdrFtrEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.Picture">
      <summary>
            Gets or sets a background picture for the report body.
            </summary>
      <remarks>
        <para>Use the <see cref="P:C1.C1Report.Layout.Picture" /> property to specify a bitmap or other type of graphic to be displayed as a 
            background picture on a report (watermark-style).</para>
        <para>Use the <see cref="P:C1.C1Report.Layout.PictureShow" />, <see cref="P:C1.C1Report.Layout.PictureAlign" />, and <see cref="P:C1.C1Report.Layout.PictureScale" /> properties 
            to specify which pages should display the picture and how it should be aligned and scaled.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.PictureAlign">
      <summary>
            Gets or sets how the background picture is aligned.
            </summary>
      <remarks>
            To select the background picture and which pages should display it, use the <see cref="P:C1.C1Report.Layout.Picture" /> and 
            <see cref="P:C1.C1Report.Layout.PictureShow" /> properties.
            </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.PictureScale">
      <summary>
            Gets or sets how the background picture is aligned.
            </summary>
      <para>This property determines how background images are scaled to fit the page. Depending on the setting of 
            this property, images may be clipped, stretched, scaled (which preserves the image's aspect ratio), tiled, 
            or hidden.</para>
      <para>This property works with the <see cref="P:C1.C1Report.Layout.PictureAlign" /> property so you can control image scaling and 
            alignment independently.</para>
    </member>
    <member name="P:C1.C1Report.Layout.PictureShow">
      <summary>
            Gets or sets where the background picture is displayed.
            </summary>
      <remarks>
            To select the background picture and how it should be aligned on the page, use the <see cref="P:C1.C1Report.Layout.Picture" />,
            <see cref="P:C1.C1Report.Layout.PictureAlign" />, and <see cref="P:C1.C1Report.Layout.PictureScale" /> properties.
            </remarks>
      <seealso cref="T:C1.C1Report.PictureShowEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.LabelSpacingX">
      <summary>
            Used by the designer to discount horizontal label spacing in the design surface.
            </summary>
    </member>
    <member name="P:C1.C1Report.Layout.LabelSpacingY">
      <summary>
            Used by the designer to discount vertical label spacing in the design surface.
            </summary>
    </member>
    <member name="P:C1.C1Report.Layout.OverlayReplacements">
      <summary>
            Gets a dictionary (<see cref="T:System.Collections.IDictionary" />) with replacements 
            to be made in the report body.
            </summary>
      <remarks>
        <para>This property is useful when implementing export filters.</para>
        <para>Reports that contain page counts or group page counts save special tags in
            the report body. When the report finishes rendering, these tags need to be replaced
            with the actual page counts. Filters can get the list of tags and the replacement
            values using this dictionary. The key-value pairs in the dictionary contain the
            tags and their replacements.</para>
      </remarks>
      <example>
            The code below shows part of a text filter implementation. The <b>EndReport</b>
            method gets the overlay replacement dictionary and calls a <b>ReplaceInStream</b>
            method that scans each line in the stream and replaces any keys with the 
            corresponding values. For example, the total page count would be represented
            by a key similar to "#pages#", which would be replaced everywhere in the stream
            with the actual page count.
            <code>
            public class MyTextFilter : ExportFilter
            {
              // ...
              override public void EndReport()
              {
                // close output stream
                Layout layout = _ownerReport.GetLayout();
                ReplaceInStream(_exportStream, layout.OverlayReplacements);
                _exportStream.Close();
              }
            }
            </code></example>
    </member>
    <member name="P:C1.C1Report.Layout.ParentReport">
      <summary>
            Gets the <see cref="T:C1.C1Report.C1Report" /> that contains this <see cref="T:C1.C1Report.Layout" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Report.ReportParameterCollection">
      <summary>
            Contains a collection of <see cref="T:C1.C1Report.ReportParameter" /> objects.
            </summary>
      <remarks>
            This collection is made available as a parameter in the 
            <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" /> event, and allows handlers to 
            inspect and modify report parameter values while handling the event.
            </remarks>
    </member>
    <member name="P:C1.C1Report.ReportParameterCollection.Item(System.String)">
      <summary>
            Gets a report parameter by name.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportParameterCollection.Item(System.Int32)">
      <summary>
            Gets a report parameter by index.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportParameterCollection.Count">
      <summary>
            Gets the number of <see cref="T:C1.C1Report.ReportParameter" /> objects in the collection.
            </summary>
    </member>
    <member name="T:C1.C1Report.ReportParameter">
      <summary>
            Represents a parameter in a parameterized report data source.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportParameter.Name">
      <summary>
            Gets the parameter name.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportParameter.Type">
      <summary>
            Gets the parameter type.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportParameter.Value">
      <summary>
            Gets or sets the parameter value.
            </summary>
    </member>
    <member name="T:C1.C1Report.IC1ReportExternalRecordset">
      <summary>
            Represents an external record set residing in a separate assembly.
            <para>
            If an assembly contains a type supporting this interface,
            that assembly and type can be selected in the report designer
            as the data source for a report. A reference to that type
            and the record set initialization parameters (see <see cref="P:C1.C1Report.IC1ReportExternalRecordset.Params" />)
            are then saved in the XML report definition file.
            When the report is loaded, the recordset object is created
            based on the saved info, and used as the data source for the report.
            </para></summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportExternalRecordset.EditParams">
      <summary>
            This method is used to set up parameters of the current recordset.
            For instance, the implementation of this method can show a dialog
            allowing the user to edit the parameters.
            </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportExternalRecordset.GetRecordset">
      <summary>
            Returns the <see cref="T:C1.C1Report.IC1ReportRecordset" /> interface used to access data.
            </summary>
      <returns>The <see cref="T:C1.C1Report.IC1ReportRecordset" /> interface used to access data.</returns>
    </member>
    <member name="P:C1.C1Report.IC1ReportExternalRecordset.Caption">
      <summary>
            Gets the user-friendly name of the current recordset.
            </summary>
    </member>
    <member name="P:C1.C1Report.IC1ReportExternalRecordset.Params">
      <summary>
            Gets or sets parameters of the current recordset.
            </summary>
    </member>
    <member name="T:C1.C1Report.IC1ReportRecordset">
      <summary>
            Interface used to access report data from data source objects.
            </summary>
      <remarks>
        <para>Any object that can be used as custom data source for reports must implement this interface.</para>
        <para>The <see cref="T:C1.C1Report.C1Report" /> component provides this implementation for common data sources such
            as <see cref="T:System.Data.DataTable" /> and <see cref="T:System.Data.DataView" /> classes.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetFieldNames">
      <summary>
            Gets a string vector with the names of each field in the data source.
            </summary>
      <returns>A string vector with the names of each field in the data source.</returns>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetFieldTypes">
      <summary>
            Gets a vector with the types of each field in the data source.
            </summary>
      <returns>A vector with the types of each field in the data source.</returns>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetFieldValue(System.Int32)">
      <summary>
            Gets the value of the given field at the current cursor position.
            </summary>
      <param name="fieldIndex">Index of the field.</param>
      <returns>Value of the field.</returns>
      <remarks>
            If the cursor is past the end of the data (EOF condition), this method should return null and
            not throw exceptions.
            </remarks>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.BOF">
      <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.EOF">
      <summary>
            Returns true if the cursor is pointing past the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MoveFirst">
      <summary>
            Moves the cursor to the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MoveLast">
      <summary>
            Moves the cursor to the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MovePrevious">
      <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MoveNext">
      <summary>
            Moves the cursor to the next record in the data source.
            </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetBookmark">
      <summary>
            Returns the current cursor position.
            </summary>
      <returns>Index of current record.</returns>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.SetBookmark(System.Int32)">
      <summary>
            Sets the current cursor position to supplied value.
            </summary>
      <param name="bkmk">Index of record.</param>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.ApplyFilter(System.String)">
      <summary>
            Applies a filter string. See the <see cref="P:System.Data.DataView.RowFilter" /> property for details.
            </summary>
      <param name="filter">Filter string.</param>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.ApplySort(System.String)">
      <summary>
            Applies a sort string. See the <see cref="P:System.Data.DataView.Sort" /> property for details.
            </summary>
      <param name="sort">Sort string.</param>
    </member>
    <member name="T:C1.C1Report.DataAccessException">
      <summary>
        <see cref="T:System.Exception" /> that is thrown when a data access error occurs.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor">
      <summary>
            Initializes a new instance of the DataAccessException class.
            </summary>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the DataAccessException class with a specified error message.
            </summary>
      <param name="msg">A message that describes the error.</param>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the DataAccessException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="msg">The error message that explains the reason for the exception.</param>
      <param name="x">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the DataAccessException class with serialized data.
            </summary>
      <param name="si">The object that holds the serialized object data.</param>
      <param name="sc">The contextual information about the source or destination.</param>
    </member>
    <member name="T:C1.C1Report.FileFormatEnum">
      <summary>
            Specifies the format of the export file.
            </summary>
      <remarks>Use the members of this enumeration to set parameter 
            of the <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" /> method in the <see cref="T:C1.C1Report.C1Report" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTML">
      <summary>
            Plain HTML format. This setting creates a single HTML file that can be viewed in any web browser.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTMLPaged">
      <summary>
            Paged HTML format. This setting creates one HTML file for each page in the report, with links to navigate between pages.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTMLDrillDown">
      <summary>
            Drill-down HTML format. This setting creates a single HTML file with collapsible headings. When viewed in a 
            DHTML-capable browser, clicking group headers causes them to collapse and expand to show the detail.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDF">
      <summary>
        <para>Adobe PDF format. This setting creates a PDF file that can be viewed using Adobe Acrobat software.</para>
        <para>The PDF file includes an outline tree that is generated automatically based on the report structure.</para>
        <para>Each node in the tree corresponds to a group header section in the report.
            Invisible group header sections do not generate outline entries in the PDF document.</para>
      </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFEmbedFonts">
      <summary>
            Adobe PDF format with embedded fonts. This setting creates a PDF file that can be viewed using Adobe Acrobat software.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.Text">
      <summary>
            Plain text. This setting creates a plain ASCII file.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.RTF">
      <summary>
            RTF format. This setting creates an RTF file that can be opened in Microsoft Word, WordPad, or any other 
            RTF-capable text editor.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.Excel">
      <summary>
            Microsoft Excel files. This setting creates a BIFF-8 Excel file that can be opened with Microsoft Excel 97 or later.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.TIFF">
      <summary>
            TIFF format. This setting creates multi-page TIFF files.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFPrintUtil">
      <summary>
            Deprecated. Use PDF, PDFEmbedFonts, or PDFProcted instead. 
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFProtected">
      <summary>
            Protected PDF format. This setting creates a PDF file with a random password. The file can be opened and printed
            by anyone, but cannot be modified.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.RTFLabels">
      <summary>
            RTF field-based format. This setting creates RTF files with absolutely-positioned fields. This format renders reports 
            more accurately than the plain RTF format, and is recommended for creating label-style reports.
            However, the files created with this setting are harder to edit than the plan RTF format, and can only be 
            previewed or printed correctly using Microsoft Word (this format doesn't work with WordPad).
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.TextSinglePage">
      <summary>
            Plain text. This setting creates a plain ASCII file as a single page.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.Metafile">
      <summary>
            Compressed metafile. This setting creates a zip file containing one metafile (emf) per page. The default
            file extensions for this format are "zip" or "emz".
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.OpenXml">
      <summary>
            OpenXml file. This setting creates an OpenXml Excel file that can be opened with Microsoft Excel 2007 or later.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTMLTableBased">
      <summary>
            Table-based HTML format. This setting creates a single HTML file that can be viewed in any web browser.
            Unlike plain <see cref="F:C1.C1Report.FileFormatEnum.HTML" /> format, uses tables rather than absolute positioning to arrange objects.
            </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFA">
      <summary>
            Adobe PDF format, PDF/A (level 2B) compatible.
            </summary>
    </member>
    <member name="T:C1.C1Report.GrowShrinkModeEnum">
      <summary>
            Specifies the logic for handling CanGrow/CanShrink fields.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.C1Report.C1Report.GrowShrinkMode" /> property in the <see cref="F:C1.C1Report.GrowShrinkModeEnum.C1Report" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.GrowShrinkModeEnum.C1Report">
      <summary>
            Uses the standard C1Report mode, where fields that grow or shrink affect only fields directly below.
            </summary>
    </member>
    <member name="F:C1.C1Report.GrowShrinkModeEnum.Access">
      <summary>
            Uses a mode that is similar to MS Access, where fields that grow or shrink affect all fields below, 
            even if they are off to the side of the field that grew or shrank.
            </summary>
    </member>
    <member name="T:C1.C1Report.FontProcessingOptions">
      <summary>
            Specifies font processing options for a <see cref="T:C1.C1Report.C1Report" />.
            This class inherits from <see cref="T:C1.C1Preview.FontProcessingOptions" />,
            the only difference is that some properties' defaults are changed.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FontProcessingOptions">
      <summary>
            Specifies font processing options for a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.FontProcessingOptions.AssignFrom(C1.C1Preview.FontProcessingOptions)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.C1Preview.FontProcessingOptions.Reset">
      <summary>
            Resets properties of this object to default values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.FontHandling">
      <summary>
            Gets or sets a value indicating how font embedding and substitution are handled
            by the current <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="N:C1.C1Report" />.
            <para>
            For details on the available options see members of the
            <see cref="T:C1.C1Preview.FontHandling" /> enumeration.
            </para><para>
            Note that if this property is set to a value other than
            <see cref="F:C1.C1Preview.FontHandling.EmbedFonts" /> or
            <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />
            (i.e. fonts are not embedded automatically),
            you may manually add certain fonts that you want embedded,
            to the document's <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" /> collection.
            </para><para>
            The default value of this property is <see cref="F:C1.C1Preview.FontHandling.None" />.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.SubstitutionFallbackFontName">
      <summary>
            Gets or sets the name of a font used when a document or report
            cannot find a suitable font to display a text.
            This property is only used when <see cref="P:C1.C1Preview.FontProcessingOptions.FontHandling" />
            is set to <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" /> or
            <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" />,
            and <see cref="P:C1.C1Preview.FontProcessingOptions.UseOldSubstitutionAlgorithm" /> is <b>false</b>.
            <para>
            The default value is <b>"Arial Unicode MS"</b>.
            When setting this property, please specify a font containing symbols for as many Unicode characters as possible.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.UseOldSubstitutionAlgorithm">
      <summary>
            Gets or sets a value indicating whether to use the old (prior to 2013v1 release) algorithm of font substitution.
            This property is only used when <see cref="P:C1.C1Preview.FontProcessingOptions.FontHandling" />
            is set to <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" /> or <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" />.
            The default value is <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.EmbeddedFontsGlyphsBuildMode">
      <summary>
            Gets or sets a value indicating how <see cref="T:C1.C1Preview.EmbeddedFont" /> builds lists of glyphs
            when <see cref="P:C1.C1Preview.FontProcessingOptions.FontHandling" />
            is set to <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" /> or <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.PageRenderingMode">
      <summary>
            Specifies the page rendering modes used when generating a report.
            </summary>
      <seealso cref="P:C1.C1Report.C1Report.PageRenderingMode" />
    </member>
    <member name="F:C1.C1Report.PageRenderingMode.Default">
      <summary>
            The default page rendering mode.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageRenderingMode.AsMetafiles">
      <summary>
            When generating a report, for each page a metafile is produced and serialized,
            and all page related data is then purged from memory. This mode is slower than
            the default, but uses less memory.
            Use this mode for large reports that run out of memory if using the default mode.
            </summary>
    </member>
    <member name="F:C1.C1Report.PageRenderingMode.ReflowableDocument">
      <summary>
            The <see cref="T:C1.C1Preview.C1PrintDocument" /> representing the generated report
            (accessible via the <see cref="!:C1Document" /> property) will be reflowable,
            so that additional elements (such as overlays) may be added to the document after
            the report has generated, and C1Report.C1Document.Generate() may be called to render the
            additional content.
            <para>Note that this mode is slower than the default, so use only when necessary.</para></summary>
    </member>
    <member name="T:C1.C1Report.C1Report">
      <summary>
            Generates Access-style, data-based banded reports that can be rendered to printer, preview,
            or exported to various portable formats (including XPS, HTML, PDF, and text).
            </summary>
    </member>
    <member name="M:C1.C1Report.C1Report.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.C1Report" /> component.
            </summary>
    </member>
    <member name="M:C1.C1Report.C1Report.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the component.
            </summary>
      <param name="disposing">If true, managed resources as well as unmanaged resources are released; 
            if false, only unmanaged resources are disposed.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnStartReport(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.StartReport" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnEndReport(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.EndReport" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnNoReportData(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.NoData" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnStartPage(C1.C1Report.ReportEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.StartPage" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.ReportEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnEndPage(C1.C1Report.ReportEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.EndPage" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.ReportEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnStartSection(C1.C1Report.ReportEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.StartSection" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.ReportEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnPrintSection(C1.C1Report.ReportEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.PrintSection" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.ReportEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnEndSection(C1.C1Report.ReportEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.EndSection" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.ReportEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnReportError(C1.C1Report.ReportEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.ReportError" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.ReportEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnInitializeParametersDialog(C1.C1Report.DialogEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.DialogEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnAddOutlineEntry(C1.C1Report.ReportEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" /> event.
            </summary>
      <param name="e">
        <see cref="T:C1.C1Report.ReportEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportList(System.IO.Stream)">
      <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
      <param name="stream">Contains the stream with XML report definition.</param>
      <returns>A string array containing the names of all reports in the XML definition.</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportList(System.String)">
      <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
      <param name="fileName">Contains the full name of the XML report definition file.</param>
      <returns>A string array containing the names of all reports in the XML file.</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportList(System.Xml.XmlDocument)">
      <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to <see cref="T:System.Xml.XmlDocument" /> object.</param>
      <returns>A string array containing the names of all reports in the <b>XmlDocument</b>.</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.BeginInit">
      <summary>
            Signals the object that initialization is starting.
            </summary>
    </member>
    <member name="M:C1.C1Report.C1Report.EndInit">
      <summary>
            Signals the object that initialization is complete.
            </summary>
    </member>
    <member name="M:C1.C1Report.C1Report.ClearGeneratedPages">
      <summary>
            Clears the pages and other info created during report generation.
            This method does not clear the report definition though.
            </summary>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportInfo(System.String)">
      <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
      <param name="fileName">Contains the full name of the XML report definition file.</param>
      <returns>A string array containing the names of all reports in the XML file.</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportInfo(System.Xml.XmlDocument)">
      <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument" /> that contains the reports.</param>
      <returns>A string array containing the names of all reports in the <b>XmlDocument</b>.</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.Load(System.IO.Stream,System.String)">
      <summary>
            Loads a report from an XML report definition in stream.
            </summary>
      <param name="stream">Stream containing XML report definition.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.C1Report.C1Report.GetReportInfo(System.String)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Load(System.String,System.String)">
      <summary>
            Loads a report from an XML report definition file.
            </summary>
      <param name="fileName">Full name of the XML report definition file.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.C1Report.C1Report.GetReportInfo(System.String)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Load(System.Xml.XmlDocument,System.String)">
      <summary>
            Loads a report from an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument" /> that contains the reports.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.C1Report.C1Report.GetReportInfo(System.String)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.String)">
      <summary>
            Saves the current report definition to a file. 
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <remarks>
            This method does not embed pictures and subreports into the output file. It only saves subreport names and saves
            images in external files.
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.String,System.Boolean)">
      <summary>
            Saves the current report definition to a file.
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <param name="embedAll">Whether to embed images and subreports into the output file.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.String,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to a file.
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <param name="embedPics">Whether to embed images into the output file.</param>
      <param name="embedSubs">Whether to embed subreports into the output file.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to a stream.
            </summary>
      <param name="stream">The stream to save to.</param>
      <param name="embedPics">Indicates whether to embed images into the output file.</param>
      <param name="embedSubs">Indicates whether to embed subreports into the output file.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.Xml.XmlTextWriter)">
      <summary>
            Saves the current report definition to an <see cref="T:System.Xml.XmlTextWriter" /> object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlTextWriter" /> object where the report definition will be saved.</param>
      <remarks>
            This method does not embed pictures and subreports into the output file. It only saves subreport names and saves
            images in external files.
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean)">
      <summary>
            Saves the current report definition to an XmlTextWriter object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlTextWriter" /> object where the report definition will be saved.</param>
      <param name="embed">Whether to embed images and subreports into the output stream.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to an XmlTextWriter object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlTextWriter" /> object where 
            the report definition will be saved.</param>
      <param name="embedPics">Whether to embed images into the output stream.</param>
      <param name="embedSubs">Whether to embed subreports into the output stream.</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Print">
      <summary>
            Prints the current report with default printer settings,
            not showing the print progress dialog.
            </summary>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the current report with specified printer settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Prints the current report with specified printer settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the print progress dialog.</param>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints a range of pages of the current report with specified printer settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints a range of pages of the current report with specified printer settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to print all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints a range of pages of the current document with specified printer and default page settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>
            Prints the current document with specified printer and default page settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints a range of pages of the current document with specified printer and default page settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to print all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
      <remarks>This method is a shortcut to the corresponding Print(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.PrintDialog">
      <summary>
            Shows the standard print dialog, allowing the user to print the current document.
            </summary>
      <returns>
        <b>true</b> if the document was printed, <b>false</b> otherwise.</returns>
      <remarks>This method is a shortcut to the corresponding PrintDialog(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.PrintDialog(System.Drawing.Printing.PrinterSettings,System.Int32[],System.Boolean)">
      <summary>
            Shows the standard print dialog, allowing the user to print the current document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="selectedPageNumbers">The list of selected page numbers.
            If this parameter is not <b>null</b>, <b>selection</b> option is enabled in the dialog.</param>
      <param name="showProgress">Indicates whether to show print progress.</param>
      <returns>
        <b>true</b> if the document was printed, <b>false</b> otherwise.</returns>
      <remarks>This method is a shortcut to the corresponding PrintDialog(...) method
            on the <see cref="P:C1.C1Report.C1Report.C1Document" /> property of the current report.
            The report will be rendered if it was not rendered yet.</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Clear">
      <summary>
            Clears the current report.
            </summary>
      <remarks>
        <para>This method removes all groups, group sections, and fields from the current report.</para>
        <para>It also resets the <see cref="P:C1.C1Report.C1Report.DataSource" /> and <see cref="P:C1.C1Report.C1Report.Layout" /> objects, and clears
            (but does not remove) the fixed sections that all reports have: <b>Detail</b>, <b>Header</b>, 
            <b>Footer</b>, <b>PageHeader</b>, and <b>PageFooter</b>.</para>
        <para>Use this method when you want to clear a report and start creating a new one from scratch.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Evaluate(System.String)">
      <summary>
            Evaluates a <b>VBScript</b> expression in the current report context.
            </summary>
      <param name="expression">A string with a <b>VBScript</b> expression to be evaluated.</param>
      <returns>The value of the expression.</returns>
      <remarks>
        <para>Use this method to evaluate expressions as they would be evaluated while generating a report.
            This can be useful in designer-type applications, to provide an "Immediate Window" where users can test 
            expressions.</para>
        <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="E:C1.C1Report.C1Report.ReportError" /> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
      </remarks>
      <example>
        <para>Expressions may contain simple <b>VBScript</b> expressions such as:</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("2+2"));
              <i>4</i>
            Console.WriteLine(_c1r.Evaluate(" \"A\" &amp; \"B\" ");
              <i>AB</i></code>
        <para>Expressions may also contain references to the <b>Report</b> object and all its sub-objects. For example:</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.RecordSource"));
              <i>SELECT * FROM Employees</i>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.Recordset.Fields.Count"));
              <i>7</i>
            Console.WriteLine(_c1r.Evaluate("Report.Fields(0).Name"));
              <i>FirstNameField</i></code>
        <para>Finally, data fields, <see cref="T:C1.C1Report.Field" />, and <see cref="T:C1.C1Report.Section" /> objects may be referenced directly by name.</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("FirstNameField.Value"));
              <i>Andrew</i>
            Console.WriteLine(_c1r.Evaluate("CategoryName"));
              <i>Beverages</i></code>
      </example>
    </member>
    <member name="M:C1.C1Report.C1Report.Execute(System.String)">
      <summary>
            Executes a <b>VBScript</b> statement in the current report context.
            </summary>
      <param name="statement">A string with <b>VBScript</b> instructions to be executed.</param>
      <remarks>
        <para>This method is similar to the <see cref="M:C1.C1Report.C1Report.Evaluate(System.String)" /> method, except it does not return a value.</para>
        <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="E:C1.C1Report.C1Report.ReportError" /> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.ParseExpression(System.String)">
      <summary>
            Parses a <b>VBScript</b> expression in the current report context.
            </summary>
      <param name="expression">A string with a <b>VBScript</b> expression to be parsed.</param>
      <returns>An <see cref="T:System.Exception" /> if the expression is invalid, or null if no errors
            were detected.</returns>
      <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.ParseStatement(System.String)">
      <summary>
            Parses a <b>VBScript</b> statement in the current report context.
            </summary>
      <param name="statement">A string with a <b>VBScript</b> statement to be parsed.</param>
      <returns>An <see cref="T:System.Exception" /> if the statement is invalid, or null if no errors
            were detected.</returns>
      <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.ParseStatement(System.String,System.String,System.Boolean)">
      <summary>
            Parses a named <b>VBScript</b> statement in the current report context.
            </summary>
      <param name="statement">A string with a <b>VBScript</b> statement to be parsed.</param>
      <param name="name">The name of the <paramref name="statement" />. 
            A statement can contain named functions and procedures, in which case they are identified
            by the statement name and function or procedure name pair.</param>
      <param name="isGlobal">Indicates whether it is the <see cref="P:C1.C1Report.C1Report.GlobalScripts" /> that is being parsed.</param>
      <returns>An <see cref="T:System.Exception" /> if the statement is invalid, or null if no errors
            were detected.</returns>
      <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.GetPageImages">
      <summary>
            Enumerates page images (represented by metafiles) of the generated report.
            Using this method in a "foreach" loop allows to iterate over all pages of a large report
            without exhausting system resources.
            This approach is preferable to <see cref="P:C1.C1Report.C1Report.PageImages" /> property that creates images
            for all pages and can consume a large amount of resources.
            </summary>
      <returns>An <b>IEnumerable</b> that allows to iterate over the page images.</returns>
      <remarks>You must call the <see cref="M:C1.C1Report.C1Report.Render" /> method to create or refresh the pages.</remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageImage(System.Int32)" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageCount" />
    </member>
    <member name="M:C1.C1Report.C1Report.GetPageImage(System.Int32)">
      <summary>
            Gets a metafile representing the specified page.
            Use this method rather than the <see cref="P:C1.C1Report.C1Report.PageImages" /> collection
            as accessing that property creates images for all pages at once
            and thus can exhaust system resources.
            </summary>
      <param name="pageIndex">0-based page index.</param>
      <returns>The metafile representing the page.</returns>
      <remarks>You must call the <see cref="M:C1.C1Report.C1Report.Render" /> method to create or refresh the pages.</remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageCount" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageImages" />
    </member>
    <member name="M:C1.C1Report.C1Report.GetPageCount">
      <summary>
            Gets the total number of pages in the generated report.
            Use this method rather than <b>Count</b> on the <see cref="P:C1.C1Report.C1Report.PageImages" /> collection
            as accessing that property creates images for all pages at once
            and thus can exhaust system resources.
            </summary>
      <returns>The total page count.</returns>
      <remarks>You must call the <see cref="M:C1.C1Report.C1Report.Render" /> method to create or refresh the pages.</remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageImage(System.Int32)" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageImages" />
    </member>
    <member name="M:C1.C1Report.C1Report.Render">
      <summary>
            Renders the report into an internal collection of images.
            </summary>
      <remarks>
        <para>This method is called implicitly when other classes access the <see cref="P:C1.C1Report.C1Report.Document" /> 
            property, so you rarely have to call <see cref="M:C1.C1Report.C1Report.Render" /> directly from your code.</para>
        <para>In some cases, you may want to access the report as a collection of pages,
            exposed by the <see cref="P:C1.C1Report.C1Report.PageImages" /> property. To ensure that the image collection
            is available and up-to-date, call the <see cref="M:C1.C1Report.C1Report.Render" /> method directly.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)">
      <summary>
            Renders the report into a <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="stream">Stream that will contain the report.</param>
      <param name="fmt">Report format to insert into the output stream.</param>
      <remarks>
        <para>This method is especially useful in ASP.NET scenarios where you want to render reports into 
            Html or Pdf streams, without creating temporary files.</para>
        <para>Not all types of report can be rendered into streams. The Excel format requires OLE compound 
            files and can only be rendered into files.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum,System.String,System.String)">
      <summary>
            Renders the report into an Html <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">Stream that will contain the report.</param>
      <param name="fmt">Report format to insert into the output stream.</param>
      <param name="idPrefix">Unique ID used to differentiate multiple reports stored in the same stream.</param>
      <param name="fileName">Base file name used to build temporary image files.</param>
      <remarks>
            This method is used by the C1WebReport control to generate Html reports in ASP.NET pages.
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)">
      <summary>
            Renders the report into a file.
            </summary>
      <param name="fileName">Name of the file that will contain the report.</param>
      <param name="fmt">Type of file to create.</param>
      <remarks>
            This method causes the control to render the current report into a file. It is especially useful in server applications 
            that create several reports in batch mode, and don't have a user interface.
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)">
      <summary>
            Renders the report into an <see cref="T:C1.C1Report.ExportFilter" /> object.
            </summary>
      <param name="filter">Export filter that will render the report.</param>
      <remarks>
        <para>
          <see cref="T:C1.C1Report.C1Report" /> includes several built-in export filters that allow you to export reports 
            to HTML, PDF, RTF, Excel, and other formats.</para>
        <para>You may create your own filters by creating classes that derive from any of these base filters.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.CopyFrom(C1.C1Report.C1Report)">
      <summary>
            Copies a report definition from another <see cref="T:C1.C1Report.C1Report" /> component.
            </summary>
      <param name="sourceReport">
        <see cref="T:C1.C1Report.C1Report" /> that contains the report to be copied.</param>
      <remarks>
            This method is similar to copying the <see cref="P:C1.C1Report.C1Report.ReportDefinition" /> property from one 
            <see cref="T:C1.C1Report.C1Report" /> to another, but is substantially faster.
            Note that while this method clones the fields of the report, in only makes shallow copies
            of the fields' properties (so e.g. subreports are not cloned).
            </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.AddScriptObject(System.String,System.Object)">
      <summary>
            Adds an object to the report's script context.
            </summary>
      <param name="name">Name of the new object (case-insensitive).</param>
      <param name="value">Value of the new object.</param>
      <remarks>
        <para>This method allows you to add custom objects to the context of the <see cref="T:C1.C1Report.C1Report" /> 
            script interpreter.</para>
        <para>The script interpreter context is cleared whenever a report starts rendering, so this method 
            should always be called from the <see cref="E:C1.C1Report.C1Report.StartReport" /> event handler.</para>
      </remarks>
      <example>
        <para>The code below uses the <see cref="E:C1.C1Report.C1Report.StartReport" /> event to add a variable called 
            "mainForm" to the script context. It then attaches some script to the report's <see cref="P:C1.C1Report.C1Report.OnOpen" /> 
            event to show the caption of the form when the report starts rendering.</para>
        <code>
            private void _c1r_StartReport(object sender, System.EventArgs e)
            {
                _c1r.AddScriptObject("mainForm", this);
            }
            private void button1_Click(object sender, System.EventArgs e)
            {
                _c1r.OnOpen = "msgbox(mainForm.Text)";
                _c1r.Render();
            }
            </code>
      </example>
    </member>
    <member name="M:C1.C1Report.C1Report.AddScriptObject(System.String,System.Object,System.Boolean)">
      <summary>
            Adds an object to the report's script context.
            </summary>
      <param name="name">Name of the new object (case-insensitive).</param>
      <param name="value">Value of the new object.</param>
      <param name="addToSubreports">Whether to add the object to the script context of all subreports as well.</param>
      <remarks>
        <para>This method allows you to add custom objects to the context of the <see cref="T:C1.C1Report.C1Report" /> 
            script interpreter.</para>
        <para>The script interpreter context is cleared whenever a report starts rendering, so this method 
            should always be called from the <see cref="E:C1.C1Report.C1Report.StartReport" /> event handler.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.SetCreationDevice(C1.C1Preview.MeasurementDeviceEnum,System.String)">
      <summary>
            Assigns specified values to the <see cref="P:C1.C1Report.C1Report.CreationDevice" /> and <see cref="P:C1.C1Report.C1Report.CreationPrinterName" /> properties.
            Using this method is more efficient than setting the two properties individually.
            </summary>
      <param name="creationDevice">Value of <see cref="P:C1.C1Report.C1Report.CreationDevice" /> property.</param>
      <param name="creationPrinterName">Value of <see cref="P:C1.C1Report.C1Report.CreationPrinterName" /> property.</param>
    </member>
    <member name="E:C1.C1Report.C1Report.LongOperation">
      <summary>
            Occurs periodically during document generation.
            Allows to provide progress indication and the ability to cancel generation to the user.
            </summary>
    </member>
    <member name="E:C1.C1Report.C1Report.StartReport">
      <summary>
            Fired when the control starts rendering the report, before it opens the source recordset.
            </summary>
      <remarks>
        <para>You can use this event to provide user feedback or to make changes to the 
            <see cref="P:C1.C1Report.DataSource.ConnectionString" /> and 
            <see cref="P:C1.C1Report.DataSource.RecordSource" /> properties.</para>
        <para>For example, you may implement your own version of parameterized queries by asking the 
            user to provide some information and changing the <see cref="P:C1.C1Report.DataSource.RecordSource" /> 
            property accordingly.</para>
        <para>You may also use this event to assign a <see cref="T:System.Data.DataTable" /> object directly to the 
            report's <see cref="P:C1.C1Report.DataSource.Recordset" /> property. Applications that already have the 
            report data should do this to save time by preventing <see cref="T:C1.C1Report.C1Report" /> from loading its own copy 
            of the data.</para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.EndReport">
      <summary>
            Fired when the control finishes rendering the report.
            </summary>
    </member>
    <member name="E:C1.C1Report.C1Report.NoData">
      <summary>
            Fired when the control starts rendering a report and the data source is empty.
            </summary>
      <remarks>
        <para>You can use this event to cancel rendering a report when the source recordset is empty.</para>
        <para>If you don't cancel the report, it will be rendered as an unbound report (a self-contained report 
            with no underlying data).</para>
      </remarks>
      <example>
            The code below cancels a report when it has no data:
            <code>
            private void c1r_NoData(object sender, EventArgs e)
            {
                _c1r.Cancel = true;
            }
            </code></example>
    </member>
    <member name="E:C1.C1Report.C1Report.StartPage">
      <summary>
            Fired when the control starts rendering each page.
            </summary>
      <remarks>
        <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
        <para>You can use the <see cref="P:C1.C1Report.C1Report.Cancel" /> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.C1Report.C1Report.MaxPages" /> property instead.</para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.EndPage">
      <summary>
            Fired when the control finishes rendering each page.
            </summary>
      <remarks>
        <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
        <para>You can use the <see cref="P:C1.C1Report.C1Report.Cancel" /> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.C1Report.C1Report.MaxPages" /> property instead.</para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.StartSection">
      <summary>
            Fired before each <see cref="T:C1.C1Report.Section" /> is formatted.
            </summary>
      <remarks>
        <para>When this event fires, the report fields have not been updated with the current values or sizes.</para>
        <para>This is a good point to set field formatting parameters and visibility based on the current data values.</para>
        <para>This event is equivalent to the <see cref="P:C1.C1Report.Section.OnFormat" /> script property.</para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.PrintSection">
      <summary>
            Fired before each <see cref="T:C1.C1Report.Section" /> is printed (after it has been formatted.)
            </summary>
      <remarks>
        <para>When this event fires, the field values and sizes have been set by the control.</para>
        <para>You may still make changes, but they will not affect the field layout. For example, changing a field's 
            <see cref="P:C1.C1Report.Field.Text" /> property at this point will not cause it to grow or shrink.</para>
        <para>This event is equivalent to the <see cref="P:C1.C1Report.Section.OnPrint" /> script property.</para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.EndSection">
      <summary>
            Fired when the control finishes rendering each <see cref="T:C1.C1Report.Section" />.
            </summary>
    </member>
    <member name="E:C1.C1Report.C1Report.ReportError">
      <summary>
            Fired when an error occurs while rendering a report.
            </summary>
      <remarks>
        <para>The most common types of errors found when rendering reports are:</para>
        <para>1) Invalid <see cref="P:C1.C1Report.DataSource.ConnectionString" /> or <see cref="P:C1.C1Report.DataSource.RecordSource" /> parameters. 
            This usually indicates that the system could not open the specified database (a server may be off line, or 
            a database file may be in a different location than what was specified) or that the SQL syntax used for the 
            <see cref="P:C1.C1Report.DataSource.RecordSource" /> property contains errors.</para>
        <para>2) Error executing scripts or evaluating expressions. This usually indicates that the VBScript expression 
            used contains a syntax error. In these cases, make sure you look at the exception message. It usually contains a 
            good explanation of what caused the error.</para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.InitializeParametersDialog">
      <summary>
            Fired before the control displays the <b>Report Parameters</b> dialog.
            </summary>
      <remarks>
        <para>Reports that have a <b>PARAMETERS</b> clause in their <see cref="P:C1.C1Report.DataSource.RecordSource" /> property 
            show a dialog where the user can enter report parameters.</para>
        <para>This event fires before the dialog is displayed and allows you to customize the dialog by changing 
            its caption, font, colors, etc.</para>
        <para>You can also use this event to inspect and modify parameter values using the 
            <see cref="F:C1.C1Report.DialogEventArgs.Parameters" /> collection.</para>
        <para>Finally, you can use the <see cref="F:C1.C1Report.DialogEventArgs.ShowDialog" /> property to prevent the component
            from showing the parameters dialog.</para>
      </remarks>
      <example>
            The code below uses the <b>InitializeParametersDialog</b> event to modify the values
            of the report parameters and suppress the display of the parameter dialog.
            <code>
            private void c1Report1_InitializeParametersDialog(object sender, 
                     C1.C1Preview.C1Report.DialogEventArgs e)
            {
              // change parameter values
              ReportParameterCollection p = e.Parameters;
              p["TheString"].Value = "east";
              p["TheNumber"].Value = 12;
              p["TheDate"].Value   = DateTime.Now;
              p["TheBool"].Value   = true;
              
              // don't show dialog
              e.ShowDialog = false;
            }
            </code></example>
    </member>
    <member name="E:C1.C1Report.C1Report.AddOutlineEntry">
      <summary>
            Fired before the control adds an outline entry to the report.
            </summary>
      <remarks>
        <para>Some report output formats include an outline that is built Based on the report groups. For example, PDF
            reports show this outline on the left pane of the reader application.</para>
        <para>The outline contains one entry for each group header, and the entry text is based on the value of
            the <see cref="P:C1.C1Report.Group.GroupBy" /> expression for the group.</para>
        <para>This event allows you to change or suppress the text that appears on the outline.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.DefaultRightToLeft">
      <summary>
            Gets or sets the value used as the default for the <see cref="P:C1.C1Report.C1Report.RightToLeft" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.UsePrinterResolution">
      <summary>
            Specifies whether the component should use the .NET printing support to obtain high-resolution graphics.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.C1Report.C1Report" /> scans the installed printers in order to 
            obtain a high-resolution reference <see cref="T:System.Drawing.Graphics" /> object.</para>
        <para>Set this property to false in order to bypass this process and use the
            screen resolution when generating reports. This will increase report rendering
            speed (in some cases) with some loss in layout accuracy.</para>
        <para>Under certain circumstances, notably when running under Windows Services, 
            the .NET printing support does not work correctly, and trying to enumerate the 
            installed printers may cause memory allocation problems. In these situations,
            setting this property to false is necessary.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.CreationDevice">
      <summary>
            Gets or sets the type of device that is 
            used to provide reference graphics when generating the report.
            If this property is <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" /> (which is the default),
            <see cref="P:C1.C1Report.C1Report.CreationPrinterName" /> specifies the printer.
            </summary>
      <remarks>
        <para>
            Note that while the meaning of this and related <see cref="P:C1.C1Report.C1Report.CreationPrinterName" /> properties
            are the same as those properties on a <see cref="T:C1.C1Preview.C1PrintDocument" />, the defaults on a <see cref="T:C1.C1Report.C1Report" />
            are not affected by the static properties
            <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" /> and <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />.
            Instead, <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" /> is used as the default, and the default printer name
            is null (which means that the printer is selected automatically).
            This is done for compatibility with previous versions.</para>
        <para>
            Normally all installed printers would be scanned to obtain a high-resolution
            reference <see cref="T:System.Drawing.Graphics" /> object.
            In order to bypass this process, set this property to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Screen" />.
            In some cases this may increase rendering speed at the cost of some loss in layout accuracy.
            </para>
      </remarks>
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.CreationPrinterName">
      <summary>
            Gets or sets the name of the printer that is
            used to provide reference graphics when generating the report.
            <para>This property is only used if <see cref="P:C1.C1Report.C1Report.CreationDevice" /> is set to
            <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />.</para><para>Set this property to <b>null</b> to select the reference printer automatically.</para></summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.CreationDpi">
      <summary>
            Gets or sets the resolution (DPI) used when generating the report.
            </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.CreationGraphics">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Graphics" /> object to use as reference when generating the report.
            This <b>Graphics</b> is used to calculate text sizes, measure RTF text, and so on.
            </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.ActualCreationDevice">
      <summary>
            Gets the actual measurement device which was used to generate the report.
            This device can differ from the one specified by <see cref="P:C1.C1Report.C1Report.CreationDevice" />,
            for example if <see cref="P:C1.C1Report.C1Report.CreationDevice" /> was set to <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />
            but the current system has no printers installed.
            </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.ActualCreationPrinterName">
      <summary>
            Gets the name of the actual measurement printer which was used to generate the report.
            This can differ from the name specified by <see cref="P:C1.C1Report.C1Report.CreationPrinterName" />,
            for example if the report was rendered on a system with no such printer.
            </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.RightToLeft">
      <summary>
            Gets or sets a value indicating whether the fields of the report should use right-to-left rules for rendering text.
            <para>If null (which is the default), the value of the static property <see cref="P:C1.C1Report.C1Report.DefaultRightToLeft" /> is used.</para><para>This value may be overridden by individual fields.</para></summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ActualRightToLeft">
      <summary>
            Gets the actual right-to-left value that is being used. The value is obtained using the following rules:
            <list type="number"><item>If <see cref="P:C1.C1Report.C1Report.RightToLeft" /> is not null, then that value is used.</item><item>If the current report is a sub-report, then <see cref="P:C1.C1Report.C1Report.ActualRightToLeft" /> of the owner subreport field is used.</item><item>Else the value of <see cref="!:C1FlexReport.DefaultRightToLeft" /> static property is used.</item></list></summary>
    </member>
    <member name="P:C1.C1Report.C1Report.PageRenderingMode">
      <summary>
            Gets or sets a value specifying the page rendering mode to use
            when generating the report.
            Use <see cref="F:C1.C1Report.PageRenderingMode.AsMetafiles" /> for very large reports
            which run out of memory when using the default mode.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.FontProcessingOptions">
      <summary>
            Gets the <see cref="P:C1.C1Report.C1Report.FontProcessingOptions" /> object which determines
            how font substitution and embedding are handled when the report generates.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.CompatibilityOptions">
      <summary>
            Gets the <see cref="P:C1.C1Report.C1Report.CompatibilityOptions" /> object which determines compatibility
            with previous versions of <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ColorizeHyperlinks">
      <summary>
            Gets or sets a value indicating whether hyperlinks in the report are colorized automatically.
            <para>The default is <c>false</c> (which is compatible with older versions of <c>C1Report</c>).</para></summary>
    </member>
    <member name="P:C1.C1Report.C1Report.GeneratingComplete">
      <summary>
            If the current report is generating (see <see cref="P:C1.C1Report.C1Report.IsBusy" />),
            gets the approximate completion ratio, from 0 (0% complete) to 1 (100% complete).
            If the report is currently not generating, gets 1.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.EmfType">
      <summary>
            Gets or sets the type of metafiles created by the current report.
            The default is <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.UseGdiPlusTextRendering">
      <summary>
            Gets or sets a value indicating whether all text in the current report
            should be rendered using GDI+ text API.
            <para>The default value is <b>false</b>.</para></summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ReportName">
      <summary>
            Gets or sets the name of the report (used with the Load method).
            </summary>
      <remarks>
        <para>This property identifies the report when it is saved in a report definition file.</para>
        <para>To retrieve a report from a report definition file, use the <see cref="M:C1.C1Report.C1Report.Load(System.String,System.String)" /> method 
            and pass this name as a parameter.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.ReportInfo">
      <summary>
            Gets or sets a <see cref="P:C1.C1Report.C1Report.ReportInfo" /> object containing report metadata.
            </summary>
      <remarks>
        <para>Reports may include general information such as a title, author, and keywords.</para>
        <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.DataSource">
      <summary>
            Gets a reference to the report's <see cref="P:C1.C1Report.C1Report.DataSource" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Layout">
      <summary>
            Gets a reference to the report's <see cref="P:C1.C1Report.C1Report.Layout" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Font">
      <summary>
            Gets or sets the default font for new fields.
            </summary>
      <remarks>
            This property is not used directly when rendering the report. It is used as the default font for new fields.
            </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.MaxPages">
      <summary>
            Gets or sets the maximum number of pages allowed for a report.
            </summary>
      <remarks>
        <para>This property is useful if you want to limit the maximum number of pages in a report.</para>
        <para>For example, you may write a report designer with a preview window that shows only the first 
            five pages of a report.</para>
        <para>Setting this property to zero allows reports of any length.</para>
        <para>You can also limit the size of reports by setting the 
            <see cref="P:C1.C1Report.DataSource.MaxRecords" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.DoEvents">
      <summary>
            Specifies whether the control should handle Windows messages while rendering reports.
            </summary>
      <remarks>
        <para>Setting this property to true allows users to resize forms, click buttons, etc. while reports are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a 
            "Cancel Report" button (otherwise users wouldn't be able to click the button until the report was done).</para>
        <para>Setting this property to false will cause reports to render slightly faster.</para>
      </remarks>
      <example>
        <para>The code below implements "Render" and a "Cancel" buttons attached to a <see cref="T:C1.C1Report.C1Report" /> component.</para>
        <para>The "Render" button checks whether the <see cref="T:C1.C1Report.C1Report" /> component is busy before starting to render a report.
            This is necessary because the user could click the "Render" button several times in a row, before the component got a 
            chance to finish rendering the report. (Calling the <see cref="M:C1.C1Report.C1Report.Render" /> method while the component is busy throws an 
            <see cref="T:System.Exception" />).</para>
        <para>The "Cancel" button checks whether the component is rendering a report and sets the <see cref="P:C1.C1Report.C1Report.Cancel" /> 
            property to true.</para>
        <code>
            _c1r.DoEvents = true;
            
            private void Render_Click(object sender, EventArgs e)
            {
               if (_c1r.IsBusy)
               {
                   Console.WriteLine("Cannot render now, component is busy");
               } 
               else 
               {
                   ppv.Document = c1r.Document;
               } 
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_c1r.IsBusy) 
               {
                   _c1r.Cancel = true;
               } 
               else 
               {
                   Console.WriteLine("No report to cancel");
               }
            }
            </code>
      </example>
    </member>
    <member name="P:C1.C1Report.C1Report.OnOpen">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.C1Report.C1Report.StartReport" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering starts.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnClose">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report finishes rendering.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.C1Report.C1Report.EndReport" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering finishes.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnNoData">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering and its source recordset is empty.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.C1Report.C1Report.NoData" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to cancel rendering reports with no data.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when the source recordset is 
            empty.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnPage">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when a new page is created.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.C1Report.C1Report.StartPage" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to update a label showing how many pages have been rendered so far.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that updates a variable at every page break.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnError">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when an error occurs.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.C1Report.C1Report.ReportError" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a an application dialog box when an error occurs.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when an error occurs.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.GlobalScripts">
      <summary>
            Gets or sets the global <b>VBScript</b> module.
            Functions and subroutines defined here (using the standard VBScript syntax) can be used in other scripts in the current report
            like standard VBScript functions.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Page">
      <summary>
            Gets or sets the current page number.
            </summary>
      <remarks>
        <para>This property is a global variable available to <b>VBScript</b> expressions.</para>
        <para>It is automatically initialized by the control with the value 1 when a report starts rendering, 
            and it is automatically incremented after each page break.</para>
        <para>This property is read-write, so you can reset it using scripts. For example, you can reset the
            current page to 1 whenever a new group starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Cancel">
      <summary>
            Specifies whether to cancel generation of the current report.
            </summary>
      <remarks>
            Setting this property to true while a report is being generated stops the report generation process.
            Any pages already created are kept in the document and can be previewed or printed by an attached
            print preview control.
            </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.IsBusy">
      <summary>
            Gets a value that determines whether a report is currently being generated.
            </summary>
      <remarks>
        <para>Use this property to determine whether the control is currently busy generating a report.</para>
        <para>This property is especially useful when the <see cref="P:C1.C1Report.C1Report.DoEvents" /> property is set to true. 
            In this case, the application continues to process user input while the control generates reports, 
            and there is a change that the user might try to start another report before the current one is done.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Tag">
      <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ParentReport">
      <summary>
            Gets the main report that contains this subreport (null for main reports).
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Document">
      <summary>
            Gets a <see cref="T:System.Drawing.Printing.PrintDocument" /> object that can be used to render the report to a printer or 
            into a print preview control.
            </summary>
      <example>
            The examples below show how you can use the <see cref="P:C1.C1Report.C1Report.Document" /> property to print the report 
            or show it in a <see cref="T:System.Windows.Forms.PrintPreviewDialog" /> control.
            <code>
            // print the report to the default printer
            _c1r.Document.Print();
            
            // show the report in a PrintPreviewDialog
            PrintPreviewDialog p = new PrintPreviewDialog():
            p.Document = _c1r.Document;
            p.ShowDialog();
            </code></example>
    </member>
    <member name="P:C1.C1Report.C1Report.PageImages">
      <summary>
            Gets a list of <see cref="T:System.Drawing.Imaging.Metafile" /> objects that correspond to the pages in the report.
            Using this property on large reports is not recommended as it creates images for all pages at once 
            and thus can exhaust system resources. Instead, use <see cref="M:C1.C1Report.C1Report.GetPageImages" />,
            <see cref="M:C1.C1Report.C1Report.GetPageImage(System.Int32)" /> and <see cref="M:C1.C1Report.C1Report.GetPageCount" /> methods.
            </summary>
      <remarks>
            Use the <see cref="M:C1.C1Report.C1Report.Render" /> method to create or refresh the page images.
            </remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageImages" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageImage(System.Int32)" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageCount" />
    </member>
    <member name="P:C1.C1Report.C1Report.C1Document">
      <summary>
            Gets a <see cref="T:C1.C1Preview.C1PrintDocument" /> object that represents content of the report.
            Note that getting this property causes the report to render if it has not rendered yet.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Groups">
      <summary>
            Gets a collection with all the groups in the report.
            </summary>
      <remarks>
        <para>The <b>Groups</b> collection contains all <see cref="T:C1.C1Report.Group" /> objects defined in the current report.</para>
        <para>Removing a <b>Group</b> from the collection also removes its associated header and footer sections, as well 
            as any fields in those sections.</para>
        <para>Adding a <b>Group</b> to the collection adds the corresponding group header and footer sections to the report.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Sections">
      <summary>
            Gets the collection of <see cref="T:C1.C1Report.Section" /> objects in the report definition.
            </summary>
      <remarks>
            This collection always contains at least five items, which correspond to the standard report 
            sections that are always present: Detail, Header, Footer, PageHeader, and PageFooter.
            </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Fields">
      <summary>
            Gets the collection of <see cref="T:C1.C1Report.Field" /> objects in the report definition.
            </summary>
      <remarks>
            The <see cref="T:C1.C1Report.Section" /> object also contains a collection of fields in that section.
            </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.ReportDefinition">
      <summary>
            Gets or sets an Xml string containing the complete report definition.
            </summary>
      <remarks>
            This property can be used to store report definitions into databases, to place them in the clipboard, 
            or to copy reports from one <see cref="T:C1.C1Report.C1Report" /> component to another.
            </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OutlineRootLevel">
      <summary>
            Gets or sets the starting outline level for the groups in this report.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.C1Report.C1Report" /> creates an outline based on the report groups. 
            The outline starts at level zero, and is visible in PDF versions of the report.</para>
        <para>This property allows you to start the report at a custom level, which can be useful 
            if you are rendering multiple reports into a larger document (using C1PrintDocument for example).</para>
        <para>You can set this property to -1 to suppress the outline.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.LabelOffset">
      <summary>
            Gets or sets the position of the first label on a partially used sheet.
            </summary>
      <remarks>
            This property allows you to print labels on partially used label sheets. For example, 
            if you have a sheet with 12 labels and have already used 5, set the <b>LabelOffset</b> 
            property to 6 in order to skip the labels that have already been used.
            </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.GrowShrinkMode">
      <summary>
            Gets or sets the method used to process CanGrow/CanShrink fields.
            </summary>
      <remarks>
        <para>If this property is set to <see cref="F:C1.C1Report.GrowShrinkModeEnum.C1Report" />, fields with 
            <see cref="P:C1.C1Report.Field.CanGrow" /> or <see cref="P:C1.C1Report.Field.CanShrink" /> properties set to true will move fields directly 
            below them when they grow or shrink. Fields located below but off to the side are not moved.</para>
        <para>If this property is set to <see cref="F:C1.C1Report.GrowShrinkModeEnum.Access" />, fields that grow or shrink will 
            affect all fields below, even those which are not directly under the field that was modified as a result of 
            <b>CanGrow</b>/<b>CanShrink</b>. (This is the Microsoft Access behavior).</para>
        <para>For example, if fields are arranged in a grid layout and <see cref="P:C1.C1Report.C1Report.GrowShrinkMode" /> is set to 
            <see cref="F:C1.C1Report.GrowShrinkModeEnum.Access" />, fields within each row will remain vertically aligned when fields 
            above them grow or shrink.</para>
        <para>If <see cref="P:C1.C1Report.C1Report.GrowShrinkMode" /> is set to <see cref="F:C1.C1Report.GrowShrinkModeEnum.C1Report" />, fields within each 
            column will move independently of fields in other columns, and fields within each row will not remain vertically 
            aligned.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.IgnoreScriptErrors">
      <summary>
            Specifies whether the component should ignore script errors by default.
            </summary>
      <remarks>
        <para>When the script interpreter finds an error in a script or expression, the 
            component raises the <see cref="E:C1.C1Report.C1Report.ReportError" /> event. This property specifies
            the default value for the <b>Handled</b> parameter in that event.</para>
        <para>If <b>IgnoreScriptErrors</b> is set to true, script errors are ignored
            by default (the <b>Handled</b> parameter is initialized to true).</para>
        <para>If <b>IgnoreScriptErrors</b> is set to false, script errors throw
            exceptions by default (the <b>Handled</b> parameter is initialized to false).</para>
        <para>In either case, the <see cref="E:C1.C1Report.C1Report.ReportError" /> event handler may override 
            the default by changing the value of the <b>Handled</b> parameter.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.ExposeScriptObjects">
      <summary>
            Specifies whether script objects added with the <see cref="M:C1.C1Report.C1Report.AddScriptObject(System.String,System.Object)" /> 
            method should be exposed to subreports.
            </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.RecordsPerPage">
      <summary>
            Gets or sets the number of detail records to render per page or group.
            </summary>
      <remarks>
        <para>This is useful when printing forms that must have a specific number of rows.</para>
        <para>If the number of records is greater than the value specified, group or page breaks 
            are added to limit the number of records rendered in each group of detail sections.</para>
        <para>If the number of detail records is smaller than the value specified, blank
            records are added so the group of detail sections has the specified number of records.</para>
        <para>If this property is set to zero (the default value), then it has no
            effect.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.AvailableHeight">
      <summary>
            Gets the height of the remaining area available for sections on the current page.
            This property can only be used while the report is being rendered (i.e. when <see cref="P:C1.C1Report.C1Report.IsBusy" /> is true),
            at other times a value of <b>-1</b> is returned.
            Note that if used in OnPrint/OnFormat scripts, this value does NOT yet account for the current section.
            </summary>
      <remarks>
            Here is an example of code which can be used in the detail section's OnFormat script
            to determine whether the current detail section will be the last one printed on the page
            (the test checks that the current section will fit onto the page while the next section won't):
            <code>
            h = Detail.RenderHeight
            ah = Report.AvailableHeight
            if (h &lt; ah) and (2 * h &gt; ah) then
              Detail.BackColor = RGB(255, 0, 0) ' last on page
            else
              Detail.BackColor = RGB(255, 255, 255)
            endif
            </code></remarks>
    </member>
    <member name="T:C1.C1Report.C1Report.EditExpressionDelegate">
      <summary>
            Type of delegate used to specify custom handlers for script editors.
            </summary>
      <remarks>
        <para>When <see cref="T:C1.C1Report.C1Report" /> component is used with a <see cref="T:System.Windows.Forms.PropertyGrid" /> 
            control, the property grid uses custom type editors to provide user interface elements 
            for editing scripts, statements, and data source properties.</para>
        <para>This delegate allows report designer applications to provide their own user 
            interface for editing these elements.</para>
        <para>For examples of how these delegates are used, please see the source code
            for the <b>C1ReportDesigner</b> application, included with the C1Report Designer
            Edition.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.C1Report.EditDataSourceDelegate">
      <summary>
            Type of delegate used to specify custom handlers for data source editors.
            </summary>
      <remarks>
        <para>When <see cref="T:C1.C1Report.C1Report" /> component is used with a <see cref="T:System.Windows.Forms.PropertyGrid" /> 
            control, the property grid uses custom type editors to provide user interface elements 
            for editing scripts, statements, and data source properties.</para>
        <para>This delegate allows report designer applications to provide their own user 
            interface for editing these elements.</para>
        <para>For examples of how these delegates are used, please see the source code
            for the <b>C1ReportDesigner</b> application, included with the C1Report Designer
            Edition.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.ReportEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:C1.C1Report.C1Report.StartPage" />, <see cref="E:C1.C1Report.C1Report.EndPage" />, 
            <see cref="E:C1.C1Report.C1Report.StartSection" />, <see cref="E:C1.C1Report.C1Report.PrintSection" />, <see cref="E:C1.C1Report.C1Report.EndSection" />,
            <see cref="E:C1.C1Report.C1Report.ReportError" />, and <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" /> events.
            </summary>
    </member>
    <member name="T:C1.C1Report.ReportEventArgs">
      <summary>
            Provides data for <see cref="E:C1.C1Report.C1Report.StartPage" />, <see cref="E:C1.C1Report.C1Report.EndPage" />, <see cref="E:C1.C1Report.C1Report.StartSection" />, 
            <see cref="E:C1.C1Report.C1Report.PrintSection" />, <see cref="E:C1.C1Report.C1Report.EndSection" />, <see cref="E:C1.C1Report.C1Report.ReportError" />, and
            <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" /> events.
            </summary>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Page">
      <summary>
            The current page.
            </summary>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Section">
      <summary>
            The current section.
            </summary>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Exception">
      <summary>
        <see cref="F:C1.C1Report.ReportEventArgs.Exception" /> that caused the error.
            </summary>
      <remarks>
            This property is only used with the <see cref="E:C1.C1Report.C1Report.ReportError" /> event.
            </remarks>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Handled">
      <summary>
            Gets or sets a value that indicates whether the component should throw the <see cref="F:C1.C1Report.ReportEventArgs.Exception" /> 
            that was detected or whether it should ignore the error and continue rendering the report.
            </summary>
      <remarks>
            This property is only used with the <see cref="E:C1.C1Report.C1Report.ReportError" /> event.
            </remarks>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Text">
      <summary>
            Gets or sets the text that will be used as an outline entry.
            </summary>
      <remarks>
            This property is only used with the <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" /> event.
            </remarks>
    </member>
    <member name="T:C1.C1Report.DialogEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" /> event.
            </summary>
    </member>
    <member name="T:C1.C1Report.DialogEventArgs">
      <summary>
            Provides data for <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" /> event.
            </summary>
    </member>
    <member name="F:C1.C1Report.DialogEventArgs.Dialog">
      <summary>
            Reference to a <see cref="T:C1.C1Report.DialogEventArgs" /> that is about to be displayed.
            </summary>
    </member>
    <member name="F:C1.C1Report.DialogEventArgs.ShowDialog">
      <summary>
            Gets or sets a value that determines whether the component should display the parameters dialog.
            </summary>
    </member>
    <member name="F:C1.C1Report.DialogEventArgs.Parameters">
      <summary>
            Gets the collection of parameters defined by the report.
            </summary>
      <remarks>
            TODO
            </remarks>
    </member>
    <member name="T:C1.C1Report.AddOutlineEntryHandler">
      <summary>
            Represents the method that will handle the <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" /> event.
            </summary>
    </member>
    <member name="T:C1.C1Report.ReportInfo">
      <summary>
            Class that contains report metadata.
            </summary>
      <remarks>
        <para>Reports may include general information such as a title, author, and keywords.</para>
        <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.ReportInfo.Clear">
      <summary>
            Clears the <see cref="T:C1.C1Report.ReportInfo" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Report.ReportInfo.Clone">
      <summary>
            Returns a copy of this <see cref="T:C1.C1Report.ReportInfo" /> object.
            </summary>
      <returns>A copy of this <see cref="T:C1.C1Report.ReportInfo" /> object.</returns>
    </member>
    <member name="M:C1.C1Report.ReportInfo.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:C1.C1Report.ReportInfo" /> object.
            </summary>
      <returns>Returns a string that represents the current <see cref="T:C1.C1Report.ReportInfo" /> object.</returns>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Author">
      <summary>
            Gets or sets the name of the person that created the report.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Title">
      <summary>
            Gets or sets the title of the report.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Subject">
      <summary>
            Gets or sets the subject of the report.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Keywords">
      <summary>
            Gets or sets keywords associated with the report.
            </summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Creator">
      <summary>
            Gets or sets the name of the application that created the report.
            </summary>
    </member>
    <member name="T:C1.C1Report.IReportScriptContext">
      <summary>
            Represents a local context for script evaluation and execution.
            </summary>
    </member>
    <member name="M:C1.C1Report.IReportScriptContext.GetObjectByName(System.String)">
      <summary>
            Retrieves an object by its name.
            </summary>
      <param name="name">The name of the object to get.</param>
      <returns>The named object.</returns>
    </member>
    <member name="M:C1.C1Report.IReportScriptContext.IsNameDefined(System.String)">
      <summary>
            Tests whether the specified name exists in the current context.
            If a certain name is defined by the context (i.e. this method returns true),
            the named object will be retrieved from the context even if a similarly named object
            already exists.
            </summary>
      <param name="name">The name to test.</param>
      <returns>True if the name exists in the context, false otherwise.</returns>
    </member>
    <member name="T:C1.C1Report.SectionTypeEnum">
      <summary>
            Specifies the section type, which is equivalent to a the index of a <see cref="T:C1.C1Report.Section" /> object
            in the control's <see cref="P:C1.C1Report.C1Report.Sections" /> collection. 
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.C1Report.Field.Section" /> and 
            <see cref="P:C1.C1Report.Section.Type" /> properties.
            </remarks>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Undefined">
      <summary>
            Undefined. This setting indicates the field doesn't belong to any sections and should not be rendered.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Detail">
      <summary>
            Detail section: repeated for every record in the source recordset.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Header">
      <summary>
            Report header section: appears once, in the beginning of the report.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Footer">
      <summary>
            Report footer section: appears once, in the end of the report.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.PageHeader">
      <summary>
            Page header section: appears at the top of every page, subject to the setting of the 
            <see cref="P:C1.C1Report.Layout.PageHeader" /> property.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.PageFooter">
      <summary>
            Page footer section: appears at the bottom of every page, subject to the setting of the 
            <see cref="P:C1.C1Report.Layout.PageFooter" /> property.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader1">
      <summary>
            Group header section: appears before level-one groups.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter1">
      <summary>
            Group footer section: appears after level-one groups.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader2">
      <summary>
            Group header section: appears before level-two groups.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter2">
      <summary>
            Group footer section: appears after level-two groups.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader3">
      <summary>
            Group header section: appears before level-three groups.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter3">
      <summary>
            Group footer section: appears after level-three groups.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader4">
      <summary>
            Group header section: appears before level-four groups.
            </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter4">
      <summary>
            Group footer section: appears after level-four groups.
            </summary>
    </member>
    <member name="T:C1.C1Report.Section">
      <summary>
            Represents a report band.
            </summary>
      <remarks>
        <para>Each <b>Section</b> object contains a collection of fields objects that display individual data items 
            within the section.</para>
        <para>Every report contains the following sections:</para>
        <para>A <b>detail</b> section.</para>
        <para>A <b>report header</b> and a <b>report footer</b> section.</para>
        <para>A <b>page header</b> and a <b>page footer</b> section.</para>
        <para>A <b>group header</b> and a <b>group footer</b> section for each <see cref="T:C1.C1Report.Group" /> object in the report.</para>
        <para>The total number of sections in a report is therefore <code>5 + 2 * Groups.Count</code>. Sections cannot
            be added and removed from reports directly. The number of sections is a function of the number of groups.</para>
        <para>Although sections cannot be removed, they can be hidden by setting their <see cref="P:C1.C1Report.Section.Visible" /> property
            to false.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.Name">
      <summary>
            Gets or sets the <see cref="T:C1.C1Report.Section" /> name.
            </summary>
      <remarks>
        <para>The section name can be used as an index into the control's <see cref="P:C1.C1Report.C1Report.Sections" /> collection.</para>
        <para>Section names are also used to identify fields in <b>VBScript</b> expressions.</para>
        <para>Duplicate and empty section names are allowed, but should be avoided if you plan to use the section names 
            in scripts or as indexers.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.Visible">
      <summary>
            Specifies whether the <see cref="T:C1.C1Report.Section" /> will be rendered in the report.
            </summary>
    </member>
    <member name="P:C1.C1Report.Section.Type">
      <summary>
            Returns the <see cref="T:C1.C1Report.Section" /> type (e.g., PageHeader, Detail).
            </summary>
      <seealso cref="T:C1.C1Report.SectionTypeEnum" />
    </member>
    <member name="P:C1.C1Report.Section.Fields">
      <summary>
            Returns a collection of all fields in this <see cref="T:C1.C1Report.Section" />.
            </summary>
      <remarks>
        <para>The <b>Fields</b> collection contains all <see cref="T:C1.C1Report.Field" /> objects defined in the current section.</para>
        <para>When you add a field to a section's <b>Fields</b> collection, the field is automatically assigned to the 
            section that owns the collection. For example, the code below adds a field to the <b>Detail</b> section:</para>
        <code>
            _c1r.Sections.Detail.Fields.Add("new field", "CompanyLogo", rc);
            </code>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.Tag">
      <summary>
            Gets or sets extra data used by the calling program.
            </summary>
    </member>
    <member name="P:C1.C1Report.Section.ParentReport">
      <summary>
            Gets the <see cref="T:C1.C1Report.C1Report" /> object that contains this <see cref="T:C1.C1Report.Section" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.Section.Height">
      <summary>
            Gets or sets the <see cref="T:C1.C1Report.Section" /> height, in twips.
            </summary>
      <remarks>
        <para>The height of a section should be large enough to accommodate all fields in the section.</para>
        <para>The Report Designer automatically adjusts section heights when fields are added, moved, or resized.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.RenderHeight">
      <summary>
            Returns the height of the section after the <see cref="P:C1.C1Report.Section.CanGrow" /> and <see cref="P:C1.C1Report.Section.CanShrink" /> 
            properties have been applied to the section.
            </summary>
      <remarks>
        <para>When a section grows or shrinks, its <see cref="P:C1.C1Report.Section.Height" /> property does not change.</para>
        <para>If you need to retrieve the actual height that will be used for rendering the section 
            (for example, while handling the <see cref="P:C1.C1Report.Section.OnPrint" /> event), use the <see cref="P:C1.C1Report.Section.RenderHeight" /> 
            property instead.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.KeepTogether">
      <summary>
            Specifies whether the <see cref="T:C1.C1Report.Section" /> should be kept together on a page.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.C1Report.Group" /> and <see cref="T:C1.C1Report.Field" /> objects also have <b>KeepTogether</b> properties.</para>
        <para>The <see cref="T:C1.C1Report.Group" /> object's <see cref="P:C1.C1Report.Group.KeepTogether" /> property works across sections. 
            It determines whether group headers should be kept together with their first detail section or whether entire 
            groups should be kept together on a page.</para>
        <para>The <see cref="T:C1.C1Report.Field" /> object's <see cref="P:C1.C1Report.Field.KeepTogether" /> property determines whether the
            field should be rendered on a single page or whether it is allowed to be split across page breaks.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.ForcePageBreak">
      <summary>
            Specifies whether page breaks should be inserted before and/or after the section is rendered.
            </summary>
      <seealso cref="T:C1.C1Report.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.C1Report.Section.CanGrow">
      <summary>
            Specifies whether the Section height should be automatically increased to fit its contents.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Report.Section.CanGrow" /> and <see cref="P:C1.C1Report.Section.CanShrink" /> properties to control the 
            appearance of report sections and fields.</para>
        <para>For example, if you set both properties to true, a section or field automatically adjusts 
            vertically to print or preview all the data it contains.</para>
        <para>Sections grow and shrink vertically across their entire width.</para>
        <para>When a section grows or shrinks, its <see cref="P:C1.C1Report.Section.Height" /> property does not change. 
            To retrieve the actual rendering height, use the <see cref="P:C1.C1Report.Section.RenderHeight" /> property.</para>
        <para>You can make fields grow or shrink to match the size of the section by setting their 
            <see cref="P:C1.C1Report.Field.Anchor" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.CanShrink">
      <summary>
            Specifies whether the <see cref="T:C1.C1Report.Section" /> height should be reduced when one or more fields shrink.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Report.Section.CanGrow" /> and <see cref="P:C1.C1Report.Section.CanShrink" /> properties to control the layout of 
            report sections and fields.</para>
        <para>For example, if you set both properties to true, a section or field automatically adjusts vertically 
            to print or preview all the data it contains.</para>
        <para>When a section grows or shrinks, its <see cref="P:C1.C1Report.Section.Height" /> property does not change. To retrieve the 
            actual (adjusted) height, use the <see cref="P:C1.C1Report.Section.RenderHeight" /> property.</para>
        <para>You can make fields grow or shrink to match the size of the section by setting their <see cref="P:C1.C1Report.Field.Anchor" /> 
            property.</para>
      </remarks>
      <seealso cref="P:C1.C1Report.Section.CanGrow" />
    </member>
    <member name="P:C1.C1Report.Section.Repeat">
      <summary>
            For group header and group footer sections only,
            gets or sets a value indicating whether the current section should be repeated
            at the top of each page. The default is <b>false</b>.
            </summary>
      <remarks>
        <para>This property only applies to group header and group footer sections.</para>
        <para>Set this value to true to repeat the group header page at the top of every page, before the detail sections.</para>
        <para>If you have multiple groups, all group header sections that have the <b>Repeat</b> property set to true will 
            be rendered at the top of each page.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.PrintAtPageBottom">
      <summary>
            For master report's footer sections only, gets or sets a value
            indicating whether the current section should print at the bottom
            of the page immediately above the page footer, rather than right
            below the detail. The default is <b>false</b>.
            <para>
            This property is ignored for non-footer sections or for footers
            of sub-reports.
            </para></summary>
    </member>
    <member name="P:C1.C1Report.Section.BackColor">
      <summary>
            Gets or sets the background color for this <see cref="T:C1.C1Report.Section" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.Section.OnFormat">
      <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.C1Report.Section" /> is formatted.
            </summary>
      <remarks>
        <para>This property contains <b>VBScript</b> instructions to be executed before the fields in the section 
            are calculated. When this script is executed, the recordset already holds the data that will be displayed 
            in the section, but the field values have not been updated yet.</para>
        <para>Use this event to assign values to fields before they are calculated, so the new values will be taken 
            into account when the control calculates the field's size and position when the <see cref="P:C1.C1Report.Section.CanGrow" /> or 
            <see cref="P:C1.C1Report.Section.CanShrink" /> properties are set to true.</para>
        <para>If you want to set field properties based on the field's current value, use the <see cref="P:C1.C1Report.Section.OnPrint" /> 
            property instead.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.OnPrint">
      <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.C1Report.Section" /> is printed 
            (after it is formatted).
            </summary>
      <remarks>
            This property contains <b>VBScript</b> instructions that get executed after the fields in the section 
            have been calculated.
            </remarks>
    </member>
    <member name="T:C1.C1Report.SectionCollection">
      <summary>
            Collection of the <see cref="T:C1.C1Report.Section" /> objects. 
            </summary>
    </member>
    <member name="M:C1.C1Report.SectionCollection.CopyTo(C1.C1Report.Section[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements 
            copied from collection. (The array must have zero-based indexing).</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:C1.C1Report.SectionCollection.Contains(C1.C1Report.Section)">
      <summary>
            Determines whether the collection contains a specific <see cref="T:C1.C1Report.Section" />.
            </summary>
      <param name="s">The <see cref="T:C1.C1Report.Section" /> object.</param>
      <returns>True if the collection contains specified section; false otherwise.</returns>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Item(System.Int32)">
      <summary>
            Returns a section from a <see cref="P:C1.C1Report.C1Report.Sections" /> collection.
            </summary>
      <remarks>
            The index parameter may be an integer between zero and <see cref="P:C1.C1Report.SectionCollection.Count" />-1.
            </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Item(C1.C1Report.SectionTypeEnum)">
      <summary>
            Returns a section from a <see cref="P:C1.C1Report.C1Report.Sections" /> collection.
            </summary>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Item(System.String)">
      <summary>
            Returns a section from a <see cref="P:C1.C1Report.C1Report.Sections" /> collection.
            </summary>
      <remarks>
            The name parameter may be a string containing a section name.
            </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Detail">
      <summary>
            Returns a reference to the detail section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Detail].
            </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Header">
      <summary>
            Returns a reference to the report header section. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Header]
            </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Footer">
      <summary>
            Returns a reference to the report footer section. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Footer].
            </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.PageHeader">
      <summary>
            Returns a reference to the page header section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.PageHeader].
            </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.PageFooter">
      <summary>
            Returns a reference to the page footer section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.PageFooter].
            </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Count">
      <summary>
            Returns the number of elements in the collection.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.C1Report.SectionCollection" /> class does not have <b>Add</b> or <b>Remove</b> methods.</para>
        <para>That is because the number of sections in a report is determined by then number of groups. 
            To add or remove sections from the report, you need to add or remove groups.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.ShapeBase">
      <summary>
            Abstract base class for shapes rendered by report fields
            (see <see cref="P:C1.C1Report.Field.ShapeType" /> and <see cref="!:Shape" />).
            </summary>
    </member>
    <member name="M:C1.C1Report.ShapeBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.ShapeBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Report.ShapeBase.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Report.ShapeBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Report.ShapeBase.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Report.ShapeBase" /> object.
            Property <see cref="P:C1.C1Report.ShapeBase.Owner" /> is not copied and value of <see cref="P:C1.C1Report.ShapeBase.Owner" /> property
            is null.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Report.ShapeBase" /> object.</returns>
    </member>
    <member name="P:C1.C1Report.ShapeBase.ShapeType">
      <summary>
            Gets the type of the current shape.
            </summary>
    </member>
    <member name="P:C1.C1Report.ShapeBase.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Report.Field" /> owning the current <see cref="T:C1.C1Report.ShapeBase" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Report.LineShapeBase">
      <summary>
            Abstract base class for <see cref="T:C1.C1Report.LineShape" /> and <see cref="!:PolygonShape" /> classes.
            </summary>
    </member>
    <member name="M:C1.C1Report.LineShapeBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.LineShapeBase" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Report.LineShape">
      <summary>
            Represents a line shape in a <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="M:C1.C1Report.LineShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.LineShape" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Report.LineShape.#ctor(C1.C1Report.LineSlantEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.LineShape" /> class.
            </summary>
      <param name="lineSlant">Specifies the line slant to use.</param>
    </member>
    <member name="M:C1.C1Report.LineShape.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Report.ShapeBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Report.LineShape.ShapeType">
      <summary>
            Overridden. Gets <see cref="F:C1.C1Report.ShapeType.Line" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.LineShape.LineSlant">
      <summary>
            Gets or sets a value specifying how the line should be drawn within the field.
            </summary>
    </member>
    <member name="T:C1.C1Report.TriangleShapeBase">
      <summary>
            Abstract base class for <see cref="T:C1.C1Report.IsoscelesTriangleShape" /> and <see cref="T:C1.C1Report.RightTriangleShape" /> types.
            </summary>
    </member>
    <member name="M:C1.C1Report.TriangleShapeBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.TriangleShapeBase" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Report.IsoscelesTriangleShape">
      <summary>
            Represents an isosceles triangle shape in a <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="M:C1.C1Report.IsoscelesTriangleShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.IsoscelesTriangleShape" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Report.IsoscelesTriangleShape.ShapeType">
      <summary>
            Overridden. Gets <see cref="F:C1.C1Report.ShapeType.IsoscelesTriangle" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.RightTriangleShape">
      <summary>
            Represents a rectangular triangle shape in a <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="M:C1.C1Report.RightTriangleShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.RightTriangleShape" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Report.RightTriangleShape.ShapeType">
      <summary>
            Overridden. Gets <see cref="F:C1.C1Report.ShapeType.RightTriangle" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.RectangleShape">
      <summary>
            Represents a rectangle shape in a <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="M:C1.C1Report.RectangleShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.RectangleShape" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Report.RectangleShape.ShapeType">
      <summary>
            Overridden. Gets <see cref="F:C1.C1Report.ShapeType.Rectangle" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.EllipseShape">
      <summary>
            Represents an ellipse shape in a <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="M:C1.C1Report.EllipseShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.EllipseShape" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Report.EllipseShape.ShapeType">
      <summary>
            Overridden. Gets <see cref="F:C1.C1Report.ShapeType.Ellipse" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.EllipsePartShape">
      <summary>
            Abstract base class for <see cref="T:C1.C1Report.ArcShape" /> and <see cref="T:C1.C1Report.PieShape" /> classes.
            </summary>
    </member>
    <member name="M:C1.C1Report.EllipsePartShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.EllipsePartShape" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Report.EllipsePartShape.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Report.ShapeBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Report.EllipsePartShape.StartAngle">
      <summary>
            Gets or sets the angle, measured in degrees, clockwise from the <b>X</b> axis
            to the first side of the sector defining the current shape.
            </summary>
    </member>
    <member name="P:C1.C1Report.EllipsePartShape.SweepAngle">
      <summary>
            Gets or sets the angle, measured in degrees, clockwise from <see cref="P:C1.C1Report.EllipsePartShape.StartAngle" />
            to the second side of the sector defining the current shape.
            </summary>
    </member>
    <member name="T:C1.C1Report.ArcShape">
      <summary>
            Represents an arc shape in a <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="M:C1.C1Report.ArcShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.ArcShape" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Report.ArcShape.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Report.ShapeBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Report.ArcShape.ShapeType">
      <summary>
            Overridden. Gets <see cref="F:C1.C1Report.ShapeType.Arc" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.ArcShape.Closed">
      <summary>
            Gets or sets a value indicating whether the current arc should be closed
            (i.e. the start and end points of the arc should be connected by a straight line).
            </summary>
      <remarks>
            The default value of this property is <b>false</b>.
            </remarks>
    </member>
    <member name="T:C1.C1Report.PieShape">
      <summary>
            Represetns a pie shape in a <see cref="T:C1.C1Report.C1Report" />.
            </summary>
    </member>
    <member name="M:C1.C1Report.PieShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.PieShape" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Report.PieShape.ShapeType">
      <summary>
            Overridden. Gets <see cref="F:C1.C1Report.ShapeType.Pie" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.Util.FontHolder">
      <summary>
            Encapsulates a <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object and provides get/set access to the font properties. 
            </summary>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.#ctor(System.Drawing.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Report.Util.FontHolder" /> class.
            </summary>
      <param name="font">The <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object used to initialize the <b>FontHolder</b>.</param>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.op_Implicit(C1.C1Report.Util.FontHolder)~System.Drawing.Font">
      <summary>
            Converts a <see cref="T:C1.C1Report.Util.FontHolder" /> object to a <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object.
            </summary>
      <param name="fontHolder">The <see cref="T:C1.C1Report.Util.FontHolder" /> object.</param>
      <returns>
        <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object.</returns>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.op_Implicit(System.Drawing.Font)~C1.C1Report.Util.FontHolder">
      <summary>
            Converts a <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object to a <see cref="T:C1.C1Report.Util.FontHolder" /> object.
            </summary>
      <param name="f">The <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object.</param>
      <returns>New <see cref="T:C1.C1Report.Util.FontHolder" /> object whose <see cref="P:C1.C1Report.Util.FontHolder.Font" /> property is equal to supplied font object.</returns>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.ToString">
      <summary>
            Gets a string that represents this <see cref="T:C1.C1Report.Util.FontHolder" />.
            </summary>
      <returns>A string that represents this <see cref="T:C1.C1Report.Util.FontHolder" />.</returns>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Name">
      <summary>
            Gets or sets the name of the encapsulated <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Size">
      <summary>
            Gets or sets the <see cref="P:System.Drawing.Font.Size" /> of the encapsulated <see cref="P:C1.C1Report.Util.FontHolder.Font" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Bold">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Report.Util.FontHolder.Font" /> is bold.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Italic">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Report.Util.FontHolder.Font" /> is italic.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Underline">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Report.Util.FontHolder.Font" /> is underlined.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Strikethrough">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Report.Util.FontHolder.Font" /> has a horizontal line
            through the text.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.GdiCharSet">
      <summary>
            Gets or sets the GDI character set used by the encapsulated <see cref="P:C1.C1Report.Util.FontHolder.Font" />.
            </summary>
    </member>
    <member name="T:C1.C1Report.Util.Misc">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Report.Util.Misc.IsBracket(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Report.Util.Misc.Unbracket(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Report.Util.Misc.Bracket(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Report.Util.Misc.BracketSqlObject(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Report.Util.PictureHolder">
      <summary>
            Encapsulates an <see cref="P:C1.C1Report.Util.PictureHolder.Image" /> object and provides methods for loading images from 
            image files or from binary database fields.
            </summary>
      <remarks>
            A <see cref="T:C1.C1Report.Util.PictureHolder" /> object may contain an unbound image (from a file or URL),
            or the name of a database field that contains images.
            </remarks>
    </member>
    <member name="M:C1.C1Report.Util.PictureHolder.op_Implicit(C1.C1Report.Util.PictureHolder)~System.Drawing.Image">
      <summary>
            Converts a <see cref="T:C1.C1Report.Util.PictureHolder" /> object into an <see cref="P:C1.C1Report.Util.PictureHolder.Image" /> object.
            </summary>
      <param name="picHolder">The <see cref="T:C1.C1Report.Util.PictureHolder" /> object.</param>
      <returns>An <see cref="P:C1.C1Report.Util.PictureHolder.Image" /> object.</returns>
    </member>
    <member name="M:C1.C1Report.Util.PictureHolder.GetDefaultPath">
      <summary>
            For internal use.
            Gets the default path for image and other files.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Report.Util.PictureHolder.ToString">
      <summary>
            Gets a string that represents this <see cref="T:C1.C1Report.Util.PictureHolder" />.
            </summary>
      <returns>A string that represents this <see cref="T:C1.C1Report.Util.PictureHolder" />.</returns>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.IsBound">
      <summary>
            Gets a value that indicates whether this <see cref="T:C1.C1Report.Util.PictureHolder" /> is bound to a database field that contains images.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.IsUrl">
      <summary>
            Gets a value that indicates whether this <see cref="T:C1.C1Report.Util.PictureHolder" /> contains an image URL.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.IsEmpty">
      <summary>
            Gets a value that indicates whether this <see cref="T:C1.C1Report.Util.PictureHolder" /> is empty.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.FieldName">
      <summary>
            Gets the name of the database field from which this <see cref="T:C1.C1Report.Util.PictureHolder" /> will load images.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.Image">
      <summary>
            Gets the <see cref="P:C1.C1Report.Util.PictureHolder.Image" /> loaded by this <see cref="T:C1.C1Report.Util.PictureHolder" />.
            </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.Url">
      <summary>
            Gets the URL that contains the <see cref="P:C1.C1Report.Util.PictureHolder.Image" /> loaded by this <see cref="T:C1.C1Report.Util.PictureHolder" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.IDataHandler">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.BeginDataEnumeration">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.EndDataEnumeration">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.First">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.MoveNext">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.BeginGroupEnumeration">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.EndGroupEnumeration">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GroupFirst">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GroupMoveNext">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GetValue(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="fieldName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.CreateGroupDataHandler(C1.C1Preview.DataBinding.C1DataBinding)">
      <summary>
            For internal use only.
            </summary>
      <param name="owner">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GetFields(C1.C1Preview.DataBinding.FieldCollection)">
      <summary>
            For internal use only.
            </summary>
      <param name="fields">
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GetPosition">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.SetPosition(C1.C1Preview.DataBinding.DataHandlerPosition)">
      <summary>
            For internal use only.
            </summary>
      <param name="position">
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.IsOnLastRecord">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDataHandler.Owner">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDataHandler.DataEnumerationStarted">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDataHandler.RowNumber">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dbExportProvider">
      <summary>
            Represents a <see cref="T:C1.C1Preview.C1PrintDocument" />'s native C1DB format <see cref="T:C1.C1Preview.Export.ExportProvider" />.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.ExportProvider">
      <summary>
            The abstract base class describing a supported export format.
            All export providers describing specific formats (such as PDF or HTML) derive from this class.
            For the list of all available export providers, see <see cref="P:C1.C1Preview.Export.ExportProviders.RegisteredProviders" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by an <see cref="T:C1.C1Preview.Export.Exporter" /> associated with the current export provider
            (see <see cref="M:C1.C1Preview.Export.ExportProvider.NewExporter" />).
            The default implementation of this method returns <b>false</b>.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if the associated <see cref="T:C1.C1Preview.Export.Exporter" /> can export the specified object,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported
            by an <see cref="T:C1.C1Preview.Export.Exporter" /> associated with the current export provider
            (see <see cref="M:C1.C1Preview.Export.ExportProvider.NewExporter" />).
            <para>
            Note that if just the type is not enough to determine whether a document
            of that type can be exported (e.g. an array of objects can be exported
            by some exporters only if all objects in that array are images),
            this method returns <b>false</b>.
            Use <see cref="M:C1.C1Preview.Export.ExportProvider.CanExportObject(System.Object)" /> method to get a definitive value.
            </para></summary>
      <param name="documentType">The document type to test.</param>
      <returns>
        <b>true</b> if the associated <see cref="T:C1.C1Preview.Export.Exporter" /> can export documents of the specified type,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
            Tests whether the <see cref="T:C1.C1Preview.Export.Exporter" /> associated with the current export provider
            can handle the specified type of document pages' range.
            The default implementation of this method returns <b>true</b> if the specified range type
            is <see cref="F:C1.C1Preview.OutputRangeTypeEnum.All" />, <b>false</b> otherwise.
            </summary>
      <param name="range">The type of range to test.</param>
      <returns>
        <b>true</b> if the associated <see cref="T:C1.C1Preview.Export.Exporter" /> can handle the specified output range, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            When overridden in a derived class, returns an instance of a specialized class derived from <see cref="T:C1.C1Preview.Export.Exporter" />.
            </summary>
      <returns>Returns the newly created exporter.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.FormatKey">
      <summary>
            Gets the format key, which is an arbitrary string that should uniquely identify
            the current export provider/format.
            The default implementation returns the current <see cref="T:C1.C1Preview.Export.ExportProvider" />'s type name.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.FormatName">
      <summary>
            Gets a short description of the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.CanShowOptions">
      <summary>
            Gets a value indicating whether the associated <see cref="T:C1.C1Preview.Export.Exporter" />
            can show a dialog allowing the user to edit the export options.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit the export options by default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.C1ReportFileFormat">
      <summary>
            For <see cref="T:C1.C1Report.C1Report" />-specific export providers,
            gets the <see cref="T:C1.C1Report.FileFormatEnum" /> associated with the current provider.
            For other providers, returns <c>null</c>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            When overridden in a derived class, should return a value indicating
            whether, if a <see cref="T:C1.C1Preview.C1PrintDocument" /> is to be exported,
            it should be generated before exporting.
            Exporters that do not need the document to be generated,
            or might require custom generation, should return <b>false</b>.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by a <see cref="T:C1.C1Preview.Export.C1dbExporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported
            by a <see cref="T:C1.C1Preview.Export.C1dbExporter" />.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExportProvider.NewExporter">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.Export.C1dxExporter" />.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 1.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.FormatName">
      <summary>
            Gets a short description of the C1DX export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "c1db".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit the export options by default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dbExporter">
      <summary>
            Represents an object that can be used to export a document to C1DB format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dbExportProvider" />
    </member>
    <member name="T:C1.C1Preview.Export.C1dExporterBase">
      <summary>
            The abstract base class for <see cref="T:C1.C1Preview.Export.C1dExporter" /> and <see cref="T:C1.C1Preview.Export.C1dxExporter" /> classes.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dExporter" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.C1ExporterBase">
      <summary>
            The abstract base class for <see cref="T:C1.C1Preview.Export.C1dExporterBase" /> and <see cref="T:C1.C1Preview.Export.C1mdxExporter" /> classes.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dExporter" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
      <seealso cref="T:C1.C1Preview.Export.C1mdxExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.Exporter">
      <summary>
            The abstract base class for all exporter classes.
            An instance of an <see cref="T:C1.C1Preview.Export.Exporter" /> derived class is used to export a document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.Exporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.CanPreviewOutputFile">
      <summary>
            Tests whether <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" /> can be previewed.
            This (base) implementation uses <c>FindExecutable</c> API to find an appropriate executable,
            and returns a value indicating whether it has been found or not.
            <para>
            If you override this, you must also override <see cref="M:C1.C1Preview.Export.Exporter.PreviewOutputFile" />.
            </para></summary>
      <returns>
        <b>true</b> if the output file can be previewed, <b>false</b> otherwise.</returns>
      <seealso cref="M:C1.C1Preview.Export.Exporter.PreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.PreviewOutputFile">
      <summary>
            Previews <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />.
            This (base) implementation uses <c>System.Diagnostics.Process.Start()</c>
            to open the output file.
            <para>
            Override this if you override <see cref="M:C1.C1Preview.Export.Exporter.CanPreviewOutputFile" />.
            </para></summary>
      <seealso cref="M:C1.C1Preview.Export.Exporter.CanPreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.GetPageFileName(System.Int32)">
      <summary>
            Gets the file name (with path) for the file containing the specified page.
            Used only for export formats that save a page per file (e.g. TIFF).
            </summary>
      <param name="pageNo">The 1-based page number.</param>
      <returns>The output file name.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Exports a page of a document represented by a <see cref="T:System.Drawing.Imaging.Metafile" />.
            </summary>
      <param name="pageImage">The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the page to export.</param>
      <param name="metafileInfo">The <see cref="T:C1.C1Preview.C1MetafileInfo" /> containing information about the <paramref name="pageImage" />.</param>
      <param name="pageNo">The 1-based page number.</param>
      <param name="firstPage">
        <b>true</b> if <paramref name="pageImage" /> represents the first page of the document, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Reset">
      <summary>
            Resets the internal state of the exporter.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Clear">
      <summary>
            Resets the internal state of the exporter and all its public properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.OnDocumentChanged">
      <summary>
            Called after the <see cref="P:C1.C1Preview.Export.Exporter.Document" /> property has been changed.
            If you override this, make sure this base method also gets called.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.EnumeratePages">
      <summary>
            Processes (exports) all pages in the range to be exported.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.ConvertEmfPlusToEmfOnly">
      <summary>
            Indicates whether page metafiles of types <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" /> and <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />
            should be converted to <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" /> type before exporting.
            The base implementation returns <b>false</b>.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.InternalExport">
      <summary>
            Performs export to a disk file or to a stream.
            The destination (file or stream) is determined by which of the properties
            (<see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" /> or <see cref="P:C1.C1Preview.Export.Exporter.OutputStream" />) is non-<b>null</b>
            when this method executes.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.EnsureGeneratedDocument">
      <summary>
            Makes sure the <see cref="P:C1.C1Preview.Export.Exporter.Document" /> has been generated if it is an instance
            of the <see cref="T:C1.C1Preview.C1PrintDocument" /> or of the <see cref="T:C1.C1Report.C1Report" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            Can be overridden in a derived class to handle format-specific options.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            Can be overridden in a derived class to handle format-specific options.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" /> object to copy the options from.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Export(System.String)">
      <summary>
            Exports the object specified by the <see cref="P:C1.C1Preview.Export.Exporter.Document" /> property on the current exporter
            to the specified file.
            </summary>
      <param name="fileName">The name of the output file.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)">
      <summary>
            Exports the object specified by the <see cref="P:C1.C1Preview.Export.Exporter.Document" /> property on the current exporter
            to the specified <see cref="T:System.IO.Stream" />.
            <para>
            Note that some export formats do not support exporting to streams.
            Test the value returned by the <see cref="P:C1.C1Preview.Export.ExportProvider.CanExportToStream" /> property 
            on <see cref="P:C1.C1Preview.Export.Exporter.ExportProvider" /> prior to calling this method.
            </para></summary>
      <param name="stream">Stream object to store results of export.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.ShowOptionsDialog">
      <summary>
            Displays a dialog that allows the user to edit the export options.
            </summary>
      <returns>
        <b>true</b> if the dialog was displayed successfully and the user pressed <b>OK</b>, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OutputFileName">
      <summary>
            Gets the output file name.
            This property is set when the <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" /> method is called.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OutputStream">
      <summary>
            Gets the output stream.
            This property is set when the <see cref="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)" /> method is called.
            </summary>
    </member>
    <member name="E:C1.C1Preview.Export.Exporter.LongOperation">
      <summary>
            Occurs periodically during export.
            Allows to show progress and give the end user the ability to cancel the operation.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OutputFiles">
      <summary>
            Gets the list of files which were generated by the call to <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" />.
            Typically exporters produce a single file (e.g. <see cref="T:C1.C1Preview.Export.RtfExporter" />, <see cref="T:C1.C1Preview.Export.XlsExporter" />),
            but some (like <see cref="T:C1.C1Preview.Export.HtmlExporter" /> and <see cref="T:C1.C1Preview.Export.EmfExporter" />) may produce several files all of which 
            can be then accessed through this property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.DocumentInfo">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.Export.Exporter.DocumentInfo" /> object associated with the <see cref="P:C1.C1Preview.Export.Exporter.Document" />
            assigned to the current exporter.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ExportProvider">
      <summary>
            Gets an instance of a class derived from <see cref="P:C1.C1Preview.Export.Exporter.ExportProvider" />
            describing the export format associated with the current exporter.
            That instance can be used to retrieve static information about the current export format
            such as format description or default extension.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Document">
      <summary>
            Gets or sets the object representing the document that will be exported
            by the current exporter's <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" /> or <see cref="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)" /> methods.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Preview">
      <summary>
            Gets or sets a value indicating whether the exported document should be opened
            after exporting it to a disk file (using the <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" /> method).
            The application used to open the file is determined by the OS shell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ShowOptions">
      <summary>
            Gets or sets a value indicating whether the options dialog should be shown to the user
            before exporting the document.
            </summary>
      <seealso cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Range">
      <summary>
            Gets or sets the range of pages that is to be exported.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ReferenceGraphics">
      <summary>
            Specifies the <see cref="T:System.Drawing.Graphics" /> object used by export.
            For example, that <see cref="T:System.Drawing.Graphics" /> can be used to convert 
            <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" /> or <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />
            metafiles to <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" />.
            If this property is <b>null</b>, the screen device context is used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OptionsFormClass">
      <summary>
            Gets or sets the type of form that is used to edit export options.
            That form is shown when the <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" /> or the <see cref="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)" /> method is called
            if <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" /> is true.
            The form's type must be assignable to the type specified by the <see cref="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass" />
            property.
            </summary>
      <seealso cref="P:C1.C1Preview.Export.Exporter.OptionsFormClassName" />
      <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" />
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OptionsFormClassName">
      <summary>
            Gets or sets the type name of form that is used to edit export options.
            That form is shown when the <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" /> or the <see cref="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)" /> method is called
            if <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" /> is true.
            The form's type must be assignable to the type specified by the <see cref="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass" />
            property.
            </summary>
      <seealso cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />
      <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" />
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.DocumentInfoFormClass">
      <summary>
            Gets or sets the type of form that is used to edit the fields of <see cref="P:C1.C1Preview.Export.Exporter.DocumentInfo" /> class.
            That form can be invoked from the export options form (<see cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />).
            The form's type must be assignable to <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.RangeFormClass">
      <summary>
            Gets or sets the type of form that is used to enter the export output range.
            That form can be invoked from the export options form (<see cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />).
            The form's type must be assignable to <see cref="T:C1.C1Preview.Forms.OutputRangeForm" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ExporterBase.CanPreviewOutputFile">
      <summary>
            Overridden.
            Tests whether <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" /> can be previewed.
            Calls the base implementation, if that returns <b>false</b>,
            tries to create an instance of <c>C1.Win.C1Preview.C1PrintPreviewDialog</c>,
            returns <b>true</b> if succeeds.
            </summary>
      <returns>
        <b>true</b> if the output file can be previewed, <b>false</b> otherwise.</returns>
      <seealso cref="M:C1.C1Preview.Export.C1ExporterBase.PreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.C1ExporterBase.PreviewOutputFile">
      <summary>
            Overridden.
            Previews <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />.
            Tries to preview the output file, either using the OS shell or
            an own instance of <c>C1.Win.C1Preview.C1PrintPreviewDialog</c>
            if there is no shell association on the current system.
            </summary>
      <seealso cref="M:C1.C1Preview.Export.C1ExporterBase.CanPreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.C1ExporterBase.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Not supported for this class.
            </summary>
      <param name="pageImage">
      </param>
      <param name="metafileInfo">
      </param>
      <param name="pageNo">
      </param>
      <param name="firstPage">
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.Clear">
      <summary>
            Resets the internal state of the exporter and all its public properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.C1dOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.C1dOptionsForm" /> object to copy the options from.</param>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.InternalExport">
      <summary>
            Performs export to a disk file or to a stream.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.C1DocumentFormat">
      <summary>
            Gets a <see cref="T:C1.C1Preview.C1DocumentFormatEnum" /> value that determines the format used to save the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.EmbedTrueTypeFonts">
      <summary>
            Gets or sets a value indicating whether to embed TrueType fonts used in the source document, in the produced document.
            Note that this property cannot be set if <see cref="P:C1.C1Preview.Export.C1dExporterBase.CanChangeFontEmbedding" /> gets <b>false</b>.
            <para>
            The default value depends on the document being exported.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.CanChangeFontEmbedding">
      <summary>
            Gets a value indicating whether font embedding in the exported document
            can be changed. Gets <b>false</b> if the source document cannot be regenerated
            with different font embedding settings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.FontHandling">
      <summary>
            Gets a <see cref="T:C1.C1Preview.FontHandling" /> value used by this exporter.
            If it is different from the document's own value, the document will be regenerated
            during export.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.C1dOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExporter.C1DocumentFormat">
      <summary>
            Overridden.
            Gets a <see cref="T:C1.C1Preview.C1DocumentFormatEnum" /> value that determines the format used to save the document.
            This implementation returns <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1db" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.C1dbExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1mdxExportProvider">
      <summary>
            Represents a <see cref="T:C1.C1Preview.C1MultiDocument" />'s native C1MDX format <see cref="T:C1.C1Preview.Export.ExportProvider" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by a <see cref="T:C1.C1Preview.Export.C1mdxExporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1MultiDocument" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported
            by a <see cref="T:C1.C1Preview.Export.C1mdxExporter" />.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1MultiDocument" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExportProvider.NewExporter">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.Export.C1mdxExporter" />.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 1.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.FormatName">
      <summary>
            Gets a short description of the C1DX export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "c1dx".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit the export options by default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1mdxExporter">
      <summary>
            Represents an object that can be used to export a document to C1MDX format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExporter.InternalExport">
      <summary>
            Performs export to a disk file or to a stream.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.C1mdxExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportExportProvider">
      <summary>
            The abstract base class describing an export format that uses one of
            <see cref="T:C1.C1Report.C1Report" />-specific <see cref="T:C1.C1Report.ExportFilter" /> classes
            to perform export. All derived export formats only support
            export of <see cref="T:C1.C1Report.C1Report" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported by the current export provider.
            This implementation returns <b>true</b> if the passed object is a <see cref="T:C1.C1Report.C1Report" />,
            <b>false</b> otherwise.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if the object represents a document that can be exported, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported by the current export provider.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.FileFormat">
      <summary>
            Gets a <see cref="T:C1.C1Report.FileFormatEnum" /> value determining the format
            of the export file produced by the current export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.FormatName">
      <summary>
            Gets a short description of the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the current export format in "save as..." and similar dialogs.
            <para>A value of <c>-1</c> indicates that the export format should not be listed at all.</para></summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.C1ReportFileFormat">
      <summary>
            Gets the <see cref="T:C1.C1Report.FileFormatEnum" /> associated with the current provider.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHTMLDrillDownExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to drill-down HTML (<see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLDrillDownExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportHTMLDrillDownExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHTMLPagedExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to paged HTML (<see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLPagedExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportHTMLPagedExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHTMLExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to HTML (<see cref="F:C1.C1Report.FileFormatEnum.HTML" />, <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />
            or <see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportHtmlExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportHTMLExportProvider" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLExportProvider.NewExporter">
      <summary>
            Overridden. Creates a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportHtmlExporter" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportHTMLExportProvider.DefaultOptionsFormClass">
      <summary>
            Overridden. Gets the type of form which is used to edit the export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.ReportHtmlOptionsForm" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFEmbedFontsExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to PDF with embedded fonts (<see cref="F:C1.C1Report.FileFormatEnum.PDFEmbedFonts" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFEmbedFontsExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportPDFEmbedFontsExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to PDF (<see cref="F:C1.C1Report.FileFormatEnum.PDF" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportPDFExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFProtectedExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to protected PDF (<see cref="F:C1.C1Report.FileFormatEnum.PDFProtected" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFProtectedExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportPDFProtectedExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFPrintUtilExportProvider">
      <summary>
            Obsolete: Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to PDF (<see cref="F:C1.C1Report.FileFormatEnum.PDFPrintUtil" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFPrintUtilExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportPDFPrintUtilExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportRTFExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to RTF (<see cref="F:C1.C1Report.FileFormatEnum.RTF" /> or <see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportRTFExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportRTFExportProvider" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportRTFExportProvider.NewExporter">
      <summary>
            Overridden. Creates a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportRtfExporter" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportRTFExportProvider.DefaultOptionsFormClass">
      <summary>
            Overridden. Gets the type of form which is used to edit the export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.ReportRtfOptionsForm" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportRTFLabelsExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to field-based RTF (<see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportRTFLabelsExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportRTFLabelsExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTextExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to plain text (<see cref="F:C1.C1Report.FileFormatEnum.Text" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportTextExportProvider" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextExportProvider.NewExporter">
      <summary>
            Overridden. Creates a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportRtfExporter" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportTextExportProvider.DefaultOptionsFormClass">
      <summary>
            Overridden. Gets the type of form which is used to edit the export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.ReportRtfOptionsForm" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTextSinglePageExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to single-page text (<see cref="F:C1.C1Report.FileFormatEnum.TextSinglePage" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextSinglePageExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportTextSinglePageExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportMetafileExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to compressed metafile (<see cref="F:C1.C1Report.FileFormatEnum.Metafile" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportMetafileExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportMetafileExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportExcelExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to Microsoft Excel (<see cref="F:C1.C1Report.FileFormatEnum.Excel" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportExcelExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportExcelExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportOpenXmlExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to OpenXml Excel (<see cref="F:C1.C1Report.FileFormatEnum.OpenXml" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportOpenXmlExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportOpenXmlExportProvider" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTIFFExportProvider">
      <summary>
            Describes export of a <see cref="T:C1.C1Report.C1Report" />
            to TIFF image (<see cref="F:C1.C1Report.FileFormatEnum.TIFF" />).
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportTIFFExportProvider.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.ReportTIFFExportProvider" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTIFFExportProvider.NewExporter">
      <summary>
            Overridden. Creates a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportTIFFExporter" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportTIFFExportProvider.DefaultOptionsFormClass">
      <summary>
            Overridden. Gets the type of form which is used to edit the export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.ReportTIFFOptionsForm" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportTIFFExporter">
      <summary>
            Provides export of a <see cref="T:C1.C1Report.C1Report" /> to TIFF images.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportExporter">
      <summary>
            Provides export of a <see cref="T:C1.C1Report.C1Report" /> to an external format
            using one of <see cref="T:C1.C1Report.C1Report" />-specific <see cref="T:C1.C1Report.ExportFilter" /> classes.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.MakeFilter(System.String)">
      <summary>
            Creates an instance of <see cref="T:C1.C1Report.ExportFilter" /> determined by <see cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" />.
            </summary>
      <param name="fileName">The file to create the filter for.</param>
      <returns>The filter created.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.Clear">
      <summary>
            Resets the internal state of the exporter and all its public properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.ConvertEmfPlusToEmfOnly">
      <summary>
            Indicates whether page metafiles of types
            <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" /> and
            <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />
            should be converted to <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" /> type before exporting.
            This implementation returns <b>false</b>.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.Reset">
      <summary>
            Resets the internal state of the exporter.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExporter.BaseFileFormat">
      <summary>
            Gets the base export file format supported by the current exporter.
            The actual format (<see cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" />) may either be the same,
            or may be a specific variant of that format.
            E.g. if this property is <see cref="F:C1.C1Report.FileFormatEnum.HTML" />,
            <see cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" /> may be <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />.
            </summary>
      <seealso cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" />
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExporter.FileFormat">
      <summary>
            Gets the actual export file format supported by the current exporter.
            </summary>
      <seealso cref="P:C1.C1Preview.Export.C1ReportExporter.BaseFileFormat" />
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExporter.ExportProvider">
      <summary>
            Gets an instance of <see cref="T:C1.C1Preview.Export.C1ReportExportProvider" />
            that describes the <see cref="P:C1.C1Preview.Export.C1ReportExporter.BaseFileFormat" /> supported by the current exporter.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTIFFExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportTextExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTIFFExporter.MakeFilter(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTIFFExporter.Monochrome">
      <summary>
            Gets or sets whether the TIFF document should be saved in monochrome format.
            </summary>
      <remarks>
        <para>The default value for this property is true, which results in much smaller documents that are compatible
            with fax machines (the compression used is CompressionCCITT4).</para>
        <para>Set this property to false to generate color documents which use LZW compression but are substantially 
            larger than monochrome documents (often 100 times larger using the same resolution).</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportHtmlExporter">
      <summary>
            Provides export of a <see cref="T:C1.C1Report.C1Report" /> to HTML.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportHtmlExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportHtmlExporter" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.FileFormat">
      <summary>
            Overridden.
            Gets a <see cref="T:C1.C1Report.FileFormatEnum" /> value determining the format
            of the export file produced by the current export provider.
            Depending on <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" /> and <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown" /> properties,
            returns <see cref="F:C1.C1Report.FileFormatEnum.HTML" />, <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />
            or <see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.TableBased">
      <summary>
            Gets or sets a value indicating whether to create table-based HTML
            (see <see cref="F:C1.C1Report.FileFormatEnum.HTMLTableBased" />).
            <para>
            If this property is <b>true</b>, <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" /> and <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown" />
            are ignored.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged">
      <summary>
            Gets or sets a value indicating whether to create paged HTML
            (see <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />).
            <para>
            If both this and <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown" /> are <b>true</b>,
            this property takes precedence.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown">
      <summary>
            Gets or sets a value indicating whether to create drill-down HTML
            (see <see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />).
            <para>
            If both this and <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" /> are <b>true</b>,
            <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" /> takes precedence.
            </para></summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportRtfExporter">
      <summary>
            Provides export of a <see cref="T:C1.C1Report.C1Report" /> to RTF.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportRtfExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportRtfExporter" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportRtfExporter.FileFormat">
      <summary>
            Overridden.
            Gets a <see cref="T:C1.C1Report.FileFormatEnum" /> value determining the format
            of the export file produced by the current export provider.
            Depending on <see cref="P:C1.C1Preview.Export.C1ReportRtfExporter.AbsolutePositioning" /> property,
            returns <see cref="F:C1.C1Report.FileFormatEnum.RTF" /> or <see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportRtfExporter.AbsolutePositioning">
      <summary>
            Gets or sets a value indicating whether absolute positioning of objects
            is used in the exported RTF file
            (see <see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportTextExporter">
      <summary>
            Provides export of a <see cref="T:C1.C1Report.C1Report" /> to plain text.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTextExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.C1ReportTextExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTextExporter.MakeFilter(System.String)">
      <summary>
            Overriden.
            Creates an instance of <see cref="T:C1.C1Report.TextFilterClassic" /> or <see cref="T:C1.C1Report.TextFilter" /> class
            determined by <see cref="P:C1.C1Preview.Export.C1ReportTextExporter.UseTextFilterClassic" />.
            </summary>
      <param name="fileName">The file to create the filter for.</param>
      <returns>The filter created.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTextExporter.FileFormat">
      <summary>
            Overridden.
            Gets a <see cref="T:C1.C1Report.FileFormatEnum" /> value determining the format
            of the export file produced by the current export provider.
            Depending on <see cref="P:C1.C1Preview.Export.C1ReportTextExporter.SinglePage" /> property,
            returns <see cref="F:C1.C1Report.FileFormatEnum.Text" /> or <see cref="F:C1.C1Report.FileFormatEnum.TextSinglePage" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTextExporter.SinglePage">
      <summary>
            Gets or sets a value indicating whether report is exported as a single page
            (see <see cref="F:C1.C1Report.FileFormatEnum.TextSinglePage" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTextExporter.UseTextFilterClassic">
      <summary>
            Gets or sets a value indicating whether old version of TextFilter should be used.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextFragment">
      <summary>
            For internal use.
            Represents a fragment of a text-type metafile record,
            for formatted text copy support.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfTextFragment.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            ctor.
            </summary>
      <param name="recordIndex">
      </param>
      <param name="firstTextIndex">
      </param>
      <param name="lastTextIndex">
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.EmfTextFragment.EmfRecordIndex">
      <summary>
            Gets 0-based index of the metafile record (as ordered by EnumerateMetafile).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfTextFragment.EmfTextFirstIndex">
      <summary>
            Gets the 0-based index of the first character of this fragment in the metafile record.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfTextFragment.EmfTextLastIndex">
      <summary>
            Gets the 0-based index of the last character of this fragment in the metafile record.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextPage">
      <summary>
            For internal use.
            Represents a metafile along with the list of (selected) text fragments on it.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextExporterBase">
      <summary>
            For internal use only.
            Abstract base class for metafile text exporters.
            Those exporters are used to generate formatted text for clipboard.
            Implement the three virtual methods for different formats.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextToHtmlExporter">
      <summary>
            For internal use only.
            Used to provide HTML formatted copy to clipboard.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ClipboardFormatter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dOptionsForm">
      <summary>
            Represents the default options form for C1D/C1DX export modules.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportOptionsFormBase">
      <summary>
            Represents a form for editing the export options used by an <see cref="P:C1.C1Preview.Export.ExportOptionsFormBase.Exporter" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.BaseForm">
      <summary>
            Base class for all custom forms in C1Preview.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.BaseForm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Forms.BaseForm" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.BaseForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1Preview.Export.ExportOptionsFormBase.CreateForm(C1.C1Preview.Export.Exporter,System.Type,System.Type)">
      <summary>
            Creates a new instance of a <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" />-derived class.
            </summary>
      <param name="exporter">The exporter to use.</param>
      <param name="customType">The custom form type.</param>
      <param name="defaultType">The default form type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportOptionsFormBase.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Exporter">
      <summary>
            Gets the associated exporter.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.ExportProvider">
      <summary>
            Gets the associated export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Document">
      <summary>
            Gets the document that is to be exported.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Preview">
      <summary>
            Gets or sets a value indicating whether the resulting document
            should be opened using the default system viewer.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.DocumentInfo">
      <summary>
            Gets or sets the document info.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Range">
      <summary>
            Gets or sets the range of pages to be exported.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dOptionsForm.EmbedTrueTypeFonts">
      <summary>
            Gets or sets a value indicating whether to embed embeddable fonts used in the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dOptionsForm.EmbedTrueTypeFontsEnabled">
      <summary>
            Gets or sets a value indicating whether to enable the "embed fonts" checkbox.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1mdxOptionsForm">
      <summary>
            Represents the default options form for C1D/C1DX export modules.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTextOptionsForm">
      <summary>
            Represents the default options form for <see cref="T:C1.C1Report.C1Report" />-specific
            plain text export modules.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportRtfOptionsForm">
      <summary>
            Represents the default options form for <see cref="T:C1.C1Report.C1Report" />-specific
            RTF export modules.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportRtfOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHtmlOptionsForm">
      <summary>
            Represents the default options form for <see cref="T:C1.C1Report.C1Report" />-specific
            HTML export modules.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportHtmlOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferencesForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.BordersModeEnum">
      <summary>
            Specifies the various modes of accounting for border thickness when
            laying out the objects in a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BordersModeEnum.Default">
      <summary>
            Whole border is considered to be part of the object.
            This is the default behavior of objects in <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BordersModeEnum.C1Report">
      <summary>
            The inner 1/2 of border thickness is considered to be part of the object,
            the outer 1/2 of border is considered to be outside of the object's space.
            This is the default behavior of objects in <see cref="F:C1.C1Preview.BordersModeEnum.C1Report" /> (same as in MS Access).
            </summary>
    </member>
    <member name="F:C1.C1Preview.BordersModeEnum.Rdl">
      <summary>
            Border thickness is not taken into account at all when calculating objects'
            sizes and layout. Borders are drawn centered on objects' bounds.
            </summary>
    </member>
    <member name="T:C1.C1Preview.CompatibilityOptions">
      <summary>
            Defines the compatibility options for C1PrintDocument.
            Contains properties specifying compatibility with
            previous versions of C1PrintDocument.
            </summary>
    </member>
    <member name="M:C1.C1Preview.CompatibilityOptions.AssignFrom(C1.C1Preview.CompatibilityOptions)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.C1Preview.CompatibilityOptions.Reset">
      <summary>
            Resets properties of this object to default values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.WhiteRtfBackground">
      <summary>
            Gets or sets the value indicating whether RTF objects fill the background with
            white, or use the specified background color. The default is false.
            </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.HeaderFooterWidthAsTotalColumnWidth">
      <summary>
            Gets or sets a value indicating whether the widths of page headers and footers
            should be equal to the sum of the widths of all page columns. The default is false.
            Set this property to true to improve compatibility with C1Report.
            </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.TopLevelPositionRelativeToPageMargins">
      <summary>
            Gets or sets a value indicating whether absolute coordinates of top-level
            objects in the document are relative to page margins or to physical page
            bounds.
            <para>
            The default value of this property is <b>false</b>, which indicates the
            traditional behavior with coordinates relative to page edges.
            If set to <b>true</b>, coordinates are considered relative to page margins.
            </para><para>
            For instance, if this property is <b>false</b> (default), all page margins are 1 in,
            and a top-level object's X coordinate is specified as ".5in", the object
            would be located 0.5in from the left edge of the page - i.e. in the middle
            of the left page margin.
            </para><para>
            If this property is set to <b>true</b>, the same object would be located 0.5in
            to the right of the left page margin - 1.5in from the left edge of the page.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.BordersMode">
      <summary>
            Gets or sets a valud specifying how borders affect the layout of objects in a document.
            <para>See <see cref="T:C1.C1Preview.BordersModeEnum" /> for details.</para><para>
            The default value is <see cref="F:C1.C1Preview.BordersModeEnum.Default" />.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.KeepImages">
      <summary>
            Specifies whether images in a document dictionary are kept as <b>Image</b> objects.
            Set this property to <b>false</b> to save images as raw data to optimize memory usage.
            </summary>
      <para>
            The default value is <b>true</b>.
            </para>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.StretchBarCodesAsImages">
      <summary>
            Gets or sets a value indicating whether to stretch barcodes as images.
            <para>The default value is false, which is compatible with previous versions.</para></summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.UseGdiLinesInPdfExport">
      <summary>
            Gets or sets a value indicating whether GDI functions should be used to draw lines when rendering for output to PDF.
            The default value is false. Setting this property to true may result in much smaller file sizes in documents
            containing many dashed/dotted lines.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataHandlerC1ReportPosition">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataHandlerPosition">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataHandlerPosition.Equals(System.Object)">
      <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
      <param name="o">The Object to compare with the current Object.</param>
      <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataHandlerPosition.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>A hash code for the current Object.</returns>
    </member>
    <member name="T:C1.C1Preview.Export.C1dExportProvider">
      <summary>
            Represents a <see cref="T:C1.C1Preview.C1PrintDocument" />'s native C1D format <see cref="T:C1.C1Preview.Export.ExportProvider" />.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by a <see cref="T:C1.C1Preview.Export.C1dExporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported
            by a <see cref="T:C1.C1Preview.Export.C1dExporter" />.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExportProvider.NewExporter">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.Export.C1dExporter" />.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 1.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.FormatName">
      <summary>
            Gets a short description of the C1D export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "c1d".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit the export options by default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Returns <b>false</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dExporter">
      <summary>
            Represents an object that can be used to export a document to C1D format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.C1dOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporter.C1DocumentFormat">
      <summary>
            Overridden.
            Gets a <see cref="T:C1.C1Preview.C1DocumentFormatEnum" /> value that determines the format used to save the document.
            This implementation returns <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.C1dExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.DocxOptionsForm">
      <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.RtfExporter" />
            when exporting to Open XML DOCX format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfOptionsForm">
      <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.RtfExporter" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExporterOptionsForm">
      <summary>
            Represents a form for editing the export options used by a <see cref="T:C1.C1Preview.Export.ComplexExporter" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.ProcessPaginated">
      <summary>
            Can be used to update controls depending on Paginated property.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.Init">
      <summary>
            Performs additional initialization.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="F:C1.C1Preview.Export.ComplexExporterOptionsForm.m_chkPaginated">
      <summary>
            The "preserve pagination" checkbox.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.ComplexExporterOptionsForm.m_chkFixedPositioning">
      <summary>
            The "fixed positioning" checkbox.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.ComplexExporterOptionsForm.m_chkOpenXmlDocument">
      <summary>
            The "Open XML" checkbox.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.AllowNotPaginated">
      <summary>
            Gets a value indicating whether export that does not preserve pagination of the original document should be allowed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.Paginated">
      <summary>
            Gets or sets a value indicating whether the export should preserve pagination of the original document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.FixedPositioning">
      <summary>
            Gets or sets a value indicating whether objects within the document should have absolute fixed positions,
            or added to the document flow if possible.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.OpenXmlDocument">
      <summary>
            Gets or sets a value indicating whether the export should use Open XML file format.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Export.RtfOptionsForm.UseDrawingCanvas">
      <summary>
            Gets or sets a value indicating whether to use canvases in the exported document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfOptionsForm.ShapesWord2007Compatible">
      <summary>
            Gets or sets a value indicating whether shapes are drawn in a mode compatible with Word 2007.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.DocxOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Export.DefaultExportOptionsForm">
      <summary>
            Represents the default options form for export modules that do no have any custom options.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.DefaultExportOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTIFFOptionsForm">
      <summary>
            Represents the default options form for <see cref="T:C1.C1Report.C1Report" />-specific
            plain text export modules.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTIFFOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Export.XlsxOptionsForm">
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.XlsExporter" />
            when exporting to Open XML XLSX format.
        </member>
    <member name="T:C1.C1Preview.Export.XlsOptionsForm">
      <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.XlsExporter" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.BookContent">
      <summary>
            Gets or sets the prevailing type of content in the source document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.FontScaling">
      <summary>
            Gets or sets the font scaling factor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.Tolerance">
      <summary>
            Gets or sets the tolerance.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.PagePerSheet">
      <summary>
            Gets or sets a value indicating whether each page of the source document
            should be exported as a separate sheet.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.DataOnly">
      <summary>
            Gets or sets a value indicating whether only data should be exported.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsxOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Export.XpsExportProvider">
      <summary>
            Describes export to XPS format.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by the associated <see cref="T:C1.C1Preview.Export.XpsExporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1PrintDocument" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported
            by the associated <see cref="T:C1.C1Preview.Export.XpsExporter" />.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.XpsExporter" /> class.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.XpsExporter" />.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
            Indicates whether the associated exporter
            can handle the specified type of document pages' range.
            This implementation returns <b>false</b>.
            </summary>
      <param name="range">The type of range to test.</param>
      <returns>
        <b>false</b>.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.XpsExportProvider.FormatName">
      <summary>
            Gets a short description of the XPS export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XpsExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xps".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XpsExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>false</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XpsExporter">
      <summary>
            Represents an object that can be used to export a document to XPS
            (XML paper specification) format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.XpsExportProvider" />
    </member>
    <member name="P:C1.C1Preview.Export.XpsExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.XpsExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.Xps.XpsC1Doc">
      <summary>
            Provides XPS representation of a C1PrintDocument.
            The generated XPS can be stored either in a disk file or in memory,
            depending on the constructor used to create the instance of this type.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.#ctor(C1.C1Preview.C1PrintDocument)">
      <summary>
            Creates an instance of XpsC1Doc that holds the XPS document in memory.
            </summary>
      <param name="c1doc">The source <see cref="T:C1.C1Preview.C1PrintDocument" />.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.#ctor(C1.C1Preview.C1PrintDocument,System.String)">
      <summary>
            Creates an instance of XpsC1Doc that creates the XPS document in a disk file.
            </summary>
      <param name="c1doc">The source <see cref="T:C1.C1Preview.C1PrintDocument" />.</param>
      <param name="filename">The target XPS file name.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.UnitToXpsPixel(C1.C1Preview.Unit)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.Unit" /> value to XPS pixels using the page resolution (<see cref="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDpi" />).
            </summary>
      <param name="unit">The unit value to convert</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.RuToXpsPixel(System.Double)">
      <summary>
            Converts an absolute value in document's ResolvedUnitType units to a value in XPS pixels.
            </summary>
      <param name="ru">Value to convert.</param>
      <returns>Converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.Commit">
      <summary>
            Commits the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.Document">
      <summary>
            Gets the source <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDpi">
      <summary>
            Gets the resolution used for pages' content. In the current version,
            this is determined by the CreationDpi of the source C1PrintDocument.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDocument">
      <summary>
            Gets the <see cref="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDocument" /> representing the source document.
            Note that the document is committed when this property is first accessed,
            and cannot be changed afterwards.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.LongOperationEventHandler">
      <summary>
            Gets or sets the delegate that will be called periodically while the document generates.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.LongOperationEventSender">
      <summary>
            Gets or sets the sender argument for the long operation event.
            If not set, the current object is used.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EmbeddedFontsGlyphsBuildMode">
      <summary>
            Defines methods used to create lists of glyphs in an <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.EmbeddedFontsGlyphsBuildMode.UsedChars">
      <summary>
            Only glyphs for the actual characters used in a document or report are added to an <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.EmbeddedFontsGlyphsBuildMode.UnicodeRanges">
      <summary>
            For each character used in a document or report, its whole Unicode range is added to an <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.EmbeddedFontsGlyphsBuildMode.All">
      <summary>
            All font glyphs are added to an <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FontHandling">
      <summary>
            Specifies how font embedding and substitution are handled by a <see cref="T:C1.C1Preview.C1PrintDocument" /> or
            <see cref="N:C1.C1Report" /> (see <see cref="P:C1.C1Preview.FontProcessingOptions.FontHandling" /> for details).
            </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.None">
      <summary>
            Fonts are not embedded, and font substitution is not analyzed.
            Collections <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" /> and
            <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />
            are not populated when the document is generated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.BuildDocumentFonts">
      <summary>
            Fonts are not embedded, and font substitution is not analyzed,
            but the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" /> collection
            is populated with fonts explicitly used in the document
            when it is generated.
            The <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" /> collection
            is not populated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts">
      <summary>
            Fonts are not embedded, but font substitution is analyzed.
            The <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" /> collection
            is populated with fonts actually used in the document
            when it is generated.
            The <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" /> collection
            is not populated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.EmbedFonts">
      <summary>
            Fonts are embedded, but font substitution is not analyzed.
            Collections <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" /> and
            <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />
            are populated with fonts explicitly used in the document
            when it is generated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.EmbedActualFonts">
      <summary>
            Fonts are embedded, and font substitution is analyzed.
            Collections <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" /> and
            <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />
            are populated with fonts actually used in the document
            when it is generated.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UnicodeRangeEnum">
      <summary>
            Defines the available unicode ranges.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.C0ControlsandBasicLatin">
      <summary>
            C0 Controls and Basic Latin
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.C1ControlsandLatin1Supplement">
      <summary>
            C1 Controls and Latin-1 Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedA">
      <summary>
            Latin Extended-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedB">
      <summary>
            Latin Extended-B
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.IPAExtensions">
      <summary>
            IPA Extensions
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SpacingModifierLetters">
      <summary>
            Spacing Modifier Letters
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarks">
      <summary>
            Combining Diacritical Marks
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GreekandCoptic">
      <summary>
            Greek and Coptic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cyrillic">
      <summary>
            Cyrillic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CyrillicSupplement">
      <summary>
            Cyrillic Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Armenian">
      <summary>
            Armenian
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hebrew">
      <summary>
            Hebrew
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Arabic">
      <summary>
            Arabic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Syriac">
      <summary>
            Syriac
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicSupplement">
      <summary>
            Arabic Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Thaana">
      <summary>
            Thaana
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.NKo">
      <summary>
            NKo
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Samaritan">
      <summary>
            Samaritan
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Mandaic">
      <summary>
            Mandaic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicExtendedA">
      <summary>
            Arabic Extended-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Devanagari">
      <summary>
            Devanagari
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bengali">
      <summary>
            Bengali
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Gurmukhi">
      <summary>
            Gurmukhi
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Gujarati">
      <summary>
            Gujarati
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Oriya">
      <summary>
            Oriya
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tamil">
      <summary>
            Tamil
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Telugu">
      <summary>
            Telugu
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Kannada">
      <summary>
            Kannada
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Malayalam">
      <summary>
            Malayalam
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Sinhala">
      <summary>
            Sinhala
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Thai">
      <summary>
            Thai
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Lao">
      <summary>
            Lao
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tibetan">
      <summary>
            Tibetan
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Myanmar">
      <summary>
            Myanmar
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Georgian">
      <summary>
            Georgian
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamo">
      <summary>
            Hangul Jamo
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Ethiopic">
      <summary>
            Ethiopic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EthiopicSupplement">
      <summary>
            Ethiopic Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cherokee">
      <summary>
            Cherokee
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.UnifiedCanadianAboriginalSyllabics">
      <summary>
            Unified Canadian Aboriginal Syllabics
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Ogham">
      <summary>
            Ogham
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Runic">
      <summary>
            Runic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tagalog">
      <summary>
            Tagalog
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hanunoo">
      <summary>
            Hanunoo
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Buhid">
      <summary>
            Buhid
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tagbanwa">
      <summary>
            Tagbanwa
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Khmer">
      <summary>
            Khmer
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Mongolian">
      <summary>
            Mongolian
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.UnifiedCanadianAboriginalSyllabicsExtended">
      <summary>
            Unified Canadian Aboriginal Syllabics Extended
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Limbu">
      <summary>
            Limbu
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.TaiLe">
      <summary>
            Tai Le
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.NewTaiLue">
      <summary>
            New Tai Lue
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KhmerSymbols">
      <summary>
            Khmer Symbols
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Buginese">
      <summary>
            Buginese
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.TaiTham">
      <summary>
            Tai Tham
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Balinese">
      <summary>
            Balinese
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Sundanese">
      <summary>
            Sundanese
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Batak">
      <summary>
            Batak
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Lepcha">
      <summary>
            Lepcha
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.OlChiki">
      <summary>
            Ol Chiki
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SundaneseSupplement">
      <summary>
            Sundanese Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.VedicExtensions">
      <summary>
            Vedic Extensions
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.PhoneticExtensions">
      <summary>
            Phonetic Extensions
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.PhoneticExtensionsSupplement">
      <summary>
            Phonetic Extensions Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarksSupplement">
      <summary>
            Combining Diacritical Marks Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedAdditional">
      <summary>
            Latin Extended Additional
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GreekExtended">
      <summary>
            Greek Extended
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeneralPunctuation">
      <summary>
            General Punctuation
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SuperscriptsandSubscripts">
      <summary>
            Superscripts and Subscripts
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CurrencySymbols">
      <summary>
            Currency Symbols
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarksforSymbols">
      <summary>
            Combining Diacritical Marks for Symbols
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LetterlikeSymbols">
      <summary>
            Letterlike Symbols
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.NumberForms">
      <summary>
            Number Forms
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Arrows">
      <summary>
            Arrows
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MathematicalOperators">
      <summary>
            Mathematical Operators
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousTechnical">
      <summary>
            Miscellaneous Technical
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ControlPictures">
      <summary>
            Control Pictures
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.OpticalCharacterRecognition">
      <summary>
            Optical Character Recognition
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedAlphanumerics">
      <summary>
            Enclosed Alphanumerics
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BoxDrawing">
      <summary>
            Box Drawing
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BlockElements">
      <summary>
            Block Elements
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeometricShapes">
      <summary>
            Geometric Shapes
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousSymbols">
      <summary>
            Miscellaneous Symbols
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Dingbats">
      <summary>
            Dingbats
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousMathematicalSymbolsA">
      <summary>
            Miscellaneous Mathematical Symbols-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalArrowsA">
      <summary>
            Supplemental Arrows-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BraillePatterns">
      <summary>
            Braille Patterns
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalArrowsB">
      <summary>
            Supplemental Arrows-B
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousMathematicalSymbolsB">
      <summary>
            Miscellaneous Mathematical Symbols-B
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalMathematicalOperators">
      <summary>
            Supplemental Mathematical Operators
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousSymbolsandArrows">
      <summary>
            Miscellaneous Symbols and Arrows
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Glagolitic">
      <summary>
            Glagolitic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedC">
      <summary>
            Latin Extended-C
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Coptic">
      <summary>
            Coptic
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeorgianSupplement">
      <summary>
            Georgian Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tifinagh">
      <summary>
            Tifinagh
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EthiopicExtended">
      <summary>
            Ethiopic Extended
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CyrillicExtendedA">
      <summary>
            Cyrillic Extended-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalPunctuation">
      <summary>
            Supplemental Punctuation
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKRadicalsSupplement">
      <summary>
            CJK Radicals Supplement
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KangxiRadicals">
      <summary>
            Kangxi Radicals
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.IdeographicDescriptionCharacters">
      <summary>
            Ideographic Description Characters
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKSymbolsandPunctuation">
      <summary>
            CJK Symbols and Punctuation
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hiragana">
      <summary>
            Hiragana
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Katakana">
      <summary>
            Katakana
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bopomofo">
      <summary>
            Bopomofo
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulCompatibilityJamo">
      <summary>
            Hangul Compatibility Jamo
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Kanbun">
      <summary>
            Kanbun
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BopomofoExtended">
      <summary>
            Bopomofo Extended
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKStrokes">
      <summary>
            CJK Strokes
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KatakanaPhoneticExtensions">
      <summary>
            Katakana Phonetic Extensions
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedCJKLettersandMonths">
      <summary>
            Enclosed CJK Letters and Months
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibility">
      <summary>
            CJK Compatibility
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographsExtensionA">
      <summary>
            CJK Unified Ideographs Extension A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.YijingHexagramSymbols">
      <summary>
            Yijing Hexagram Symbols
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographs">
      <summary>
            CJK Unified Ideographs
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.YiSyllables">
      <summary>
            Yi Syllables
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.YiRadicals">
      <summary>
            Yi Radicals
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Lisu">
      <summary>
            Lisu
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Vai">
      <summary>
            Vai
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CyrillicExtendedB">
      <summary>
            Cyrillic Extended-B
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bamum">
      <summary>
            Bamum
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ModifierToneLetters">
      <summary>
            Modifier Tone Letters
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedD">
      <summary>
            Latin Extended-D
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SylotiNagri">
      <summary>
            Syloti Nagri
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CommonIndicNumberForms">
      <summary>
            Common Indic Number Forms
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Phagspa">
      <summary>
            Phags-pa
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Saurashtra">
      <summary>
            Saurashtra
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.DevanagariExtended">
      <summary>
            Devanagari Extended
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KayahLi">
      <summary>
            Kayah Li
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Rejang">
      <summary>
            Rejang
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamoExtendedA">
      <summary>
            Hangul Jamo Extended-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Javanese">
      <summary>
            Javanese
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cham">
      <summary>
            Cham
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MyanmarExtendedA">
      <summary>
            Myanmar Extended-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.TaiViet">
      <summary>
            Tai Viet
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MeeteiMayekExtensions">
      <summary>
            Meetei Mayek Extensions
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EthiopicExtendedA">
      <summary>
            Ethiopic Extended-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MeeteiMayek">
      <summary>
            Meetei Mayek
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulSyllables">
      <summary>
            Hangul Syllables
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamoExtendedB">
      <summary>
            Hangul Jamo Extended-B
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HighSurrogates">
      <summary>
            High Surrogates
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HighPrivateUseSurrogates">
      <summary>
            High Private Use Surrogates
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LowSurrogates">
      <summary>
            Low Surrogates
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.PrivateUseArea">
      <summary>
            Private Use Area
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityIdeographs">
      <summary>
            CJK Compatibility Ideographs
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.AlphabeticPresentationForms">
      <summary>
            Alphabetic Presentation Forms
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsA">
      <summary>
            Arabic Presentation Forms-A
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.VariationSelectors">
      <summary>
            Variation Selectors
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.VerticalForms">
      <summary>
            Vertical Forms
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningHalfMarks">
      <summary>
            Combining Half Marks
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityForms">
      <summary>
            CJK Compatibility Forms
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SmallFormVariants">
      <summary>
            Small Form Variants
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsB">
      <summary>
            Arabic Presentation Forms-B
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HalfwidthandFullwidthForms">
      <summary>
            Halfwidth and Fullwidth Forms
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Specials">
      <summary>
            Specials
            </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.TagsInputForm">
      <summary>
            Represents the standard form used to edit the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />
            collection of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.TagsInputFormBase">
      <summary>
            Describes the base form for tags input.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Forms.TagsInputFormBase" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.EditTags(C1.C1Preview.C1PrintDocument)">
      <summary>
            When overridden in a derived class, should show the tags input dialog,
            and return a value indicating whether the user accepted the dialog.
            </summary>
      <param name="document">The owner of the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection to edit.</param>
      <returns>
        <b>true</b> if the user accepted the dialog, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.DoEditTags(C1.C1Preview.C1PrintDocument)">
      <summary>
            Shows the tags input dialog, returns a value indicating whether the user
            accepted the dialog.
            </summary>
      <param name="document">The owner of the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection to edit.</param>
      <returns>
        <b>true</b> if the user accepted the dialog, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputForm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Forms.TagsInputForm" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputForm.EditTags(C1.C1Preview.C1PrintDocument)">
      <summary>
            Shows the tags input dialog,
            returns a value indicating whether the user accepted the dialog.
            </summary>
      <param name="document">The owner of the <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection to edit.</param>
      <returns>
        <b>true</b> if the user accepted the dialog, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Forms.TagsInputForm.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> which is the owner of the tags that are edited.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PagesEventArgs">
      <summary>
            Provides data for page-related events such as
            <see cref="E:C1.C1Preview.C1MultiDocument.PagesAdded" /> and <see cref="E:C1.C1Preview.C1MultiDocument.PagesChanged" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PagesEventArgs.FirstPageIndex">
      <summary>
            Gets the index of the first page associated with this event.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PagesEventArgs.PageCount">
      <summary>
            Gets the count of pages associated with this event.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PagesEventHandler">
      <summary>
            Represents a method that can handle page-related events of a <see cref="T:C1.C1Preview.C1MultiDocument" /> such as
            <see cref="E:C1.C1Preview.C1MultiDocument.PagesAdded" /> and <see cref="E:C1.C1Preview.C1MultiDocument.PagesChanged" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.PagesEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemEventArgs">
      <summary>
            Provides data for item-related <see cref="T:C1.C1Preview.C1MultiDocument" /> events such as
            <see cref="E:C1.C1Preview.C1MultiDocument.ItemGenerated" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.MultiDocumentItemEventArgs.Item">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> object associated with this event.
            </summary>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemEventHandler">
      <summary>
            Represents a method that can handle item-related <see cref="T:C1.C1Preview.C1MultiDocument" /> events such as
            <see cref="E:C1.C1Preview.C1MultiDocument.ItemGenerated" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.MultiDocumentItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemLoadedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.C1Preview.C1MultiDocument.ItemLoaded" /> event.
            </summary>
    </member>
    <member name="P:C1.C1Preview.MultiDocumentItemLoadedEventArgs.Document">
      <summary>
            Gets the report or document represented by the <see cref="T:C1.C1Preview.C1MultiDocumentItem" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemLoadedEventHandler">
      <summary>
            Represents a method that can handle ItemLoaded event of <see cref="T:C1.C1Preview.C1MultiDocument" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.MultiDocumentItemLoadedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.C1Preview.StorageType">
      <summary>
            Specifies the type of temporary storage used by <see cref="T:C1.C1Preview.C1MultiDocument" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StorageType.Memory">
      <summary>
            Store document items in memory.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StorageType.Disk">
      <summary>
            Store document items on disk.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1MultiDocument">
      <summary>
            Represents a multi-document - a sequence of several documents that have
            common page numbering, and can be handled (e.g. printed or exported)
            together as a single large document.
            Allows creating very large documents without running out of memory.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1MultiDocument" /> type.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Dispose(System.Boolean)">
      <summary>
            Overridden. Disposes the current object.
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.MakeOutlines">
      <summary>
            Builds the outline tree for the current multi-document, merging the multi-document's own
            outlines (<see cref="P:C1.C1Preview.C1MultiDocument.Outlines" />) and outline trees of documents and reports
            contained within the multi-document.
            <para>
            For details, see the remarks section of the <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" /> property.
            </para></summary>
      <returns>The combined outline for the multi-document.</returns>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.ClearGeneratedPages">
      <summary>
            Clears the pages and other info created during document generation.
            This method does not clear the document structure/content though.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Clear">
      <summary>
            Clears the current <b>C1MultiDocument</b>.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Load(System.IO.Stream)">
      <summary>
            Loads the current document from a stream.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Load(System.String)">
      <summary>
            Loads the current document from a file.
            </summary>
      <param name="fileName">The source file name.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Save(System.IO.Stream)">
      <summary>
            Saves the current document to a stream.
            </summary>
      <param name="stream">The target stream.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Save(System.String)">
      <summary>
            Saves the current document to a disk file.
            </summary>
      <param name="fileName">The target file name.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Generate">
      <summary>
            Generates the current C1MultiDocument.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PageAsMetafile(System.Int32,C1.C1Preview.PageDrawParams)">
      <summary>
            Gets a <see cref="T:System.Drawing.Imaging.Metafile" /> that represents the specified page.
            </summary>
      <param name="pageIndex">The page index (0-based).</param>
      <param name="pdp">Specifies drawing params.</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page, or null if index was invalid.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PageAsMetafile(System.Int32,System.Boolean,System.Drawing.Drawing2D.SmoothingMode)">
      <summary>
            Gets a <see cref="T:System.Drawing.Imaging.Metafile" /> that represents the specified page.
            </summary>
      <param name="pageIndex">The page index (0-based).</param>
      <param name="renderInputControls">A value indicating whether to render input (preview forms) controls.</param>
      <param name="smoothingMode">The smoothing mode to use.</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page, or null if index was invalid.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PageAsMetafile(System.Int32)">
      <summary>
            Gets a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page.
            </summary>
      <param name="pageIndex">The page index (0-based).</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page, or null if index was invalid.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.GetPageInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Retrieves extended information about a page with the specified index.
            </summary>
      <param name="pageIndex">The 0-based index of the target page.</param>
      <param name="itemIndex">OUT: 0-based index of the document item (<see cref="T:C1.C1Preview.C1MultiDocumentItem" />) that contains the target page.</param>
      <param name="itemPageIndex">OUT: 0-based index of the target page within the document item that contains it (indicated by <paramref name="itemIndex" />).</param>
      <param name="pageNo">OUT: The logical page number within the current document.</param>
      <returns>
        <b>true</b> if <paramref name="pageIndex" /> is valid, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.GetPageInfo(System.Int32,System.Int32@,C1.C1Preview.ResolvedPage@)">
      <summary>
            Retrieves extended information about a page with the specified index.
            </summary>
      <param name="pageIndex">The 0-based index of the target page.</param>
      <param name="pageNo">OUT: The logical page number within the current document.</param>
      <param name="resolvedPage">OUT: The ResolvedPage.</param>
      <returns>
        <b>true</b> if <paramref name="pageIndex" /> is valid, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.FindAnchor(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="anchorName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.SetStorage(C1.C1Preview.StorageType,System.String)">
      <summary>
            Sets the temporary storage type used by the current multi-document.
            Note that document items are actually moved from old storage to new by this method.
            </summary>
      <param name="storageType">The new storage type to use.</param>
      <param name="storagePath">The temporary directory to use if <paramref name="storageType" /> is <b>StorageType.Disk</b>.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.SetStorage(C1.C1Preview.StorageType)">
      <summary>
            Sets the temporary storage type used by the current multi-document.
            Note that document items are actually moved from old storage to new by this method.
            </summary>
      <param name="storageType">The new storage type to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the current multi-document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String,System.Boolean)">
      <summary>
            Exports the current multi-document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String)">
      <summary>
            Exports the current multi-document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,System.Boolean)">
      <summary>
            Exports the current multi-document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the <see cref="T:C1.C1Preview.Export.ExportProviders" /> class.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider)">
      <summary>
            Exports the current multi-document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the <see cref="T:C1.C1Preview.Export.ExportProviders" /> class.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the current multi-document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the <see cref="T:C1.C1Preview.Export.ExportProviders" /> class.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the current multi-document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the <see cref="T:C1.C1Preview.Export.ExportProviders" /> class.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print">
      <summary>
            Prints the current document with default printer settings,
            not showing the print progress dialog.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the current document with specified printer settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Prints the current document with specified printer settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the print progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints a range of pages within the current document with specified printer settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to print (use null to print all pages).</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints a range of pages within the current document with specified printer settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to print (use null to print all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints a range of pages within the current document with specified printer and default page settings,
            not showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to print (use null to print all pages).</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>
            Prints the current document with specified printer and default page settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints a range of pages within the current document with specified printer and default page settings,
            optionally showing the print progress dialog.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to print (use null to print all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PrintDialog">
      <summary>
            Shows the standard print dialog, allowing the user to print the current document.
            </summary>
      <returns>
        <b>true</b> if the document was printed, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PrintDialog(System.Drawing.Printing.PrinterSettings,System.Int32[],System.Boolean)">
      <summary>
            Shows the standard print dialog, allowing the user to print the current document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="selectedPageNumbers">The list of selected page numbers.
            If this parameter is not <b>null</b>, <b>selection</b> option is enabled in the dialog.</param>
      <param name="showProgress">Indicates whether to show print progress.</param>
      <returns>
        <b>true</b> if the document was printed, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.DocumentName">
      <summary>
            Gets or sets the name of the document (used to identify documents in print tasks and so on).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.EmfType">
      <summary>
            Gets or sets the type of metafiles created by the current document.
            <para>
            The default is <b>null</b> (the property is not defined at the multi-document level).
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.UseGdiPlusTextRendering">
      <summary>
            Gets or sets a value indicating whether text in the current document
            is rendered using GDI+ text API.
            <para>
            The default is <b>null</b> (the property is not defined at the multi-document level).
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.ColorizeHyperlinks">
      <summary>
            Gets or sets a value indicating whether hyperlinks in the report are colorized.
            This property only affects <see cref="N:C1.C1Report" /> items of the multi-document.
            <para>
            The default is <b>null</b> (the property is not defined at the multi-document level).
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.Outlines">
      <summary>
            Gets the <see cref="T:C1.C1Preview.OutlineNodeCollection" /> containing outline nodes specified
            for the multi-document.
            <para>
            Note that this collection does not include outlines of documents and reports
            contained within this multi-document. Use the <see cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" /> method
            to build the complete outline tree for the multi-document.
            </para><para>
            See remarks for more details.
            </para></summary>
      <remarks>
            The resulting outline for the multi-document - the one that is built by the
            <see cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" /> method, and what is shown for instance in the preview -
            is comprised of outline nodes defined in the multi-document's own <b>Outlines</b> collection,
            and of outlines of documents and reports represented by the multi-document's items.
            <para>
            The multi-document's own <b>Outlines</b> collection is processed first, and nodes from that
            collection are included in the resulting outline. If a node is also specified as the
            <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" /> of a contained <see cref="T:C1.C1Preview.C1MultiDocumentItem" />
            (i.e. the two nodes reference the same object), the whole outline of the document or report
            represented by that item is inserted into the resulting outline.
            Depending on the value of the multi-document item's <see cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />,
            the outline of the document or report is either nested within the outline node, or replaces it.
            </para><para>
            Outlines of documents and reports represented by items that are not included
            in the multi-document's <b>Outlines</b> collection
            (via the item's <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" /> property as described above)
            are automatically appended to the resulting outline sequentially.
            </para></remarks>
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.IsDirty">
      <summary>
            Gets a value indicating whether the current <b>C1MultiDocument</b>
            has been changed since it was last generated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.IsEmpty">
      <summary>
            Gets a value indicating whether the current <b>C1MultiDocument</b>
            is empty, i.e. has no <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> objects
            with data.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.IsGenerating">
      <summary>
            Indicates whether the document is currently being generated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.StorageType">
      <summary>
            Gets the temporary storage type used by the current multi-document.
            </summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.StoragePath" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.StoragePath">
      <summary>
            Gets the temporary directory used by the current multi-document if its
            temporary storage type is <see cref="F:C1.C1Preview.StorageType.Disk" />.
            </summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.StorageType" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.Items">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> objects
            containing documents included in the current <b>C1MultiDocument</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.DoEvents">
      <summary>
            Gets or sets a value indicating whether the current <see cref="T:C1.C1Preview.C1MultiDocument" />
            should handle Windows messages while generating.
            <para>The default value is false.</para></summary>
      <remarks>
        <para>Setting this property to true allows users to resize forms, click buttons, etc. while documents are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a
            "Cancel" button to stop the document generation (otherwise the user wouldn't be able to click the
            button until the generation is complete).</para>
        <para>Setting this property to false will cause documents to generate slightly faster.</para>
      </remarks>
      <example>
        <para>The code below implements "Generate" and "Cancel" buttons attached to a <see cref="T:C1.C1Preview.C1PrintDocument" />.</para>
        <para>The "Generate" button checks whether the document is busy before starting to generate it.
            This is necessary because the user could click the "Generate" button several times in a row, before the document got a 
            chance to finish generating. (Calling the <see cref="M:C1.C1Preview.C1MultiDocument.Generate" /> method while the component is busy throws an 
            exception.)</para>
        <para>The "Cancel" button checks whether the document is currently generating, and sets the <see cref="P:C1.C1Preview.C1MultiDocument.Cancel" /> 
            property to true if it is.</para>
        <code>
            _doc.DoEvents = true;
            
            private void Generate_Click(object sender, EventArgs e)
            {
               if (_doc.BusyState != BusyStateEnum.Ready)
                   Console.WriteLine("Cannot generate now, document is busy");
               else 
                   _doc.Generate();
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_doc.BusyState != BusyStateEnum.Ready) 
                   _doc.Cancel = true;
               else 
                   Console.WriteLine("Document is not generating, nothing to cancel");
            }
            </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.Cancel">
      <summary>
            Gets or sets a value indicating whether to cancel the generation of the current document.
            Note that this property is useful only if <see cref="P:C1.C1Preview.C1MultiDocument.DoEvents" />
            is set to <b>true</b>.
            </summary>
      <remarks>
            Setting this property to <b>true</b> can only be done while the current document is
            being generated (i.e. the value of the <see cref="P:C1.C1Preview.C1MultiDocument.BusyState" /> property is
            equal to <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />). An attempt to set this property
            to <b>true</b> when the document is not being generated will cause an exception.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.BusyState">
      <summary>
            Gets the current busy state of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.PageCount">
      <summary>
            Gets the total number of pages in the current multi-document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.UserData">
      <summary>
            Gets or sets arbitrary data associated with the current document.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.DocumentStarting">
      <summary>
            Occurs when the document generation is starting.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.DocumentEnded">
      <summary>
            Occurs when the document generation has ended.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.LongOperation">
      <summary>
            Occurs periodically during document generation.
            Allows to provide progress indication and the ability to cancel generation by the user.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.BusyStateChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Preview.C1MultiDocument.BusyState" /> property value has changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.PagesAdded">
      <summary>
            Occurs when one or more pages were added to the current multi-document.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.PagesChanged">
      <summary>
            Occurs when one or more pages within the current multi-document were changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.PagesClear">
      <summary>
            Occurs when all pages within the current multi-document were removed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemGenerating">
      <summary>
            Occurs when the generation of a document or report associated with a <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> is about to start.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemGenerated">
      <summary>
            Occurs when the generation of a document associated with a <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> has completed.
            On some systems garbage collection does not always work correctly without explicit calls to <b>GC</b>.
            Use this event to call <b>GC.Collect()</b> to ensure that multi-document generation does not cause an out of memory exception.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemAdding">
      <summary>
            Occurs when a <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> is about to be added to the current
            multi-document's <see cref="P:C1.C1Preview.C1MultiDocument.Items" /> collection.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemAdded">
      <summary>
            Occurs when a <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> has been added to the current
            multi-document's <see cref="P:C1.C1Preview.C1MultiDocument.Items" /> collection.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemRemoving">
      <summary>
            Occurs when a <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> is about to be removed from the current
            multi-document's <see cref="P:C1.C1Preview.C1MultiDocument.Items" /> collection.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemRemoved">
      <summary>
            Occurs when a <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> has been removed from the current
            multi-document's <see cref="P:C1.C1Preview.C1MultiDocument.Items" /> collection.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemsClearing">
      <summary>
            Occurs when the current multi-document's <see cref="P:C1.C1Preview.C1MultiDocument.Items" /> collection is about to be cleared.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemsClear">
      <summary>
            Occurs when the current multi-document's <see cref="P:C1.C1Preview.C1MultiDocument.Items" /> collection has been cleared.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemLoaded">
      <summary>
            Occurs when a <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> has been loaded, parameters (if any) have been prepared,
            but the report or document represented by the item has not been generated yet.
            Allows to adjust the properties of the report or document prior to generation
            (e.g. the data source of a <b>C1Report</b> may be assigned here).
            </summary>
    </member>
    <member name="T:C1.C1Preview.NestedOutlinesMode">
      <summary>
            Specifies how outlines of a document or report associated with a multi-document item
            are treated when the outline tree for the whole multi-document is prepared.
            </summary>
    </member>
    <member name="F:C1.C1Preview.NestedOutlinesMode.AddChildren">
      <summary>
            The outlines of the associated document or report are added as children of
            the multi-document item's outline node.
            </summary>
    </member>
    <member name="F:C1.C1Preview.NestedOutlinesMode.Replace">
      <summary>
            The outlines of the associated document or report replace
            the multi-document item's outline node.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1MultiDocumentItem">
      <summary>
            Represents an item (individual document or report) in a <see cref="T:C1.C1Preview.C1MultiDocument" />.
            </summary>
      <seealso cref="T:C1.C1Preview.C1MultiDocumentItemCollection" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> type.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.Finalize">
      <summary>
            The item descturctor.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.Dispose">
      <summary>
            Disposes the current multi-document item.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)">
      <summary>
            Sets the document represented by the current item.
            </summary>
      <param name="document">The document that is to be represented by this item.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.GetDocument">
      <summary>
            Gets the document represented by the current multi-document item.
            </summary>
      <returns>The document represented by this item.</returns>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.Outlines">
      <summary>
            Gets the collection of outlines defined on the document or report
            represented by the current multi-document item.
            <para>
            For details, see the remarks section of the <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" /> property.
            </para></summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.EmfType">
      <summary>
            Gets the value of the <b>EmfType</b> property of the document or report
            represented by the current multi-document item.
            This property is <b>null</b> if no document or report is associated
            with the current item.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.UseGdiPlusTextRendering">
      <summary>
            Gets the value of the <b>UseGdiPlusTextRendering</b> property of the document or report
            represented by the current multi-document item.
            This property is <b>null</b> if no document or report is associated
            with the current item.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.ColorizeHyperlinks">
      <summary>
            Gets the value of the <b>ColorizeHyperlinks</b> property of the <see cref="T:C1.C1Report.C1Report" />
            represented by the current multi-document item.
            This property is <b>null</b> the current item does not represent a <b>C1Report</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode">
      <summary>
            Gets or sets the outline node representing the current item in <see cref="P:C1.C1Preview.C1MultiDocument.Outlines" />.
            <para>
            For details, see the remarks section of the <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" /> property.
            </para></summary>
      <returns>The combined outline for the multi-document.</returns>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode">
      <summary>
            Gets or sets a value specifying how outlines of the document or report
            represented by the current item will be treated when the outline for the
            whole multi-document is prepared.
            This property is ignored if <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" /> is <b>null</b>.
            <para>
            For details, see the remarks section of the <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" /> property.
            </para></summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.MultiDocument">
      <summary>
            Gets <see cref="T:C1.C1Preview.C1MultiDocument" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1MultiDocumentItemCollection" /> collection containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.Index">
      <summary>
            Gets the index of the current item in the containing collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.FirstPageIndex">
      <summary>
            Gets the 0-based index of the first page of the document associated
            with the current item within the containing <see cref="T:C1.C1Preview.C1MultiDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.LastPageIndex">
      <summary>
            Gets the 0-based index of the last page of the document associated
            with the current item within the containing <see cref="T:C1.C1Preview.C1MultiDocument" />.
            <para>
            The value is undetermined if the associated document has not been generated.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.PageCount">
      <summary>
            Gets the total number of pages in the document associated
            with the current item.
            <para>
            The value is <b>-1</b> if the associated document has not been generated.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.StorageFileName">
      <summary>
            Gets the name of the disk file used to store the document associated with the current item.
            If the item is stored in memory, this value is <b>null</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.FileNames">
      <summary>
            Gets the list of file names used to store the document or report represented by the current item.
            If this item is stored in memory, this value is <b>null</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.IsEmpty">
      <summary>
            Gets a value indicating whether the current item is empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.PageNumberingChange">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.C1MultiDocumentItem.PageNumberingChange" /> object which is
            applied to the first page of this <see cref="T:C1.C1Preview.C1MultiDocumentItem" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1MultiDocumentItemCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> type.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Clear">
      <summary>
            Clears the current collection, disposing all contained <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.FindByOutlineNode(C1.C1Preview.OutlineNode)">
      <summary>
            Searches the items in this collection for a <see cref="T:C1.C1Preview.C1MultiDocumentItem" />
            with the specified value of the <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" /> property.
            </summary>
      <param name="outlineNode">The outline node to search for.</param>
      <returns>The requested item or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Preview.C1PrintDocument)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.C1MultiDocumentItem" />, associates it with the specified document,
            and adds it to the current collection.
            <para>
            Note that the passed document reference is not stored in the created item,
            see <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" /> for details.
            </para></summary>
      <param name="document">The document that is associated with the new item.</param>
      <returns>The newly created item.</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Report.C1Report)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.C1MultiDocumentItem" />, associates it with the specified report,
            and adds it to the current collection.
            <para>
            Note that the passed document reference is not stored in the created item,
            see <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" /> for details.
            </para></summary>
      <param name="report">The report that is associated with the new item.</param>
      <returns>The newly created item.</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Rdl.C1RdlReportBase)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.C1MultiDocumentItem" />, associates it with the specified report,
            and adds it to the current collection.
            <para>
            Note that the passed document reference is not stored in the created item,
            see <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" /> for details.
            </para></summary>
      <param name="report">The report that is associated with the new item.</param>
      <returns>The newly created item.</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Preview.C1MultiDocumentItem)">
      <summary>
            Adds the specified item to the current collection.
            </summary>
      <param name="item">The item that is added.</param>
      <returns>The index of the added item within the collection.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Insert(System.Int32,C1.C1Preview.C1PrintDocument)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.C1MultiDocumentItem" />, associates it with the specified document,
            and inserts it into the current collection at the specified index.
            <para>
            Note that the passed document reference is not stored in the created item,
            see <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" /> for details.
            </para></summary>
      <param name="index">The zero-based index at which the new item should be inserted.</param>
      <param name="document">The document that is associated with the new item.</param>
      <returns>The newly created item.</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Insert(System.Int32,C1.C1Preview.C1MultiDocumentItem)">
      <summary>
            Inserts an item into the current collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which the item should be inserted.</param>
      <param name="item">The item to insert.</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Remove(C1.C1Preview.C1MultiDocumentItem)">
      <summary>
            Removes an item from the current collection.
            </summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItemCollection.MultiDocument">
      <summary>
            Gets <see cref="T:C1.C1Preview.C1MultiDocument" /> containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItemCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.C1MultiDocumentItem" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.DataElementStyle">
      <summary>
            Indicates whether leaf-level values (for example, text box values and chart data values)
            should render as elements or attributes.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataElementStyle.Auto">
      <summary>
            Data element style is determined automatically.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataElementStyle.Attribute">
      <summary>
            Render values as attributes.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataElementStyle.Element">
      <summary>
            Render values as elements.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.ShouldNeverBeHereException">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.C1RdlReportBase">
      <summary>
            The abstract base class for reports implementing various flavors of
            RDL (Report Definition Language) specification.
            </summary>
      <seealso cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.#ctor">
      <summary>
            Initializes a new instance of <b>C1RdlReportBase</b>.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Finalize">
      <summary>
            Destructs the current instance of <b>C1RdlReportBase</b>.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Dispose(System.Boolean)">
      <summary>
            Releases the resoureces used by <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <param name="disposing">
        <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.ClearTemporaryInfo">
      <summary>
            Clears all temporary data created during report generation.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.IsRdlVersionSupported(C1.C1Rdl.RdlFormatVersion)">
      <summary>
            Tests whether a specified RDL format version is supported by the current component.
            </summary>
      <param name="rdlFormatVersion">The RDL format version to test.</param>
      <returns>
        <b>true</b> if the specified format version is supported, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.ClearGeneratedPages">
      <summary>
            Clears the pages and other info produced by the document generation.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.AssignFrom(C1.C1Rdl.C1RdlReportBase)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.C1RdlReportBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Clear">
      <summary>
            Clears the current report, sets all properties to their default values.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Load(System.IO.Stream)">
      <summary>
            Loads a report definition from a stream into the current report.
            The stream should contain an RDL report definition in the supported format.
            </summary>
      <param name="stream">The stream containing the report definition.</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Load(System.String)">
      <summary>
            Loads a report definition from a file into the current report.
            The file should contain an RDL report definition in the supported format.
            </summary>
      <param name="fileName">The file containing the report definition.</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Save(System.IO.Stream)">
      <summary>
            Saves the currently loaded report definition to a stream.
            </summary>
      <param name="stream">The target stream.</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Save(System.String)">
      <summary>
            Saves the currently loaded report definition to a disk file.
            </summary>
      <param name="fileName">The target file name.</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Render">
      <summary>
            Renders the report.
            </summary>
      <remarks>
            This method is called implicitly when the <see cref="P:C1.C1Rdl.C1RdlReportBase.C1Document" /> property is accessed,
            so you rarely have to call it directly from your code.
            </remarks>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.FromStream(System.IO.Stream)">
      <summary>
            Creates a new instance of a type derived from <see cref="T:C1.C1Rdl.C1RdlReportBase" />
            that supports the RDL format contained in the specified stream.
            The specific type is determined by the version of the RDL in the stream.
            </summary>
      <param name="stream">The stream from which to load the report.</param>
      <returns>The report component that was created.</returns>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.FromFile(System.String)">
      <summary>
            Creates a new instance of a type derived from <see cref="T:C1.C1Rdl.C1RdlReportBase" />
            that supports the RDL format contained in the specified file.
            The specific type is determined by the version of the RDL in the file.
            </summary>
      <param name="fileName">The file name from which to load the report.</param>
      <returns>The report component that was created.</returns>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.DocumentName">
      <summary>
            Gets the name of the document (used to identify reports in print tasks and so on).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.RdlVersion">
      <summary>
            Gets or sets the RDL format version of the currently loaded report definition.
            <para>
            Changing the value of this property after a report has been loaded
            allows to save it in the newly specified format version.
            </para></summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.C1Document">
      <summary>
            Gets a <see cref="T:C1.C1Preview.C1PrintDocument" /> object representing the report.
            Note that if the report is empty, it is rendered before this property returns.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.IsEmpty">
      <summary>
            Gets a value indicating whether the current report has not been generated
            (i.e. has no generated pages).
            <para>
            Note that this property does not depend on whether a report definition has been
            loaded into the current report.
            </para></summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.Warnings">
      <summary>
            Gets the collection of warnings produced when the current report was generated.
            If this is a subreport then the master report's collection of warnings is returned.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.ExecutionTime">
      <summary>
            Gets the date/time when the report began generating.
            If this is a subreport then the master report's <c>ExecutionTime</c> is returned.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.FileName">
      <summary>
            Gets the file name from which the current report definition has been loaded,
            or where it has been last saved.
            </summary>
      <seealso cref="M:C1.C1Rdl.C1RdlReportBase.Load(System.String)" />
      <seealso cref="M:C1.C1Rdl.C1RdlReportBase.Save(System.String)" />
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.GeneratingComplete">
      <summary>
            If the current report is generating (see <see cref="P:C1.C1Rdl.C1RdlReportBase.IsBusy" />),
            gets the approximate completion ratio, from 0 (0% complete) to 1 (100% complete).
            If the report is currently not generating, gets 1.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.IsBusy">
      <summary>
            Gets a value that determines whether a report is currently being generated.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.UserData">
      <summary>
            Gets or sets arbitrary data associated with the current report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.ReportDefinition">
      <summary>
            Gets or sets an Xml string containing the complete report definition.
            </summary>
      <remarks>
            This property can be used to store report definitions into databases, to place them in the clipboard, 
            or to copy reports from one RDL report component to another.
            </remarks>
    </member>
    <member name="E:C1.C1Rdl.C1RdlReportBase.LongOperation">
      <summary>
            Occurs periodically during report generation.
            Allows to provide progress indication and the ability to cancel generation to the user.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Drillthrough">
      <summary>
            Represents information about a drillthrough action.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner.SetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>
            For internal use.
            </summary>
      <param name="host">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner.GetChildren">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner.HostType">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Drillthrough.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Drillthrough.AssignFrom(C1.C1Rdl.Rdl2008.Drillthrough)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" /> object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Drillthrough.ReportName">
      <summary>
            Gets or sets the full folder path (for example, “/salesreports/orderdetails”),
            relative path (for example, “../orderdetails”) or URL
            (for example, “http://reportserver/reports/sales/orderdetails”) of the
            drillthrough report.
            Relative paths start in the same folder as the report.
            <para>
            Note: If the current report is being used as a subreport,
            the top-level report location is used as the base of the relative path.
            </para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Drillthrough.Parameters">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Drillthrough.Parameters" /> collection containing
            parameters to the drillthrough report.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Action">
      <summary>
            Defines a hyperlink, bookmark link or drillthrough action associated with 
            a report element.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Action.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Action" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Action.AssignFrom(C1.C1Rdl.Rdl2008.Action)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Action" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.Actions">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Action.Actions" /> collection containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.Hyperlink">
      <summary>
            Gets or sets an <see cref="T:C1.C1Rdl.RdlString" /> that evaluates to the URL of the hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.Drillthrough">
      <summary>
            Gets a <see cref="P:C1.C1Rdl.Rdl2008.Action.Drillthrough" /> object containing info about the drillthrough report
            that should be executed when the current hyperlink is clicked.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.BookmarkLink">
      <summary>
            Gets or sets an <see cref="T:C1.C1Rdl.RdlString" /> that evaluates to the ID of a bookmark in the
            report to go to when this report item is clicked on.
            <para>
            (If no bookmark with this ID is found, the link will not be included in
            the report. If the bookmark is hidden, the link will go to the start of
            the page the bookmark is on. If multiple bookmarks with this ID are found,
            the link will go to the first bookmark.)
            </para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Actions">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Action" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Actions.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Actions" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Actions.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.Action" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Actions.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Action" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ActionInfo">
      <summary>
            Defines a list of actions associated with a <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ActionInfo.AssignFrom(C1.C1Rdl.Rdl2008.ActionInfo)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ActionInfo" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ActionInfo.Actions">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ActionInfo.Actions" /> collection represented by the current object.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Body">
      <summary>
            Represents the visual elements of the body of the report.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportElement">
      <summary>
            Abstract base class for the report elements such as
            <see cref="T:C1.C1Rdl.Rdl2008.Body" />, <see cref="T:C1.C1Rdl.Rdl2008.PageSection" />, <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.IStyleOwner">
      <summary>
            Should be implemented by a class that owns a <see cref="T:C1.C1Rdl.Rdl2008.Style" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefBorderColor">
      <summary>
            Gets the default border color.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefColor">
      <summary>
            Gets the default color.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefBackgroundColor">
      <summary>
            Gets the default background color.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefBackgroundGradientEndColor">
      <summary>
            Gets the default gradient end color.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>
            For internal use.
            </summary>
      <param name="children">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.ScriptHostOwnerSetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>
            For internal use.
            </summary>
      <param name="host">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.Clear">
      <summary>
            Clears the current object, sets all properties to their default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportElement.ScriptContextHostType">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportElement.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ReportElement.Style" /> object defining style information for the current <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.#ctor(C1.C1Rdl.Rdl2008.C1RdlReport)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Body" /> class.
            </summary>
      <param name="owner">
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>
            For internal use.
            </summary>
      <param name="children">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Body" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.Clear">
      <summary>
            Clears the current object, sets all properties to their default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Body.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Body.ReportItems">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Body.ReportItems" /> collection containing elements of the current report body.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Body.Height">
      <summary>
            Gets or sets the height of the current report body.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataElementStyle">
      <summary>
            Indicates whether leaf-level values (for example, text box values and chart data values)
            should render as elements or attributes.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementStyle.Auto">
      <summary>
            Data element style is determined automatically.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementStyle.Attribute">
      <summary>
            Render values as attributes.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementStyle.Element">
      <summary>
            Render values as elements.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.C1RdlReport">
      <summary>
            Represents an RDL (Report Definition Language) report defined using the
            2008 version of the RDL specification.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.ClearTemporaryInfo">
      <summary>
            Overridden. Clears all temporary data created during report generation.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.AssignFrom(C1.C1Rdl.C1RdlReportBase)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.Clear">
      <summary>
            Clears the current report, sets all properties to their default values.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.GetSubreports">
      <summary>
            Scans the current report definition and retrieves the list of report names
            (<see cref="P:C1.C1Rdl.Rdl2008.Subreport.ReportName" />) of <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Subreport" /> items
            contained within the current report.
            </summary>
      <returns>The list of report names, or an empty list if there are no subreports.</returns>
      <seealso cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.HasSubreports" />
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DocumentName">
      <summary>
            Overridden. Returns the current report's <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Description" />
            (used to identify reports in print tasks and so on).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.ShowParametersInputDialog">
      <summary>
            Gets or sets a value indicating whether a dialog allowing to input values for some or all
            of the report parameters (elements of the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.ReportParameters" /> collection) should be shown
            to the user before the report generates. To include or exclude parameters from the dialog,
            use <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.Hidden" />.
            <para>The default value is <b>true</b>.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.UseGdiPlusTextRendering">
      <summary>
            Gets or sets a value indicating whether all text in the current report
            should be rendered using GDI+ text API.
            <para>The default value is <b>false</b>.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.EmfType">
      <summary>
            Gets or sets the type of metafiles created by the current report.
            The default is <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Description">
      <summary>
            Gets or sets the description of the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Author">
      <summary>
            Gets or sets the author of the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.AutoRefresh">
      <summary>
            Gets or sets the rate, in seconds, at which the report page
            (when rendered as HTML) automatically refreshes. Must be nonnegative.
            If omitted or zero, the report page should not automatically refresh.
            Max: 2147483647.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataSources">
      <summary>
            Gets the data sources from which data sets are taken for this report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataSets">
      <summary>
            Gets or the data that is displayed as part of the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Body">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Body" /> object describing how the body of the
            report is structured and rendered.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.ReportParameters">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.ReportParameters" /> collection containing 
            parameters of the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.CustomProperties">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.CustomProperties" /> object containing
            custom information to be handed to the report rendering component
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Code">
      <summary>
            Gets or sets the string containing
            definitions for custom functions to be used in expressions in the report.
            Custom functions must be instance methods.
            If a function OnInit() is defined within code, it is called during parameter,
            report and page header/footer initialization.
            The function must be defined as Protected and Overrides.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Width">
      <summary>
            Gets or sets the width of the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Page">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Page" /> object
            containing page layout information about the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.EmbeddedImages">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.EmbeddedImages" /> collection containing
            images embedded in the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Language">
      <summary>
            Gets or sets the primary language of the text.
            Used as the default for all language-dependent expressions in the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.CodeModules">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.CodeModules" /> collection containing
            code modules to make available to the report for use in expressions.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Classes">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Classes" /> collection containing
            info about classes to instantiate during report initialization.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Variables">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Variables" /> collection containing
            variables defined for the report as a whole.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DeferVariableEvaluation">
      <summary>
            Gets or sets a value indicating that variables throughout the report
            are not required to be pre-evaluated at the start of report processing and
            may be evaluated on-demand based on usage.
            Deferred variable evaluation can improve performance but should not be used
            if any variables are time-dependent.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.ConsumeContainerWhitespace">
      <summary>
            Gets or sets a value indicating that all whitespace in containers
            (such as <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Body" /> and <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" />) should be consumed when
            contents grow rather than preserving the minimum whitespace between the contents
            and the container.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataTransform">
      <summary>
            Gets or sets the location to a transformation to apply to a report data rendering.
            This can be a full folder path (for example, “/xsl/xfrm.xsl”) or relative
            path (for example “xfrm.xsl”).
            Relative paths start in the same folder as the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataSchema">
      <summary>
            Gets or sets the schema or namespace to use for the report data rendering.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataElementName">
      <summary>
            Gets or sets the name of a top level element that represents the report data.
            Default: Report. Must be a CLS-compliant identifier.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataElementStyle">
      <summary>
            Gets or sets a value indicating whether leaf-level values
            (for example, text box values and chart data values)
            should render as elements or attributes.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.HasSubreports">
      <summary>
            Gets a value indicating whether the current report contains any <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Subreport" /> items.
            </summary>
      <seealso cref="M:C1.C1Rdl.Rdl2008.C1RdlReport.GetSubreports" />
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Class">
      <summary>
            Contains information about a class to instantiate during report initialization.
            This class instance can be used in expressions throughout the report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Class.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Class" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Class.ClassName">
      <summary>
            Gets or sets the name of the class.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Class.InstanceName">
      <summary>
            Gets or sets the name of the member variable of Class to assign the class to.
            This member variable can be used in expressions throughout the report.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Classes">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Class" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Classes.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Classes" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Classes.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.Class" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Classes.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Class" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CodeModule">
      <summary>
            Represents a hyperlink, a bookmark link or a drillthrough action associated with 
            a report element.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> class.
            </summary>
      <param name="name">Value of <see cref="P:C1.C1Rdl.Rdl2008.CodeModule.Name" /> property.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.AssignFrom(C1.C1Rdl.Rdl2008.CodeModule)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CodeModule.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.CodeModules" /> collection containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CodeModule.Name">
      <summary>
            Gets or sets the name of the current <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CodeModule.TypeConverter">
      <summary>
            Converts <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> to/from other types.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>A <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> representing <paramref name="str" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CodeModules">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModules.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.CodeModules" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModules.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CodeModules.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.UserDefinedProperty">
      <summary>
            The <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />, <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" /> and <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" /> 
            allows to pass information to custom report renderers and custom report items.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperty.#ctor(C1.C1Rdl.RdlString,C1.C1Rdl.RdlObject)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> class.
            </summary>
      <param name="name">Value of <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Name" /> property.</param>
      <param name="value">Value of <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Value" /> property.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperty.AssignFrom(C1.C1Rdl.Rdl2008.UserDefinedProperty)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Name">
      <summary>
            Gets or sets name of the property.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Value">
      <summary>
            Gets or sets value of the property.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.UserDefinedProperties">
      <summary>
            Represents the collection of <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.Add(C1.C1Rdl.Rdl2008.UserDefinedProperty)">
      <summary>
            Adds the specified <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> to the current collection.
            </summary>
      <param name="value">The object to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.Add(C1.C1Rdl.RdlString,C1.C1Rdl.RdlObject)">
      <summary>
            Creates and adds <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> object to the current collection.
            </summary>
      <param name="name">Value of <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Name" /> property.</param>
      <param name="value">Value of <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Value" /> property.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.FindByName(System.String)">
      <summary>
            Searches for <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> object with specified name.
            Search is not case sensitive.
            </summary>
      <param name="name">Name of the <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />.</param>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> object or null.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.AssignFrom(C1.C1Rdl.Rdl2008.UserDefinedProperties)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperties.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> at the specified index.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperties.Item(System.String)">
      <summary>
            Gets or sets value of <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" /> with specified name
            if object is not found returns null.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CustomProperties">
      <summary>
            The <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />, <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" /> and <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" /> 
            allows to pass information to custom report renderers and custom report items.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CustomProperties.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CustomProperties.AssignFrom(C1.C1Rdl.Rdl2008.CustomProperties)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CustomProperties.Clear">
      <summary>
            Clears <see cref="P:C1.C1Rdl.Rdl2008.CustomProperties.UserDefined" /> collection and resets all properties
            to default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CustomProperties.UserDefined">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" /> collection.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataAggregateFunction">
      <summary>
            Abstract base class for data aggregate functions.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.IsNull(System.Object)">
      <summary>
            Tests whether an object represents a null value.
            </summary>
      <param name="v">The object to check.</param>
      <returns>
        <b>true</b> if <paramref name="v" /> represents a null value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.IsNumber(System.Object)">
      <summary>
            Tests whether an object represents a number.
            </summary>
      <param name="v">The object to check.</param>
      <returns>
        <b>true</b> if <paramref name="v" /> represents a number, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.AsNumber(System.Object)">
      <summary>
            Converts an object to a double number.
            </summary>
      <param name="v">The object to convert.</param>
      <returns>The converted double value.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.Reset">
      <summary>
            This method is called when aggregate calculation starts.
            <para>Should be overridden in derived classes.</para></summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.Iterate(System.Object)">
      <summary>
            This method is called for each value in the data scope.
            <para>Should be overridden in derived classes.</para></summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.Finish">
      <summary>
            This method is called when iteration over data scope is finished.
            <para>Should be overridden in derived classes.</para></summary>
      <returns>The value of the aggregate function.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.GetEmptyValue">
      <summary>
            This method is called when the list of aggregates values is empty.
            </summary>
      <returns>The value of the aggregate function when the list of aggregates values is empty.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SumAgg">
      <summary>
            Represents the summary (SUM) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SumAgg.Reset">
      <summary>
            Resets the current aggregate.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SumAgg.Iterate(System.Object)">
      <summary>
            Aggregates a value.
            </summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SumAgg.Finish">
      <summary>
            Returns the aggregated value.
            </summary>
      <returns>The aggregated value</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.AvgAgg">
      <summary>
            Represents the average (AVG) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.AvgAgg.Reset">
      <summary>
            Resets the current aggregate.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.AvgAgg.Iterate(System.Object)">
      <summary>
            Aggregates a value.
            </summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.AvgAgg.Finish">
      <summary>
            Returns the aggregated value.
            </summary>
      <returns>The aggregated value</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.MaxAgg">
      <summary>
            Represents the maximum (MAX) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MaxAgg.Reset">
      <summary>
            Resets the current aggregate.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MaxAgg.Iterate(System.Object)">
      <summary>
            Aggregates a value.
            </summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MaxAgg.Finish">
      <summary>
            Returns the aggregated value.
            </summary>
      <returns>The aggregated value</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.MinAgg">
      <summary>
            Represents the minimum (MIN) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MinAgg.Reset">
      <summary>
            Resets the current aggregate.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MinAgg.Iterate(System.Object)">
      <summary>
            Aggregates a value.
            </summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MinAgg.Finish">
      <summary>
            Returns the aggregated value.
            </summary>
      <returns>The aggregated value</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CountAgg">
      <summary>
            Represents the count (COUNT) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.Reset">
      <summary>
            Resets the current aggregate.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.Iterate(System.Object)">
      <summary>
            Aggregates a value.
            </summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.Finish">
      <summary>
            Returns the aggregated value.
            </summary>
      <returns>The aggregated value</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.GetEmptyValue">
      <summary>
            Gets the aggregate value corresponding to an empty list.
            </summary>
      <returns>Zero (<b>0</b>).</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CountDistinctAgg">
      <summary>
            Represents the "count distinct" aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.Reset">
      <summary>
            Resets the current aggregate.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.Iterate(System.Object)">
      <summary>
            Aggregates a value.
            </summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.Finish">
      <summary>
            Returns the aggregated value.
            </summary>
      <returns>The aggregated value</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.GetEmptyValue">
      <summary>
            Gets the aggregate value corresponding to an empty list.
            </summary>
      <returns>Zero (<b>0</b>).</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VarStDevAgg">
      <summary>
            The abstract base class for standard deviation and variance aggregates.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Reset">
      <summary>
            Resets the current aggregate.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Iterate(System.Object)">
      <summary>
            Aggregates a value.
            </summary>
      <param name="v">A value to aggregate.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Finish">
      <summary>
            Returns the aggregated value.
            </summary>
      <returns>The aggregated value</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>
            Called by <see cref="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Finish" /> to calculate the aggregate value.
            </summary>
      <param name="average">The average value.</param>
      <param name="sumSquares">The sum of squared values.</param>
      <param name="valuesCount">The values count.</param>
      <returns>The aggregated value.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.StDevAgg">
      <summary>
            Represents the standard deviation (STDEV) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.StDevAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>
            Calculates the aggregated value.
            </summary>
      <param name="average">The average value.</param>
      <param name="sumSquares">The sum of squared values.</param>
      <param name="valuesCount">The values count.</param>
      <returns>The aggregated value.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.StDevPAgg">
      <summary>
            Represents the standard deviation based on the entire population (STDEVP) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.StDevPAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>
            Calculates the aggregated value.
            </summary>
      <param name="average">The average value.</param>
      <param name="sumSquares">The sum of squared values.</param>
      <param name="valuesCount">The values count.</param>
      <returns>The aggregated value.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VarAgg">
      <summary>
            Represents the variance (VAR) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>
            Calculates the aggregated value.
            </summary>
      <param name="average">The average value.</param>
      <param name="sumSquares">The sum of squared values.</param>
      <param name="valuesCount">The values count.</param>
      <returns>The aggregated value.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VarPAgg">
      <summary>
            Represents the variance based on the entire population (VARP) aggregate function.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarPAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>
            Calculates the aggregated value.
            </summary>
      <param name="average">The average value.</param>
      <param name="sumSquares">The sum of squared values.</param>
      <param name="valuesCount">The values count.</param>
      <returns>The aggregated value.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.QueryParameter">
      <summary>
            Contains information about a parameter that is passed to the data source
            as part of the query.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.QueryParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.QueryParameter.Value">
      <summary>
            Gets or sets a value of <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" /> can be specified as expression.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.QueryParameters">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.QueryParameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.QueryParameters" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.QueryParameters.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.QueryParameters.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CommandType">
      <summary>
            Defines types of <see cref="T:C1.C1Rdl.Rdl2008.Query" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.CommandType.Text">
      <summary>
            The <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" /> of a
            <see cref="T:C1.C1Rdl.Rdl2008.Query" /> contains the SQL query text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.CommandType.StoredProcedure">
      <summary>
            The <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" /> of a
            <see cref="T:C1.C1Rdl.Rdl2008.Query" /> contains the name
            of a stored procedure that should be executed to retrieve the data.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.CommandType.TableDirect">
      <summary>
            The <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" /> of a
            <see cref="T:C1.C1Rdl.Rdl2008.Query" /> contains the name
            of a data table.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Query">
      <summary>
            Contains the description of the query to execute to retrieve the data for the report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Query.AssignFrom(C1.C1Rdl.Rdl2008.Query)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Query" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.Owner">
      <summary>
            Gets a <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> object containing this <see cref="T:C1.C1Rdl.Rdl2008.Query" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.DataSourceName">
      <summary>
            Gets or sets name of <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> to execute the query against.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.CommandType">
      <summary>
            Gets or sets the value indicating what type of query is contained in the <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.CommandText">
      <summary>
            Gets or sets the query to execute to obtain the data for the report.
            Can be specified as expression.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.Parameters">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.QueryParameters" /> collection containing a list of parameters
            that are passed to the data source as part of the query.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.Timeout">
      <summary>
            Gets or sets the number of seconds to allow for the query to run before timing out.
            Must be nonnegative. If zero (default), the query should not time out. Max: 2147483647.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Field">
      <summary>
            Contains information about a field in the data model of the report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Field.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Field.DataField">
      <summary>
            Gets or sets the name of the field in the query.
            Note: Data field names do not have to be unique. Multiple fields can refer to the same data field name.
            Field must have exactly one of the following: <see cref="P:C1.C1Rdl.Rdl2008.Field.DataField" /> or <see cref="P:C1.C1Rdl.Rdl2008.Field.Value" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Field.Value">
      <summary>
            Gets or sets the expression that evaluates to the value of this field.
            For example: =Fields!Price.Value+Fields!Tax.Value. 
            The expression cannot contain aggregates or references to report items.
            Field must have exactly one of the following: <see cref="P:C1.C1Rdl.Rdl2008.Field.DataField" /> or <see cref="P:C1.C1Rdl.Rdl2008.Field.Value" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Fields">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Field" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Fields.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Fields" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Fields.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Fields.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Field" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Filter">
      <summary>
            Describes a filter to apply to rows of data in a data set or data
            region or to apply to group instances.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Filter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filter.AssignFrom(C1.C1Rdl.Rdl2008.Filter)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Filter" /> to the current object.
            <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" /> and <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" /> are copied by reference.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.Filters" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Expression">
      <summary>
            Gets or sets an expression that is evaluated for each instance within
            the group or each row of the data set or data region and compared
            (via the <see cref="P:C1.C1Rdl.Rdl2008.Filter.Operator" />) to the <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />.
            Failed comparisons result in the row/instance being filtered out of
            the data set, data region or group.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Operator">
      <summary>
            Gets or sets the operator used to compare
            the <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" /> and <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Values">
      <summary>
            Gets the values to compare to the <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" />.
            For Equal, Like, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan,
            LessThanOrEqual, TopN, BottomN, TopPercent and BottomPercent,
            there must be exactly one FilterValue.
            For TopN and BottomN, the FilterValue expression must evaluate
            to an integer.
            For TopPercent and BottomPercent, the FilterValue expression must evaluate
            to an integer or float.
            For Between, there must be exactly two FilterValue elements.
            For In, the <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" /> are treated as a set 
            (if the <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" /> value appears anywhere in the set
            of <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />, the instance is not filtered out.)
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Filters">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Filter" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Filters" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filters.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.Filter" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filters.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Filter" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSet">
      <summary>
            Contains information about a set of data to display as a part of the report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSet.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Report">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.DataSets" /> collection owning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Fields">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.DataSet.Fields" /> collection containing fields of the data set.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Query">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.DataSet.Query" /> object containing
            information about the data source, including connection information,
            query, and so on, required to get the data from the data source.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.CaseSensitivity">
      <summary>
            Gets or sets a value indicating whether the data is case sensitive.
            <list type="bullet"><item><term><b>Auto</b></term><description>Default. The case sensitivity setting should be autoderived by querying the data provider.
            Defaults to False if the data provider does not support that method.</description></item><item><term><b>True</b></term><description>Data in this data set is case sensitive.</description></item><item><term><b>False</b></term><description>Data in this data set is case insensitive.</description></item></list></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Collation">
      <summary>
            Gets or sets the locale to use for the collation sequence for sorting data.
            Uses the standard Microsoft SQL Server collation names.
            If no Collation is specified, the collation setting should be autoderived
            by querying the data provider. Defaults to the collation corresponding to
            the report’s <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Language" /> property if the data provider does not support
            that method or returns an unsupported or invalid value.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.AccentSensitivity">
      <summary>
            Gets or sets a value indicating whether the data is accent sensitive.
            <list type="bullet"><item><term><b>Auto</b></term><description>Default. The accent sensitivity setting should be autoderived by querying the data provider.
            Defaults to False if the data provider does not support that method.</description></item><item><term><b>True</b></term><description>Data in this data set is accent sensitive.</description></item><item><term><b>False</b></term><description>Data in this data set is accent insensitive.</description></item></list></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.KanatypeSensitivity">
      <summary>
            Gets or sets a value indicating whether the data is kanatype sensitive.
            <list type="bullet"><item><term><b>Auto</b></term></item><description>Default. The kanatype sensitivity setting should be autoderived by querying the data provider. Defaults to False if the data provider does not support that method.</description><item><term><b>True</b></term><description>Data in this data set is kanatype sensitive.</description></item><item><term><b>False</b></term><description>Data in this data set is kanatype insensitive.</description></item></list></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.WidthSensitivity">
      <summary>
            Gets or sets a value indicating whether the data is width sensitive.
            <list type="bullet"><item><term><b>Auto</b></term><description>Default. The width sensitivity setting should be autoderived by querying the data provider.
            Defaults to False if the data provider does not support that method.</description></item><item><term><b>True</b></term><description>Data in this data set is width sensitive.</description></item><item><term><b>False</b></term><description>Data in this data set is width insensitive.</description></item></list></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Filters">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.DataSet.Filters" /> collection containing filters to apply to
            each row of data in the data set.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSets">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSets.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.DataSets" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSets.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> type.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSets.FindByName(System.String)">
      <summary>
            Returns <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> with specified name.
            </summary>
      <param name="name">The name of the item to locate.</param>
      <returns>The specified item</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSets.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object owning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSets.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ConnectionProperties">
      <summary>
            Contains information describing how to connect to a data source.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ConnectionProperties.AssignFrom(C1.C1Rdl.Rdl2008.ConnectionProperties)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ConnectionProperties" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.DataProvider">
      <summary>
            Gets or sets the string defining the type of the data source
            (for example “SQL”, “OLEDB”, “OLEDB-MD”).
            This is the name of a registered data provider.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.ConnectString">
      <summary>
            Gets or sets the connection string for the data source.
            Can be specified as an expression.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.IntegratedSecurity">
      <summary>
            Gets or sets a value indicating whether this data source should be
            connected to using integrated security.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.Prompt">
      <summary>
            Gets or sets the prompt displayed to the user when prompting for database
            credentials for this data source.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSource">
      <summary>
            Represents a data source.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSource.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.DataSources" /> collection containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Transaction">
      <summary>
            Gets or sets a value indicating whether the data sets that use this
            data source should be executed in a single transaction.
            <para>The default is <b>false</b>.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" /> object containing information
            about how to connect to the current data source.
            <para>
            A <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> must have one and only one of the following properties
            specified: <see cref="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference" /> or <see cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" />.
            </para></summary>
      <seealso cref="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference" />
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference">
      <summary>
            Gets or sets the full folder path (for example, “/salesreports/salesdatabase”) 
            or relative path (for example, “salesdatabase”)
            to a data source on the same server.
            Relative paths start in the same folder as the report.
            The data source uses the connection properties from the DataSourceReference.
            If report rendered locally then this property should contain path
            to the RDS file describing datasource.
            <para>
            A <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> must have one and only one of the following properties
            specified: <see cref="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference" /> or <see cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" />.
            </para></summary>
      <seealso cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" />
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Recordset">
      <summary>
            Gets or sets the data source object that provides data to this <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> object.
            </summary>
      <remarks>
            Following types of objects can be assigned to this property:
            <list type="number"><item><term><see cref="T:System.Data.DataTable" /></term></item><item><term><see cref="T:System.Data.DataView" /></term></item><item><term>An object supporting <see cref="T:System.ComponentModel.IListSource" /> interface</term></item><item><term>An object supporting <see cref="T:System.Collections.IEnumerable" /> or <see cref="T:System.Collections.IEnumerator" /> interface</term></item></list>
            If the assigned object does not contain the list of fields (like a DataTable or a DataView),
            an attempt is made to retrieve the fields using the <see cref="T:System.ComponentModel.ITypedList" /> interface.
            If the <see cref="T:System.ComponentModel.ITypedList" /> interface is not supported, then the public properties
            of the first object in the collection are used as the fields.
            </remarks>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSources">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSources.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.DataSources" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSources.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> type.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSources.FindByName(System.String)">
      <summary>
            Finds a <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> with the specified name.
            </summary>
      <param name="name">The name of the item to locate.</param>
      <returns>The specified item</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSources.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSources.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.DataSource" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.EmbeddedImage">
      <summary>
            Represents an image embedded in the report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.EmbeddedImage.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.EmbeddedImage.MIMEType">
      <summary>
            Gets or sets the MIMEType for the image.
            Valid values are as follows: image/bmp, image/jpeg, image/gif, image/png, image/x-png.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.EmbeddedImage.ImageData">
      <summary>
            Gets or sets base-64 encoded image data.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.EmbeddedImages">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.EmbeddedImages.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImages" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.EmbeddedImages.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.EmbeddedImages.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Group">
      <summary>
            defines the expressions to group the data by.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Group.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Group" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Group.AssignFrom(C1.C1Rdl.Rdl2008.Group)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Group" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Name">
      <summary>
            Gets or sets name of the Group.
            No two group elements may have the same name.
            No group element may have the same name as a data set or a data region.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.DocumentMapLabel">
      <summary>
            Gets or sets a label to identify an instance of the group in
            the client UI (to provide a user-friendly label for searching).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Expressions">
      <summary>
            Gets the expressions by which to group the data.
            If empty, this is a detail group
            (that is, there is one instance of the group per detail row of data).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.PageBreak">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.Group.PageBreak" /> object defining page break behavior for this group.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Filters">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.Group.Filters" /> collection containing
            filters to apply to each instance of the group.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Parent">
      <summary>
            Gets or sets an expression that identifies the parent group in a recursive hierarchy.
            </summary>
      <remarks>
            Only allowed if the group has exactly one group expression.
            Indicates the following:
            1. Groups should be sorted according to the recursive hierarchy
            (Sort is still used to sort peer groups).
            2. Labels (in the document map) should be placed/indented
            according to the recursive hierarchy.
            3. Intra-group show/hide should toggle items according to
            the recursive hierarchy (see ToggleItem).
            If filters on the group eliminate a group instance’s parent,
            it is instead treated as a child of the parent’s parent.
            In the event of a loop, one of the parent-child relationships will be ignored.
            </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.DataElementName">
      <summary>
            Gets or sets the name to use for the data element for instances of this group.
            Default (if not specified): Name of the group.
            Must be a CLS-compliant identifier.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.DataElementOutput">
      <summary>
            Gets or sets value indicating 
            whether the instances of the group should appear in a data rendering.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Variables">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.Group.Variables" /> collection
            containing a set of variables to evaluate at the group level.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageSection">
      <summary>
            Defines the layout of report items to appear at the top or bottom of every page
            of the report.
            The <see cref="T:C1.C1Rdl.Rdl2008.PageSection" /> element itself is not used.
            Only subtypes of <see cref="T:C1.C1Rdl.Rdl2008.PageSection" /> are used: <see cref="T:C1.C1Rdl.Rdl2008.PageHeader" />, <see cref="T:C1.C1Rdl.Rdl2008.PageFooter" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageSection.#ctor(C1.C1Rdl.Rdl2008.Page)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.PageSection" /> class.
            </summary>
      <param name="owner">
        <see cref="T:C1.C1Rdl.Rdl2008.Page" /> object containing this object.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageSection.AssignFrom(C1.C1Rdl.Rdl2008.PageSection)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.PageSection" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageSection.Clear">
      <summary>
            Clears the current object, sets all properties to their default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Page" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.Report">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.Height">
      <summary>
            Gets or sets the height of the page section.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.PrintOnFirstPage">
      <summary>
            Gets or sets the value indicating if the page section should be shown
            on the first page of the report.
            Not used in single-page reports if this is a PageFooter.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.PrintOnLastPage">
      <summary>
            Gets or sets the value indicating if the page section should be shown
            on the last page of the report.
            Not used in single-page reports if this is a PageHeader.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.ReportItems">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.PageSection.ReportItems" /> collection containing 
            the elements of the page section layout.
            No data regions or subreports are allowed in the page section.
            All page breaks are ignored in the page section.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageHeader">
      <summary>
            Defines the layout of report items to appear at the top of every page
            of the report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageHeader.#ctor(C1.C1Rdl.Rdl2008.Page)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.PageHeader" /> class.
            </summary>
      <param name="owner">
        <see cref="T:C1.C1Rdl.Rdl2008.Page" /> object containing this object.</param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageFooter">
      <summary>
            Defines the layout of report items to appear at the bottom of every page
            of the report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageFooter.#ctor(C1.C1Rdl.Rdl2008.Page)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.PageFooter" /> class.
            </summary>
      <param name="owner">
        <see cref="T:C1.C1Rdl.Rdl2008.Page" /> object containing this object.</param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Page">
      <summary>
            Contains page layout information for the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Page.#ctor(C1.C1Rdl.Rdl2008.C1RdlReport)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Page" /> class.
            </summary>
      <param name="owner">
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Page.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Page" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Page.Clear">
      <summary>
            Clears the current object, sets all properties to their default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageHeader">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Page.PageHeader" /> object that is rendered at the top of
            each page of the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageFooter">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Page.PageFooter" /> object that is rendered at the bottom of
            each page of the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageHeight">
      <summary>
            Gets or sets the default height for rendering the report in a physical-page
            oriented renderer. Default: 11 in. Must be greater than 0 in.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageWidth">
      <summary>
            Gets or sets the default width for rendering the report in a physical-page
            oriented renderer. Default: 8.5 in. Must be greater than 0 in.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.InteractiveHeight">
      <summary>
            Gets or sets the default height for rendering the report when in an
            interactive renderer.
            There is no maximum size. A value of 0 (with any unit) indicates height should be unlimited.
            Defaults to <see cref="P:C1.C1Rdl.Rdl2008.Page.PageHeight" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.InteractiveWidth">
      <summary>
            Gets or sets the default width for rendering the report when in an
            interactive renderer.
            There is no maximum size. A value of 0 (with any unit) indicates width should be unlimited.
            Defaults to <see cref="P:C1.C1Rdl.Rdl2008.Page.PageWidth" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.LeftMargin">
      <summary>
            Gets or sets the width of the left margin. Default: 0 in.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.TopMargin">
      <summary>
            Gets or sets the width of the left margin. Default: 0 in.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.RightMargin">
      <summary>
            Gets or sets the width of the left margin. Default: 0 in.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.BottomMargin">
      <summary>
            Gets or sets the width of the left margin. Default: 0 in.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.Columns">
      <summary>
            Gets or sets the default number of columns for rendering the report.
            Default: 1. Min: 1. Max: 1000
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.ColumnSpacing">
      <summary>
            Gets or sets the spacing between each column in multi-column renderings.
            Default: 0.5 in.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BreakLocation">
      <summary>
            Defines positions to page break.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.Start">
      <summary>
            Page break should be before the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> or each instance of the <see cref="T:C1.C1Rdl.Rdl2008.Group" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.End">
      <summary>
            Page break should be after the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> or each instance of the <see cref="T:C1.C1Rdl.Rdl2008.Group" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.StartAndEnd">
      <summary>
            Page break should be before and after the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> or each instance of the <see cref="T:C1.C1Rdl.Rdl2008.Group" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.Between">
      <summary>
            Page break should be between each instance of the <see cref="T:C1.C1Rdl.Rdl2008.Group" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageBreak">
      <summary>
            Defines page break behavior for a <see cref="T:C1.C1Rdl.Rdl2008.Group" /> or <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageBreak.#ctor(C1.C1Rdl.Rdl2008.BreakLocation)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.PageBreak" /> class.
            </summary>
      <param name="breakLocation">Value of BreakLocation property.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageBreak.BreakLocation">
      <summary>
            Gets or sets value indicating where the page break should occur.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Parameter">
      <summary>
            Contains information about a parameter to a subreport or drillthrough.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Parameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Parameter" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Parameter.Value">
      <summary>
            Gets or sets value or expression that evaluates to the value to hand in for
            the parameter to the subreport or control.
            For <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" /> in <see cref="T:C1.C1Rdl.Rdl2008.Chart" />, this is the name of a
            DataField from which to obtain the value rather than an expression.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Parameter.Omit">
      <summary>
            Gets or sets value indicating the parameter should be skipped.
            Valid only for <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" /> parameters.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Parameters">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Parameter" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Parameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Parameters" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Parameters.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.Parameter" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Parameters.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Parameter" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.RenderRdlChart">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChart.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChart" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChart" /> object.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.RenderRdlChartFragment">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderFragment">
      <summary>
            Represents a fragment of a <see cref="P:C1.C1Preview.RenderFragment.RenderObject" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializeSpacing">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderFragment.Spacing" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderFragment.Spacing" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializeBorders">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderFragment.Borders" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderFragment.Borders" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializePadding">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderFragment.Padding" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderFragment.Padding" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializeDrawInner">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderFragment.DrawInner" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderFragment.DrawInner" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CreateSame">
      <summary>
            Creates instance of object same type as current <see cref="T:C1.C1Preview.RenderFragment" /> object.
            </summary>
      <returns>Created fragment object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetFlag(System.Int32)">
      <summary>
            For internal use.
            </summary>
      <param name="flagMask">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SetFlag(System.Int32,System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="flagMask">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ChangeResolvedDimensions(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Called when the resolved sizes of the object should be changed,
            for example when resolving of table is finished and
            height of all objects in a row is set to the same value.
            Object may ignore this changing and not change self size.
            This method is called only for <b>child</b> objects, so <paramref name="x" /> and <paramref name="y" /> are
            relative to the top left corner of the parent.
            </summary>
      <param name="x">New left coordinate of the fragment.</param>
      <param name="y">New top coordinate of the fragment.</param>
      <param name="width">New width of the fragment.</param>
      <param name="height">New height of the fragment.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.IsReresolvingNeeded(C1.C1Preview.PageAreaBase,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Gets a value indicating whether a full re-resolving of the whole render object is needed.
            </summary>
      <param name="pageArea">The area on the page.</param>
      <param name="left">The X coordinate on the page.</param>
      <param name="top">The Y coordinate on the page.</param>
      <param name="width">The width of the fragment.</param>
      <param name="height">The height of the fragment.</param>
      <returns>
        <b>true</b> if the <see cref="P:C1.C1Preview.RenderFragment.RenderObject" /> containing this fragment should be re-resolved.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLengthAbs(C1.C1Preview.RefDim,C1.C1Preview.LengthAbs,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>
            Calculates a value of dimension specified by LengthAbs.
            </summary>
      <param name="dim">Dimension to calculate.</param>
      <param name="length">LengthAbs object defining a value of dimension.</param>
      <param name="customObjectDimension">The custom object's dimension is resolved.</param>
      <param name="pageArea">Contains PageAreaBase object referenced by LengthAbs on exit.</param>
      <param name="value">Contains value of coordinate or size on exit.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetReferencedObject(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)">
      <summary>
            Gets the object referenced by a <see cref="T:C1.C1Preview.LengthRef" /> object.
            Called only from <see cref="M:C1.C1Preview.RenderFragment.ResolveLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)" />.
            </summary>
      <param name="dim">The dimension which is specified by <paramref name="length" />.</param>
      <param name="length">The <see cref="T:C1.C1Preview.LengthRef" /> to check.</param>
      <returns>The object referenced by <paramref name="length" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>
            Calculates a value of dimension specified by the LengthRef object.
            (dimension references a dimension of another object).
            </summary>
      <param name="dim">Dimension to calculate.</param>
      <param name="length">LengthRef object defining a value of dimension.</param>
      <param name="customObjectDimension">Indicates that the custom object dimension is resolved, coordinate of point for RenderLine, width of column for RenderTable etc.</param>
      <param name="pageArea">Contains PageAreaBase object referenced by LengthRef on exit.</param>
      <param name="value">Contains value of coordinate or size on exit.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLengthExp(C1.C1Preview.RefDim,C1.C1Preview.LengthExp,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>
            Calculates a value of dimension specified by the LengthExp object.
            (dimension is an expression).
            </summary>
      <param name="dim">Dimension to calculate.</param>
      <param name="length">LengthExp object defining a value of dimension.</param>
      <param name="customObjectDimension">Indicates that the custom object dimension is resolved, coordinate of point for RenderLine, width of column for RenderTable etc.</param>
      <param name="pageArea">Contains PageAreaBase object on exit.</param>
      <param name="value">Contains value of coordinate or size on exit.</param>
      <returns>
        <b>true</b> if no error occurs, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthAbs(C1.C1Preview.RefDim,C1.C1Preview.LengthAbs)">
      <summary>
            Resolves an absolute dimension of object.
            </summary>
      <param name="dim">Dimension to resolve.</param>
      <param name="length">LengthAbs object defining a value of dimension.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthAuto(C1.C1Preview.RefDim,C1.C1Preview.LengthAuto)">
      <summary>
            Resolves an auto dimension of object.
            </summary>
      <param name="dim">Dimension to resolve.</param>
      <param name="length">LengthAuto object defining a value of dimension.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)">
      <summary>
            Resolves a dimension of object specified as reference.
            </summary>
      <param name="dim">Dimension to resolve.</param>
      <param name="length">LengthRef object defining a value of dimension.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthExp(C1.C1Preview.RefDim,C1.C1Preview.LengthExp)">
      <summary>
            Resolves a expression dimension of object.
            </summary>
      <param name="dim">Dimension to resolve.</param>
      <param name="length">LengthExp object defining a value of dimension.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLength(C1.C1Preview.RefDim,C1.C1Preview.LengthBase)">
      <summary>
            For internal use.
            </summary>
      <param name="dim">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLength(C1.C1Preview.RefDim,C1.C1Preview.LengthBase,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>
            Calculates a value of dimension.
            Only LengthRef, LengthAbs, LengthExp can be specified as length.
            </summary>
      <param name="dim">Dimension to calculate.</param>
      <param name="length">Value of dimension, can be LengthAbs, LengthRef or LengthExp.</param>
      <param name="customObjectDimension">Indicates that the custom object dimension is resolved, coordinate of point for RenderLine, width of column for RenderTable etc.</param>
      <param name="pageArea">Contains PageAreaBase object on exit or nul if coordinate is relative.</param>
      <param name="value">Contains value of coordinate or size on exit.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLength(C1.C1Preview.RefDim)">
      <summary>
            This method can be called only by *another* RenderFragment object
            during resolving LengthRef object.
            </summary>
      <param name="dim">Dimension which must be resolved.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalPrepareForReresolving(C1.C1Preview.FragmentResolvedInfo,C1.C1Preview.FragmentResolvedInfo,C1.C1Preview.SplitParams,System.Boolean@)">
      <summary>
            Override this method to perform additional initializations of resolved info
            of object on reresolving.
            Some dimensions of object do not change when it splits, so you 
            can use this method to copy some information from 
            old resolved info to new resolved info.
            </summary>
      <param name="newResolvedInfo">
      </param>
      <param name="oldResolvedInfo">
      </param>
      <param name="p">
      </param>
      <param name="forceChildrenReresolving">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            Override this method to calculate the width of object on basis of its content,
            this method is called when width of object specified as auto, for example:
            <code>
            obj.Width = Unit.Auto;
            </code></summary>
      <param name="width">Height of area of contents of object.</param>
      <param name="height">Width of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            Override this method to calculate the height of object on basis of its content,
            this method is called when height of object specified as auto, for example:
            <code>
            obj.Height = Unit.Auto;
            </code></summary>
      <param name="width">Width of area of contents of object.</param>
      <param name="height">Height of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            Override this method to calculate sizes of object on basis of its content,
            this method is called when width and height of object specified as auto.
            </summary>
      <param name="width">Width of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
      <param name="height">Height of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveChildrenLayout(C1.C1Preview.LengthBase,C1.C1Preview.LengthBase)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            Override this method to define the drawing flags.
            These flags manage the object's painting.
            <seealso cref="T:C1.C1Preview.DrawingFlagsEnum" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FillRect(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,C1.C1Preview.Style,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="right">
      </param>
      <param name="bottom">
      </param>
      <param name="style">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FillRect(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.Style,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="rect">
      </param>
      <param name="style">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draws background of object.
            </summary>
      <param name="graphics">Graphics object on which the object is being drawn.</param>
      <param name="backgroundRect">Bounds of inner area of object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetRoundBorderClipping(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.OffsetsI,C1.C1Preview.DrawingFlagsEnum,System.Drawing.Drawing2D.GraphicsPath@,System.IntPtr@)">
      <summary>
            Retures GraphicsPath object representing the rounded object's border,
            if border is not rounded returns nil.
            </summary>
      <param name="graphics">The graphics to use.</param>
      <param name="outerRect">Outer rectangle of borders.</param>
      <param name="borders">Sizes of borders.</param>
      <param name="drawingFlags">Whether to use GDI drawing.</param>
      <param name="clipPath">OUT: clip path.</param>
      <param name="clipRegion">OUT: clip region.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawBorders(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.OffsetsI,C1.C1Preview.PageDrawParams)">
      <summary>
            Draws borders of object.
            </summary>
      <param name="graphics">Graphics object on which the object is being drawn.</param>
      <param name="outerRect">Outer rectangle of borders.</param>
      <param name="borders">Sizes of borders.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            Override this procedure if GetDrawingFlags does not set the DrawingFlagsEnum.UseGdiDrawing flag.
            </summary>
      <param name="graphics">Graphics object on which the object is being drawn.</param>
      <param name="drawParams">Contains data needed for drawing.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalDraw(C1.C1Preview.GraphicsUtils.GdiDc,C1.C1Preview.DrawParams)">
      <summary>
            Override this procedure if GetDrawingFlags sets the DrawingFlagsEnum.UseGdiDrawing flag.
            </summary>
      <param name="dc">DC on which the object is being drawn.</param>
      <param name="drawParams">Contains data needed for drawing.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetChildrenDrawBounds(C1.C1Preview.RenderFragment,System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="rfc">
      </param>
      <param name="graphics">
      </param>
      <param name="dp">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawChildren(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="dp">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawContent(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="dp">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetHorzSplits(System.Collections.Generic.List{System.Double})">
      <summary>
            Override this method and return the horizontal splits in the object relative to the left edge of
            the content area.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetVertSplits(System.Collections.Generic.List{System.Double})">
      <summary>
            Override this method and return the vertical splits in the object relative to the top top edge of
            the content area.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CreateSplitParams">
      <summary>
            Creates a SplitParams object, used during splitting, child
            classes may override this method to create the SplitParams object of custom type
            (derived from SplitParams).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InitializeSplitParams(System.Boolean,C1.C1Preview.SplitPos,C1.C1Preview.SplitContext)">
      <summary>
            For internal use.
            </summary>
      <param name="splitVert">
      </param>
      <param name="pos">
      </param>
      <param name="splitContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FindVertSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>
            Checks can object's content be split on specified position by vertically.
            </summary>
      <param name="p">SplitParams object defining the parameters of splitting.</param>
      <returns>Returns true if object can be split on specified position (p.ContentRealSplitPos).</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SplitVertContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>
            Splits content of object by vertically, by default this procedure split object as image.
            </summary>
      <param name="newFragment">The created fragment describing part of object before contentSplitPos.</param>
      <param name="p">SplitParams object defining the paramters of splitting.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FindHorzSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>
            Checks can object's content be split on specified position by horizontally.
            </summary>
      <param name="p">SplitParams object defining the parameters of splitting.</param>
      <returns>Returns true if object can be split on specified position.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SplitHorzContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>
            Splits content of object by horizontally, by default this procedure split object as image.
            </summary>
      <param name="newFragment">The created fragment describing part of object before contentSplitPos.</param>
      <param name="p">SplitParams object defining the paramters of splitting.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SplitChildren(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams,System.Double,System.Double,System.Double)">
      <summary>
            For internal use.
            </summary>
      <param name="newFragment">
      </param>
      <param name="p">
      </param>
      <param name="splitPos">
      </param>
      <param name="nonSplitOffset">
      </param>
      <param name="splitOffset">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Split(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>
            Performs splitting of RenderFragment object.
            </summary>
      <param name="newFragment">New fragment which was created as result of splitting.</param>
      <param name="p">SplitParams object describing the splitting.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.IsShadowVisible">
      <summary>
            Returns <b>true</b> if shadow visible for <see cref="T:C1.C1Preview.RenderFragment" />.
            </summary>
      <returns>
        <b>true</b> if shadow visible for <see cref="T:C1.C1Preview.RenderFragment" /> and <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.RenderFragment" />.
            </summary>
      <returns>The newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderFragment" /> to the current object.
            Clones <see cref="P:C1.C1Preview.RenderFragment.Children" /> by cloning all its elements.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolvingFinished">
      <summary>
            This method is called by the rendering engine after the current <see cref="T:C1.C1Preview.RenderFragment" />
            has been completely resolved.
            Typically this method would be used to clear temporary data created and used during resolving.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalDrawShadow(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use only.
            </summary>
      <param name="graphics">
      </param>
      <param name="dp">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,C1.C1Preview.PageDrawParams)">
      <summary>
            Draws the current fragment on a specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> object to draw on.</param>
      <param name="boundsPx">The draw bounds.</param>
      <param name="parentContentBoundsPx">The paretnt bounds.</param>
      <param name="renderChildren">
        <b>true</b> to draw child fragments, <b>false</b> to ignore them.</param>
      <param name="pdp">Specifies additional parameters of drawing.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Draws the current fragment on a specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> object to draw on.</param>
      <param name="boundsPx">The draw bounds.</param>
      <param name="parentContentBoundsPx">The paretnt bounds.</param>
      <param name="renderInputControls">
        <b>true</b> to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />), <b>false</b> to ignore them.</param>
      <param name="renderChildren">
        <b>true</b> to draw child fragments, <b>false</b> to ignore them.</param>
      <param name="writeMetafileComments">Indicates whether to write metafile comments to graphics: info about anchors, hyperlinks etc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Draws the current fragment and its children on a specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> object to draw on.</param>
      <param name="parentContentBoundsPx">The paretnt bounds.</param>
      <param name="renderInputControls">
        <b>true</b> to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />), <b>false</b> to ignore them.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
      <summary>
            Draws the current fragment and its children on a specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> object to draw on.</param>
      <param name="parentContentBoundsPx">The paretnt bounds.</param>
      <param name="renderInputControls">
        <b>true</b> to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />), <b>false</b> to ignore them.</param>
      <param name="writeMetafileComments">
        <b>true</b> to write metafile comments containing anchors, hyperlinks etc.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Boolean)">
      <summary>
            Draws the current fragment and its children on a specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> object to draw on.</param>
      <param name="renderInputControls">
        <b>true</b> to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />), <b>false</b> to ignore them.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetAnchorRect(C1.C1Preview.C1Anchor,C1.C1Preview.RectangleD@,System.Boolean@)">
      <summary>
            Calculates the location of a <see cref="T:C1.C1Preview.C1Anchor" />
            contained in the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection of the
            render object that produced the current fragment.
            </summary>
      <param name="anchor">The <see cref="T:C1.C1Preview.C1Anchor" /> object to get the location of.</param>
      <param name="anchorRect">OUT: The bounds of <paramref name="anchor" /> in the fragment in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            (Note that this parameter is assigned a valid value only if <paramref name="anchorVisible" /> is <b>true</b> on method return.</param>
      <param name="anchorVisible">OUT: <b>true</b> if <paramref name="anchor" /> appears in the current fragment, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.C1Hyperlink" /> object in the current fragment at the specified position.
            </summary>
      <param name="pt">Specifies a point within the current fragment relative to the top left corner of the fragment.</param>
      <returns>A <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> object describing the found <see cref="T:C1.C1Preview.C1Hyperlink" />, or <b>null</b> if none was found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
            Adds information about all hyperlinks that appear in the current fragment
            to a <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />.
            </summary>
      <param name="hyperlinks">The collection of <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> objects
            to which data about hyperlinks within the current fragment will be added.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.HasClippedChildren(System.Boolean)">
      <summary>
            Checks whether any of the child fragments of the current fragment
            are clipped by its bounds. Depending on the <paramref name="recursive" />
            parameter, may also recursively test all child fragments.
            </summary>
      <param name="recursive">If <b>true</b>, this method is called recursively
            on all child fragments. If <b>false</b>, only the immediate children of the 
            current fragment are tested.</param>
      <returns>
        <b>true</b> if any of the children is clipped by the fragment's bounds,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ChildrenAlwaysCanSplitHorz">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ChildrenAlwaysCanSplitVert">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TableFragment">
      <summary>
            Gets the most nested <see cref="T:C1.C1Preview.RenderTableFragment" /> containing the current fragment,
            or <b>null</b> if the current object is not contained in a table.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.TableRowOnPage" />
      <seealso cref="P:C1.C1Preview.RenderFragment.TableColOnPage" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TableRowOnPage">
      <summary>
            Gets the 0-based index of the row in the most nested <see cref="T:C1.C1Preview.RenderTableFragment" />
            containing the current render object (i.e. the row index on the current page),
            or <b>-1</b> if the current object is not contained in a table.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.TableFragment" />
      <seealso cref="P:C1.C1Preview.RenderFragment.TableColOnPage" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TableColOnPage">
      <summary>
            Gets the 0-based index of the column in the most nested <see cref="T:C1.C1Preview.RenderTableFragment" />
            containing the current render object (i.e. the column index on the current page),
            or <b>-1</b> if the current object is not contained in a table.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.TableFragment" />
      <seealso cref="P:C1.C1Preview.RenderFragment.TableRowOnPage" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Page">
      <summary>
            Gets the page containing the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.PageIndex">
      <summary>
            Gets the 0-based index of <see cref="T:C1.C1Preview.C1Page" /> containing the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ColumnIndex">
      <summary>
            Gets the 0-based index of the column on the page containing the current fragment.
            For the default single-column page layout, the value of this property is <b>0</b>.
            If the current fragment belongs to a page header or footer, this value is <b>-1</b>
            (see <see cref="P:C1.C1Preview.RenderFragment.IsInPageHeader" /> and <see cref="P:C1.C1Preview.RenderFragment.IsInPageFooter" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IsInPageHeader">
      <summary>
            Gets a value indicating whether the current fragment belongs to the page header.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IsInPageFooter">
      <summary>
            Gets a value indicating whether the current fragment belongs to the page footer.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Bounds">
      <summary>
            Gets or sets the current fragment's bounds within its parent.
            For top level fragments, bounds within <see cref="P:C1.C1Preview.RenderFragment.Page" /> are returned.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.InnerBounds">
      <summary>
            Gets the inner bounds of the current fragment
            (without spacing, borders and padding)
            within its parent.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.BoundsOnPage">
      <summary>
            Gets the bounds of the current fragment on the page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.InnerBoundsOnPage">
      <summary>
            Gets the inner bounds of the current fragment
            (without spacing, borders and padding)
            on the page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.RenderObject">
      <summary>
            Gets the <see cref="P:C1.C1Preview.RenderFragment.RenderObject" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Parent">
      <summary>
            Gets <see cref="T:C1.C1Preview.RenderFragment" /> that is the parent of the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TopParent">
      <summary>
            Gets the top level <see cref="T:C1.C1Preview.RenderFragment" /> containing the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Visible">
      <summary>
            Gets a value indicating whether the current fragment is visible.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IndexInRenderObject">
      <summary>
            Gets the 0-based index of the current fragment in the <see cref="P:C1.C1Preview.RenderObject.Fragments" />
            collection of the <see cref="P:C1.C1Preview.RenderFragment.RenderObject" /> that produced it.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IndexInParent">
      <summary>
            Gets the 0-based index of the current fragment in the <see cref="P:C1.C1Preview.RenderFragment.Children" />
            collection of its <see cref="P:C1.C1Preview.RenderFragment.Parent" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Level">
      <summary>
            Gets the nesting level of the current fragment in the fragments' tree.
            The topmost fragment (that has no parent) has level <b>1</b>.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.Parent" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.HasChildren">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderFragment.Children" /> collection
            of the current fragment  has been initialized and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Children">
      <summary>
            Gets a <see cref="T:C1.C1Preview.RenderFragmentCollection" /> containing the child
            fragments of the current fragment.
            </summary>
      <remarks>
            This property always returns a non-<b>null</b> fragments collection,
            initializing it if it has not been initialized yet.
            Use <see cref="P:C1.C1Preview.RenderFragment.HasChildren" /> to test whether there are any children
            without initializing <see cref="P:C1.C1Preview.RenderFragment.Children" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ClipParent">
      <summary>
            Gets the value indicating whether the parent object is clipped.
            (Returns the value of <see cref="P:C1.C1Preview.C1PrintDocument.ClipPage" /> for top-level fragments,
            <see cref="P:C1.C1Preview.RenderObject.Clip" /> of the parent fragment's render object for nested ones.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ContentBoundsOnPage">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.DrawBoundsOnPage">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChartFragment" /> object
            linked with same <see cref="P:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChartFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataElementOutput">
      <summary>
            Specifies the output type for a data element.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.Auto">
      <summary>
            Will behave as <see cref="F:C1.C1Rdl.Rdl2008.DataElementOutput.NoOutput" /> for any report item with Hidden set to True
            (not an expression) that does not have a ToggleItem, and for any
            report item in a static tablix member that cannot be toggled with
            Hidden set to non-expression True. Otherwise, acts
            as NoOutput for Textboxes with constant TextRun values,
            as ContentsOnly for Rectangles and as Output for all other items.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.Output">
      <summary>
            Indicates the item should appear in the output.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.NoOutput">
      <summary>
            Indicates the item should not appear in the output.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.ContentsOnly">
      <summary>
            Indicates the item should not appear in the XML, but its contents
            should be rendered as if they were in this item’s container.
            Only applies to Rectangles.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportItem">
      <summary>
            Abstract base class for report objects such as <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />, <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" /> etc.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>
            For internal use.
            </summary>
      <param name="children">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.ScriptHostOwnerSetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>
            For internal use.
            </summary>
      <param name="host">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ScriptContextHostType">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Doc">
      <summary>
            Gets <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing generated document.
            This property can be used only during report generating.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Name">
      <summary>
            Gets or sets the name of the current report item.
            That name should not be empty and must be unique within the report.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ActionInfo">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.ActionInfo" /> object containing actions
            (such as hyperlinks) associated with the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Top">
      <summary>
            Gets or sets the distance of the current item from the top of the containing object.
            <para>The default is 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Left">
      <summary>
            Gets or sets the distance of the current item from the left of the containing object.
            <para>The default is 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Width">
      <summary>
            Gets or sets the height of the current item.
            Negative sizes are allowed only for lines (the height/width gives the offset of the endpoint of the line from the start point).
            <para>Default is null which means the width of the containing object minus <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Left" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Height">
      <summary>
            Gets or sets the width of the current item.
            Negative sizes are allowed only for lines (the height/width gives the offset of the endpoint of the line from the start point).
            <para>Default is null which means the height of the containing object minus <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Top" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Right">
      <summary>
            Gets the right coordinate of the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Bottom">
      <summary>
            Gets the bottom coordinate of the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ZIndex">
      <summary>
            Gets or sets the drawing order of the current report item within containing object.
            Items with lower indices are drawn first (appearing behind items with higher indices).
            Items with equal indices have unspecified rendering order.
            <para>Default: 0 Min: 0 Max: 2147483647</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Visibility">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Visibility" /> object indicating if the current item should be hidden.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ToolTip">
      <summary>
            Gets or sets a textual label for the current report item.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.DocumentMapLabel">
      <summary>
            Gets or sets a label to identify an instance of the current report item 
            within the client UI (to provide a user-friendly label for searching).
            Hierarchical listing of report item and group labels within the UI
            (the Document Map) should reflect the object containment hierarchy in
            the report definition.
            Peer items should be listed in left-to-right top-to-bottom order.
            If the expression returns null, no item is added to the Document Map.
            Not used for report items in the page header or footer.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Bookmark">
      <summary>
            Gets or sets a bookmark that can be linked to via a <see cref="P:C1.C1Rdl.Rdl2008.Action.BookmarkLink" /> action.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.RepeatWith">
      <summary>
            Gets or sets the name of a data region that this report item should be 
            repeated with if that data region spans multiple pages.
            The data region must be in the same ReportItems collection as this
            ReportItem (Since data regions are not allowed in page headers/footers,
            this means RepeatWith will be unusable in page headers/footers).
            Not allowed if this report item is a data region, subreport or rectangle
            that contains a data region or subreport.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.CustomProperties">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.CustomProperties" /> collection containing custom information
            about the current report item.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.DataElementName">
      <summary>
            Gets or sets the name to use for the data element/attribute for this report item.
            Default: Name of the report item. Must be a CLS-compliant identifier.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.DataElementOutput">
      <summary>
            Gets or sets a value indicating whether the current item should appear in a data rendering.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportItems">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ReportItems" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnClear">
      <summary>
            Called when the collection is about to be cleared.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
            Called when an item is about to be set.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnInsert(System.Int32,System.Object)">
      <summary>
            Called when an item is about to be iserted.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.GetItemType">
      <summary>
            Returns typeof(<see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />).
            </summary>
      <returns>typeof(<see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />).</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.Add(C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
            Adds the specified <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> to the current collection.
            </summary>
      <param name="item">The object to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.Remove(C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
            Removes the specified <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> from the current collection.
            </summary>
      <param name="item">The object to remove.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.Insert(System.Int32,C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
            Inserts the specified <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> into the current collection.
            </summary>
      <param name="index">The index where to insert the object.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItems.Report">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> containing this collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItems.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportItemList">
      <summary>
            Represents a simple list of <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItemList.IndexByName(System.String)">
      <summary>
            Searches the current collection for an object with the specified <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Name" />.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>Index of the object in the current collection, or -1 if no object was found.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItemList.IndexOf(C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
            Gets the index of a <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> in the current collection.
            </summary>
      <param name="ri">The item to search for.</param>
      <returns>The index of <paramref name="ri" />.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItemList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition">
      <summary>
            Specifies possible positions of the title along the axis.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition.Center">
      <summary>
            Position the title on the center of the axis.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition.Near">
      <summary>
            Position the title on the near side of the axis.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition.Far">
      <summary>
            Position the title on the far side of the axis.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisTitle">
      <summary>
            Represents a title for the axis.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisTitle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisTitle" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisTitle.AssignFrom(C1.C1Rdl.Rdl2008.ChartAxisTitle)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisTitle" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Caption">
      <summary>
            Gets or sets the caption of the title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Position">
      <summary>
            Gets or sets the position of the title along the axis.
            <para>Default: Center.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.TextOrientation">
      <summary>
            Gets or sets the text orientation.
            <para>Default: Auto.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Style" /> object defining style properties for the title.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBreakLineType">
      <summary>
            Specifies the types of line used to show the scale break.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.Ragged">
      <summary>
            Display as a ragged line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.Straight">
      <summary>
            Display as a straight line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.Wave">
      <summary>
            Display as a wavy line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.None">
      <summary>
            Do not display a line for the scale break.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak">
      <summary>
            Represents the scale break behavior and style for an axis.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.AssignFrom(C1.C1Rdl.Rdl2008.ChartAxisScaleBreak)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Enabled">
      <summary>
            Gets or sets a value indicating whether scale breaks can be automatically applied.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.BreakLineType">
      <summary>
            Gets or sets the type of line used to show the scale break.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.CollapsibleSpaceThreshold">
      <summary>
            Gets or sets the percentage of empty space allowed on the axis before a scale break is triggered.
            <para>Must be greater than 0. Default: 25.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.MaxNumberOfBreaks">
      <summary>
            Gets or sets the maximum number of scale breaks to apply.
            <para>Default: 2.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Spacing">
      <summary>
            Gets or sets the amount of space to leave for a scale break,
            as a percentage of the chart size.
            <para>Default: 1.5.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.IncludeZero">
      <summary>
            Gets or sets a value indicating whether to prevent a scale break from spanning zero.
            <para>Default: Auto.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Style" /> object defining style properties for the scale break.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisIntervalType">
      <summary>
            Specifies units used by <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default">
      <summary>
            The default interval is used.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Auto">
      <summary>
            Interval unit is autoderived based on the data plotted against the axis.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Number">
      <summary>
            Interval is numeric.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Years">
      <summary>
            Interval is Years.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Months">
      <summary>
            Interval is Months.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Weeks">
      <summary>
            Interval is Weeks.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Days">
      <summary>
            Interval is Days.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Hours">
      <summary>
            Interval is Hours.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Minutes">
      <summary>
            Interval is Minutes.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Seconds">
      <summary>
            Interval is Seconds.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Milliseconds">
      <summary>
            Interval is Milliseconds.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartGridLines">
      <summary>
            Represents gridlines along an axis.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartGridLines.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartGridLines.AssignFrom(C1.C1Rdl.Rdl2008.ChartGridLines)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartGridLines" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.Enabled">
      <summary>
            Gets or sets a value indicating whether the grid lines should be shown.
            <para>Default is Auto, which means true for major grid lines and false for minor grid lines.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.Interval">
      <summary>
            Gets or sets the interval between gridlines.
            <para>Default (0) uses <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalType">
      <summary>
            Gets or sets units for the <see cref="P:C1.C1Rdl.Rdl2008.ChartGridLines.Interval" />.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />,
            in which case <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalType" /> is used.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalOffset">
      <summary>
            Gets or sets the offset for the first grid line from the axis min.
            <para>Default (0) uses <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalOffsetType">
      <summary>
            Gets or sets the units for the <see cref="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalOffset" />.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />,
            in which case <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffsetType" /> is used.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartGridLines.Style" /> object defining the style of the grid lines.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTickMarksType">
      <summary>
            Specifies the types of tick marks.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.Outside">
      <summary>
            Tick mark outside the axis.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.Inside">
      <summary>
            Tick mark inside the axis.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.Cross">
      <summary>
            Tick mark across the axis.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.None">
      <summary>
            No tick mark.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTickMarks">
      <summary>
            Represents tick marks along an axis.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTickMarks.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTickMarks.AssignFrom(C1.C1Rdl.Rdl2008.ChartTickMarks)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Enabled">
      <summary>
            Gets or sets a value indicating whether tick marks should be shown.
            <para>Default: Auto, which means true for major tick marks and false for minor tick marks.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Type">
      <summary>
            Gets or sets the type of the tick mark.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Style" /> object defining the line style for tick marks.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Length">
      <summary>
            Gets or sets the length of the tick mark as a percentage of the chart size.
            <para>Default: 1.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Interval">
      <summary>
            Gets or sets the interval between tick marks.
            <para>Default (0) uses <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalType">
      <summary>
            Gets or sets the units for the <see cref="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Interval" />.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />,
            which in this case means <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalType" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalOffset">
      <summary>
            Gets or sets the offset for the first tick mark from the axis min.
            <para>Default (0) uses <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalOffsetType">
      <summary>
            Gets or sets the units for the <see cref="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalOffset" />.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />,
            which in this case means <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffsetType" />.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisLocation">
      <summary>
            Specifies the side where axis should be drawn.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisLocation.Default">
      <summary>
            Draw the axis on the default side.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisLocation.Opposite">
      <summary>
            Draw the axis on the opposite side.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartStripLine">
      <summary>
            Represents a custom strip line for an axis.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLine.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLine.AssignFrom(C1.C1Rdl.Rdl2008.ChartStripLine)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLines" /> object containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Title">
      <summary>
            Gets or sets the title for the strip line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.TextOrientation">
      <summary>
            Gets or sets the orientation of the title text.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.Style" /> object defining line style properties for the tick marks.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.ActionInfo">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.ActionInfo" /> object defining actions for the strip line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.ToolTip">
      <summary>
            Gets or sets the tool tip to display for the strip line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Interval">
      <summary>
            Gets or sets the size of the strip line.
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalType">
      <summary>
            Gets or sets the units for the <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.Interval" />.
            <para>Default: Auto. Interval unit is derived automatically based on the data plotted against the axis.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalOffset">
      <summary>
            Gets or sets the offset from the previous strip line or axis min (for the first strip line).
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalOffsetType">
      <summary>
            Gets or sets the units for the <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalOffset" />.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Auto" />. The unit is derived automatically based on the data plotted against the axis.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.StripWidth">
      <summary>
            Gets or sets the width of the strip line.
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.StripWidthType">
      <summary>
            Gets or sets the units for the <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.StripWidth" />.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Auto" />. The unit is derived automatically based on the data plotted against the axis.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartStripLines">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLines.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLines" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLines.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLines.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLines.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisArrows">
      <summary>
            Specifies types of arrows for axis labels.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.None">
      <summary>
            No arrows.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.Triangle">
      <summary>
            Triangle arrows.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.SharpTriangle">
      <summary>
            Sharp triangle arrows.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.Lines">
      <summary>
            Lines only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation">
      <summary>
            Specifies the step by which axis labels can be incrementally
            rotated to fit within the chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate90">
      <summary>
            Rotate in 90 degree increments.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate30">
      <summary>
            Rotate in 30 degree increments
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate45">
      <summary>
            Rotate in 45 degree increments
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.None">
      <summary>
            Rotation is not allowed.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxis">
      <summary>
            Represents properties of labels, titles and gridlines along an axis.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxis.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxis.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Visible">
      <summary>
            Gets or sets a value indicating whether the axis is displayed.
            <para>Default: <see cref="F:C1.C1Rdl.TriState.Auto" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Style" /> object defining text style properties for the axis labels and
            line style properties for the axis line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Title">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisTitle" /> object defining a title of the axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Margin">
      <summary>
            Gets or sets a value indicating whether an axis margin will be created.
            The size of the margin is automatically generated based on the scale
            and the number of data points.
            <para>Default: <see cref="F:C1.C1Rdl.TriState.Auto" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval">
      <summary>
            Gets or sets the default interval between gridlines, tick marks and labels.
            <para>Default (0) means that the axis is autodivided.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalType">
      <summary>
            Gets or sets the default unit for the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset">
      <summary>
            Gets or sets the default offset for the first tick mark from the axis min.
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffsetType">
      <summary>
            Gets or sets the default unit for the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.VariableAutoInterval">
      <summary>
            Gets or sets a value indicating whether if an automatic interval is calculated,
            it should be based on available size.
            Otherwise, the interval will be calculated based only on the data range.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelInterval">
      <summary>
            Gets or sets the interval between labels.
            <para>Default (0) uses <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" /></para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalType">
      <summary>
            Gets or sets the unit for the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelInterval" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalOffset">
      <summary>
            Gets or sets the offset for the first label from the axis min.
            <para>Default (0) uses <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalOffsetType">
      <summary>
            Gets or sets the unit for the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalOffset" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MajorGridLines">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartGridLines" /> object defining how major gridlines
            should be displayed for this axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MinorGridLines">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartGridLines" /> object defining how minor gridlines
            should be displayed for this axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MajorTickMarks">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" /> object defining major tick marks for the axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MinorTickMarks">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" /> object defining minor tick marks for the axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MarksAlwaysAtPlotEdge">
      <summary>
            Gets or sets a value indicating whether the marks should stay with the edge of the plot area
            rather than move with the axis.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Reverse">
      <summary>
            Gets or sets a value indicating whether the axis should be plotted in the reverse direction.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.CrossAt">
      <summary>
            Gets or sets the value (that evaluates to a <b>double</b> or to a <b>DateTime</b>) at which to cross the other axis.
            If null (or error in expression), uses the default behavior for the chart type.
            Overrides <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Location" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Location">
      <summary>
            Gets or sets a value indicating whether the axis is drawn on the default side
            (for example, left for the value axis on a line chart) or on the opposite side.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Interlaced">
      <summary>
            If this property is true then strip lines are drawn at every other grid line interval for the axis.
            If grid lines are not used for the axis then the axis' tick marks or labels
            are used to determine the interlaced strip lines interval.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.InterlacedColor">
      <summary>
            Gets or sets the color of the interlaced strips.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.StripLines">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLines" /> collection defining
            custom strip lines for the axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Arrows">
      <summary>
            Gets or sets the type of arrows for axis labels.
            <para>Default: None.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Scalar">
      <summary>
            Gets or sets a value indicating whether the values along this axis are scalar values
            (that is, numeric or date) which should be displayed on the chart in a
            continuous axis. Scalar cannot be true if the axis has more than one group,
            if it has a static group or a group with more than one group expression.
            The type of scalar (date, integer, float) is derived from the first non-null
            value found. All values are converted to that type.
            If any non-scalar value is present, the axis will
            revert to non-scalar. Treated as True if this is a ChartCategoryAxis
            and any ChartSeries plotted against this axis contains a ChartDataPoint
            with ChartDataPointValues.X defined.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Minimum">
      <summary>
            Gets or sets the minimum value for the axis.
            If null (which is the default) or error in expression, the axis autoscales.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Maximum">
      <summary>
            Gets or sets the maximum value for the axis.
            If null (which is the default) or error in expression, the axis autoscales.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LogScale">
      <summary>
            Gets or sets a value indicating whether the axis is logarithmic.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LogBase">
      <summary>
            Gets or sets the base to use for the logarithmic scale.
            <para>Default: 10.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.HideLabels">
      <summary>
            Gets or sets a value indicating whether the axis labels are hidden.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Angle">
      <summary>
            Gets or sets the angle at which to display axis labels.
            This must be an integer between –90 and 90.
            <para>Default: 0</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventFontShrink">
      <summary>
            Gets or sets a value indicating whether the axis label font size should
            not be reduced to fit within the chart.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventFontGrow">
      <summary>
            Gets or sets a value indicating whether the axis label font size should
            not be increased to fit within the chart.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventLabelOffset">
      <summary>
            Gets or sets a value indicating whether the axis labels should not be
            staggered to fit within the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventWordWrap">
      <summary>
            Gets or sets a value indicating whether the axis labels should not be
            word-wrapped to fit within the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.AllowLabelRotation">
      <summary>
            Gets or sets the step by which axis labels can be incrementally rotated to fit within the chart.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate90" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IncludeZero">
      <summary>
            Gets or sets a value indicating whether the axis should always include zero.
            Ignored if Minimum is set.
            <para>Default: True.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelsAutoFitDisabled">
      <summary>
            Gets or sets a value indicating axis labels should not be automatically adjusted to fit.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MinFontSize">
      <summary>
            Gets or sets the minimum font size when autofitting labels.
            <para>Default: 6pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MaxFontSize">
      <summary>
            Gets or sets the minimum font size when autofitting labels.
            <para>Default: 10pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.OffsetLabels">
      <summary>
            Gets or sets a value indicating whether the labels should be offset.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.HideEndLabels">
      <summary>
            Gets or sets a value indicating whether the labels should be hidden at axis ends.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.ScaleBreak">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak" /> object defining scale break behavior for the axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.CustomProperties">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.CustomProperties" /> collection defining custom properties for the axis.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxes">
      <summary>
            Represents collection of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxes.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxes" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxes.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> type.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxes.FindByName(System.String)">
      <summary>
            Finds the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> with the specified name.
            </summary>
      <param name="name">The name of the axis to locate.</param>
      <returns>The specified item</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.HasPrimaryAxis">
      <summary>
            Gets a value indicating whether an axis with the name "Primary" exists in the collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.PrimaryAxis">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> object representing the primary axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.HasSecondaryAxis">
      <summary>
            Gets a value indicating whether an axis with the name "Secondary" exists in the collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.SecondaryAxis">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> object representing the secondary axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode">
      <summary>
            Specifies projection modes used for 3D rendering.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Oblique">
      <summary>
            Use an oblique projection.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Perspective">
      <summary>
            Use a perspective projection.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTreeDShading">
      <summary>
            Specifies types of 3D shading.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.Real">
      <summary>
            Realistic shading.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.Simple">
      <summary>
            Simplified shading.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.None">
      <summary>
            No shading.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties">
      <summary>
            Represents properties for a 3D layout.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartThreeDProperties.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartThreeDProperties.AssignFrom(C1.C1Rdl.Rdl2008.ChartThreeDProperties)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Enabled">
      <summary>
            Gets or sets a value indicating whether the chart is displayed in 3D.
            <para>Default: False (i.e. 2D).</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.ProjectionMode">
      <summary>
            Gets or sets the projection mode used for the 3D rendering.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Oblique" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Perspective">
      <summary>
            Gets or sets the percent of perspective. Applies only if perspective projection is used
            (i.e. when <see cref="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.ProjectionMode" /> is <see cref="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Perspective" />).
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Rotation">
      <summary>
            Gets or sets the rotation angle.
            <para>Default: 30.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Inclination">
      <summary>
            Gets or sets the inclination angle.
            <para>Default: 30.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.DepthRatio">
      <summary>
            Gets or sets the ratio (in percent) between depth and width.
            <para>Default: 100.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Shading">
      <summary>
            Gets or sets the type of 3D shading.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.Real" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.GapDepth">
      <summary>
            Gets or sets the depth gap between 3D bars and columns, in percent.
            <para>Default: 100.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.WallThickness">
      <summary>
            Gets or sets the thickness of outer walls, in percent.
            <para>Default: 7.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Clustered">
      <summary>
            Gets or sets a value that determines whether data series are clustered (displayed along distinct rows).
            Only applies to bar and column chart types.
            <para>Default: False.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAlignOrientation">
      <summary>
            Specifies directions in which the chart area should be aligned with the target chart area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.None">
      <summary>
            No alignment.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.Vertical">
      <summary>
            Vertical alignment.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.Horizontal">
      <summary>
            Horizontal alignment.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.All">
      <summary>
            Both vertical and horizontal alignment.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartElementPosition">
      <summary>
            Defines the position in which to draw a chart element.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartElementPosition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartElementPosition.#ctor(C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" /> class.
            </summary>
      <param name="left">Value assigned to the <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Left" /> property.</param>
      <param name="top">Value assigned to the <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Top" /> property.</param>
      <param name="width">Value assigned to the <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Width" /> property.</param>
      <param name="height">Value assigned to the <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Height" /> property.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartElementPosition.AssignFrom(C1.C1Rdl.Rdl2008.ChartElementPosition)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Top">
      <summary>
            Gets or sets the distance of the item from the top of the containing object,
            as a percentage of the container's size.
            <para>Default is 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Left">
      <summary>
            Gets or sets the distance of the item from the left of the containing object,
            as a percentage of the container's size.
            <para>Default is 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Width">
      <summary>
            Gets ot sets the width of the item as a percentage of its containing object's size.
            <para>If set to null (default), the value of 100 minus <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Left" /> is used.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Height">
      <summary>
            Gets ot sets the height of the item as a percentage of its containing object's size.
            <para>If set to null (default), the value of 100 minus <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Top" /> is used.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAlignType">
      <summary>
            Represents properties that determine which aspects of the chart area should be aligned with the target chart area.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAlignType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAlignType" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAlignType.AssignFrom(C1.C1Rdl.Rdl2008.ChartAlignType)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartAlignType" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.AxesView">
      <summary>
            Gets or sets a value indicating whether the chart areas should align on axes views.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.Cursor">
      <summary>
            Gets or sets a value indicating whether the chart areas should align on cursors.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.Position">
      <summary>
            Gets or sets a value indicating whether the chart areas should align on chart area positions.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.InnerPlotPosition">
      <summary>
            Gets or sets a value indicating whether the chart areas should align on inner plot positions.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBorderSkinType">
      <summary>
            Specifies border skin types for a chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.None">
      <summary>
            No border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.Emboss">
      <summary>
            Emboss border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.Raised">
      <summary>
            Raised border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.Sunken">
      <summary>
            Sunken border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin1">
      <summary>
            FrameThin1 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin2">
      <summary>
            FrameThin2 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin3">
      <summary>
            FrameThin3 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin4">
      <summary>
            FrameThin4 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin5">
      <summary>
            FrameThin5 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin6">
      <summary>
            FrameThin6 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle1">
      <summary>
            FrameTitle1 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle2">
      <summary>
            FrameTitle2 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle3">
      <summary>
            FrameTitle3 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle4">
      <summary>
            FrameTitle4 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle5">
      <summary>
            FrameTitle5 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle6">
      <summary>
            FrameTitle6 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle7">
      <summary>
            FrameTitle7 border skin.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle8">
      <summary>
            FrameTitle8 border skin.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBorderSkin">
      <summary>
            Represents properties that determine the appearance of the border skin around the plot area.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartBorderSkin.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartBorderSkin" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartBorderSkin.AssignFrom(C1.C1Rdl.Rdl2008.ChartBorderSkin)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartBorderSkin" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartBorderSkin.BorderSkinType">
      <summary>
            Gets or sets the border skin type for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartBorderSkin.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartBorderSkin.Style" /> object defining style properties for the border skin.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartElementAutoPosition">
      <summary>
            Specifies automatic position for chart elements such as legend, title etc.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.TopCenter">
      <summary>
            Top center position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.TopLeft">
      <summary>
            Top left position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.TopRight">
      <summary>
            Top right position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.LeftTop">
      <summary>
            Left top position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.LeftCenter">
      <summary>
            Left center position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.LeftBottom">
      <summary>
            Left bottom position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightTop">
      <summary>
            Right top position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightCenter">
      <summary>
            Right center position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightBottom">
      <summary>
            Right bottom position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.BottomRight">
      <summary>
            Bottom right position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.BottomCenter">
      <summary>
            Bottom center position.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.BottomLeft">
      <summary>
            Bottom left position.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTextOrientation">
      <summary>
            Specifies text orientation.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Auto">
      <summary>
            Indicates that orientation will be selected automatically based
            on the context (for example, Rotated270 for titles docked on the left).
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Horizontal">
      <summary>
            Horizontal text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Rotated90">
      <summary>
            Vertical text – Rotated 90 degrees.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Rotated270">
      <summary>
            Vertical text – Rotated 270 degrees.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Stacked">
      <summary>
            Vertical text – No character rotation.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTitle">
      <summary>
            Represents a title for the chart.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitle.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.ToolTip">
      <summary>
            Gets or sets the tooltip to display for the title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Caption">
      <summary>
            Gets or sets the caption of the title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Hidden">
      <summary>
            Gets or sets a value indicating whether the title should be hidden.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartTitle.Style" /> object defining style properties for the title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Position">
      <summary>
            Gets or sets the position of the title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.DockToChartArea">
      <summary>
            Gets or sets the name of the chart area on which to draw the title.
            If omitted (or does not match any chart area name),
            the title is drawn relative to the chart rather than a specific chart area.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.DockOutsideChartArea">
      <summary>
            Gets or sets a value indicating whether the title should be docked outside the chart
            area rather than inside the chart area.
            Ignored if <see cref="P:C1.C1Rdl.Rdl2008.ChartTitle.DockToChartArea" /> is not set.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.DockOffset">
      <summary>
            Gets or sets the offset from the dock location, as a percentage of the chart size.
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.CustomPosition">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" /> object defining
            custom position of the title.
            If omitted, automatic positioning will be used.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.ActionInfo">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartTitle.ActionInfo" /> object defining actions for the title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.TextOrientation">
      <summary>
            Gets or sets the orientation of the text.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTitles">
      <summary>
            Representsf a collection of <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitles.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartTitles" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitles.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitles.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartNoDataMessage">
      <summary>
            Represents a title that is displayed if the chart contains no data.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartNoDataMessage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartNoDataMessage" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegendLayout">
      <summary>
            Specifies types of arrangement of labels within a legend.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.AutoTable">
      <summary>
            Automatically arrange labels to fit.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.Column">
      <summary>
            Arrange labels in a column.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.Row">
      <summary>
            Arrange labels in a row.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.WideTable">
      <summary>
            Arrange labels in a wide table.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.TallTable">
      <summary>
            Arrange labels in a tall table.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLine">
      <summary>
            Specifies types of lines used as separators in a chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.None">
      <summary>
            No line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.Line">
      <summary>
            Line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.ThickLine">
      <summary>
            Thick line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.DoubleLine">
      <summary>
            Double line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.DashLine">
      <summary>
            Dash line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.DotLine">
      <summary>
            Dot line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.GradientLine">
      <summary>
            Gradient line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.ThickGradientLine">
      <summary>
            Thick gradient line.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegendTitle">
      <summary>
            Represents a title for a legend.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegendTitle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartLegendTitle" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegendTitle.AssignFrom(C1.C1Rdl.Rdl2008.ChartLegendTitle)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartLegendTitle" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.Caption">
      <summary>
            Gets or sets the caption of the title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.TitleSeparator">
      <summary>
            Gets or sets a value indicating what type of separator to use for the legend title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.Style" /> object defining style properties for the title.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegend">
      <summary>
            Represents properties that can be used to display instances of the
            series groups in a chart legend.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegend.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegend.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Hidden">
      <summary>
            Gets or sets a value indicating whether the legend is hidden.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartLegend.Style" /> object defining style properties for the legend.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Position">
      <summary>
            Gets or sets the position of the legend.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightTop" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Layout">
      <summary>
            Gets or sets the arrangement of labels within the legend.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.AutoTable" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.DockToChartArea">
      <summary>
            Gets or sets the name of the chart area on which to draw the legend.
            If omitted (or does not match any chart area name),
            the legend is drawn relative to the chart rather than a specific chart area.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.DockOutsideChartArea">
      <summary>
            Gets or sets a value indicating whether the title should be docked outside
            the chart area rather than inside the chart area.
            Ignored if <see cref="P:C1.C1Rdl.Rdl2008.ChartLegend.DockToChartArea" /> is not set.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.CustomPosition">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" /> object defining
            a custom position for the legend.
            If null, automatic positioning will be used.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Title">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartLegendTitle" /> object defining properties
            of the legend's title.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.AutoFitTextDisabled">
      <summary>
            Gets or sets a value indicating whether to NOT autosize text
            to fit in the legend area.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.MinFontSize">
      <summary>
            Gets or sets the minimum size for autosized legend text.
            <para>Default: 7pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.HeaderSeparator">
      <summary>
            Gets or sets the type of separator to use for the legend header.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartLine.None" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.HeaderSeparatorColor">
      <summary>
            Gets or sets the color to use for the legend header separator.
            <para>Default: Black.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.ColumnSeparator">
      <summary>
            Gets or sets the type of separator to use for the columns.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.ChartLine.None" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.ColumnSeparatorColor">
      <summary>
            Gets or sets the color to use for the column separator.
            <para>Default: Black.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.ColumnSpacing">
      <summary>
            Gets or sets the spacing between columns as percentage of the font size.
            <para>Default: 50.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.InterlacedRows">
      <summary>
            Gets or sets a value indicating whether legend rows should use interlaced colors.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.InterlacedRowsColor">
      <summary>
            Gets or sets the background color to use for interlaced legend rows.
            <para>If null (default), the chart area background color will be used.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.EquallySpacedItems">
      <summary>
            Gets or sets a value indicating whether legend items should be equally spaced.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Reversed">
      <summary>
            Gets or sets a value indicating that the direction of the legend should be reversed.
            <para>Default: Auto.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.MaxAutoSize">
      <summary>
            Gets or sets the maximum size for the legend, as percentage of the chart size.
            <para>Default: 50.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.TextWrapThreshold">
      <summary>
            Gets or sets the number of characters after which to wrap the legend text.
            <para>Default: 25</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegends">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegends.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartLegends" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegends.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegends.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartArea">
      <summary>
            Represents the chart that is drawn within a <see cref="T:C1.C1Rdl.Rdl2008.Chart" />'s data region.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartArea.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartArea.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.Hidden">
      <summary>
            Gets or sets a value indicating whether the chart area should be hidden.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.CategoryAxes">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.CategoryAxes" /> collection defining the category axes.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.ValueAxes">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.ValueAxes" /> collection defining the value axes.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.ThreeDProperties">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties" /> object defining properties for a 3D chart layout.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.Style" /> object defining style properties for the chart area.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.AlignOrientation">
      <summary>
            Gets or sets a value indicating in which directions the chart
            area should be aligned with the target chart area.
            Ignored if <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.AlignWithChartArea" /> is not set.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.AlignType">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartAlignType" /> object defining which aspects of the
            chart area should be aligned with the target chart area.
            Ignored if <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.AlignWithChartArea" /> is not set.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.AlignWithChartArea">
      <summary>
            Gets or sets the name of a chart area with which to align this chart area.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.CustomPosition">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" /> object
            defining a custom position for the chart area.
            If null, automatic positioning will be used.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.InnerPlotPosition">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" /> object
            defines a custom position for the inner plot area.
            If null, automatic positioning will be used.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.EquallySizedAxesFont">
      <summary>
            Gets or sets a value indicating that
            the same font size should be used for all axes
            (if the font size is automatic).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAreas">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAreas.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartAreas" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAreas.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAreas.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" /> at the specified index.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAreas.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" /> with specified name.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMember">
      <summary>
            Represents a category or series member for a <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Chart" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMember.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMember.AssignFrom(C1.C1Rdl.Rdl2008.ChartMember)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" /> collection owning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Hierarchy">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Chart">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> object contaning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Group">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Group" /> object defining data grouping.
            If <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Group" /> is null, this is a static member
            (otherwise, this is a dynamic member).
            Not allowed if any ancestor group is a detail group.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.SortExpressions">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.SortExpressions" /> collection containing
            the expressions by which to sort the group instances.
            Not used if <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Group" /> is null.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Members">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" /> collection containing
            submembers contained within this member.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.CustomProperties">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.CustomProperties" /> collection 
            with custom properties for the member.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Label">
      <summary>
            Gets or sets the label displayed on the legend (for series members and category members
            with <see cref="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Shape" />) or category axis (for category members).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.DataElementName">
      <summary>
            Gets or sets the name to use for the data element for this member.
            Must be a CLS-compliant identifier.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.DataElementOutput">
      <summary>
            Gets or sets a value indicating whether the member should appear in a data rendering.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMembers">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMembers.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMembers.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMembers.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMembers.Hierarchy">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMembers.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartHierarchy">
      <summary>
            Represents a hierarchy of members for the <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartHierarchy.AssignFrom(C1.C1Rdl.Rdl2008.ChartHierarchy)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartHierarchy.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> object owning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartHierarchy.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartHierarchy.Members">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" /> collection containing
            an ordered list of members of a tablix hierarchy.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPalette">
      <summary>
            Specifies color palettes for chart items.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Default">
      <summary>
            Default palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.EarthTones">
      <summary>
            EarthTones palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Excel">
      <summary>
            Excel palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.GrayScale">
      <summary>
            GrayScale palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Light">
      <summary>
            Light palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Pastel">
      <summary>
            Pastel palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.SemiTransparent">
      <summary>
            SemiTransparent palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Berry">
      <summary>
            Berry palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Chocolate">
      <summary>
            Chocolate palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Fire">
      <summary>
            Fire palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.SeaGreen">
      <summary>
            SeaGreen palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.BrightPastel">
      <summary>
            BrightPastel palette.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Custom">
      <summary>
            Custom palette.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior">
      <summary>
            Specifies how hatching is applied to data points in the chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior.Default">
      <summary>
            Default. Treated as None.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior.None">
      <summary>
            No hatching is added to the data points.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior.Always">
      <summary>
            Automatic hatching is applied to all data points (unless BackgroundHatchType is specified as non-Default).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointValues">
      <summary>
            Represents a set of data values for a data point in the chart.
            Each series type has a different set of mandatory and optional data values.
            Data values not used for the series type are ignored.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointValues.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointValues.AssignFrom(C1.C1Rdl.Rdl2008.ChartDataPointValues)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.X">
      <summary>
            Gets or sets the X value for the data point.
            Mandatory in series with Type = Scatter.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Y">
      <summary>
            Gets or sets the Y value for the data point.
            Mandatory in series with Type not equal to Range,
            and with Type equal to Range with Subtype = ErrorBar.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Size">
      <summary>
            Gets or sets the size value for the data point.
            Optional in series with Type = Scatter with Subtype = Bubble.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.High">
      <summary>
            Gets or sets the high value for the data point.
            Mandatory in series with Type = Range.
            May be omitted if Y is specified. If so, it defaults to Y.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Low">
      <summary>
            Gets or sets the high value for the data point.
            Mandatory in series with Type = Range.
            May be omitted if Y is specified. If so, it defaults to Y.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Start">
      <summary>
            Gets or sets the start/open value for the data point.
            Optional in series with Type = Range with SubType = Stock,
            Candlestick or BoxPlot.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.End">
      <summary>
            Gets or sets the end/close value for the data point.
            Optional in series with Type = Range with SubType = Stock,
            Candlestick or BoxPlot.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Mean">
      <summary>
            Gets or sets the mean value for the data point.
            Optional in series with Type = Range with SubType = BoxPlot.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Median">
      <summary>
            Gets or sets the median value for the data point.
            Optional in series with Type = Range with SubType = BoxPlot.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataLabelPosition">
      <summary>
            Specifies positions of a label.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Auto">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Top">
      <summary>
            Position label at Top of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.TopLeft">
      <summary>
            Position label at TopLeft of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.TopRight">
      <summary>
            Position label at TopRight of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Left">
      <summary>
            Position label at Left of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Center">
      <summary>
            Position label at Center of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Right">
      <summary>
            Position label at Right of data point
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.BottomRight">
      <summary>
            Position label at BottomRight of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Bottom">
      <summary>
            Position label at Bottom of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.BottomLeft">
      <summary>
            Position label at BottomLeft of data point.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Outside">
      <summary>
            Position label Outside of data point For non-Pie charts,
            Outside is treated as Top.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataLabel">
      <summary>
            Represents data labels to display on data values.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataLabel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataLabel.AssignFrom(C1.C1Rdl.Rdl2008.ChartDataLabel)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Style" /> object defining style properties for the labels.
            <para>If specified, this style overrides Series styles.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.UseValueAsLabel">
      <summary>
            Gets or sets a value indicating the Y value of the data point should be used as the label.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Label">
      <summary>
            Gets or sets the label for the data point.
            <para>Not used if <see cref="P:C1.C1Rdl.Rdl2008.ChartDataLabel.UseValueAsLabel" /> is True</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Visible">
      <summary>
            Gets or sets a value indicating whether the data label is displayed on the chart.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Position">
      <summary>
            Gets or sets the position of the label.
            <para>Default: Auto.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Rotation">
      <summary>
            Gets or sets the angle of rotation of the label text.
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.ToolTip">
      <summary>
            Gets or sets the tooltip to display for the data label.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.ActionInfo">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartDataLabel.ActionInfo" /> object 
            defining actions associated with this data label.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMarkerType">
      <summary>
            Specifies the marker types for displayed chart values.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.None">
      <summary>
            No marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Square">
      <summary>
            Square marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Circle">
      <summary>
            Circle marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Diamond">
      <summary>
            Diamond marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Triangle">
      <summary>
            Triangle marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Cross">
      <summary>
            Cross marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star4">
      <summary>
            Star (4 points) marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star5">
      <summary>
            Star (5 points) marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star6">
      <summary>
            Star (6 points) marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star10">
      <summary>
            Star (10 points) marker.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Auto">
      <summary>
            Automatically cycle through marker types for each series.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMarker">
      <summary>
            Represents a marker for displayed chart values.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMarker.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMarker.AssignFrom(C1.C1Rdl.Rdl2008.ChartMarker)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMarker.Type">
      <summary>
            Gets or sets the marker type for values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMarker.Size">
      <summary>
            Gets or sets the height and width of the plotting area of marker(s).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMarker.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartMarker.Style" /> object determining the style properties for the marker.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartItemInLegend">
      <summary>
            Represents the behavior for a series or set of data points displayed in a legend.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartItemInLegend.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartItemInLegend.AssignFrom(C1.C1Rdl.Rdl2008.ChartItemInLegend)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.LegendText">
      <summary>
            Gets or sets the label to use in the legend for the item for <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />.
            <para>If this property is not set, the <b>Label</b> properties from
            the chart categories hierarchy are used as the legend text
            (with " – " added between each pair).</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.ToolTip">
      <summary>
            Gets or sets the tooltip to display for the item in the legend.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.ActionInfo">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.ActionInfo" /> object associated with the item in the legend.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.Hidden">
      <summary>
            Gets or sets a value indicating whether the item should not be shown in the legend.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment">
      <summary>
            Specifies vertical alignment of data point labels placed inside the funnel or pyramid.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment.Top">
      <summary>
            Top alignment.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment.Bottom">
      <summary>
            Bottom alignment.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle">
      <summary>
            Specifies Funnel or Pyramid chart data point labels style.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.Inside">
      <summary>
            Labels are inside.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.Outside">
      <summary>
            Labels are outside.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.OutsideInColumn">
      <summary>
            Labels are outside in column.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.Disabled">
      <summary>
            Labels are disabled.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidOutsideLabelPlacement">
      <summary>
            Specifies outside labels placement, relative to the funnel or pyramid.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidOutsideLabelPlacement.Right">
      <summary>
            Labels on the right.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidOutsideLabelPlacement.Left">
      <summary>
            Labels on the left.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomProperties">
      <summary>
            Base class for custom properties of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" /> and <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomProperties.ChartPropsBase">
      <summary>
            Base class for custom properties of data point of chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartCustomProperties.ChartPropsBase.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomProperties" /> object owning this object.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties">
      <summary>
            Represents custom attributes of a <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AssignFrom(C1.C1Rdl.Rdl2008.CustomProperties)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Column">
      <summary>
            Properties of data point of the Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnStacked">
      <summary>
            Properties of data point of the Column Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnPercentStacked">
      <summary>
            Properties of data point of the Column PercentStacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Line">
      <summary>
            Properties of data point of the Line chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineSmooth">
      <summary>
            Properties of data point of the Line Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineStepped">
      <summary>
            Properties of data point of the Line Stepped chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Pie">
      <summary>
            Properties of data point of the Pie chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Doughnut">
      <summary>
            Properties of data point of the Doughnut chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Funnel">
      <summary>
            Properties of data point of the Funnel chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Pyramid">
      <summary>
            Properties of data point of the Pyramid chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Bar">
      <summary>
            Properties of data point of the Bar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarStacked">
      <summary>
            Properties of data point of the Bar Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPercentStacked">
      <summary>
            Properties of data point of the Bar Percent Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Area">
      <summary>
            Properties of data point of the Area chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaSmooth">
      <summary>
            Properties of data point of the Area Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaStacked">
      <summary>
            Properties of data point of the Area Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaPercentStacked">
      <summary>
            Properties of data point of the Area Percent Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Range">
      <summary>
            Properties of data point of the Range chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeSmooth">
      <summary>
            Properties of data point of the Range Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeColumn">
      <summary>
            Properties of data point of the Range Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBar">
      <summary>
            Properties of data point of the Range Bar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestick">
      <summary>
            Properties of data point of the Range Candlestick chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBoxPlot">
      <summary>
            Properties of data point of the Range BoxPlot chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBar">
      <summary>
            Properties of data point of the Range ErrorBar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStock">
      <summary>
            Properties of data point of the Range Stock chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Scatter">
      <summary>
            Properties of data point of the Scatter chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterBubble">
      <summary>
            Properties of data point of the Scatter Bubble chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Polar">
      <summary>
            Properties of data point of the Polar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Radar">
      <summary>
            Properties of data point of the Radar chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PropsBase">
      <summary>
            Base class for custom properties of data point of chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PropsBase.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" /> owning this object.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaPropsBase">
      <summary>
            Common properties for data point of Area charts.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaProps">
      <summary>
            Properties of data point of Area chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaProps.ShowMarkerLines">
      <summary>
            Determines if marker lines are displayed.
            Default: False.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaSmoothProps">
      <summary>
            Properties of data point of Area Smooth chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaStackedProps">
      <summary>
            Properties of Area Stacked chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaPercentStackedProps">
      <summary>
            Properties of Area PercentStacked chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnBarPropsBase">
      <summary>
            Common properties of data point of the Column and Bar charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnBarPropsBase.DrawingStyle">
      <summary>
            Gets or sets the drawing style of bar or column charts.
            Default: Default.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnProps">
      <summary>
            Properties of data point of the Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnStackedProps">
      <summary>
            Properties of data point of the Column Stacked chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnPercentStackedProps">
      <summary>
            Properties of data point of the Column PercentStacked chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPropsBase">
      <summary>
            Common properties of data point of Bar charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPropsBase.BarLabelStyle">
      <summary>
            Gets or sets the data point label placement.
            Default: Outside.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarProps">
      <summary>
            Properties of data point of Bar chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarStackedProps">
      <summary>
            Properties of data point of Bar Stacked props.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPercentStackedProps">
      <summary>
            Properties of Bar PercentStacked props.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineProps">
      <summary>
            Base properties of Line chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineProps.ShowMarkerLines">
      <summary>
            Determines if marker lines are displayed.
            Default: False.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineSmoothProps">
      <summary>
            Properties of Line Smooth chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineSteppedProps">
      <summary>
            Properties of Line Stepped chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps">
      <summary>
            Properties of data point of Pie chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.Exploded">
      <summary>
            Determines if a Pie or Doughnut slice is exploded.
            Default: false.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.LabelsHorizontalLineSize">
      <summary>
            Gets or sets the horizontal callout line size. This attribute is only applied 
            if labels are drawn outside of data points.
            Default: 1.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.LabelsRadialLineSize">
      <summary>
            Gets or sets the radial callout line size. This attribute is only applied if
            labels are drawn outside of data points.
            Default: 1.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.PieLabelStyle">
      <summary>
            Gets or sets the data point labels position.
            Default: Default.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.PieLineColor">
      <summary>
            Gets or sets the color of the radial and horizontal label lines.
            Default: Color.Empty(auto color).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.DoughnutProps">
      <summary>
            Properties of data point of Doughnut charts.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelPyramidPropsBase">
      <summary>
            Common properties of data point of Funnel and Pyramid charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelPyramidPropsBase.CalloutLineColor">
      <summary>
            Gets or sets the CalloutLineColor for the data point labels of Funnel or Pyramid charts.
            Default: Color.Empty (auto color).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps">
      <summary>
            Properties of Funnel chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps.InsideLabelAlignment">
      <summary>
            Gets or sets the vertical alignment of data point labels placed inside the funnel.
            Default: Center.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps.LabelStyle">
      <summary>
            Gets or sets a Funnel chart data point labels style.
            Default: OutsideInColumn.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps.OutsideLabelPlacement">
      <summary>
            Gets or sets the outside labels placement, relative to the funnel.
            Default: Right.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps">
      <summary>
            Properties of data point of Pyramid chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps.InsideLabelAlignment">
      <summary>
            Gets or sets the vertical alignment of data point labels placed inside the pyramid.
            Default: Center.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps.LabelStyle">
      <summary>
            Gets or sets a Pyramid chart data point labels style.
            Default: OutsideInColumn.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps.OutsideLabelPlacement">
      <summary>
            Gets or sets the outside labels placement, relative to the pyramid.
            Default: Right.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeProps">
      <summary>
            Properties of data point of Range chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeSmoothProps">
      <summary>
            Properties of data point of smooth Range chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeColumnProps">
      <summary>
            Properties of data point of the Range Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeColumnProps.DrawingStyle">
      <summary>
            Gets or sets the drawing style of bar or column charts.
            Default: Default.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBarProps">
      <summary>
            Properties of data point of the Range Bar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBarProps.BarLabelStyle">
      <summary>
            Gets or sets the data point label placement.
            Default: Center.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps">
      <summary>
            Properties of data point of the Range Stock chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.LabelValueType">
      <summary>
            Gets or sets the Y value that is used as a data label.
            Default: Close.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.OpenCloseStyle">
      <summary>
            Gets or sets the marker style when <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.LabelValueType" /> is Open or Close values.
            Default: Line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.ShowOpenClose">
      <summary>
            Determines if Open and Close markers (lines or triangles) are displayed
            while <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.LabelValueType" /> is Open or Close.
            Default: Both.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps">
      <summary>
            Properties of data point of the Range Candlestick chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps.LabelValueType">
      <summary>
            Gets or sets the Y value that is used as a data label.
            Default: Close.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps.PriceDownColor">
      <summary>
            Gets or sets the color for a candle if a data point's Close value is less than its Open value.
            Default: Empty (auto).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps.PriceUpColor">
      <summary>
            Gets or sets the color for a candle if a data point's Close value is greater than its Open value.
            Default: Empty (auto).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBarProps">
      <summary>
            Properties of data point of the Range ErrorBar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBarProps.CenterMarkerStyle">
      <summary>
            Gets or sets the appearance type of the marker shown at the center value of the Error Bar chart.
            Default: Line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBarProps.Style">
      <summary>
            Gets or sets the visibility of the Upper and Lower Error values of an Error Bar chart.
            Default: Both.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBoxPlotProps">
      <summary>
            Properties of data point of the Range BoxPlot chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterProps">
      <summary>
            Properties of the Scatter chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterBubbleProps">
      <summary>
            Properties of the Scatter Bubble chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PolarProps">
      <summary>
            Properties of data point of the Polar charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PolarProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RadarProps">
      <summary>
            Properties of data point the Radar chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPoint">
      <summary>
            Represents a data point for a chart.
            May consist of a single value expression
            (for example in bar or line charts) or
            multiple value expressions (stock and bubble charts).
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoint.AssignFrom(C1.C1Rdl.Rdl2008.ChartDataPoint)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoints" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Values">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" /> object defining data values for the point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Label">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" /> object defining data labels.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.AxisLabel">
      <summary>
            Gets or sets the label to use on the axis for the data point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ToolTip">
      <summary>
            Gets or sets the tooltip to display for the data point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ActionInfo">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ActionInfo" /> object defining actions associated with this data point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Style" /> object defining style properties for the data point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Marker">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" /> object defining appearance of the data point marker.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.DataElementName">
      <summary>
            Gets or sets the name to use for the data element for this member.
            Must be a CLS-compliant identifier.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.DataElementOutput">
      <summary>
            Gets or sets a value indicating whether the member should appear in a data rendering.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ItemInLegend">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" /> defining how the data point
            appears when displayed in a legend (when Series.Type = Shape).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.CustomProperties">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" /> object defining
            custom properties for the data point.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPoints">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoints.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoints" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoints.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoints.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoints.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesType">
      <summary>
            Specifies visualization types for the series.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Column">
      <summary>
            Column chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Bar">
      <summary>
            Bar chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Line">
      <summary>
            Line chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Shape">
      <summary>
            Shape chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Scatter">
      <summary>
            Scatter chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Area">
      <summary>
            Area chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Range">
      <summary>
            Range chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Polar">
      <summary>
            Polar chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesSubtype">
      <summary>
            Specifies visualization subtypes for the series.
            Available subtypes (and default subtype) depends on <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Type" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Plain">
      <summary>
            Default for all Types except Shape.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Stacked">
      <summary>
            For Column, Bar and Area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.PercentStacked">
      <summary>
            For Column, Bar and Area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Smooth">
      <summary>
            For Line, Area and Range.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Stepped">
      <summary>
            For Line only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Pie">
      <summary>
            Default for Shape.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.ExplodedPie">
      <summary>
            For Shape only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Doughnut">
      <summary>
            For Shape only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.ExplodedDoughnut">
      <summary>
            For Shape only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Funnel">
      <summary>
            For Shape only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Pyramid">
      <summary>
            For Shape only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Bubble">
      <summary>
            For Scatter only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Candlestick">
      <summary>
            For Range only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Stock">
      <summary>
            For Range only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Bar">
      <summary>
            For Range only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Column">
      <summary>
            For Range only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.BoxPlot">
      <summary>
            For Range only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.ErrorBar">
      <summary>
            For Range only.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Radar">
      <summary>
            For Polar only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints">
      <summary>
            Represents the behavior for empty points in a series.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartEmptyPoints.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartEmptyPoints.AssignFrom(C1.C1Rdl.Rdl2008.ChartEmptyPoints)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.Style" /> object defining style properties for the data point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.Marker">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" /> object defining appearance of the data point marker.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.DataLabel">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" /> object indicating that the values should be marked with data labels.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.AxisLabel">
      <summary>
            Gets or sets the label to use on the axis for empty data points.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.ToolTip">
      <summary>
            Gets or sets the tooltip to display for the data point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.ActionInfo">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.ActionInfo" /> object defining actions associated with this data point.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.CustomProperties">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.CustomProperties" /> collection containing
            custom properties for the data point.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle">
      <summary>
            Specifies how datapoint labels can be drawn outside of the plot area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle.Partial">
      <summary>
            Labels can be partially outside the plot area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle.True">
      <summary>
            Labels can be entirely outside the plot area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle.False">
      <summary>
            Labels must be entirely inside the plot area.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLineAnchor">
      <summary>
            Specifies shapes that should be drawn on the point end of the callout line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Arrow">
      <summary>
            Arrow.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Diamond">
      <summary>
            Diamond.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Square">
      <summary>
            Square.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Round">
      <summary>
            Round.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCalloutStyle">
      <summary>
            Specifies styles to use when drawing the callout lines.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCalloutStyle.Underline">
      <summary>
            Attach the callout line to an underline on the label.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCalloutStyle.Box">
      <summary>
            Attach the callout line to a box around the label.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCalloutStyle.None">
      <summary>
            No additional label style for the callout line.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections">
      <summary>
            Represents directions in which a smart label is not allowed to move.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.AssignFrom(C1.C1Rdl.Rdl2008.ChartNoMoveDirections)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Up">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move directly up.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Left">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move directly left.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Right">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move directly right.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Down">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move directly down.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.UpLeft">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move up-left.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.UpRight">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move up-right.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.DownLeft">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move down-left.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.DownRight">
      <summary>
            Gets or sets a value indicating whether the smart label is not allowed to move down-right.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSmartLabel">
      <summary>
            Represents the behavior of smart labels.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSmartLabel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartSmartLabel" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSmartLabel.AssignFrom(C1.C1Rdl.Rdl2008.ChartSmartLabel)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartSmartLabel" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.Disabled">
      <summary>
            Gets or sets a value indicating whether smart labels should be turned off.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.AllowOutSidePlotArea">
      <summary>
            Gets or sets a value indicating whether datapoint labels can be drawn outside of the plot area.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutBackColor">
      <summary>
            Gets or sets the fill color of the box around the point label text when the <see cref="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutStyle" /> is Box.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineAnchor">
      <summary>
            Gets or sets the shape that should be drawn on the point end of the callout line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineColor">
      <summary>
            Gets or sets a value indicating whether datapoint labels can be drawn outside of the plot area.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineStyle">
      <summary>
            Gets or sets the style of the callout line.
            <para>Default: Solid.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineWidth">
      <summary>
            Gets or sets the width of the callout line.
            <para>Default: 0.75pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutStyle">
      <summary>
            Gets or sets the style to use when drawing the callout lines.
            <para>Default: Underline.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.ShowOverlapped">
      <summary>
            Gets or sets a value indicating labels should be displayed even when
            overlapping issues cannot be resolved.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.MarkerOverlapping">
      <summary>
            Gets or sets a value indicating whether point labels are allowed to overlap point markers.
            <para>Default: False.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.MaxMovingDistance">
      <summary>
            Gets or sets the maximum distance from the data point that data point labels
            can be moved to prevent overlapping.
            <para>Default: 23 pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.MinMovingDistance">
      <summary>
            Gets or sets the minimum distance from the data point that data point labels
            can be moved to prevent overlapping.
            <para>Default: 23 pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.NoMoveDirections">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections" /> object indicating in which directions
            the label is not allowed to move.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle">
      <summary>
            Specifies possible drawing styles of the <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Default">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Cylinder">
      <summary>
            Cylinder.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Emboss">
      <summary>
            Emboss.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.LightToDark">
      <summary>
            Light to dark.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Wedge">
      <summary>
            Wedge.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesEmptyPointValue">
      <summary>
            Specifies empty point value for chart series.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesEmptyPointValue.Zero">
      <summary>
            Zero.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesEmptyPointValue.Average">
      <summary>
            Average.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle">
      <summary>
            Specifies column style for chart series.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle.Normal">
      <summary>
            Normal.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle.Paretto">
      <summary>
            Paretto.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle.Histogram">
      <summary>
            Histogram.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAreaDrawingStyle">
      <summary>
            Specifies types of shapes of a Radar chart's chart area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAreaDrawingStyle.Circle">
      <summary>
            Circular shape.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAreaDrawingStyle.Polygon">
      <summary>
            Polygon shape.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartArrowsType">
      <summary>
            Specifies types of arrowhead to use for line segments that join labels
            to their data points.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.None">
      <summary>
            No arrowheads.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.Triangle">
      <summary>
            Triangle arrowheads.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.Sharp">
      <summary>
            Sharp arrowheads.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.Lines">
      <summary>
            Line arrowheads.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBarLabelStyle">
      <summary>
            Specifies data point label placement for Bar and Gantt charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Outside">
      <summary>
            Labels are outside.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Left">
      <summary>
            Labels are on the left.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Right">
      <summary>
            Labels are on the right.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Center">
      <summary>
            Labels are centered.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCollectedStyle">
      <summary>
            Specifies styles of collected slice.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCollectedStyle.None">
      <summary>
            No slice.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCollectedStyle.SingleSlice">
      <summary>
            Single slice.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCollectedStyle.CollectedPie">
      <summary>
            Collected pie.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle">
      <summary>
            Specifies drawing styles for Pie and Doughnut charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle.Default">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle.SoftEdge">
      <summary>
            Soft edge.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle.Concave">
      <summary>
            Concave.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPieLabelStyle">
      <summary>
            Specifies data point labels position for Pie and Doughnut charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieLabelStyle.Inside">
      <summary>
            Labels are inside.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieLabelStyle.Outside">
      <summary>
            Lables are outside.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieLabelStyle.Disabled">
      <summary>
            Labels are disabled.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramid3DDrawingStyle">
      <summary>
            Specifies drawing styles for 3D Funnel and Pyramid charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramid3DDrawingStyle.CircularBase">
      <summary>
            Circular base style.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramid3DDrawingStyle.SquareBase">
      <summary>
            Square base style.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidStyle">
      <summary>
            Specifies styles of Funnel and Pyramid charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidStyle.YIsWidth">
      <summary>
            Y is the width.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidStyle.YIsHeight">
      <summary>
            Y is the height.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPyramidValueType">
      <summary>
            Specifies types of data represeted by a pyramid chart: linear height of the segment or it's surface.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPyramidValueType.Linear">
      <summary>
            Linear height is the data.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPyramidValueType.Surface">
      <summary>
            Surface is the data.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLabelValueType">
      <summary>
            Specifies Y values that used as a data label in Range Stock charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.High">
      <summary>
            High.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.Low">
      <summary>
            Low.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.Open">
      <summary>
            Open.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.Close">
      <summary>
            Close.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle">
      <summary>
            Specifies marker styles in Range Stock charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle.Triangle">
      <summary>
            Triangle.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle.Line">
      <summary>
            Line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle.Candlestick">
      <summary>
            Candlestick.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartShowOpenClose">
      <summary>
            Specifies show behavior for markers in Range Stock charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartShowOpenClose.Both">
      <summary>
            Both.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartShowOpenClose.Open">
      <summary>
            Open.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartShowOpenClose.Close">
      <summary>
            Close.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle">
      <summary>
            Specifies styles of center marker for Range ErrorBar charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Line">
      <summary>
            Line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Square">
      <summary>
            Square.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Circle">
      <summary>
            Circle.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Diamond">
      <summary>
            Diamond.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Triangle">
      <summary>
            Triangle.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Cross">
      <summary>
            Cross.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star4">
      <summary>
            Star4.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star5">
      <summary>
            Star5.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star6">
      <summary>
            Star6.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star10">
      <summary>
            Star10.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartErrorBarStyle">
      <summary>
            Specifies visibility behavior of the Upper and Lower Error values of an Error Bar chart.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarStyle.Both">
      <summary>
            Both error values are visible.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarStyle.UpperError">
      <summary>
            Upper error value is visible.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarStyle.LowerError">
      <summary>
            Lower error value is visible.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartErrorBarType">
      <summary>
            Specifies modes of calculation of the upper and lower errors for the center values of an error bar series.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.FixedValue">
      <summary>
            Fixed value.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.Percentage">
      <summary>
            Percentage.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.StandardDeviation">
      <summary>
            Standard deviation.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.StandardError">
      <summary>
            Standard error.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle">
      <summary>
            Specifies positions of data labels for Polar and Radar charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Auto">
      <summary>
            Auto.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Circular">
      <summary>
            Circular.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Horizontal">
      <summary>
            Horizontal.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Radial">
      <summary>
            Radial.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPolarDrawingStyle">
      <summary>
            Specifies drawing styles of Polar charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPolarDrawingStyle.Line">
      <summary>
            Line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPolarDrawingStyle.Marker">
      <summary>
            Marker.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle">
      <summary>
            Specifies drawing styles of Radar charts.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle.Area">
      <summary>
            Area.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle.Line">
      <summary>
            Line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle.Marker">
      <summary>
            Marker.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties">
      <summary>
            Represents custom attributes of a <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AssignFrom(C1.C1Rdl.Rdl2008.CustomProperties)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Column">
      <summary>
            Properties of the Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnStacked">
      <summary>
            Properties of the Column Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnPercentStacked">
      <summary>
            Properties of the Column PercentStacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Line">
      <summary>
            Properties of the Line chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSmooth">
      <summary>
            Properties of the Line Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineStepped">
      <summary>
            Properties of the Line Stepped chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Pie">
      <summary>
            Properties of the Pie chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Doughnut">
      <summary>
            Properties of the Doughnut chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Funnel">
      <summary>
            Properties of the Funnel chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Pyramid">
      <summary>
            Properties of the Pyramid chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Bar">
      <summary>
            Properties of the Bar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarStacked">
      <summary>
            Properties of the Bar Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPercentStacked">
      <summary>
            Properties of the Bar Percent Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Area">
      <summary>
            Properties of the Area chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaSmooth">
      <summary>
            Properties of the Area Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaStacked">
      <summary>
            Properties of the Area Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaPercentStacked">
      <summary>
            Properties of the Area Percent Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Range">
      <summary>
            Properties of the Range chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeSmooth">
      <summary>
            Properties of the Range Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumn">
      <summary>
            Properties of the Range Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBar">
      <summary>
            Properties of the Range Bar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestick">
      <summary>
            Properties of the Range Candlestick chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlot">
      <summary>
            Properties of the Range BoxPlot chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBar">
      <summary>
            Properties of the Range ErrorBar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStock">
      <summary>
            Properties of the Range Stock chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Scatter">
      <summary>
            Properties of the Scatter chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubble">
      <summary>
            Properties of the Scatter Bubble chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Polar">
      <summary>
            Properties of the Polar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Radar">
      <summary>
            Properties of the Radar chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PropsBase">
      <summary>
            Abstract base class for chart of specified type.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PropsBase.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" /> owning this object.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ThreeDPropsBase">
      <summary>
            Common 3D properties for Column, Bar, Line, Area charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ThreeDPropsBase.PixelPointDepth">
      <summary>
            Gets or sets the 3D series depth, measured in pixels.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ThreeDPropsBase.PixelPointGapDepth">
      <summary>
            Gets or sets the 3D series gap, measured in pixels.
            Default: 0.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaPropsBase">
      <summary>
            Common properties for Area charts.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps">
      <summary>
            Properties of Area chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps.ShowMarkerLines">
      <summary>
            Determines if marker lines are displayed.
            Default: False.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaSmoothProps">
      <summary>
            Properties of Area Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaSmoothProps.LineTension">
      <summary>
            Gets or sets the tension for the drawn curve.
            A curve with zero tension will have the appearance of a line.
            Applied only for smooth chart.
            Default: 0.5.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaStackedProps">
      <summary>
            Properties of Area Stacked chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaPercentStackedProps">
      <summary>
            Properties of Area PercentStacked chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase">
      <summary>
            Common properties of the Column and Bar charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.DrawingStyle">
      <summary>
            Gets or sets the drawing style of bar or column charts.
            Default: Default.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.MaxPixelPointWidth">
      <summary>
            Gets or sets the maximum width (in pixels) of data points.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.MinPixelPointWidth">
      <summary>
            Gets or sets the minimum width (in pixels) of data points.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.PixelPointWidth">
      <summary>
            Gets or sets the width (in pixels) of data points.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.PointWidth">
      <summary>
            Gets or sets the relative width of data points.
            Default: 0.8.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps">
      <summary>
            Properties of the Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.DrawSideBySide">
      <summary>
            Determines if data points that have the same X value are drawn side by side,
            or are drawn using the same X value. 
            If Auto then the chart type automatically determines if this is true or false.
            Note that setting this attribute to true only has an effect
            if two or more series in a chart area have DrawSideBySide set to true.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs">
      <summary>
            Series will be formatted as Normal, Histogram or Pareto after binding the
            data to the series.
            This attribute will be ignored if Series groupings or nested Category groupings
            exist.
            Default: Normal.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramSegmentIntervalNumber">
      <summary>
            If <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs" /> is Histogram, then this property defines the
            number of intervals the data range is divided into.
            This property only has effect when <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramSegmentIntervalWidth" /> is not set.
            Default: 20.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramSegmentIntervalWidth">
      <summary>
            If <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs" /> is Histogram then this property defines the histogram interval width.
            Setting this value to 0 will result in automatic width calculation based on the
            data range.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramShowPercentOnSecondaryYAxis">
      <summary>
            If <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs" /> is Histogram then this property indicates the
            percent frequency should be displayed using the secondary Y axis.
            Default: True.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnStackedProps">
      <summary>
            Properties of the Column Stacked chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnStackedProps.StackedGroupName">
      <summary>
            Gets or sets the stacked column group name.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnPercentStackedProps">
      <summary>
            Properties of the Column PercentStacked chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPropsBase">
      <summary>
            Common properties of Bar charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPropsBase.BarLabelStyle">
      <summary>
            Gets or sets the data point label placement.
            Default: Outside.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarProps">
      <summary>
            Properties of Bar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarProps.DrawSideBySide">
      <summary>
            Determines if data points that have the same X value are drawn side by side,
            or are drawn using the same X value. 
            If Auto then the chart type automatically determines if this is true or false.
            Note that setting this attribute to true only has an effect
            if two or more series in a chart area have DrawSideBySide set to true.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarProps.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarStackedProps">
      <summary>
            Properties of Bar Stacked props.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarStackedProps.StackedGroupName">
      <summary>
            Gets or sets the stacked bar group name.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPercentStackedProps">
      <summary>
            Properties of Bar PercentStacked props.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps">
      <summary>
            Base properties of Line chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps.ShowMarkerLines">
      <summary>
            Determines if marker lines are displayed.
            Default: False.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSmoothProps">
      <summary>
            Properties of Line Smooth chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSmoothProps.LineTension">
      <summary>
            Gets or sets the tension for the drawn curve. A curve with zero tension will have the appearance of a line.
            Default: 0.5.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSteppedProps">
      <summary>
            Properties of Line Stepped chart.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps">
      <summary>
            Properties of Pie chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.ThreeDLabelLineSize">
      <summary>
            Gets or sets the 3D label line size as a percentage of the default size.
            Default: 100.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedStyle">
      <summary>
            Gets or sets the style of collected style.
            Default: None.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedColor">
      <summary>
            Gets or sets the color of the collected pie or doughnut slice.
            Default: Color.Empty.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedLabel">
      <summary>
            Gets or sets the label of the collected pie slice.
            Default: "Other".
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedLegendText">
      <summary>
            Gets or sets the legend text of the collected pie slice.
            Default: "Other".
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedSliceExploded">
      <summary>
            Gets or sets a Boolean value that indicates whether the
            collected pie slice will be shown as exploded.
            Default: False.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedThreshold">
      <summary>
            Gets or sets the threshold value for collecting small pie slices.
            Default: 5.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedThresholdUsePercent">
      <summary>
            Gets or sets value that indicates if collected slice threshold value (see <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedThreshold" />)
            is set in percent.
            Default: True.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedToolTip">
      <summary>
            Gets or sets collected slice tooltip.
            Default: True.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedChartShowLabels">
      <summary>
            Displays point label for the collected pie (if slices have been collected).
            Default: False.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedChartShowLegend">
      <summary>
            Displays a legend for the collected pie (if slices have been collected).
            Default: False.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.LabelsHorizontalLineSize">
      <summary>
            Gets or sets the horizontal callout line size. This attribute is only applied 
            if labels are drawn outside of data points.
            Default: 1.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.LabelsRadialLineSize">
      <summary>
            Gets or sets the radial callout line size. This attribute is only applied if
            labels are drawn outside of data points.
            Default: 1.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.MinimumRelativePieSize">
      <summary>
            Gets or sets the minimum pie size. When used with outside labeling,
            this property controls the minimum acceptable pie size, measured as
            a percentage the chart area size.
            This will prevent the pie from becoming too small due to the labels
            dominating the chart area.
            Default: 30.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieDrawingStyle">
      <summary>
            Gets or sets the drawing style of the Pie and Doughnut charts.
            Default: Default.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieLabelStyle">
      <summary>
            Gets or sets the data point labels position.
            Default: Default.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieLineColor">
      <summary>
            Gets or sets the color of the radial and horizontal label lines.
            Default: Color.Empty(auto color).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieStartAngle">
      <summary>
            Determines the starting angle of the first pie slice, measured in degrees.
            Default: 0.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.DoughnutProps">
      <summary>
            Properties of Doughnut charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.DoughnutProps.DoughnutRadius">
      <summary>
            Percent of the radius used as the doughnut size.
            Default: 60.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelPyramidPropsBase">
      <summary>
            Common properties of Funnel and Pyramid charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelPyramidPropsBase.CalloutLineColor">
      <summary>
            Gets or sets the CalloutLineColor for the data point labels of Funnel or Pyramid charts.
            Default: Color.Empty (auto color).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps">
      <summary>
            Properties of Funnel chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.ThreeDDrawingStyle">
      <summary>
            Gets or sets the drawing style of a Funnel 3D chart.
            Default: CircleBase.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.ThreeDRotationAngle">
      <summary>
            Gets or sets the 3D rotation angle of the funnel.
            Default: 5.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.InsideLabelAlignment">
      <summary>
            Gets or sets the vertical alignment of data point labels placed inside the funnel.
            Default: Center.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.LabelStyle">
      <summary>
            Gets or sets a Funnel chart data point labels style.
            Default: OutsideInColumn.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.MinPointHeight">
      <summary>
            Gets or sets the minimum height of data points, in relative coordinates.
            This attribute can be used to make very small funnel segments visible.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.NeckHeight">
      <summary>
            Gets or sets the funnel neck height.
            Only applied when a predefined funnel shape is used.
            Default: 5.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.NeckWidth">
      <summary>
            Gets or sets the funnel neck width.
            Only applied when a predefined funnel shape is used.
            Default: 5.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.OutsideLabelPlacement">
      <summary>
            Gets or sets the outside labels placement, relative to the funnel.
            Default: Right.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.PointGap">
      <summary>
            Gets or sets the gap size between points, in relative coordinates.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.Style">
      <summary>
            Gets or sets the Funnel chart style.
            Default: YIsHeight.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps">
      <summary>
            Properties of Pyramid chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.ThreeDDrawingStyle">
      <summary>
            Gets or sets the drawing style of a 3D Pyramid chart.
            Default: SquareBase.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.ThreeDRotationAngle">
      <summary>
            Gets or sets the 3D rotation angle of the pyramid.
            Default: 5.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.InsideLabelAlignment">
      <summary>
            Gets or sets the vertical alignment of data point labels placed inside the pyramid.
            Default: Center.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.LabelStyle">
      <summary>
            Gets or sets a Pyramid chart data point labels style.
            Default: OutsideInColumn.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.MinPointHeight">
      <summary>
            Gets or sets the minimum height of data points, in relative coordinates.
            This attribute can be used to make very small pyramid segments visible.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.OutsideLabelPlacement">
      <summary>
            Gets or sets the outside labels placement, relative to the pyramid.
            Default: Right.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.PointGap">
      <summary>
            Gets or sets the gap size between points, in relative coordinates.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.ValueType">
      <summary>
            Gets or sets if data point values represent a linear height of the segment or it's surface.
            Default: Linear.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeProps">
      <summary>
            Properties of Range chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeProps.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeSmoothProps">
      <summary>
            Properties of smooth Range chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeSmoothProps.LineTension">
      <summary>
            Gets or sets the tension for the drawn curve.
            A curve with zero tension will have the appearance of a line.
            Default: 0.5.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase">
      <summary>
            Common properties for Range charts like Column, Bar, Stock,
            Candlestick, ErrorBar, BoxPlot.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.MaxPixelPointWidth">
      <summary>
            Gets or sets the maximum width (in pixels) of data points.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.MinPixelPointWidth">
      <summary>
            Gets or sets the minimum width (in pixels) of data points.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.PixelPointWidth">
      <summary>
            Gets or sets the width (in pixels) of data points.
            Default: 0.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.PointWidth">
      <summary>
            Gets or sets the relative width of data points.
            Default: 0.8.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps">
      <summary>
            Properties of the Range Column chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps.DrawingStyle">
      <summary>
            Gets or sets the drawing style of bar or column charts.
            Default: Default.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps.DrawSideBySide">
      <summary>
            Determines if data points that have the same X value are drawn side by side,
            or are drawn using the same X value. 
            If Auto then the chart type automatically determines if this is true or false.
            Note that setting this attribute to true only has an effect
            if two or more series in a chart area have DrawSideBySide set to true.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBarProps">
      <summary>
            Properties of the Range Bar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBarProps.BarLabelStyle">
      <summary>
            Gets or sets the data point label placement.
            Default: Center.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps">
      <summary>
            Properties of the Range Stock chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.LabelValueType">
      <summary>
            Gets or sets the Y value that is used as a data label.
            Default: Close.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.OpenCloseStyle">
      <summary>
            Gets or sets the marker style when <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.LabelValueType" /> is Open or Close values.
            Default: Line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.ShowOpenClose">
      <summary>
            Determines if Open and Close markers (lines or triangles) are displayed
            while <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.LabelValueType" /> is Open or Close.
            Default: Both.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps">
      <summary>
            Properties of the Range Candlestick chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps.LabelValueType">
      <summary>
            Gets or sets the Y value that is used as a data label.
            Default: Close.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps.PriceDownColor">
      <summary>
            Gets or sets the color for a candle if a data point's Close value is less than its Open value.
            Default: Empty (auto).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps.PriceUpColor">
      <summary>
            Gets or sets the color for a candle if a data point's Close value is greater than its Open value.
            Default: Empty (auto).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps">
      <summary>
            Properties of the Range ErrorBar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.DrawSideBySide">
      <summary>
            Determines if data points that have the same X value are drawn side by side,
            or are drawn using the same X value. 
            If Auto then the chart type automatically determines if this is true or false.
            Note that setting this attribute to true only has an effect
            if two or more series in a chart area have DrawSideBySide set to true.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.CenterMarkerStyle">
      <summary>
            Gets or sets the appearance type of the marker shown at the center value of the Error Bar chart.
            Default: Line.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.Series">
      <summary>
            Gets or sets the name of the series that will be used for error bar
            calculations. The named series must exist.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.Style">
      <summary>
            Gets or sets the visibility of the Upper and Lower Error values of an Error Bar chart.
            Default: Both.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.Type">
      <summary>
            Defines how the upper and lower errors are calculated for the center values of the error bar series.
            Default: StandardError.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps">
      <summary>
            Properties of the Range BoxPlot chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.DrawSideBySide">
      <summary>
            Determines if data points that have the same X value are drawn side by side,
            or are drawn using the same X value. 
            If Auto then the chart type automatically determines if this is true or false.
            Note that setting this attribute to true only has an effect
            if two or more series in a chart area have DrawSideBySide set to true.
            Default: Auto.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.Percentile">
      <summary>
            Gets or sets the percentile value of the box of the Box chart.
            Default: 25.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.Series">
      <summary>
            Gets or sets the name of the series to be used as the data source for the Box chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.ShowAverage">
      <summary>
            Gets or sets a value that indicates whether to display the average value
            for the Box chart.
            Default: true.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.ShowMedian">
      <summary>
            Gets or sets a value that indicates whether to display the median value for
            the Box chart.
            Default: true.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.ShowUnusualValues">
      <summary>
            Gets or sets a value that indicates whether the unusual values value for
            the Box chart will be shown.
            Default: true.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.WhiskerPercentile">
      <summary>
            Gets or sets the percentile value of the whiskers of the Box chart.
            Applied for: Range:Box.
            Default: true.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterProps">
      <summary>
            Properties of the Scatter chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterProps.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterProps.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            Default: Auto.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps">
      <summary>
            Properties of the Scatter Bubble chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MaxSize">
      <summary>
            Gets or sets the maximum size of the bubble radius as a percentage of the chart area size.
            Default: 15.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MinSize">
      <summary>
            Gets or sets the minimum size of the bubble radius as a percentage of the chart area size.
            Default: 3.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.ScaleMax">
      <summary>
            Gets or sets the bubble size that will be used as the maximum,
            which is a percentage of the chart area that is set by <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MaxSize" />.
            Default: 15.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.ScaleMin">
      <summary>
            Gets or sets the bubble size that will be used as the minimum,
            which is a percentage of the chart area that is set by <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MinSize" />.
            Default: 3.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.UseSizeForLabel">
      <summary>
            Gets or sets a value that indicates whether to use the bubble size
            as the data point label.
            Default: false.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase">
      <summary>
            Common properties of the Polar and Radara charts.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.EmptyPointValue">
      <summary>
            Determines how an empty point is treated when the chart is drawn.
            If a value of 'Average' is used then the chart is drawn as if a point exists
            that has an average Y value, the average being calculated using the adjacent points. 
            If 'Zero' is used then the chart is drawn as if a point exists with a value of zero.
            Default: Average.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.LabelStyle">
      <summary>
            Gets or set the data point labels position.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.AreaDrawingStyle">
      <summary>
            Gets or sets the plotting area shape of Radar and Polar charts.
            Default: Circle.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.CircularLabelsStyle">
      <summary>
            Gets or sets the labels drawing style of Polar and Radata charts.
            Default: Auto.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarProps">
      <summary>
            Properties of the Polar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarProps.PolarDrawingStyle">
      <summary>
            Gets or sets a Polar chart's drawing style.
            Default: Line.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RadarProps">
      <summary>
            Properties of the Radar chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RadarProps.RadarDrawingStyle">
      <summary>
            Gets or sets a Radar chart's drawing style.
            Default: Area.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeries">
      <summary>
            Defines the list of data points for one series.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeries.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeries.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Hidden">
      <summary>
            Gets or sets value indicating whether the series should be hidden.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.DataPoints">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoints" /> object containing data points within the series.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Type">
      <summary>
            Gets or sets visualization type for the series.
            Default: Column.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Subtype">
      <summary>
            Gets or sets visualization subtype for the series.
            Available subtypes (and default subtype) depends on <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Type" />.
            By default this property is null it means that 
            default subtype for currently selected <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Type" /> wiil be used.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.EmptyPoints">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints" /> defining behavior of empty points in the series.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Style">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Style" /> defining style properties for the series.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.DataLabel">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" /> object indicating the values should be marked
            with data labels.
            Applies only within DerivedSeries.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Marker">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" /> object defining appearance of the data point
            marker.
            Applies only within DerivedSeries.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.CustomProperties">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" /> collection defining custom properties for the series.
            This includes all custom chart attributes for series.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.ItemInLegend">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" /> object defining how the series
            appears when displayed in a legend.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.LegendName">
      <summary>
            Gets or sets name of the legend in which this series should appear.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.ChartAreaName">
      <summary>
            Gets or sets name of the chart area in which to plot the series.
            Defaults (if null or empty) to the first chart area in the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.ValueAxisName">
      <summary>
            Gets or sets name of the value axis against which to plot this series.
            If null or empty, the series should be plotted against the first value axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.CategoryAxisName">
      <summary>
            Gets or sets name of the category axis against which to plot this series.
            If null or empty, the series should be plotted against the first category axis.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.SmartLabel">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartSmartLabel" /> smart label properties.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCollection">
      <summary>
            Represents collection of the <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCollection.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter">
      <summary>
            Defines a parameter to a formula for a derived series.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartFormulaParameter.Value">
      <summary>
            Gets or sets value of the parameter if the value does not depend on
            the actual data points.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartFormulaParameter.Source">
      <summary>
            Gets or sets name of the ChartDataPointValue property to use as the value of this parameter.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFormulaParameters">
      <summary>
            Represents collection of the <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameters" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameters.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartFormulaParameters.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFormula">
      <summary>
            Specifies the formula applied to one or more chart series.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.BollingerBands">
      <summary>
            Bollinger Bands indicators are plotted at standard deviation levels above and
            below a simple moving average.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.MovingAverage">
      <summary>
            A Simple Moving Average is an average of data calculated over a period of time.
            The moving average is the most popular price indicator used in technical analysis,
            and can be used with any price,
            for example, Hi, Low, Open and Close, or can be applied to other indicators.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.ExponentialMovingAverage">
      <summary>
            An Exponential Moving Average is an average of data calculated over a period
            of time where the most recent days have more weight.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.TriangularMovingAverage">
      <summary>
            A Triangular Moving Average is an average of data calculated over a period
            of time where the middle portion of data has more weight.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.WeightedMovingAverage">
      <summary>
            Weighted Moving Average is an average of data that is calculated over a period
            of time, where greater weight is attached to the most recent data.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.MACD">
      <summary>
            Moving Average Convergence/Divergence indicator compares two moving averages of
            prices and is used with a 9-day Exponential Moving average as a signal that
            indicates buying and selling moments.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.DetrendedPriceOscillator">
      <summary>
            Detrended Price Oscillator attempts to remove trends from prices.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Envelopes">
      <summary>
            Envelopes are plotted above and below a moving average by using a specified percentage as the shift.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Performance">
      <summary>
            The Performance indicator compares a current closing price or any other price
            with the first closing value from the first time period.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.RateOfChange">
      <summary>
            The Rate of Change indicator compares a specified closing price with the
            current price.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.RelativeStrengthIndex">
      <summary>
            The Relative Strength Index is a momentum oscillator that compares upward
            movements of the closing price with downward movements, and results in
            values that range from 0 to 100.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.StandardDeviation">
      <summary>
            Standard Deviation is used to indicate volatility, and measures the difference between values,
            for example, closing price, and their moving average.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.TRIX">
      <summary>
            The Triple Exponential Moving Average is based on a triple moving average
            of the closing price. Its purpose is to eliminate short cycles.
            This indicator keeps the closing price in trends that are shorter
            than the specified period.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Mean">
      <summary>
            Mean prices are average values of daily prices and can be used as a filter
            for trend indicators.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Median">
      <summary>
            Median prices are mid-point values of daily prices and can be used as
            a filter for trend indicators.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries">
      <summary>
            Defines a derived series which is calculated from a formula
            applied to another series.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeries.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeries.AssignFrom(C1.C1Rdl.Rdl2008.ChartDerivedSeries)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.Series">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> object defining series properties for the derived series.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.SourceSeriesName">
      <summary>
            Gets or sets name of the series from which to derive.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.FormulaParameters">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameters" /> collection containing
            parameters to the formula.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.Formula">
      <summary>
            Gets or sets formula to apply to the data values from the source series.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection">
      <summary>
            Represents collection of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartData">
      <summary>
            Represents chart data.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartData.AssignFrom(C1.C1Rdl.Rdl2008.ChartData)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartData" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartData.Series">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCollection" /> collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartData.DerivedSeries">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection" /> collection containing
            derived series which are calculated from formulas applied to other series.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor">
      <summary>
            Defines the custom color to use for the Custom palette of the <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.#ctor(C1.C1Rdl.RdlColor)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" /> class.
            </summary>
      <param name="color">Value of <see cref="P:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.Color" /> property.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.AssignFrom(C1.C1Rdl.Rdl2008.ChartCustomPaletteColor)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.op_Implicit(C1.C1Rdl.RdlColor)~C1.C1Rdl.Rdl2008.ChartCustomPaletteColor">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.RdlColor" /> to a <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlColor" /> to convert.</param>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.op_Implicit(C1.C1Rdl.Rdl2008.ChartCustomPaletteColor)~C1.C1Rdl.RdlColor">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" /> to a <see cref="T:C1.C1Rdl.RdlColor" />.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" /> to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlColor" />.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.Color">
      <summary>
            Gets <see cref="T:C1.C1Rdl.RdlColor" /> object representing value of this object.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors">
      <summary>
            Defines the colors to use for the Custom palette of the <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" /> type.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.Add(C1.C1Rdl.RdlColor)">
      <summary>
            Adds a color to the current collection.
            </summary>
      <param name="value">The color to add.</param>
      <returns>The index of the added color in the current collection.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.Add(C1.C1Rdl.Rdl2008.ChartCustomPaletteColor)">
      <summary>
            Adds a value to the current collection.
            </summary>
      <param name="value">The value to add.</param>
      <returns>The index of the added value in the current collection.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.Item(System.Int32)">
      <summary>
            Gets the element at the specified index. 
            </summary>
      <param name="index">The index in the collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Chart">
      <summary>
            The <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> object defines a set of chart areas to be drawn as a single data visualization data region.
            The <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> is defined much like a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />, but instead of Columns, Rows, and Cells, 
            the <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> has Categories, Series, and DataPoints.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataRegion">
      <summary>
            Abstract base class for all report items linked with data.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataRegion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.DataRegion" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataRegion.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.NoRowsMessage">
      <summary>
            Gets or sets the message to display in the <see cref="T:C1.C1Rdl.Rdl2008.DataRegion" />
            (instead of the region layout) when no rows of data are available.
            Note: Style information on the data region applies to this text.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.DataSetName">
      <summary>
            Gets or sets the name of the <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> to use for this <see cref="T:C1.C1Rdl.Rdl2008.DataRegion" />.
            Mandatory for top level data regions (not contained within another <b>DataRegion</b>)
            unless there is exactly one data set in the report. If there is exactly one
            data set in the report, the data region uses that data set.
            <para>Note: If there are no data sets in the report,
            data regions can not be used, as there is no valid DataSetName to use.</para>
            Ignored for data regions that are not top level.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.PageBreak">
      <summary>
            Gets or sets the <see cref="P:C1.C1Rdl.Rdl2008.DataRegion.PageBreak" /> object
            defining the page break behavior for the current data region.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.Filters">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.DataRegion.Filters" /> collection containing filters
            to apply to each row of data in the current data region.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.SortExpressions">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.DataRegion.SortExpressions" /> collection containing expressions
            by which to sort the rows of data in the current data region.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.ScriptHostOwnerSetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.AssignFrom(C1.C1Rdl.Rdl2008.Chart)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.ScriptContextHostType">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.SeriesHierarchy">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" /> collection representing
            the hierarchy of series members for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.CategoryHierarchy">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" /> collection representing
            the hierarchy of category members for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.ChartData">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.Chart.ChartData" /> object defining the data values for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Areas">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartAreas" /> collection containing
            the set of chart areas for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Legends">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartLegends" /> collection containing
            the set of legends for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Titles">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartTitles" /> collection containing
            the set of titles for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Palette">
      <summary>
            Gets or sets the color palette for the chart items.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.PaletteHatchBehavior">
      <summary>
            Gets or sets value indicating whether hatching should be
            automatically applied to data points in the chart.
            Default: Default (treated as None).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.DynamicHeight">
      <summary>
            Gets or sets the height to which the chart should grow/shrink.
            Height is used as the initial height for relative layout changes due
            to resizing.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.DynamicWidth">
      <summary>
            Gets or sets the width to which the chart should grow/shrink.
            Width is used as the initial width for relative layout changes due
            to resizing.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.BorderSkin">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartBorderSkin" /> object 
            defining a border skin for the chart.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.NoDataMessage">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartNoDataMessage" /> object 
            defining title to display if the chart contains no data.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.CustomPaletteColors">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors" /> object containing custom palette colors.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ImageSizing">
      <summary>
            Specifies types of image sizing.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.AutoSize">
      <summary>
            The object should grow/shrink to accommodate the image.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.Fit">
      <summary>
            The object is resized to exactly match the height and width of the image element.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.FitProportional">
      <summary>
            The object should be resized to fit, preserving aspect ratio.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.Clip">
      <summary>
            The object should be clipped to fit.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Image">
      <summary>
            Representa an image in a report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Image.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Image" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Image.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.Source">
      <summary>
            Gets or sets the source of the image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <term>
              <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.External" />
            </term>
            <description>The <see cref="P:C1.C1Rdl.Rdl2008.Image.Value" /> contains a constant or expression that evaluates to the location of the image. This can be a full folder path (for example, “/images/logo.gif”), relative path (for example, “logo.gif”) or URL (for example, “http://reportserver/images/logo.gif”). Relative paths start in the same folder as the report.</description>
          </item>
          <item>
            <term>
              <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Embedded" />
            </term>
            <description>The <see cref="P:C1.C1Rdl.Rdl2008.Image.Value" /> contains a constant or expression that evaluates to the name of an <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" /> in the report.</description>
          </item>
          <item>
            <term>
              <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Database" />
            </term>
            <description>The <see cref="P:C1.C1Rdl.Rdl2008.Image.Value" /> contains an expression (a field in the database) that evaluates to the binary data for the image.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.Value">
      <summary>
            Gets or sets a value defining the image.
            The interpretation of that value depends on <see cref="P:C1.C1Rdl.Rdl2008.Image.Source" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.MIMEType">
      <summary>
            Gets or sets the MIMEType for the image.
            Required if <see cref="P:C1.C1Rdl.Rdl2008.Image.Source" /> is <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Database" />. Ignored otherwise.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.Sizing">
      <summary>
            Gets or sets a value defining the behavior if the image does not fit in the specified size.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Line">
      <summary>
            Represents a line in a report.
            The Line class has no additional properties beyond what it inherits from <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />.
            Negative heights/widths allow for lines that are drawn up and/or left from their origin.
            Although negative Height and Width are allowed, both Top+Height and
            Left+Width must be nonnegative valid sizes.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Line.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Line" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Rectangle">
      <summary>
            Represents a rectangular area with borders that can contain child <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Rectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Rectangle.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>
            For internal use.
            </summary>
      <param name="children">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Rectangle.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.ReportItems">
      <summary>
            Gets the collection of child report items.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.PageBreak">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Rectangle.PageBreak" /> object defining page break behavior
            for the current rectangle.
            <para>Null (default) means no page break.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.KeepTogether">
      <summary>
            Gets or sets a value indicating whether all of the contents of the rectangle
            should be kept together on one page if possible.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.OmitBorderOnPageBreak">
      <summary>
            Gets or sets a value indicating that borders should not appear at
            locations where the rectangle spans multiple pages.
            Also causes repeated background images to continue rather than
            restart after a page break.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.LinkToChild">
      <summary>
            Gets or sets the name of a report item contained directly within this
            rectangle that is the target location for the Document Map label (if any).
            Ignored if DocumentMapLabel is not present.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Subreport">
      <summary>
            Represents as subreport.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Subreport.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Subreport" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Subreport.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>
            For internal use.
            </summary>
      <param name="children">
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Subreport.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.ReportName">
      <summary>
            Gets or sets the full folder path (for example, “/salesreports/orderdetails”) or relative path
            (for example, “orderdetails”) to a subreport on the same server.
            Relative paths start in the same folder as the current report.
            Cannot be an empty string (ignoring whitespace).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.Parameters">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Subreport.Parameters" /> collection containing parameters to the subreport.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.NoRowsMessage">
      <summary>
            Gets or sets the message to display in the subreport (instead of the region layout)
            when no rows of data are available in any data set which is used in the body of the subreport.
            <para>Note: Style information on the subreport applies to this text.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.MergeTransactions">
      <summary>
            Gets or sets a value indicating that transactions in the subreport should be merged with
            transactions in the parent report (into a single transaction for the entire report)
            if the data sources use the same connection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.KeepTogether">
      <summary>
            Gets or sets a value indicating that the entire subreport should be kept together on one page if possible.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.OmitBorderOnPageBreak">
      <summary>
            Gets or sets a value indicating that the borders should not appear at locations where the subreport spans multiple pages.
            Also causes repeated background images to continue rather than restart after a page break.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CellContents">
      <summary>
            Represents a report item contained in a body, header or corner cell of a <see cref="P:C1.C1Rdl.Rdl2008.CellContents.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CellContents.AssignFrom(C1.C1Rdl.Rdl2008.CellContents)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.CellContents" /> to the current object.
            The value of the <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" /> property is copied by value,
            i.e. a copy of the <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" /> is created and assigned to that property
            on the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.Tablix">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.ColSpan">
      <summary>
            Gets or sets the number of columns this cell spans.
            <para>Default: 1.</para><para>Must be 1 for <see cref="T:C1.C1Rdl.Rdl2008.CellContents" /> inside 
            <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" /> unless all column groups are static between the spanned
            cells and the common ancestor of those cells.</para>
            Ignored for <see cref="T:C1.C1Rdl.Rdl2008.CellContents" /> inside <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.RowSpan">
      <summary>
            Gets or sets the number of rows this cell spans.
            <para>Default: 1.</para><para>Must be 1 for <see cref="T:C1.C1Rdl.Rdl2008.CellContents" /> inside <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" />.</para>
            Ignored for <see cref="T:C1.C1Rdl.Rdl2008.CellContents" /> inside <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem">
      <summary>
            Gets or sets the <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" /> object within the current cell.
            The Top, Left, Height and Width for this <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" /> are ignored.
            The position is taken to be 0, 0 and the size to be 100%, 100%.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCornerCell">
      <summary>
            Represents the contents of a corner cell in a <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Tablix" />.
            The width of each column is equal to the width of the corresponding
            row <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerCell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerCell.AssignFrom(C1.C1Rdl.Rdl2008.TablixCornerCell)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Tablix">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" /> containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.CellContents">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerCell.CellContents" /> object containing the content of the cell.
            </summary>
      <remarks>
            Page breaks in this <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> are ignored.
            Must be omitted if the position in the corner is covered by a span from
            another cell. Required otherwise.
            </remarks>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCornerRow">
      <summary>
            Represents the list of cells in a row of a corner section of a <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Tablix" />.
            The height of the row is equal to the height of the corresponding
            column <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRow.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRow.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Tablix">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRows" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCornerRows">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRows.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRows" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRows.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Tablix">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Report">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.TablixCorner" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCorner">
      <summary>
            Represents the layout and structure of a corner region of a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCorner.AssignFrom(C1.C1Rdl.Rdl2008.TablixCorner)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixCorner" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCorner.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCorner.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCorner.Rows">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRows" /> collection containing the list of rows in the corner section of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            There must be as many <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" /> elements as there are unique total heights
            (sum of sizes of tablix headers of the member and all ancestor members)
            of <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" /> in the tablix column hierarchy.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixColumn">
      <summary>
            Represents a column in the body section of a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumn.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumn.AssignFrom(C1.C1Rdl.Rdl2008.TablixColumn)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumn.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixColumns" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumn.Width">
      <summary>
            Gets or sets the width of each cell in this column.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixColumns">
      <summary>
            Represents the set of columns in the body section of a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumns.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixColumns" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumns.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumns.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumns.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixRow">
      <summary>
            Represents a row in the body section of a <see cref="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRow.AssignFrom(C1.C1Rdl.Rdl2008.TablixRow)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixRows" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Height">
      <summary>
            Gets or sets the height of each cell in this row.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Cells">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCells" /> collection containing
            the list of cells in a row in the detail section of the <see cref="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixRows">
      <summary>
            Represents the set of rows in the body section of a <see cref="P:C1.C1Rdl.Rdl2008.TablixRows.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRows.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixRows" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRows.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Tablix">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixRows.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCell">
      <summary>
            Represents the contents of a cell in the body section of a <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCell.AssignFrom(C1.C1Rdl.Rdl2008.TablixCell)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Row">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCells" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.CellContents">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.CellContents" /> object representing content of the cell.
            </summary>
      <remarks>
            Page breaks in a <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> are ignored if the <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix" />
            has any row headers, any dynamic column groups or more than one column.
            Must be omitted if the position in the body is covered by a span from
            another cell. Required otherwise.
            </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.DataElementName">
      <summary>
            Gets or sets the name to use for the cell element.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.DataElementOutput">
      <summary>
            Gets or sets a value indicating whether the cell contents should
            appear in a data rendering.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCells">
      <summary>
            Represents a list of cells in a row of the body section of a <see cref="P:C1.C1Rdl.Rdl2008.TablixCells.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCells.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixCells" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCells.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Tablix">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixBody">
      <summary>
            Represents the layout and structure of the body of a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixBody.AssignFrom(C1.C1Rdl.Rdl2008.TablixBody)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Columns">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixColumns" /> collection defining
            the list of columns in the body section of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Rows">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixRows" /> collection defining
            the list of rows in the body section of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixHeader">
      <summary>
            Represents a header of a <see cref="P:C1.C1Rdl.Rdl2008.TablixHeader.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixHeader.AssignFrom(C1.C1Rdl.Rdl2008.TablixHeader)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Tablix">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixHeader.Tablix" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Size">
      <summary>
            Gets or sets the height (if this is a column member) or
            width (if this is a row member) of the group header.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.CellContents">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixHeader.CellContents" /> object representing content of the group header.
            <para>Note that page breaks in this <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> are ignored.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.KeepWithGroup">
      <summary>
            Specifies the rules for keeping a tablix member together with another member.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.KeepWithGroup.None">
      <summary>
            Do not keep the <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> with another member.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.KeepWithGroup.Before">
      <summary>
            Keep the <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> with the previous dynamic member.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.KeepWithGroup.After">
      <summary>
            Keep the <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> with the following dynamic member.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixMember">
      <summary>
            Represents a member of a <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" /> hierarchy.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMember.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMember.AssignFrom(C1.C1Rdl.Rdl2008.TablixMember)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Parent">
      <summary>
            Gets the parent <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> object or null.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" /> collection owning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Hierarchy">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" /> object contaning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Group">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Group" /> object defining data grouping.
            If this property is null, the current tablix member is a static member,
            otherwise it is a dynamic member.
            <para>Not allowed if any ancestor group is a detail group.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.SortExpressions">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.SortExpressions" /> collection containing
            expressions by which to sort the group instances.
            <para>Not used if <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Group" /> is null.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.TablixHeader">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.TablixHeader" /> object that defines the header cell for the member.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Members">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" /> collection containing submembers contained within this member.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.CustomProperties">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.CustomProperties" /> collection with custom properties for this member.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.FixedData">
      <summary>
            Gets or sets a value indicating whether the whole tablix member (including its body cells)
            should be displayed on the page even when the user scrolls part of the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" /> off the page.
            <para>Can be true only on the outermost members on the hierarchy (row or column)
            of the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />.</para><para>Members with FixedData=True must be contiguous with all other FixedData members on the hierarchy.</para><para>Not allowed to be true if the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" /> has headers on the opposite
            hierarchy (FixedRowHeaders or FixedColumnHeaders).</para><para>Not allowed to be true on the leftmost column member if GroupsBeforeRowHeaders is set.</para><para>Not allowed to be true on row members unless set on the first row member.</para><para>Not allowed to be true if a corresponding body cell is part of a span and the
            FixedData for a peer TablixMember corresponding to another cell in the spanned area is false.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Visibility">
      <summary>
            Gets the visibility of the current tablix member.
            If all instances of all submembers of a particular member instance are hidden,
            that member instance is automatically hidden.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.HideIfNoRows">
      <summary>
            Gets or sets a value indicating whether this static member should be hidden if the <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" /> contains no rows of data.
            Ignored for dynamic members.
            A member hidden in this way ignores visibility properties (including ToggleItem).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.KeepWithGroup">
      <summary>
            Gets or sets a value indicates whether this static member should be kept on the page (if possible) with the closest 
            non-hidden instance of the previous or following sibling dynamic member.
            <para>
            Each sibling member between this member and the target dynamic member must have the
            same value for KeepWithGroup as this member. Must be None on column members,
            dynamic members or members with dynamic descendants.
            </para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.RepeatOnNewPage">
      <summary>
            Gets or sets a value indicating whether this static member should be repeated on every page
            on which at least one complete instance of the dynamic member referred to via KeepWithGroup or one of that
            member’s descendents (excepting descendents with KeepWithGroup not equal to None) appears.
            Ignored if <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.KeepWithGroup" /> is None.
            Each peer member between this member and the target dynamic member must
            have the same value for RepeatOnNewPage as this member. Must be False on column members.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.DataElementName">
      <summary>
            Gets or sets the name to use for the data element for this member.
            Must be a CLS-compliant identifier.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.DataElementOutput">
      <summary>
            Gets or sets a value indicating whether the current member should appear in data rendering.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.KeepTogether">
      <summary>
            Gets or sets a value indicating whether the entire <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" /> member should be kept together
            on one page if possible.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixMembers">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMembers.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMembers.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMembers.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMembers.Hierarchy">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMembers.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixHierarchy">
      <summary>
            Represents a hierarchy of members for a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixHierarchy.AssignFrom(C1.C1Rdl.Rdl2008.TablixHierarchy)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHierarchy.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> object owning this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHierarchy.Report">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHierarchy.Members">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" /> collection containing
            an ordered list of members of a tablix hierarchy.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixLayoutDirection">
      <summary>
            Specifies the overall direction of the tablix layout.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TablixLayoutDirection.LTR">
      <summary>
            Dynamic tablix columns grow left-to-right (with headers on the left).
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TablixLayoutDirection.RTL">
      <summary>
            Dynamic tablix columns grow right-to-left (with headers on the right) and the order of peer groups is reversed.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Tablix">
      <summary>
            Represents a flexible layout grid with nested
            repeating column groups and row groups.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Tablix.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Tablix.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.Corner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixCorner" /> object defining the region
            that contains the elements of the upper left corner area of the tablix.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.Body">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" /> object defining
            the bottom right region that contains the data elements of the tablix.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.ColumnHierarchy">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" /> object defining
            the hierarchy of column members for the tablix.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.RowHierarchy">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" /> object defining
            the hierarchy of row members for the tablix.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.LayoutDirection">
      <summary>
            Gets or sets the overall direction of the tablix layout.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.GroupsBeforeRowHeaders">
      <summary>
            Gets or sets the number of instances of the leftmost outer column member
            that should appear to the left of the row headers (right of the row headers for
            RTL tablixes). Ignored if the leftmost outer column member is a static member.
            <para>Default: 0; Min: 0; Max: 2147483647.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.RepeatColumnHeaders">
      <summary>
            Gets or sets a value indicating that column headers should be repeated on each page on which
            a portion of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> appears.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.RepeatRowHeaders">
      <summary>
            Gets or sets a value indicating that column headers should be repeated on each page on which
            a portion of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> appears.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.FixedColumnHeaders">
      <summary>
            Gets or sets a value indicating that column headers should be displayed on the page even
            when the user scrolls part of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> off the page.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.FixedRowHeaders">
      <summary>
            Gets or sets a value indicating that row headers should be displayed on the page even when
            the user scrolls part of the <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> off the page.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.OmitBorderOnPageBreak">
      <summary>
            Gets or sets a value indicating that borders should not appear at locations where the tablix
            spans multiple pages. Also causes repeated background images to continue rather than
            restart after a page break.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.KeepTogether">
      <summary>
            Gets or sets a value indicating that whole tablix (all repeated sections) should be kept
            together on one page if possible.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ToggleImage">
      <summary>
            Represents properties of a toggle image displayed as a part of a <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ToggleImage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ToggleImage" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ToggleImage.AssignFrom(C1.C1Rdl.Rdl2008.ToggleImage)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ToggleImage" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ToggleImage.InitialState">
      <summary>
            Gets or sets a value determining the initial state of the toggle image. 
            True means "expanded" (that is, a minus sign). False means "collapsed" (that is, a plus sign).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.UserSort">
      <summary>
            Represents properties of end-user sort control that is displayed as a part of a text box in the UI.
            The control allows the user to select a sort direction (ascending, descending, none).
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserSort.AssignFrom(C1.C1Rdl.Rdl2008.UserSort)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.UserSort" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserSort.SortExpression">
      <summary>
            Gets or sets the expression on which to sort.
            Has the same restrictions as a Group Filter expression.
            Aggregates used in <b>SortExpression</b> may only use scopes which
            equal or contain the <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope" />. Aggregates without an explicit
            scope are not allowed in <b>SortExpression</b> if no <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope" /> is specified.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope">
      <summary>
            Gets or sets the  name of the scope (data region or group)
            in which to evaluate the <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpression" />.
            If omitted, the expression will be evaluated and the sort will be performed
            independently in each detail scope within the <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget" />.
            Must be a scope that is equal to or contained within the current scope.
            If the <see cref="T:C1.C1Rdl.Rdl2008.Textbox" /> has no current scope
            (in other words, it is not contained in any data region), <b>SortExpressionScope</b>
            must be equal to or contained within the <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget" />.
            Cannot be a detail scope (that is, a group with no group expressions).
            The data set for <b>SortExpressionScope</b> must be the same
            as the data set for the <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget" />.
            Sorting takes place within the group containing the <b>SortExpressionScope</b>.
            For example: In a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> with a country group and a city group with
            <see cref="T:C1.C1Rdl.Rdl2008.UserSort" /> on each header and <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope" /> of the corresponding group,
            the country sort will sort the country groups within the tablix and the city sort
            will sort the city groups within each country group (without rearranging the country groups).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget">
      <summary>
            Gets or sets the name of the data region, group or data set to apply the sort to.
            If omitted, the sort will apply to the instance of the current scope.
            Must be the current scope, an ancestor scope, or a peer scope which is a data region.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.EvaluationMode">
      <summary>
            Specifies modes of processing of a <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.EvaluationMode.Auto">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" /> evaluates as an expression if starts with a "=".
            Otherwise, treats the <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" /> as a constant.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.EvaluationMode.Expression">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" /> is evaluated as an expression.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.EvaluationMode.Constant">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" /> is treated as a constant.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.MarkupType">
      <summary>
            Specifies how markup should be processed.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.MarkupType.None">
      <summary>
            No markup is processed. Any markup is assumed to be literal.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.MarkupType.HTML">
      <summary>
            HTML markup appearing in the text is processed and displayed
            in supporting rendering extensions.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextRun">
      <summary>
            Represents the value and formatting of a contiguous span of text.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRun.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TextRun" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRun.AssignFrom(C1.C1Rdl.Rdl2008.TextRun)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.TextRun" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.TextRuns" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Paragraph">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Paragraph" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Textbox">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Textbox" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Label">
      <summary>
            Gets or sets the label for the placeholder for this <b>TextRun</b>.
            This name appears as the display placeholder in designer tools UI.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Value">
      <summary>
            Gets or sets the constant or expression which is displayed at runtime for the <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Style" /> object defining style properties for this <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.ActionInfo">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.TextRun.ActionInfo" /> object defining the actions for this <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />. 
            <see cref="T:C1.C1Rdl.Rdl2008.Actions" /> on <see cref="T:C1.C1Rdl.Rdl2008.TextRuns" /> are ignored if an action is defined on the
            parent <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Textbox" /> (even if the <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Textbox" /> action resolves to NULL).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.ToolTip">
      <summary>
            Gets or sets a textual tooltip label for the <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.MarkupType">
      <summary>
            Gets or sets a value indicating how markup in text should be processed.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextRuns">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.TextRun" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRuns.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.TextRuns" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRuns.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.TextRun" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRuns.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRuns.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.TextRun" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ListStyle">
      <summary>
            Specifies the paragraph list style.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ListStyle.None">
      <summary>
            Indicates that this is not a list paragraph and that there
            is no bullet/number for this paragraph.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ListStyle.Numbered">
      <summary>
            Indicates that this is a list paragraph with numbering.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ListStyle.Bulleted">
      <summary>
            Indicates that this is a list paragraph with bullets.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Paragraph">
      <summary>
            Represents a paragraph of text in a <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" />;
            contains a collection of <see cref="T:C1.C1Rdl.Rdl2008.TextRun" /> elements.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraph.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraph.AssignFrom(C1.C1Rdl.Rdl2008.Paragraph)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.Paragraphs" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.TextRuns">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.TextRuns" /> collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.LeftIndent">
      <summary>
            Gets or sets the indentation from the left edge of the <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" />, less left padding.
            <para>Default: 0tw.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.RightIndent">
      <summary>
            Gets or sets the indentation from the right edge of the <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" />, less right padding.
            <para>Default: 0tw.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.HangingIndent">
      <summary>
            Gets or sets the first line indent or hanging line indent for the paragraph,
            relative to left indent.
            This property can be negative.
            If positive, indents just the first line (first line indent).
            If negative, indents all lines but the first (hanging indent).
            <para>Default: 0tw.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.Style">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Style" /> object that defines style properties for the paragraph.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.ListStyle">
      <summary>
            Gets or sets a value indicating whether this paragraph is part of a list,
            and identifies the numbering type.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.ListLevel">
      <summary>
            Gets or sets the numbering style and/or indentation level.
            Must be equal or greater than 0 and less or equal than 9.
            For paragraphs with <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.ListStyle" /> None,
            this property serves to indent the paragraph.
            When <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.ListStyle" /> is Bulleted or Numbered,
            it serves as indentation level and bullet/number style.
            <para>Default: 0.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.SpaceBefore">
      <summary>
            Gets or sets the spacing before the paragraph. Cannot be negative.
            <para>Default: 0tw.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.SpaceAfter">
      <summary>
            Gets or sets the spacing after the paragraph. Cannot be negative.
            <para>Default: 0tw.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Paragraphs">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraphs.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Paragraphs" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraphs.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraphs.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.Textbox" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraphs.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Textbox">
      <summary>
            Represents a formatted text.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Textbox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Textbox" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Textbox.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Textbox" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.CanGrow">
      <summary>
            Gets or sets a value indicating whether the textbox height can increase to accommodate the contents.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.CanShrink">
      <summary>
            Gets or sets value indicating whether the textbox height can decrease to match the contents.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.HideDuplicates">
      <summary>
            Gets or sets a value controlling whether the text should not be displayed when the value of the
            expression associated with the report item is the same as the preceding visible instance.
            <para>
            The value of this property is the name of a containing group
            (other than the current group) or data set over which to apply the hiding.
            Each time a new instance of that group is encountered, the first visible instance of
            this report item will not be hidden. Rows on a previous page are ignored for the purposes of hiding duplicates.
            </para>
            If the current textbox is in a <see cref="T:C1.C1Rdl.Rdl2008.Tablix" /> cell, only the text will be omitted.
            The text box will remain to provide background and border for the cell.
            Outside of a tablix cell, the background and borders are omitted as well.
            Ignored unless the text box contains only one <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.ToggleImage">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Textbox.ToggleImage" /> object containing the initial state of a toggling image
            should one be displayed as a part of the current textbox.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.UserSort">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.Rdl2008.UserSort" /> object containing properties of the end-user sort control which 
            should be displayed as a part of this text box in the UI.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.DataElementStyle">
      <summary>
            Gets or sets a value indicating whether all <see cref="T:C1.C1Rdl.Rdl2008.TextRun" /> values for the current textbox
            value should render as an element or attribute.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.KeepTogether">
      <summary>
            Gets or sets a value indicating that all of the contents of the current textbox
            should be kept together on one page if possible.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.Paragraphs">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Textbox.Paragraphs" /> collection that represents the content of the current textbox.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSetReference">
      <summary>
            Defines parameters to obtain a list of values or default values for a <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSetReference.AssignFrom(C1.C1Rdl.Rdl2008.DataSetReference)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.DataSetReference" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.Defined">
      <summary>
            Gets value indicating whether DataSetReference object correctly initialized.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.DataSetName">
      <summary>
            Gets or sets name of the <see cref="T:C1.C1Rdl.Rdl2008.DataSet" /> to use.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField">
      <summary>
            Gets or sets the name of the field to use for the values/defaults
            for the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.LabelField">
      <summary>
            Gets or sets the name of the field to use for the value to display
            to the user for the selection.
            If not supplied or the returned value is null, the value in the <see cref="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField" /> is used.
            Not used for <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.DefaultValue" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DefaultValue">
      <summary>
            Represents default value for the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DefaultValue.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.DefaultValue" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DefaultValue.AssignFrom(C1.C1Rdl.Rdl2008.DefaultValue)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.DefaultValue" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DefaultValue.DataSetReference">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.DefaultValue.DataSetReference" /> object defining the query to 
            execute to obtain the default value(s) for the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />.
            For single-value parameters, the default is the first value of the <see cref="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField" />.
            For multivalue parameters, the default is all values of the <see cref="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DefaultValue.Values">
      <summary>
            Gets the default values for the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ParameterValue">
      <summary>
            Defines possible values for a <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValue.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValue.#ctor(C1.C1Rdl.RdlObject,C1.C1Rdl.RdlString)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" /> class.
            </summary>
      <param name="value">Value of <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Value" /> property.</param>
      <param name="label">Value of <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Label" /> property.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValue.AssignFrom(C1.C1Rdl.Rdl2008.ParameterValue)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ParameterValue.Value">
      <summary>
            Gets or sets possible value for the parameter.
            For Boolean parameters, use “true” and “false”.
            For DateTime parameters, use ISO 8601.
            For Float parameters, use “.” as the optional decimal separator.
            If the Value expression returns an array, each item in the array
            is treated as a single value. The items in the array must not be arrays.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ParameterValue.Label">
      <summary>
            Gets or sets label for the value to display in the UI.
            If not supplied, the <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Value" /> is used as the label
            (if <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Value" /> is not supplied, Label is the empty string).
            If the Value expression returns an array,
            the Label expression must return an array with the same number of items. If the Value expression does not return an array, the Label expression must not return an array.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ParameterValues">
      <summary>
            Collection of <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValues.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ParameterValues" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValues.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ParameterValues.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ValidValues">
      <summary>
            Represents the possible values for <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />, 
            for populating UI selection lists for users to select a parameter value.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ValidValues.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ValidValues" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ValidValues.AssignFrom(C1.C1Rdl.Rdl2008.ValidValues)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ValidValues" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ValidValues.Defined">
      <summary>
            Gets value indicating whether this object is not empty.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ValidValues.DataSetReference">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ValidValues.DataSetReference" /> object defining
            the query to execute to obtain a list of possible values for the parameter.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ValidValues.ParameterValues">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.ValidValues.ParameterValues" /> collection defining
            hardcoded values for the parameter.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportParameter">
      <summary>
            Contains information about a parameter that is passed to the data source
            as part of the query.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Report">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> containing this parameter.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.ReportParameters" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.DataType">
      <summary>
            Gets or sets the data type of the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Nullable">
      <summary>
            Gets or sets value indicating the value for this parameter can be Null.
            Cannot be true if this is a multivalue parameter.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.DefaultValue">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.DefaultValue" /> object defining default value for this
            <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.AllowBlank">
      <summary>
            Gets or sets value indicating the value for this parameter can be
            the empty string. Ignored if <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.DataType" /> is not String.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Prompt">
      <summary>
            Gets or sets the user prompt to display when asking
            for parameter values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Hidden">
      <summary>
            Gets or sets value indicating the parameter should not be
            displayed to the user
            (however, it will still be available for programmatic
            use with subreports, drillthrough reports etc.)
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.ValidValues">
      <summary>
            Gets <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.ValidValues" /> collection defining
            possible values for the parameter (for the end-user UI).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.MultiValue">
      <summary>
            Gets or sets value indicating this is a multivalue parameter
            (a parameter that can take a set of values).
            Multivalue parameters are accessed in expressions as zero-based arrays
            in the Value and Label properties
            (for example, Parameters!Cities.Value(0) and Parameters!Cities.Label(0)).
            Ignored for Boolean parameters.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.UsedInQuery">
      <summary>
            Gets or sets value indicating whether the parameter is used in a query
            in the report.
            This is necessary to determine if the queries must be rerun if the
            parameter changes.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportParameters">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameters" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameters.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" /> type.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameters.FindByName(System.String)">
      <summary>
            Finds a parameter with the specified name.
            </summary>
      <param name="name">The name of the parameter to find.</param>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" /> with the specified name.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameters.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameters.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Sum">
      <summary>Sum.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Avg">
      <summary>Average.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Max">
      <summary>Max.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Min">
      <summary>Min.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Count">
      <summary>Count.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.CountDistinct">
      <summary>Count distinct.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.StDev">
      <summary>Standard deviation.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.StDevP">
      <summary>Standard deviation for entire population.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Var">
      <summary>Variance.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.VarP">
      <summary>Variance for entire population.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.First">
      <summary>First.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Last">
      <summary>Last.</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.AggregateRecursive">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.AggregateRecursive.Simple">
      <summary>Simple.</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.AggregateRecursive.Recursive">
      <summary>Recursive.</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.AggregateHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ScriptHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ExpressionAggregateHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataAggregateHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.SumHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.AvgHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.MaxHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.MinHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CountHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CountDistinctHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.StDevHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.StDevPHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VarHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VarPHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CountRowsHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FirstHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.LastHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.PreviousHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.RunningValueHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.RowNumberHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CustomAggregateHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CodeHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CustomCodeHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.CodeHostBase.#ctor">
      <summary>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldsImplBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldsBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportItemBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportItemsBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ActionHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.BackgroundImageHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.BorderHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAlignTypeHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAreaHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAxisHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAxisScaleBreakHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAxisTitleHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartBorderSkinHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartCustomPaletteColorHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataLabelHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataPointCustomPropertiesHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataPointHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataPointValuesHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartElementPositionHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartEmptyPointsHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartFormulaParameterHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartGridLinesHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartItemInLegendHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartLegendHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartLegendTitleHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartMarkerHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartMemberHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartNoMoveDirectionsHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartSeriesCustomPropertiesHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartSeriesHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartSmartLabelHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartStripLineHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartThreeDPropertiesHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartTickMarksHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartTitleHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataRegionHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DrillthroughHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FilterHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.GroupHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ImageHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParagraphHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParameterHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParameterValueHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.QueryParameterHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportItemHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportParameterHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.ReportParameterHostBase.Prompt">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.SortExpressionHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.StyleHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.TextRunHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.UserDefinedPropertyHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ValueHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VariableHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VisibilityHostBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.PropertyInaccessible">
      <summary>
            Represents an exception that occurs when user scripts try to access a property
            that is inaccessible in the current context.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.PropertyInaccessible.#ctor(System.String)">
      <summary>
            Initializes a new instance of <b>PropertyInaccessible</b> class.
            </summary>
      <param name="propName">The name of the property that caused the error to occur.</param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportRuntimeBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.GlobalsBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.UserBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldImplBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParametersBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParameterBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSourcesBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSourceBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSetsBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSetBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VariablesBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SortDirection">
      <summary>
            Specifies sorting order.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.SortDirection.Ascending">
      <summary>
            Ascending sort.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.SortDirection.Descending">
      <summary>
            Descending sort.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SortExpression">
      <summary>
            Represents an expression used to sort groups by.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpression.AssignFrom(C1.C1Rdl.Rdl2008.SortExpression)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.SortExpression.Direction">
      <summary>
            Gets or sets the sort direction.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.SortExpression.Value">
      <summary>
            Gets or sets the value to sort by.
            <para>RunningValue and RowNumber functions are not allowed in <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" />.</para><para>References to <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> objects are not allowed.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SortExpressions">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpressions.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.SortExpressions" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpressions.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.SortExpressions.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BorderStyle">
      <summary>
            Specifies the border style.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.BorderStyle.Solid" /> within <see cref="T:C1.C1Rdl.Rdl2008.Line" /> and as <see cref="F:C1.C1Rdl.Rdl2008.BorderStyle.None" /> elsewhere.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.None">
      <summary>
            Do not draw a border.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Dotted">
      <summary>
            Dotted line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Dashed">
      <summary>
            Dashed line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Solid">
      <summary>
            Solid line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Double">
      <summary>
            Double solid line.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.DashDot">
      <summary>
            Dash-dot line. Allowed only within <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.DashDotDot">
      <summary>
            Dash-dot-dot line. Allowed only within <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundGradient">
      <summary>
            Specifies the type of background gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.BackgroundGradient.None" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.None">
      <summary>
            No gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.LeftRight">
      <summary>
            Horizontal gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.TopBottom">
      <summary>
            Vertical gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.Center">
      <summary>
            Circular gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.DiagonalLeft">
      <summary>
            Diagonal left-to-right gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.DiagonalRight">
      <summary>
            Diagonal right-to-left gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.HorizontalCenter">
      <summary>
            Center-out horizontal gradient.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.VerticalCenter">
      <summary>
            Center-out vertical gradient.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ImageSource">
      <summary>
            Specifies the source of an image.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSource.External">
      <summary>
            Source of an image is a file or a URL.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSource.Embedded">
      <summary>
            Source of an image is an embedded image.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSource.Database">
      <summary>
            Source of an image is a database field.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundRepeatType">
      <summary>
            Specifies how a background image should fill the available space.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Default">
      <summary>
            Treated as <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Fit" /> within <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> and as <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Repeat" /> elsewhere.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Repeat">
      <summary>
            Repeat the image both horizontally and vertically to fill the available space.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.RepeatX">
      <summary>
            Repeat the image horizontally to fill the available space. Not allowed within <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.RepeatY">
      <summary>
            Repeat the image horizontally to fill the available space. Not allowed within <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Fit">
      <summary>
            Stretch the image to fill the available space. Allowed only within <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Clip">
      <summary>
            Clip the image to the available space.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Border">
      <summary>
            Represent a border of an object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Border.AssignFrom(C1.C1Rdl.Rdl2008.Border)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Border" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Border.Clear">
      <summary>
            Clears the current object, sets all properties to their default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Border.Color">
      <summary>
            Gets or sets the border's color.
            <para>Default: Black.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Border.Style">
      <summary>
            Gets or sets the border's style.
            <para>Default: <see cref="F:C1.C1Rdl.Rdl2008.BorderStyle.Default" />.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Border.Width">
      <summary>
            Gets or sets the borders' width.
            <para>Default: 1pt.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundImagePosition">
      <summary>
            Specifies the position of a background image.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Center" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Top">
      <summary>
            Draw image at top center.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.TopLeft">
      <summary>
            Draw image at top left.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.TopRight">
      <summary>
            Draw image at top right.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Left">
      <summary>
            Draw image at left center
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Center">
      <summary>
            Draw image in center.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Right">
      <summary>
            Draw image at right center.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.BottomRight">
      <summary>
            Draw image at bottom right.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Bottom">
      <summary>
            Draw image at bottom center.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.BottomLeft">
      <summary>
            Draw image at bottom left.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundImage">
      <summary>
            Represents a background image.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.BackgroundImage.AssignFrom(C1.C1Rdl.Rdl2008.BackgroundImage)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.BackgroundImage" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.BackgroundImage.Clear">
      <summary>
            Clears the current object, sets all properties to their default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.Source">
      <summary>
            Gets or sets the image source.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <term>External</term>
            <description>The <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value" /> property contains a constant or expression that evaluates to the location of the image. This can be a full folder path (for example, “/images/logo.gif”), relative path (for example, “logo.gif”) or URL (for example, “http://reportserver/images/logo.gif”). Relative paths start in the same folder as the report.</description>
          </item>
          <item>
            <term>Embedded</term>
            <description>The <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value" /> property contains a constant or expression that evaluates to the name of an <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" /> in the report.</description>
          </item>
          <item>
            <term>Database</term>
            <description>The <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value" /> property contains an expression (a field in the database) that evaluates to the binary data for the image.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value">
      <summary>
            Gets or sets a value specifying the image.
            That value is interpreted depending on the <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Source" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.MIMEType">
      <summary>
            Gets or sets the MIMEType for the image.
            This property is required if <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Source" /> is <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Database" />.
            Otherwise this property is ignored.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.BackgroundRepeat">
      <summary>
            Gets or sets a value indicating how the background image should fill the available space.
            <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Default" /> is treated as <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Fit" /> within <see cref="T:C1.C1Rdl.Rdl2008.Chart" /> 
            and as <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Repeat" /> elsewhere
            (unless another default behavior is specified in the definition of the containing element).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.TransparentColor">
      <summary>
            Gets or sets the color to treat as transparent in the background image.
            Used only for background images within <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.Position">
      <summary>
            Gets or sets the position of the background image with <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.BackgroundRepeat" />
            set to <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Clip" />.
            Used only for background images within <see cref="T:C1.C1Rdl.Rdl2008.Chart" />.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.FontStyle">
      <summary>
            Specifies font styles.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontStyle.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.FontStyle.Normal" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontStyle.Normal">
      <summary>
            Non-Italic font.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontStyle.Italic">
      <summary>
            Italic font.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.FontWeight">
      <summary>
            Specifies the thickness of the font.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.FontWeight.Normal" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Thin">
      <summary>
            Matches CSS font weight 100.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.ExtraLight">
      <summary>
            Matches CSS font weight 200.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Light">
      <summary>
            Matches CSS font weight 300.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Normal">
      <summary>
            Matches CSS font weight 400.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Medium">
      <summary>
            Matches CSS font weight 500.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.SemiBold">
      <summary>
            Matches CSS font weight 600.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Bold">
      <summary>
            Matches CSS font weight 700.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.ExtraBold">
      <summary>
            Matches CSS font weight 800.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Heavy">
      <summary>
            Matches CSS font weight 900.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextDecoration">
      <summary>
            Specifies special text formatting.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.TextDecoration.None" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.None">
      <summary>
            No text decoration.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.Underline">
      <summary>
            Underline the text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.Overline">
      <summary>
            Overline the text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.LineThrough">
      <summary>
            Strike through the text.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextAlign">
      <summary>
            Specifies horizontal text alignment.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.TextAlign.General" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.General">
      <summary>
            Text alignment is derived from the data type and Direction.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Left">
      <summary>
            Left aligned text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Center">
      <summary>
            Centered text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Right">
      <summary>
            Right aligned text.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VerticalAlign">
      <summary>
            Specifies vertical text alignment.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.VerticalAlign.Top" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Top">
      <summary>
            Top aligned text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Middle">
      <summary>
            Vertically centered text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Bottom">
      <summary>
            Bottom aligned text.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextDirection">
      <summary>
            Specifies text direction.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDirection.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.TextDirection.LTR" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDirection.LTR">
      <summary>
            Left-to-right text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDirection.RTL">
      <summary>
            Right-to-left text.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.WritingMode">
      <summary>
            Specifies horizontal or vertical text direction.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.WritingMode.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.WritingMode.Horizontal" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.WritingMode.Horizontal">
      <summary>
            Horizontal text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.WritingMode.Vertical">
      <summary>
            Vertical text – for East Asian text, characters are not rotated.
            For other text, the entire text is rotated 90 degrees.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Calendar">
      <summary>
            Specifies the calendar to use for formatting dates.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Default">
      <summary>
            Default. Uses the .NET Framework default calendar for the language of the report item.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Gregorian">
      <summary>
            Gregorian.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianArabic">
      <summary>
            Gregorian Arabic.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianMiddleEastFrench">
      <summary>
            Gregorian Middle East French.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianTransliteratedEnglish">
      <summary>
            Gregorian Transliterated English.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianTransliteratedFrench">
      <summary>
            Gregorian Transliterated French.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianUSEnglish">
      <summary>
            Gregorian US English.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Hebrew">
      <summary>
            Hebrew.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Hijri">
      <summary>
            Hijri.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Japanese">
      <summary>
            Japanese.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Korean">
      <summary>
            Korean.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Taiwan">
      <summary>
            Taiwan.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.ThaiBuddhist">
      <summary>
            ThaiBuddhist.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextEffect">
      <summary>
            Specifies effects to apply to the text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.TextEffect.None" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.None">
      <summary>
            No special effect applied.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Shadow">
      <summary>
            Shadow the text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Emboss">
      <summary>
            Emboss the text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Embed">
      <summary>
            Apply embedding effect to the text.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Frame">
      <summary>
            Add a frame around the text.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundHatchType">
      <summary>
            Specifies background hatch type.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Default">
      <summary>
            Default. Treated as <see cref="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.None" />.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.None">
      <summary>
            No background hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.BackwardDiagonal">
      <summary>
            Backward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Cross">
      <summary>
            Cross hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkDownwardDiagonal">
      <summary>
            Dark downward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkHorizontal">
      <summary>
            Dark horizontal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkUpwardDiagonal">
      <summary>
            Dark upward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkVertical">
      <summary>
            Dark vertical hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedDownwardDiagonal">
      <summary>
            Dashed downward hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedHorizontal">
      <summary>
            Dashed horizontal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedUpwardDiagonal">
      <summary>
            Dashed upward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedVertical">
      <summary>
            Dashed vertical hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DiagonalBrick">
      <summary>
            Diagonal brick hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DiagonalCross">
      <summary>
            Diagonal cross hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Divot">
      <summary>
            Divot hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DottedDiamond">
      <summary>
            Dotted diamond hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DottedGrid">
      <summary>
            Dotted grid hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.ForwardDiagonal">
      <summary>
            Forward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Horizontal">
      <summary>
            Horizontal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.HorizontalBrick">
      <summary>
            Horizontal brick hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LargeCheckerBoard">
      <summary>
            Large checker board hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LargeConfetti">
      <summary>
            Large confetti hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LargeGrid">
      <summary>
            Large grid hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightDownwardDiagonal">
      <summary>
            Light downward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightHorizontal">
      <summary>
            Light horizontal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightUpwardDiagonal">
      <summary>
            Light upward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightVertical">
      <summary>
            Light vertical hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.NarrowHorizontal">
      <summary>
            Narrow horizontal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.NarrowVertical">
      <summary>
            Narrow vertical hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.OutlinedDiamond">
      <summary>
            Outlined diamond hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent05">
      <summary>
            5 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent10">
      <summary>
            10 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent20">
      <summary>
            20 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent25">
      <summary>
            25 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent30">
      <summary>
            30 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent40">
      <summary>
            40 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent50">
      <summary>
            50 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent60">
      <summary>
            60 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent70">
      <summary>
            70 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent75">
      <summary>
            75 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent80">
      <summary>
            80 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent90">
      <summary>
            90 percent hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Plaid">
      <summary>
            Plaid hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Shingle">
      <summary>
            Shingle hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SmallCheckerBoard">
      <summary>
            Small checker board hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SmallConfetti">
      <summary>
            Small confetti hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SmallGrid">
      <summary>
            Small grid hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SolidDiamond">
      <summary>
            Solid diamond hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Sphere">
      <summary>
            Sphere hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Trellis">
      <summary>
            Trellis hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Vertical">
      <summary>
            Vertical hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Wave">
      <summary>
            Wave hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Weave">
      <summary>
            Weave hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.WideDownwardDiagonal">
      <summary>
            Wide downward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.WideUpwardDiagonal">
      <summary>
            Wide upward diagonal hatching.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.ZigZag">
      <summary>
            Zig zag hatching.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Style">
      <summary>
            Represents the style of a report item.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Style.#ctor(C1.C1Rdl.Rdl2008.IStyleOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Style" /> class.
            </summary>
      <param name="owner">The owner of the current style.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Style.AssignFrom(C1.C1Rdl.Rdl2008.Style)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Style" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Style.Clear">
      <summary>
            Clears the current object, sets all properties to their default values.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Owner">
      <summary>
            Gets the owner of the current style.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Border">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" /> object specifying default border properties.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.LeftBorder">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" /> object specifying left border properties.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TopBorder">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" /> object specifying top border properties.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.RightBorder">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" /> object specifying right border properties.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BottomBorder">
      <summary>
            Gets the <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" /> object specifying bottom border properties.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundColor">
      <summary>
            Gets or sets the background color.
            <para>Default: Transparent.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundGradientType">
      <summary>
            Gets or sets the background gradient type.
            <para>Default: Default.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundGradientEndColor">
      <summary>
            Gets or sets the end color for the background gradient.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundImage">
      <summary>
            Gets the background image.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontStyle">
      <summary>
            Gets or sets the font style.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontFamily">
      <summary>
            Gets or sets the font family.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontSize">
      <summary>
            Gets or sets the font size.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontWeight">
      <summary>
            Gets or sets the thickness of the font.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Format">
      <summary>
            Gets or sets the format string used to format value of objects like TextBox etc.
            Format represents a .NET Framework formatting string.
            </summary>
      <remarks>
        <para>
            Note: Locale-dependent currency formatting (format code "C") is based on
            the language setting for the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />.
            </para>
        <para>
            Locale-dependent date formatting is supported and should be based on the
            <see cref="P:C1.C1Rdl.Rdl2008.Style.Language" /> property of the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />.
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TextDecoration">
      <summary>
            Gets or sets the special text formatting.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TextAlign">
      <summary>
            Gets or sets the horizontal text alignment.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.VerticalAlign">
      <summary>
            Gets or sets the vertical text alignment.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Color">
      <summary>
            Gets or sets the foreground color.
            <para>Default: Black.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingLeft">
      <summary>
            Gets or sets the padding between the left edge of the object and its contents.
            <para>Default: 0 pt. Max: 1000 pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingTop">
      <summary>
            Gets or sets the padding between the top edge of the object and its contents.
            <para>Default: 0 pt. Max: 1000 pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingRight">
      <summary>
            Gets or sets the padding between the right edge of the object and its contents.
            <para>Default: 0 pt. Max: 1000 pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingBottom">
      <summary>
            Gets or sets the padding between the bottom edge of the object and its contents.
            <para>Default: 0 pt. Max: 1000 pt.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.LineHeight">
      <summary>
            Gets or sets the height of a line of text.
            <para>Default: null, renderer determines line height based on font size.</para>
            Min: 1 pt. Max: 1000 pt.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Direction">
      <summary>
            Gets or sets a value indicating whether text is written left-to-right or right-to-left.
            Does not affect the text alignment unless <see cref="F:C1.C1Rdl.Rdl2008.TextAlign.General" /> alignment is used.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.WritingMode">
      <summary>
            Gets or sets a value indicating whether text is written horizontally or vertically.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Language">
      <summary>
            Gets or sets the primary language of the text.
            <para>Default is null in which case the <see cref="P:C1.C1Rdl.Rdl2008.Style.Language" /> property of the <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /> will be used.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Calendar">
      <summary>
            Gets or sets the calendar used for formatting dates.
            Must be compatible with the .NET Framework Language setting.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.NumeralLanguage">
      <summary>
            Gets or sets the digit format to use as described by its primary language.
            Any language is valid.
            <para>Default is null in which case the <see cref="P:C1.C1Rdl.Rdl2008.Style.Language" /> property will be used.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.NumeralVariant">
      <summary>
            Gets or sets the variant of the digit format to use.
            The valid values are from 1 (default) to 7.
            See remarks for details.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <term>1</term>
            <description>Default, follow Unicode context rules</description>
          </item>
          <item>
            <term>2</term>
            <description>0123456789</description>
          </item>
          <item>
            <term>3</term>
            <description>traditional digits for the script as defined in GDI+. Currently supported for: ar | bn | bo | fa | gu | hi | kn | kok | lo | mr | ms | or | pa | sa | ta | te | th | ur and variants.</description>
          </item>
          <item>
            <term>4</term>
            <description>ko, ja, zh-CHS, zh-CHT only</description>
          </item>
          <item>
            <term>5</term>
            <description>ko, ja, zh-CHS, zh-CHT only</description>
          </item>
          <item>
            <term>6</term>
            <description>ko, ja, zh-CHS, zh-CHT only [Wide versions of regular digits]</description>
          </item>
          <item>
            <term>7</term>
            <description>ko only</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TextEffect">
      <summary>
            Gets or sets the effect to apply to the text.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundHatchType">
      <summary>
            Gets or sets the hatch type.
            If this property is set to a value other than <see cref="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.None" />,
            the <see cref="P:C1.C1Rdl.Rdl2008.Style.BackgroundGradientType" /> property is ignored.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.ShadowColor">
      <summary>
            Gets or sets the color of the shadow for the item.
            <para>Default: #0000007F.</para></summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.ShadowOffset">
      <summary>
            Gets or sets the size of the shadow for the item.
            <para>Default: 0.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Variable">
      <summary>
            Defines a named expression to be evaluated within the group or report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Variable.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Variable" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Variable.Value">
      <summary>
            Gets or sets expression to evaluate globally for the report or for each
            group instance.
            Unlike expressions evaluated in visual elements of the report,
            each instance of this expression is calculated only once when
            the report is executed and never recalculated during subsequent renderings.
            This is necessary for time-dependent calculations.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Variables">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Variable" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Variables.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Variables" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Variables.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.Variable" /> type.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Variables.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Variable" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Visibility">
      <summary>
            Defines when the <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" /> should be shown in the rendered report.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Visibility.AssignFrom(C1.C1Rdl.Rdl2008.Visibility)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Visibility" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Visibility.Hidden">
      <summary>
            Gets or sets value indicates if the item should be hidden at first.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Visibility.ToggleItem">
      <summary>
            Gets or sets the name of the text box used to hide/unhide this report item.
            Clicking on an instance of the ToggleItem will toggle the hidden state of every corresponding instance of this item.
            If the ToggleItem becomes hidden (because either the item or an ancestor is
            toggled or conditionally hidden), this item should become hidden.
            Must be a text box in the same group scope as this item or
            in any containing (ancestor) group scope. If omitted, no item will
            toggle the hidden state of this item.
            Not allowed on and cannot refer to report items contained in a page header
            or footer.
            Cannot refer to a report item contained in the current report item unless
            current group scope has a Parent.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlFormatVersion">
      <summary>
            Defines supported RDL versions.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlFormatVersion.Unknown">
      <summary>
            RDL format is unknown.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlFormatVersion.RDL2008">
      <summary>
            RDL 2008 format.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlFormatVersion.RDL2010">
      <summary>
            RDL 2010 format.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.ReportSizeType">
      <summary>
            Enumerates units of measurement used in a <see cref="T:C1.C1Rdl.C1RdlReportBase" />,
            used by <see cref="T:C1.C1Rdl.ReportSize" /> and related types.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Cm">
      <summary>
            Specifies centimetre's as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Mm">
      <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Inch">
      <summary>
            Specifies the inch as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Point">
      <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.ReportSize">
      <summary>
            Represents a linear size of a report item or part.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.ReportSize" /> type.
            </summary>
      <param name="s">The string representation of the size.</param>
      <remarks>
            An exception is thrown if <paramref name="s" /> does not represent a valid size.
            </remarks>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.#ctor(C1.C1Rdl.ReportSizeType,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.ReportSize" /> type.
            </summary>
      <param name="reportSizeType">The size unit used by <paramref name="value" />.</param>
      <param name="value">The size value, in <paramref name="reportSizeType" /> units.</param>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.GetHashCode">
      <summary>
            Gets the hash code for the current object, based on its value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Equals(System.Object)">
      <summary>
            Compares the current size with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same size, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToString">
      <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1Rdl.ReportSize" /> to the same value).
            </summary>
      <returns>The string representing the current length value.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToCentimeters">
      <summary>
            Converts the current size to centimeters.
            </summary>
      <returns>The value of the current size in centimeters.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToInches">
      <summary>
            Converts the current size to inches.
            </summary>
      <returns>The value of the current size in inches.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToMillimeters">
      <summary>
            Converts the current size to millimeters.
            </summary>
      <returns>The value of the current size in millimeters.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToPoints">
      <summary>
            Converts the current size to points.
            </summary>
      <returns>The value of the current size in points.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToDoc">
      <summary>
            Converts the current size to "doc" units (1/300 of an inch).
            </summary>
      <returns>The value of the current size in doc units.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToUnit">
      <summary>
            Converts the current size to a <see cref="T:C1.C1Preview.Unit" />.
            </summary>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToPixels(System.Single)">
      <summary>
            Converts the current size to pixels.
            </summary>
      <param name="dpi">The target resolution (pixels per inch).</param>
      <returns>The value of the current size in pixels.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Convert(C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts the current size to specified units.
            </summary>
      <param name="toUnits">The target units.</param>
      <returns>The converted value, in <paramref name="toUnits" /></returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Convert(C1.C1Rdl.ReportSizeType)">
      <summary>
            Converts the current size to specified units.
            </summary>
      <param name="toUnits">The target units.</param>
      <returns>The converted value, in <paramref name="toUnits" /></returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.IsNullOrEmpty(C1.C1Rdl.ReportSize)">
      <summary>
            Tests whether a size is null or empty.
            </summary>
      <param name="size">The size to test.</param>
      <returns>
        <b>true</b> if <paramref name="size" /> is <c>null</c> or empty, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Compare(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>
            Compares two sizes.
            </summary>
      <param name="s1">The first size to compare.</param>
      <param name="s2">The second size to compare.</param>
      <returns>
        <c>-1</c> if <paramref name="s1" /> is less than <paramref name="s2" />,
            <c>1</c> if <paramref name="s1" /> is greater than <paramref name="s2" />,
            or <c>0</c> if the two sizes are equal.
            </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ReportSizeTypeToString(C1.C1Rdl.ReportSizeType)">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.ReportSizeType" /> value to a string representation as in
            the following table:
            <list type="bullet"><item><description><term>Inch</term>"in"</description></item><item><description><term>Millimeter</term>"mm"</description></item><item><description><term>Point</term>"pt"</description></item><item><description><term>Centemeters</term>"cm"</description></item></list></summary>
      <param name="units">A <see cref="T:C1.C1Preview.UnitTypeEnum" /> to convert.</param>
      <returns>The string representing <paramref name="units" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.StringToReportSizeType(System.String,C1.C1Rdl.ReportSizeType@)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Rdl.ReportSizeType" /> value. The string can be one of the following:
            "in", "mm", "cm", "pt".
            This method is case-insensitive.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="units">OUT: On exit, contains the <see cref="T:C1.C1Rdl.ReportSizeType" /> value.</param>
      <returns>
        <b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ReportSizeTypeToUnit(C1.C1Rdl.ReportSizeType)">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.ReportSizeType" /> value to the corresponding <see cref="T:C1.C1Preview.UnitTypeEnum" /> value.
            </summary>
      <param name="reportSizeType">The <see cref="T:C1.C1Rdl.ReportSizeType" /> value to convert.</param>
      <returns>The corresponding <see cref="T:C1.C1Preview.UnitTypeEnum" /> value.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.TryParse(System.String,C1.C1Rdl.ReportSizeType@,System.Double@)">
      <summary>
            Converts a string to the corresponding <see cref="T:C1.C1Rdl.ReportSizeType" /> value.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string to convert.</param>
      <param name="reportSizeType">OUT: a <see cref="T:C1.C1Rdl.ReportSizeType" /> value specifying the units of the parsed size.</param>
      <param name="value">OUT: a double value representing the parsed size, in <paramref name="reportSizeType" /> units.</param>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Parse(System.String)">
      <summary>
            Converts a string to the corresponding <see cref="T:C1.C1Rdl.ReportSizeType" /> value.
            </summary>
      <param name="s">A string to convert.</param>
      <returns>A <see cref="T:C1.C1Rdl.ReportSize" /> representing the size specified by <paramref name="s" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Equality(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.ReportSize" /> values are equal.
            </summary>
      <param name="s1">The first size.</param>
      <param name="s2">The second size.</param>
      <returns>
        <b>true</b> if the two sizes are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Inequality(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.ReportSize" /> values are not equal.
            </summary>
      <param name="s1">The first size.</param>
      <param name="s2">The second size.</param>
      <returns>
        <b>true</b> if the two size are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Rdl.ReportSize)~System.String">
      <summary>
            Converts a size to its string representation.
            </summary>
      <param name="value">The size to convert.</param>
      <returns>The string representing the size.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(System.String)~C1.C1Rdl.ReportSize">
      <summary>
            Converts a string to the corresponding <see cref="T:C1.C1Rdl.ReportSize" /> value.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The corresponding <see cref="T:C1.C1Rdl.ReportSize" />.</returns>
      <seealso cref="M:C1.C1Rdl.ReportSize.#ctor(System.String)" />
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Preview.Unit)~C1.C1Rdl.ReportSize">
      <summary>
            Converts a <see cref="T:C1.C1Preview.Unit" /> to a <see cref="T:C1.C1Rdl.ReportSize" />.
            Note that the unit to be converted must be absolute and must not be expressed in pixels,
            or an exception will be thrown.
            </summary>
      <param name="value">The <see cref="T:C1.C1Preview.Unit" /> to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.ReportSize" /> representing <paramref name="value" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Rdl.ReportSize)~C1.C1Preview.Unit">
      <summary>
            Converts a size to a <see cref="T:C1.C1Preview.Unit" /> structure.
            </summary>
      <param name="value">The size to convert.</param>
      <returns>The <see cref="T:C1.C1Preview.Unit" /> representing the size.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Rdl.ReportSize)~C1.C1Preview.LengthAbs">
      <summary>
            Converts a size to a <see cref="T:C1.C1Preview.LengthAbs" /> structure.
            </summary>
      <param name="value">The size to convert.</param>
      <returns>The <see cref="T:C1.C1Preview.LengthAbs" /> representing the size.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Addition(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>
            Adds two sizes.
            </summary>
      <param name="s1">The first size to add.</param>
      <param name="s2">The second size to add.</param>
      <returns>A size representing the sum of <paramref name="s1" /> and <paramref name="s2" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Subtraction(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>
            Subtracts one size from another.
            </summary>
      <param name="s1">The size to subtract from.</param>
      <param name="s2">The size that is subtracted.</param>
      <returns>A size representing the difference between <paramref name="s1" /> and <paramref name="s2" />.</returns>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Units">
      <summary>
            Gets the units of measurement used by the current size.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Value">
      <summary>
            Gets the absolute value of the current size (in <see cref="P:C1.C1Rdl.ReportSize.Units" />).
            </summary>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.IsNeg">
      <summary>
            Gets a value indicating whether the current size is negative.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Abs">
      <summary>
            Converts the current size to its absolute value.
            </summary>
      <returns>The absolute value of the current size.</returns>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Empty">
      <summary>
            Represents an empty size.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.ReportSize.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.DataType">
      <summary>
            Specifies the type of a value (e.g. in a <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />).
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.Boolean">
      <summary>
            The value is Boolean.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.DateTime">
      <summary>
            The value is DateTime.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.Integer">
      <summary>
            The value is Integer.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.Float">
      <summary>
            The value is Float.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.String">
      <summary>
            The value is String.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.TriState">
      <summary>
            Specifies a value that can be a Boolean true or false,
            or have the value automatically determined depending on the current context.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.TriState.Auto">
      <summary>
            The value is determined automatically depending on the current context.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.TriState.True">
      <summary>
            The value is equivalent to a Boolean true.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.TriState.False">
      <summary>
            The value is equivalent to a Boolean false.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Operator">
      <summary>
            Specifies operators used to compare data in filters, etc.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.Equal">
      <summary>
            Equality comparison.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.Like">
      <summary>
            Like comparison. Uses the same special characters as the Visual Basic
            LIKE operator (for example “?” to represent a single character and “*” to
            represent any series of characters).
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.NotEqual">
      <summary>
            Inequality comparison.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.GreaterThan">
      <summary>
            Greater than comparison.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.GreaterThanOrEqual">
      <summary>
            Greater than, or equal comparison.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.LessThan">
      <summary>
            Less than comparison.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.LessThanOrEqual">
      <summary>
            Less than, or equal comparison.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.TopN">
      <summary>
            Check if value is in top N values.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.BottomN">
      <summary>
            Check if value is in bottom N values.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.TopPercent">
      <summary>
            Check if value is in top N percent values.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.BottomPercent">
      <summary>
            Check if value is in bottom N percent values.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.In">
      <summary>
            Check if value is equal to any value.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.Between">
      <summary>
            Check if value is between the two values.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlProp">
      <summary>
            The abstract base class for types such as <see cref="T:C1.C1Rdl.RdlInt" />,
            <see cref="T:C1.C1Rdl.RdlBool" />, <see cref="T:C1.C1Rdl.RdlFloat" />, <see cref="T:C1.C1Rdl.RdlObject" />,
            <see cref="T:C1.C1Rdl.RdlString" /> and others that allow to specify a value
            either as a literal or as an expression.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlProp.m_IsExpression">
      <summary>
            A flag indicating that the value is an expression.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlProp.m_Expression">
      <summary>
            The expression.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlProp.Equals(System.Object)">
      <summary>
            Compares the current <see cref="T:C1.C1Rdl.RdlProp" /> with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlProp.GetHashCode">
      <summary>
            Gets the hash code for the current <see cref="T:C1.C1Rdl.RdlProp" />.
            The hash value is calculated based on the current object's value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlProp.IsExpression">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Rdl.RdlProp" /> is specified as an expression.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlProp.Expression">
      <summary>
            Gets the expression associated with the current <see cref="T:C1.C1Rdl.RdlProp" />.
            Note that this property throws an exception if the current object contains a constant
            (i.e. if <see cref="P:C1.C1Rdl.RdlProp.IsExpression" /> gets <b>false</b>).
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlColor">
      <summary>
            Represents a color value that can be specified as a <c>System.Drawing.Color</c> literal
            or as an expression.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.#ctor(System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlColor" /> class with a literal color value.
            </summary>
      <param name="value">A <c>System.Drawing.Color</c><c>System.Drawing.Color</c> value.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlColor" /> class with an expression or a literal color value.
            </summary>
      <param name="s">A string used to initialize the new instance.
            <para>If this string starts with an equal sign (<c>'='</c>) it is interpreted as an exprssion.</para><para>Otherwise, this string is converted to a <c>System.Drawing.Color</c> value
            (an exception is thrown if that conversion fails).</para></param>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.TryParse(System.String,System.Boolean@,System.Drawing.Color@,System.String@)">
      <summary>
            Parses a string into properties of <see cref="T:C1.C1Rdl.RdlColor" /> type.
            </summary>
      <param name="s">A string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if <paramref name="s" /> represents an expression, <b>false</b> otherwise.</param>
      <param name="value">OUT: <see cref="T:System.Drawing.Color" /> if <paramref name="isExpression" /> is <b>false</b>.</param>
      <param name="expression">OUT: expression if <paramref name="isExpression" /> is <b>true</b>.</param>
      <returns>
        <b>true</b> if s represents a valid <see cref="T:C1.C1Rdl.RdlColor" /> instance.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(C1.C1Rdl.RdlColor)~System.String">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.RdlColor" /> to a string.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlColor" /> to convert.</param>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(System.String)~C1.C1Rdl.RdlColor">
      <summary>
            Converts a string to a <see cref="T:C1.C1Rdl.RdlColor" /> (see <see cref="M:C1.C1Rdl.RdlColor.#ctor(System.String)" />.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlColor" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(C1.C1Rdl.RdlColor)~System.Drawing.Color">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.RdlColor" /> to a <see cref="T:System.Drawing.Color" />.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlColor" /> to convert.</param>
      <returns>The <see cref="T:System.Drawing.Color" /> if RdlColor contains color constant.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(System.Drawing.Color)~C1.C1Rdl.RdlColor">
      <summary>
            Converts a <see cref="T:System.Drawing.Color" /> to a <see cref="T:C1.C1Rdl.RdlColor" /> (see <see cref="M:C1.C1Rdl.RdlColor.#ctor(System.Drawing.Color)" />.
            </summary>
      <param name="value">The <see cref="T:System.Drawing.Color" /> to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlColor" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Equality(C1.C1Rdl.RdlColor,C1.C1Rdl.RdlColor)">
      <summary>
            Tests whether the two <see cref="T:C1.C1Rdl.RdlColor" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Inequality(C1.C1Rdl.RdlColor,C1.C1Rdl.RdlColor)">
      <summary>
            Tests whether the two <see cref="T:C1.C1Rdl.RdlColor" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.Equals(System.Object)">
      <summary>
            Compares the current length with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.GetHashCode">
      <summary>
            Gets the hash code for the current object,
            based on the length value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlColor.Value">
      <summary>
            Gets the <b>System.Drawing.Color</b> value represented by the current object if it contains a literal.
            If the current object contains an expression, exception is thrown.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlColor.Predefined">
      <summary>
            Static class holding a few predefined <see cref="T:C1.C1Rdl.RdlColor" /> values.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.Empty">
      <summary>
            The empty literal color.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.Transparent">
      <summary>
            The transparent literal color.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.Black">
      <summary>
            The black literal color.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.White">
      <summary>
            The white literal color.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlColor.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.RdlEnum`1">
      <summary>
            Represents an enum value that can be specified as a literal or as an expression.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlEnum`1" /> class with a constant value.
            </summary>
      <param name="value">A constant value.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlEnum`1" /> class with an expression or a constant.
            </summary>
      <param name="s">A string used to initialize the new instance.
            <para>If this string starts with an equal sign (<c>'='</c>) it is interpreted as an exprssion.</para><para>Otherwise, this string is converted to the <b>T</b> type.</para></param>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.TryParse(System.String,System.Boolean@,`0@,System.String@)">
      <summary>
            Parses a string into properties of <see cref="T:C1.C1Rdl.RdlEnum`1" /> type.
            </summary>
      <param name="s">A string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if <paramref name="s" /> represents an expression, <b>false</b> otherwise.</param>
      <param name="value">OUT: The enum value if <paramref name="isExpression" /> is <b>false</b>.</param>
      <param name="expression">OUT: expression if <paramref name="isExpression" /> is <b>true</b>.</param>
      <returns>
        <b>true</b> if s represents a valid <see cref="T:C1.C1Rdl.RdlEnum`1" /> instance.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(C1.C1Rdl.RdlEnum{`0})~System.String">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlEnum`1" /> value to a string.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlEnum`1" /> value to convert.</param>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(System.String)~C1.C1Rdl.RdlEnum{`0}">
      <summary>
            Converts a string to an <see cref="T:C1.C1Rdl.RdlEnum`1" /> value.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlEnum`1" /> instance.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(C1.C1Rdl.RdlEnum{`0})~`0">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlEnum`1" /> value to the corresponding enum value.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlEnum`1" /> value to convert.</param>
      <returns>The converted enum value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(`0)~C1.C1Rdl.RdlEnum{`0}">
      <summary>
            Converts an enum vaue to its <see cref="T:C1.C1Rdl.RdlEnum`1" /> representation.
            </summary>
      <param name="value">The enum value to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlEnum`1" /> instance.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Equality(C1.C1Rdl.RdlEnum{`0},C1.C1Rdl.RdlEnum{`0})">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlEnum`1" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Inequality(C1.C1Rdl.RdlEnum{`0},C1.C1Rdl.RdlEnum{`0})">
      <summary>
            Tests whether the two <see cref="T:C1.C1Rdl.RdlEnum`1" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.Equals(System.Object)">
      <summary>
            Compares the current object to another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.GetHashCode">
      <summary>
            Gets the hash code for the current object based on its value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlEnum`1.Value">
      <summary>
            Gets the enum value if this object contains a constant,
            throws an exception if this object contains an expression.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlEnum`1.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.RdlSize">
      <summary>
            Represents a <see cref="T:C1.C1Rdl.ReportSize" /> that can be specified as a constant or as an expression.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.#ctor(C1.C1Rdl.ReportSizeType,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlSize" /> class with a constant value.
            </summary>
      <param name="unit">Unit of measurement used by <paramref name="value" />.</param>
      <param name="value">Value, specified in <paramref name="unit" /> units.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.#ctor(C1.C1Rdl.ReportSize)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlSize" /> class with a <see cref="T:C1.C1Rdl.ReportSize" /> value.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.ReportSize" /> constant.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlSize" /> class with as constant or expression specified as a string.
            </summary>
      <param name="s">If this string starts with a '=' it is interpreted as an expression,
            otherwise that string is converted to a constant value.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.TryParse(System.String,System.Boolean@,C1.C1Rdl.ReportSize@,System.String@)">
      <summary>
            Parses a string into properties of <see cref="T:C1.C1Rdl.RdlSize" /> type.
            </summary>
      <param name="s">A string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if <paramref name="s" /> contains an expression, <b>false</b> otherwise.</param>
      <param name="value">OUT: an instance of <see cref="T:C1.C1Rdl.ReportSize" /> if <paramref name="isExpression" /> is <b>false</b>, <b>null</b> otherwise.</param>
      <param name="expression">OUT: the expression string if <see paramref="isExpression" /> is <b>true</b>, <b>null</b> otherwise.</param>
      <returns>Returns <b>true</b> if <paramref name="s" /> represents a valid <see cref="T:C1.C1Rdl.RdlSize" /> instance.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(C1.C1Rdl.RdlSize)~System.String">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.RdlSize" /> value to a string.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlSize" /> to convert.</param>
      <returns>The string representing the specified value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(System.String)~C1.C1Rdl.RdlSize">
      <summary>
            Converts a string to an <see cref="T:C1.C1Rdl.RdlSize" /> instance.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>An <see cref="T:C1.C1Rdl.RdlSize" /> instance representing the converted value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(C1.C1Rdl.RdlSize)~C1.C1Rdl.ReportSize">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlSize" /> to a <see cref="T:C1.C1Rdl.ReportSize" />.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlSize" /> to convert.</param>
      <returns>A <see cref="T:C1.C1Rdl.ReportSize" /> if <see cref="T:C1.C1Rdl.RdlSize" /> contains a constant, or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(C1.C1Rdl.ReportSize)~C1.C1Rdl.RdlSize">
      <summary>
            Converts a <see cref="T:C1.C1Rdl.ReportSize" /> to a <see cref="T:C1.C1Rdl.RdlSize" />.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.ReportSize" /> to convert.</param>
      <returns>An <see cref="T:C1.C1Rdl.RdlSize" /> representing the converted value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Equality(C1.C1Rdl.RdlSize,C1.C1Rdl.RdlSize)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlSize" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Inequality(C1.C1Rdl.RdlSize,C1.C1Rdl.RdlSize)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlSize" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.Equals(System.Object)">
      <summary>
            Compares the current object with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.GetHashCode">
      <summary>
            Gets the hash code for the current object based on its value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlSize.Value">
      <summary>
            Gets the <see cref="T:C1.C1Rdl.ReportSize" /> value when this object contains a constant.
            <para>Throws an exception is thrown if this object contains an expression.</para></summary>
    </member>
    <member name="T:C1.C1Rdl.RdlSize.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.RdlString">
      <summary>
            Represents a string that can be specified as a constant or as an expression.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlString.Empty">
      <summary>
            Represents an empty <see cref="T:C1.C1Rdl.RdlString" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlString.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlString" /> class.
            This overload explicitly specifies whether the string is a constant or an expression.
            </summary>
      <param name="value">A string.</param>
      <param name="isExpression">A flag indicating whether <paramref name="value" /> should be interpreted as an expression.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlString" /> class.
            This overload parses the string to find out whether it is a constant or an expression.
            </summary>
      <param name="s">If this string starts with a '=' then it is interpreted as an expression,
            otherwise as a constant.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlString.IsNullOrEmpty(C1.C1Rdl.RdlString)">
      <summary>
            Indicates wthether the specified <see cref="T:C1.C1Rdl.RdlString" /> instance is null or empty.
            </summary>
      <param name="s">The <see cref="T:C1.C1Rdl.RdlString" /> object to check.</param>
      <returns>
        <b>true</b> if <paramref name="s" /> is null or represents the <see cref="F:C1.C1Rdl.RdlString.Empty" /> value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.TryParse(System.String,System.Boolean@,System.String@)">
      <summary>
            Parses a string into properties of the <see cref="T:C1.C1Rdl.RdlString" /> class.
            </summary>
      <param name="s">The string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if <paramref name="s" /> represents an expression.</param>
      <param name="value">OUT: the string value.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Implicit(C1.C1Rdl.RdlString)~System.String">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlString" /> to a string.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlString" /> to convert.</param>
      <returns>The string representing the converted object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Implicit(System.String)~C1.C1Rdl.RdlString">
      <summary>
            Converts a string to an <see cref="T:C1.C1Rdl.RdlString" />.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlString" /> representing the converted object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Equality(C1.C1Rdl.RdlString,C1.C1Rdl.RdlString)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlString" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Inequality(C1.C1Rdl.RdlString,C1.C1Rdl.RdlString)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlString" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.Equals(System.Object)">
      <summary>
            Compares the current object with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.GetHashCode">
      <summary>
            Gets the hash code for the current object, based on value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlString.Value">
      <summary>
            Gets the constant value represented by the current object.
            Throws an exception if the current object contains an expression.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlString.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlString.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.RdlInt">
      <summary>
            Represents an integer that can be specified as a constant or as an expression. 
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlInt" /> class with a constant value.
            </summary>
      <param name="value">The integer value.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlInt" /> class.
            The <paramref name="s" /> string is parsed to determine whether it represents a constant or an expression.
            </summary>
      <param name="s">If <paramref name="s" /> starts with a '=' then it is interpreted as an expression,
            otherwise it is converted to an integer.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.TryParse(System.String,System.Boolean@,System.Int32@,System.String@)">
      <summary>
            Parses a string into properties of the <see cref="T:C1.C1Rdl.RdlInt" /> class.
            </summary>
      <param name="s">The string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if <paramref name="s" /> contains an expression.</param>
      <param name="value">OUT: the constant value if <paramref name="isExpression" /> is <b>false</b>.</param>
      <param name="expression">OUT: the expression if <paramref name="isExpression" /> is <b>true</b>.</param>
      <returns>
        <b>true</b> if <paramref name="s" /> represents a valid <see cref="T:C1.C1Rdl.RdlInt" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(C1.C1Rdl.RdlInt)~System.String">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlInt" /> to a string.
            </summary>
      <param name="value">An <see cref="T:C1.C1Rdl.RdlInt" /> to convert.</param>
      <returns>The string representing the converted object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(System.String)~C1.C1Rdl.RdlInt">
      <summary>
            Converts a string to an <see cref="T:C1.C1Rdl.RdlInt" /> object.
            </summary>
      <param name="value">A string to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlInt" /> representing the converted string.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(C1.C1Rdl.RdlInt)~System.Int32">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlInt" /> to an integer.
            </summary>
      <param name="value">An <see cref="T:C1.C1Rdl.RdlInt" /> to convert.</param>
      <returns>The integer value if <paramref name="value" /> contains a constant, <b>0</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(System.Int32)~C1.C1Rdl.RdlInt">
      <summary>
            Converts an integer to an <see cref="T:C1.C1Rdl.RdlInt" /> object.
            </summary>
      <param name="value">An integer to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlInt" /> representing the converted value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Equality(C1.C1Rdl.RdlInt,C1.C1Rdl.RdlInt)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlInt" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Inequality(C1.C1Rdl.RdlInt,C1.C1Rdl.RdlInt)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlInt" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.Equals(System.Object)">
      <summary>
            Compares the current object with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.GetHashCode">
      <summary>
            Gets the hash code for the current object, based on value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlInt.Value">
      <summary>
            Gets the integer value of the current object if it contains a constant.
            Throws an exception if it contains an expression.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlInt.Zero">
      <summary>
            Gets an <see cref="T:C1.C1Rdl.RdlInt" /> object representing the zero (<b>0</b>) value.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlInt.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.RdlBool">
      <summary>
            Represents a Boolean value specified as a constant or as an expression. 
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlBool" /> class with a constant value.
            </summary>
      <param name="value">The constant Boolean value.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlBool" /> class.
            The <paramref name="s" /> string is parsed to determine whether it represents a constant or an expression.
            </summary>
      <param name="s">If <paramref name="s" /> starts with a '=' then it is interpreted as an expression,
            otherwise it is converted to a Boolean.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.TryParse(System.String,System.Boolean@,System.Boolean@,System.String@)">
      <summary>
            Parses a string into properties of the <see cref="T:C1.C1Rdl.RdlBool" /> class.
            </summary>
      <param name="s">A string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if <paramref name="s" /> contains an expression, <b>false</b> otherwise.</param>
      <param name="value">OUT: the Boolean value if <paramref name="isExpression" /> is <b>false</b>.</param>
      <param name="expression">OUT: the expression if <paramref name="isExpression" /> is <b>true</b>.</param>
      <returns>
        <b>true</b> if <paramref name="s" /> represents a valid <see cref="T:C1.C1Rdl.RdlBool" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(C1.C1Rdl.RdlBool)~System.String">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlBool" /> to a string.
            </summary>
      <param name="value">An <see cref="T:C1.C1Rdl.RdlBool" /> to convert.</param>
      <returns>A string representing the converted object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(System.String)~C1.C1Rdl.RdlBool">
      <summary>
            Converts a string to an <see cref="T:C1.C1Rdl.RdlBool" /> instance.
            </summary>
      <param name="value">A string to convert.</param>
      <returns>An <see cref="T:C1.C1Rdl.RdlBool" /> representing the converted value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(C1.C1Rdl.RdlBool)~System.Boolean">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlBool" /> to a <b>bool</b>.
            </summary>
      <param name="value">A <see cref="T:C1.C1Rdl.RdlBool" /> to convert.</param>
      <returns>The Boolean value if <paramref name="value" /> contains a constant, <b>false</b> if it is an expression.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(System.Boolean)~C1.C1Rdl.RdlBool">
      <summary>
            Converts a Boolean to an <see cref="T:C1.C1Rdl.RdlBool" />.
            </summary>
      <param name="value">A Boolean value to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlBool" /> representing the converted value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Equality(C1.C1Rdl.RdlBool,C1.C1Rdl.RdlBool)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlBool" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Inequality(C1.C1Rdl.RdlBool,C1.C1Rdl.RdlBool)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlBool" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.Equals(System.Object)">
      <summary>
            Compares the current object with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.GetHashCode">
      <summary>
            Gets the hash code for the current object based on its value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlBool.Value">
      <summary>
            Gets the Boolean value if the current object contains a constant.
            Throws an exception if it contains an expression.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlBool.False">
      <summary>
            Gets an <see cref="T:C1.C1Rdl.RdlBool" /> object representing the constant <b>false</b> value.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlBool.True">
      <summary>
            Gets an <see cref="T:C1.C1Rdl.RdlBool" /> object representing the constant <b>true</b> value.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlBool.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.RdlObject">
      <summary>
            Represents an object that can be specified either as a constant
            or as an expression.
            </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlObject.Empty">
      <summary>
            Represents an empty <see cref="T:C1.C1Rdl.RdlObject" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlObject" /> class with a constant.
            </summary>
      <param name="value">The object constant.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlObject" /> class.
            The <paramref name="s" /> string is parsed to determine whether it represents a constant or an expression.
            </summary>
      <param name="s">If <paramref name="s" /> starts with a '=' then it is interpreted as an expression,
            otherwise as a constant string.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.IsNullOrEmpty(C1.C1Rdl.RdlObject)">
      <summary>
            Tests whether an <see cref="T:C1.C1Rdl.RdlObject" /> is null or empty.
            </summary>
      <param name="v">The object to test.</param>
      <returns>
        <b>true</b>if <paramref name="v" /> is null or empty, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.TryParse(System.String,System.Boolean@,System.Object@,System.String@)">
      <summary>
            Parses a string into properties of the <see cref="T:C1.C1Rdl.RdlObject" /> class.
            </summary>
      <param name="s">The string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if string represents an expression, <b>false</b> otherwise.</param>
      <param name="value">OUT: the object (string) if <paramref name="isExpression" /> is <b>false</b>.</param>
      <param name="expression">OUT: the expression if <paramref name="isExpression" /> is <b>true</b>.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Implicit(C1.C1Rdl.RdlObject)~System.String">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlObject" /> to a string.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlObject" /> to convert.</param>
      <returns>The string representing the converted object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Implicit(System.String)~C1.C1Rdl.RdlObject">
      <summary>
            Converts a string to an <see cref="T:C1.C1Rdl.RdlObject" />.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The converted <see cref="T:C1.C1Rdl.RdlObject" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Equality(C1.C1Rdl.RdlObject,C1.C1Rdl.RdlObject)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlObject" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Inequality(C1.C1Rdl.RdlObject,C1.C1Rdl.RdlObject)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlObject" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.Equals(System.Object)">
      <summary>
            Compares the current object with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.GetHashCode">
      <summary>
            Gets the hash code for the current object based on value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlObject.IsNull">
      <summary>
            Returns <b>true</b> if object contains null value.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlObject.Value">
      <summary>
            Gets the object value if the current object contains a constant.
            Throws an exception if the current object contains an expression.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlObject.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.RdlFloat">
      <summary>
            Represents a float value that can be specified either as a constant
            or as an expression.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlFloat" /> class with a constant value.
            </summary>
      <param name="value">The double constant.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.RdlFloat" /> class.
            The <paramref name="s" /> string is parsed to determine whether it represents a constant or an expression.
            </summary>
      <param name="s">If <paramref name="s" /> starts with a '=' then it is interpreted as an expression,
            otherwise it is converted to a double value.</param>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.TryParse(System.String,System.Boolean@,System.Double@,System.String@)">
      <summary>
            Parses a string into properties of the <see cref="T:C1.C1Rdl.RdlFloat" /> class.
            </summary>
      <param name="s">The string to parse.</param>
      <param name="isExpression">OUT: <b>true</b> if <paramref name="s" /> contains an expression, <b>false</b> otherwise.</param>
      <param name="value">OUT: the double value if <paramref name="isExpression" /> is <b>false</b>.</param>
      <param name="expression">OUT: the expression if <paramref name="isExpression" /> is <b>true</b>.</param>
      <returns>
        <b>true</b> if <paramref name="s" /> represents a valid <see cref="T:C1.C1Rdl.RdlFloat" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(C1.C1Rdl.RdlFloat)~System.String">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlFloat" /> to a string.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlFloat" /> to convert.</param>
      <returns>The string representing the converted object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(System.String)~C1.C1Rdl.RdlFloat">
      <summary>
            Converts a string to an <see cref="T:C1.C1Rdl.RdlFloat" />.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlFloat" /> representing the converted string.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(C1.C1Rdl.RdlFloat)~System.Double">
      <summary>
            Converts an <see cref="T:C1.C1Rdl.RdlFloat" /> to a double.
            </summary>
      <param name="value">The <see cref="T:C1.C1Rdl.RdlFloat" /> to convert.</param>
      <returns>The double value if <paramref name="value" /> contains a constant, <b>0</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(System.Int32)~C1.C1Rdl.RdlFloat">
      <summary>
            Converts a double to an <see cref="T:C1.C1Rdl.RdlFloat" />.
            </summary>
      <param name="value">The double value to convert.</param>
      <returns>The <see cref="T:C1.C1Rdl.RdlFloat" /> representing the converted value.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Equality(C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlFloat" /> objects are equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Inequality(C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat)">
      <summary>
            Tests whether two <see cref="T:C1.C1Rdl.RdlFloat" /> objects are not equal.
            </summary>
      <param name="o1">The first object.</param>
      <param name="o2">The second object.</param>
      <returns>
        <b>true</b> if the objects are not equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.ToString">
      <summary>
            Converts the current object to a string.
            </summary>
      <returns>The string representing the current object.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.Equals(System.Object)">
      <summary>
            Compares the current object with another object.
            This method performs comparison by value.
            </summary>
      <param name="obj">The object to compare the current with.</param>
      <returns>
        <b>true</b> if the two objects repesent the same value, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.GetHashCode">
      <summary>
            Gets the hash code for the current object, based on value.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlFloat.Value">
      <summary>
            Gets the double value when the current object contains a constant.
            Throws an exception when it contains an expression.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlFloat.Zero">
      <summary>
            Gets an <see cref="T:C1.C1Rdl.RdlFloat" /> object representing the zero value.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlFloat.NaN">
      <summary>
            Gets an <see cref="T:C1.C1Rdl.RdlFloat" /> object representing the <b>double.NaN</b> value.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlFloat.TypeConverter">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            For internal use.
            </summary>
      <param name="context">
      </param>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Value">
      <summary>
            Defines a value that can be represented as expression or constant.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Value" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.#ctor(C1.C1Rdl.RdlObject)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Value" /> class.
            </summary>
      <param name="v">Value of <see cref="T:C1.C1Rdl.Rdl2008.Value" /> property.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.AssignFrom(C1.C1Rdl.Rdl2008.Value)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Rdl.Rdl2008.Value" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Value.Owner">
      <summary>
            Gets <see cref="T:C1.C1Rdl.Rdl2008.Values" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Value.V">
      <summary>
            Gets or sets the value of this object.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Value.TypeConverter">
      <summary>
            Converts <see cref="T:C1.C1Rdl.Rdl2008.Value" /> to/from other types.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Rdl.Rdl2008.Value" />.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>A <see cref="T:C1.C1Rdl.Rdl2008.Value" /> representing <paramref name="str" />.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The object to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Values">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Rdl2008.Value" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Rdl2008.Values" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.GetItemType">
      <summary>
            Gets the type of collection elements.
            </summary>
      <returns>The <see cref="T:C1.C1Rdl.Rdl2008.Value" /> type.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.Add(C1.C1Rdl.Rdl2008.Value)">
      <summary>
            Adds the specified <see cref="T:C1.C1Rdl.Rdl2008.Value" /> to the current collection.
            </summary>
      <param name="item">The object to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.Insert(System.Int32,C1.C1Rdl.Rdl2008.Value)">
      <summary>
            Inserts the specified <see cref="T:C1.C1Rdl.Rdl2008.Value" /> into the current collection.
            </summary>
      <param name="index">The index where to insert the object.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.Add(C1.C1Rdl.RdlObject)">
      <summary>
            Adds the specified <see cref="T:C1.C1Rdl.RdlObject" /> to the current collection.
            </summary>
      <param name="value">The object to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Values.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Rdl.Rdl2008.Value" /> at the specified index.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.Warning">
      <summary>
            Represents information about a errors
            that occurred during generation of a <see cref="T:C1.C1Rdl.C1RdlReportBase" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.Warning.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Rdl.Warning" /> class.
            </summary>
      <param name="description">The human-readable problem description.</param>
      <param name="source">The object that triggered the problem.</param>
    </member>
    <member name="P:C1.C1Rdl.Warning.Description">
      <summary>
            Gets the detailed description of the problem.
            </summary>
    </member>
    <member name="P:C1.C1Rdl.Warning.Source">
      <summary>
            Gets the object which triggered the error.
            </summary>
    </member>
    <member name="T:C1.C1Rdl.WarningCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Rdl.Warning" /> objects.
            This is the type of the <see cref="P:C1.C1Rdl.C1RdlReportBase.Warnings" /> property
            on a <see cref="T:C1.C1Rdl.C1RdlReportBase" />.
            </summary>
    </member>
    <member name="M:C1.C1Rdl.WarningCollection.Add(C1.C1Rdl.Warning)">
      <summary>
            Adds a <see cref="T:C1.C1Rdl.Warning" /> object to the current collection.
            </summary>
      <param name="item">The warning to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Rdl.WarningCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.BarDirectionEnum">
      <summary>
            Specifies the direction of the barcode
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Normal">
      <summary>
            The barcode is rendered in the horizontal direction.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Up">
      <summary>
            The barcode is rendered from the bottom up.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Down">
      <summary>
            The barcode is rendered from the top down.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCode">
      <summary>
            Represents a barcode in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderBarCode" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.#ctor(C1.C1Report.BarCodeEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderBarCode" /> class.
            </summary>
      <param name="codeType">The barcode encoding type.</param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderBarCode" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderBarCode" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.InternalResolveCalculatedValues">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderBarCode" />, also copies <see cref="T:C1.C1Preview.RenderBarCode" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.BarCodeType">
      <summary>
            Gets or sets the type of encoding to use when generating the barcode.
            <para>Note that BarCodeType.None is not a valid value for this property.</para></summary>
      <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.C1Preview.RenderBarCode.Text" /> property to generate the barcode image 
            displayed in the object.
            </remarks>
      <example>The following sample shows how to use the BarCodeType property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code></example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.ShowText">
      <summary>
            Gets or sets a value indicating whether the string represending the <see cref="P:C1.C1Preview.RenderBarCode.Text" /> property
            should be displayed along with the barcode image.
            </summary>
      <remarks>
            By default, the object will show only the barcode image. To include a textual
            representation of the value in the <see cref="P:C1.C1Preview.RenderBarCode.Text" /> property, set this
            property to true.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.Text">
      <summary>
            Gets or sets the value that is encoded as the barcode image.
            </summary>
      <remarks>
        <para>Some encodings support alphanumeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="P:C1.C1Preview.RenderBarCode.BarCodeType" /> enumeration 
            for details.</para>
        <para>If you use characters that are invalid for the current encoding, the
            object will display a blank image.</para>
      </remarks>
      <example>The following sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code></example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.BarDirection">
      <summary>
            Gets or sets the direction of the barcode. Obsolete, use Style.TextAngle instead.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCodeFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderBarCode" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderBarCodeFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderBarCodeFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderBarCodeFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="height">
      </param>
      <param name="width">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderBarCode" /> which produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCodeEx">
      <summary>
            Represents a barcode in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderBarCodeEx" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.#ctor(C1.C1Report.BarCodeEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderBarCodeEx" /> class.
            </summary>
      <param name="barCodeType">The barcode encoding type.</param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderBarCode" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderBarCode" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderBarCodeEx" />, also copies <see cref="T:C1.C1Preview.RenderBarCodeEx" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeEx.Text">
      <summary>
            Gets or sets the value that is encoded as the barcode image.
            </summary>
      <remarks>
        <para>Some encodings support alphanumeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="!:BarCodeStyle" /> enumeration 
            for details.</para>
        <para>If you use characters that are invalid for the current encoding, the
            object will display a blank image.</para>
      </remarks>
      <example>The following sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code></example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeEx.BarCodeType">
      <summary>
            Gets or sets the type of encoding to use when generating the barcode.
            <para>Note that BarCodeType.None is not a valid value for this property.</para></summary>
      <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.C1Preview.RenderBarCodeEx.Text" /> property to generate the barcode image 
            displayed in the object.
            </remarks>
      <example>The following sample shows how to use the BarCodeType property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code></example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeEx.Options">
      <summary>
            Gets the <see cref="T:C1.C1Preview.BarcodeOptions" /> object defining additional barcode options.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCodeExFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderBarCode" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderBarCodeExFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderBarCodeExFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderBarCodeFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeExFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderBarCodeEx" /> which produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalTextFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderVerticalText" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderText" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextFragmentBase">
      <summary>
            The abstract base class for <see cref="T:C1.C1Preview.RenderTextFragment" /> and <see cref="T:C1.C1Preview.RenderParagraphFragment" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)">
      <summary>
            Gets the geometric area of the character with the specified index.
            </summary>
      <param name="charIndex">The index of the character in the current fragment.</param>
      <returns>
            A <see cref="T:C1.C1Preview.RectangleD" /> structure representing the bounds of the specified character
            relative to the content area of the object (without spacing, borders, padding).
            The returned value may be <see cref="P:C1.C1Preview.RectangleD.Empty" /> if the text is rotated
            (use the <see cref="M:C1.C1Preview.RenderTextFragmentBase.GetCharPoints(System.Int32)" /> method in that case instead).
            </returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharPoints(System.Int32)">
      <summary>
            Gets an array of four points defining the (possibly rotated)
            geometric area of the character with the specified index.
            </summary>
      <param name="charIndex">The index of the character in the current fragment.</param>
      <returns>
            An array of four <see cref="T:C1.C1Preview.RectangleD" /> structures representing the
            corners of the specified character's area,
            relative to the content area of the object (without spacing, borders, padding).
            </returns>
      <remarks>
            Unlike the <see cref="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)" /> method, this method works for rotated text as well.
            </remarks>
      <seealso cref="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)" />
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRects(System.Int32,System.Int32)">
      <summary>
            Gets an array of bounding rectangles for a range of characters
            (in the returned array, each line in the specified range
            is represented by a separate <see cref="T:C1.C1Preview.RectangleD" /> structure).
            </summary>
      <param name="startCharIndex">The index of the first character in the range in the current fragment.</param>
      <param name="length">The number of characters in the range.
            (If a number greater than the number of characters in the fragment is specified, no error is generated
            and all characters are included in the range.)</param>
      <returns>An array of <see cref="T:C1.C1Preview.RectangleD" /> structures, each structure
            corresponding to a line of text.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRegion(System.Int32,System.Int32)">
      <summary>
            Gets a bounding <see cref="T:System.Drawing.Region" /> for a range of characters.
            The region is relative to the top left corner of the fragment's inner area.
            </summary>
      <param name="startCharIndex">The index of the first character in the range in the current fragment.</param>
      <param name="length">The number of characters in the range.</param>
      <returns>The bounding region for the specified range, or <b>null</b> if the range is invalid.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderFragment" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetAnchorRect(C1.C1Preview.C1Anchor,C1.C1Preview.RectangleD@,System.Boolean@)">
      <summary>
            Gets a rectangle corresponding to a <see cref="T:C1.C1Preview.C1Anchor" /> in the current fragment.
            </summary>
      <param name="anchor">The anchor to test.</param>
      <param name="anchorRect">OUT: A <see cref="T:C1.C1Preview.RectangleD" /> structure defining the area within the current fragment
            associated with <paramref name="anchor" />.</param>
      <param name="anchorVisible">OUT: <b>true</b> if <paramref name="anchor" /> is visible in the current fragment, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
            Adds information about all hyperlinks that appear in the current fragment
            to a <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />.
            </summary>
      <param name="hyperlinks">The collection of <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> objects
            to which data about hyperlinks within the current fragment will be added.</param>
    </member>
    <member name="P:C1.C1Preview.RenderTextFragmentBase.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTextBase" /> that produced the current fragment.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderTextFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderTextFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderTextFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
            Adds information about all hyperlinks that appear in the current fragment
            to a <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />.
            </summary>
      <param name="hyperlinks">The collection of <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> objects
            to which data about hyperlinks within the current fragment will be added.</param>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragment.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.C1Hyperlink" /> object in the current fragment at the specified position.
            </summary>
      <param name="pt">Specifies a point within the current fragment relative to the top left corner of the fragment.</param>
      <returns>A <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> object describing the found <see cref="T:C1.C1Preview.C1Hyperlink" />, or <b>null</b> if none was found.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderTextFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderText" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderVerticalTextFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderVerticalText" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalParagraphFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderParagraph" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderParagraphFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderParagraph" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraphFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderParagraphFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderParagraphFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderParagraphFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderParagraphFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
            Adds information about all hyperlinks that appear in the current fragment
            to a <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />.
            </summary>
      <param name="hyperlinks">The collection of <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> objects
            to which data about hyperlinks within the current fragment will be added.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraphFragment.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.C1Hyperlink" /> object in the current fragment at the specified position.
            </summary>
      <param name="pt">Specifies a point within the current fragment relative to the top left corner of the fragment.</param>
      <returns>A <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> object describing the found <see cref="T:C1.C1Preview.C1Hyperlink" />, or <b>null</b> if none was found.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderParagraphFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderParagraph" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderVerticalParagraphFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderVerticalParagraph" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.AnchorEnum">
      <summary>
            Determines how a <see cref="T:C1.C1Preview.RenderField" />
            is positioned with respect to its containing <see cref="T:C1.C1Preview.RenderSection" />
            when the section grows or shrinks.
            </summary>
      <remarks>Use members of this enumeration to set the value of the
            <see cref="P:C1.C1Preview.RenderField.Anchor" /> property in the <see cref="T:C1.C1Preview.RenderField" /> class.
            </remarks>
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)" />
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.Top">
      <summary>
            The field does not move. The space between the top of the field 
            and the top of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.Bottom">
      <summary>
            The field moves vertically. The space between the bottom of the field 
            and the bottom of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.TopAndBottom">
      <summary>
            The field grows or shrinks with the section.
            Both the distance from the top of the field to the top of the section,
            and the distance from the bottom of the field to the bottom of the section,
            remain the same.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderField">
      <summary>
            Represents a field of a <see cref="N:C1.C1Report" />.
            Objects of this type are created when a <b>C1Report</b> definition
            is imported into a <see cref="T:C1.C1Preview.C1PrintDocument" /> using the
            <see cref="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)" />.
            This class can be also used when a <b>C1Report field</b>-like behavior is desired.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderField" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderField" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderField" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalResolvingFinished">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.GetDefaultWidth">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalResetLayoutDimensions(C1.C1Preview.RefDim)">
      <summary>
            For internal use.
            </summary>
      <param name="dimensions">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderField.GetApproximateCountOfFragmentsToProcess">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalClearTemporaryInfo">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalResolveCalculatedValues">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.CreateDataBindingCopy(C1.C1Preview.OutlineNode)">
      <summary>
            For internal use.
            </summary>
      <param name="parentOutline">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderField" />, also copies <see cref="T:C1.C1Preview.RenderField" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderField.Original">
      <summary>
            Gets the original <see cref="T:C1.C1Preview.RenderField" /> object that produced the current object
            during data binding, or <b>null</b> if there is no such object.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
    </member>
    <member name="P:C1.C1Preview.RenderField.TabPositions">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.TabPosition" /> objects
            describing text tab positions in the current <see cref="T:C1.C1Preview.RenderField" /> object.
            </summary>
      <remarks>
            This property always returns a non-<b>null</b><see cref="T:C1.C1Preview.TabPositionCollection" /> collection,
            initializing it if it has not been initialized yet.
            Use <see cref="P:C1.C1Preview.RenderField.HasTabPositions" /> to test whether there are any defined tab positions
            without initializing <see cref="P:C1.C1Preview.RenderField.TabPositions" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.HasTabPositions">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RenderField.TabPositions" /> collection
            has been initialized and contains at least one element.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.Text">
      <summary>
            Gets or sets the text of the current <see cref="T:C1.C1Preview.RenderField" /> object.
            </summary>
      <remarks>
        <para>This property contains the text that will be rendered on the document.</para>
        <para>Depending on the value of the <see cref="P:C1.C1Preview.RenderField.Calculated" /> property,
            this text may be rendered literally (as is, without any translation),
            or as a script expression.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.Picture">
      <summary>
            Gets or sets a picture to display in the current field.
            </summary>
      <remarks>
        <para>This property may be set to one of the following three kinds of objects:</para>
        <list type="number">
          <item>A regular .NET <see cref="T:System.Drawing.Image" /> object.</item>
          <item>A string containing an image file name or URL.</item>
          <item>A string containing the name of an image field in the data source.</item>
        </list>
        <para>The first two options are used to create unbound images, such as logos. These images do not 
            depend on the document data.</para>
        <para>The third option is used to create bound images, such as product or employee pictures. These 
            images are stored with the document data.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.DetectUrls">
      <summary>
            If the current field's <see cref="P:C1.C1Preview.RenderField.RTF" /> property is <b>true</b>,
            this property gets or sets a value indicating whether
            Uniform Resource Locators (URLs) will be automatically formatted
            when found in the text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.Calculated">
      <summary>
            Gets or sets a value indicating whether the
            <see cref="P:C1.C1Preview.RenderField.Text" /> property should be interpreted as a literal value
            or as a calculated expression.
            </summary>
      <remarks>
        <para>If this property is set to <b>false</b>, the value of the <see cref="P:C1.C1Preview.RenderField.Text" /> property is
            inserted in the document without any further processing.</para>
        <para>If this property is set to <b>true</b>, the value of the <see cref="P:C1.C1Preview.RenderField.Text" /> property is
            evaluated as a script expression and the result of the expression is
            inserted in the document.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.HideDuplicates">
      <summary>
            Gets or sets a value indicating whether
            duplicate values in consecutive records should be suppressed.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Preview.RenderField.HideDuplicates" /> property to hide a field in a document 
            when its value is the same as in the preceding record.</para>
        <para>For example, in a report listing suppliers and their products, each supplier's name 
            can appear just once for each group of products, rather than repeat for each product.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.Format">
      <summary>
            Gets or sets a string used to format the value of the current field.
            </summary>
      <remarks>
        <para>You can use this property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
        <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.C1Preview.RenderField.Format" /> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
        <para>You can use this property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
        <para>The syntax for the format string is the same
            as used with the .NET <see cref="M:System.String.Format(System.String,System.Object)" /> method.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.LineSlant">
      <summary>
            Gets or sets a value indicating whether a line should be drawn across the current field.
            </summary>
      <seealso cref="T:C1.C1Report.LineSlantEnum" />
      <remarks>
            The color, style, and thickness of the line are determined by the <see cref="P:C1.C1Preview.Style.ShapeLine" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.CheckBox">
      <summary>
            Gets or sets a value indicating whether the current field should be displayed as a checkbox.
            </summary>
      <remarks>
            This property allows you to display boolean values graphically, rather than as plain text.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.RTF">
      <summary>
            Gets or sets a value indicating whether the content of the <see cref="P:C1.C1Preview.RenderField.Text" /> property
            on the current field should be interpreted as RTF.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.BarCodeType">
      <summary>
            Gets or sets the type of barcode displayed by the current field.
            The default value (<see cref="F:C1.C1Report.BarCodeEnum.None" />) indicates that the current field
            should not be rendered as a barcode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.GeneralTextAlignment">
      <summary>
            Gets or sets a value indicating whether the text alignment in the current field
            should depend on the type of data represented by the field. If this property
            is <b>true</b>, numbers will align to the right while all other data to the left.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.HidePicture">
      <summary>
            Gets or sets a value indicating whether the image should not be displayed,
            works similar to <see cref="F:C1.C1Report.PictureScaleEnum.Hide" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.SubReport">
      <summary>
            Gets or sets a reference to a <see cref="T:C1.C1Preview.RenderReport" /> object to be rendered
            as a sub-report within the current field.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.CanGrow">
      <summary>
            Gets or sets a value indicating whether the height of the current field can increase
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderField.CanShrink">
      <summary>
            Gets or sets a value indicating whether the height of the current field can decrease
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderField.Anchor">
      <summary>
            Gets or sets a value determining the vertical position of the current field
            relative to the containing <see cref="T:C1.C1Preview.RenderSection" />.
            </summary>
      <remarks>
        <para>Normally, fields do not move when sections grow or shrink. In some cases, however, you may want
            fields to grow with the section or to stay in the same position relative to the bottom of the
            section.</para>
        <para>This is especially common for fields used to create vertical lines that should extend
            the entire height of the section.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderFieldFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderField" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderFieldFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderFieldFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderFieldFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.CreateSplitParams">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="height">
      </param>
      <param name="width">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.CalcLength(C1.C1Preview.RefDim)">
      <summary>
            For internal use.
            </summary>
      <param name="dim">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.ResolveChildrenLayout(C1.C1Preview.LengthBase,C1.C1Preview.LengthBase)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.InternalDraw(C1.C1Preview.GraphicsUtils.GdiDc,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="dc">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="dp">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetVertSplits(System.Collections.Generic.List{System.Double})">
      <summary>
            For internal use.
            </summary>
      <param name="splits">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.FindVertSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.FindHorzSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.SplitHorzContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="newFragment">
      </param>
      <param name="p">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.SplitVertContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="newFragment">
      </param>
      <param name="p">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderFieldFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderField" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FieldResolvedInfo">
      <summary>
            Represents temporary information used during a document's resolving.
            An instance of this class is created for each <see cref="T:C1.C1Preview.RenderField" /> that participates in resolving.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FragmentResolvedInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>
            For internal use only.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetFlag(System.Int64)">
      <summary>
            For internal use only.
            </summary>
      <param name="flagMask">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetFlag(System.Int64,System.Boolean)">
      <summary>
            For internal use only.
            </summary>
      <param name="flagMask">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetRightBottom(C1.C1Preview.PageAreaBase@,System.Double@,System.Double@)">
      <summary>
            For internal use only.
            </summary>
      <param name="rightBottomPageArea">
      </param>
      <param name="right">
      </param>
      <param name="bottom">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetLeftTop(C1.C1Preview.PageAreaBase@,System.Double@,System.Double@)">
      <summary>
            For internal use only.
            </summary>
      <param name="leftTopPageArea">
      </param>
      <param name="left">
      </param>
      <param name="top">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetDim(C1.C1Preview.RefDim)">
      <summary>
            For internal use only.
            </summary>
      <param name="dim">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetDim(C1.C1Preview.RefDim,System.Double)">
      <summary>
            For internal use only.
            </summary>
      <param name="dim">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetDim(C1.C1Preview.RefDim,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>
            For internal use only.
            </summary>
      <param name="dim">
      </param>
      <param name="pageArea">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetDim(C1.C1Preview.RefDim,C1.C1Preview.PageAreaBase,System.Double)">
      <summary>
            For internal use only.
            </summary>
      <param name="dim">
      </param>
      <param name="pageArea">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.HasDim(C1.C1Preview.RefDim)">
      <summary>
            For internal use only.
            </summary>
      <param name="dim">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetLeftTop(C1.C1Preview.PageAreaBase,System.Double,System.Double)">
      <summary>
            For internal use only.
            </summary>
      <param name="pageArea">
      </param>
      <param name="left">
      </param>
      <param name="top">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetRightBottom(C1.C1Preview.PageAreaBase,System.Double,System.Double)">
      <summary>
            For internal use only.
            </summary>
      <param name="pageArea">
      </param>
      <param name="right">
      </param>
      <param name="bottom">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.ResetDim(C1.C1Preview.RefDim)">
      <summary>
            For internal use only.
            </summary>
      <param name="dimensions">
      </param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetOffset(C1.C1Preview.RefDim,C1.C1Preview.RefDim,C1.C1Preview.RefDim)">
      <summary>
            For internal use only.
            </summary>
      <param name="spacingDim">
      </param>
      <param name="borderDim">
      </param>
      <param name="paddingDim">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.LeftTopPageArea">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RightBottomPageArea">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Left">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Top">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelLeft">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelTop">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Width">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Height">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelRight">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelBottom">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.ChildWidth">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.ChildHeight">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.LeftOffset">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RightOffset">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.TopOffset">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.BottomOffset">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoLeft">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoTop">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoPos">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailWidth">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailHeight">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.NeedFullReresolving">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.PageActionsBeforeProcessed">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoWidthResolving">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoHeightResolving">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.FieldResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>
            For internal use.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsTabPositionsResolved">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsTextIndentResolved">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsLinesDirectionResolved">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsChildrenProcessing">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.AutoSizeRequested">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.AutoHeightResolved">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.AutoWidthResolved">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FieldSplitParams">
      <summary>
            For internal use.
            Represents splitting parameters of a <see cref="T:C1.C1Preview.RenderField" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitParams">
      <summary>
        <para>For internal use only.</para>
            The base class for split parameters used when object should be split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenSplitParams">
      <summary>
            OUT (FindSplitPos):
            The collection of SplitParams objects from children.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitPos">
      <summary>
            IN:
            Specifies the requested split position.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SpacingMin">
      <summary>
            IN:
            Left / Top spacing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SpacingMax">
      <summary>
            IN:
            Right / Bottom spacing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.PaddingMin">
      <summary>
            IN:
            Left / Top padding.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.PaddingMax">
      <summary>
            IN:
            Right / Bottom padding.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BorderMin">
      <summary>
            IN:
            Left / Top border.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BorderMax">
      <summary>
            IN:
            Right / Bottom border.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitDimensionSize">
      <summary>
            IN:
            Size of split dimension, on vertical split - height, on horizontal - width.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NonSplitDimensionContentSize">
      <summary>
            IN:
            The content size of non split dimension, 
            on vertical split: Width - Inner.Left - Inner.Right;
            on horizontal split: Height - Inner.Top - Inner.Bottom.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BordersSplitMode">
      <summary>
            IN:
            RepeatBordersVert or RepeatBordersHorz.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitVert">
      <summary>
            IN:
            Indicates the type of split: vertical or horizontal.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenAlwaysCanSplit">
      <summary>
            IN:
            ChildrenAlwaysCanSplitVert or ChildrenAlwaysCanSplitHorz, depends on
            type of splitting: vertical or horizontal.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitContext">
      <summary>
            IN:
            Gets SplitContext object containing some global options for splitting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.TopParentHardBreak">
      <summary>
            IN:
            Indicates that the top parent object process the hard break.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NewFragmentSize">
      <summary>
            OUT (FindSplitPos):
            The size of new fragment, which is created at the split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ContentSplitOffset">
      <summary>
            OUT (FindSplitPos):
            Offsets for split position within content area,
            the content area is split at position: RealSplitPos - ContentSplitOffset.
            ContentSplitOffset calculated on the base 
            of padding / spacing / borders / RepeatBorders.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ContentRealSplitPos">
      <summary>
            OUT (FindSplitPos):
            The real split position within content area, calculated in the
            FindVertSplitPosContent / FindHorzSplitPosContent.
            ContentRealSplitPos = RealSplitPos - ContentSplitOffset.
            Also see comments to ReprintedFooterSize.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenSplitPosOffset">
      <summary>
            OUT (FindSplitPos):
            Offset of children' splitting position from ContentSplitPos.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ReprintFooterSize">
      <summary>
            OUT (FindSplitPos):
            The size of reprinted footer at the bottom of object,
            filled in the FindXXXContent method, after calling this method
            the ContentRealSplitPos does not include this size, and real
            RealSplitPos is:
            ContentRealSplitPos + ContentSplitOffset + ReprintFooterSize.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ReprintHeaderSize">
      <summary>
            OUT (FindSplitPos):
            The size of reprinted header at the top of object which was split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NeedReresolving">
      <summary>
            OUT (Split):
            Indicates that after splitting the fragment which was split
            must be reresolved. This field filled after RenderFragment.Split method.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.AllChildrenSplitInSamePlace">
      <summary>
            OUT:
            Indicates that all children splits at ONE line.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.SplitParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.Clone">
      <summary>
            Creates a copy of the current object.
            The <see cref="F:C1.C1Preview.SplitParams.ChildrenSplitParams" /> property is copied by reference.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.SplitParams" /> to the current object.
            The <see cref="F:C1.C1Preview.SplitParams.ChildrenSplitParams" /> property is copied by reference.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.SplitParams.InnerMin">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SplitParams.InnerMax">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SplitParams.ExistSplittedChildren">
      <summary>
            Indicates that the object has the splitted child objects.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FieldSplitParams.AllCharsFitted">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FieldSplitParams.IsNewParagraph">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FieldSplitParams.FittedCharCount">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.FieldSplitParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.FieldSplitParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.FieldSplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="source">
      </param>
    </member>
    <member name="T:C1.C1Preview.GrowShrinkModeEnum">
      <summary>
            Specifies the logic for handling the <b>CanGrow</b> and <b>CanShrink</b> properties
            of a <b>C1Report</b>'s fields and sections in an imported report.
            </summary>
      <remarks>
            Use members of this enumeration to set the <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" /> property
            in the <see cref="T:C1.C1Preview.RenderReport" /> class.
            </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)" />
    </member>
    <member name="F:C1.C1Preview.GrowShrinkModeEnum.C1Report">
      <summary>
            Uses the standard <b>C1Report</b> mode, where fields that grow or shrink affect only fields directly below.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GrowShrinkModeEnum.Access">
      <summary>
            Uses a mode that is similar to <b>MS Access</b>, where fields that grow or shrink affect all fields below, 
            even if they are off to the side of the field that grew or shrank.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderReport">
      <summary>
            Represents a sub-report
            (a <b>C1Report</b> contained within a <see cref="T:C1.C1Preview.RenderField" />
            and specified by its <see cref="P:C1.C1Preview.RenderField.SubReport" /> property)
            in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderReport.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagStringInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderReport.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderReport" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderReport" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderReport.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderReport" />, also copies <see cref="T:C1.C1Preview.RenderReport" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderReport.ExposeScriptObjects">
      <summary>
            Gets or sets a value indicating whether script objects should be exposed
            to nested objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.DataProcessingStartingScript">
      <summary>
            Gets or sets a script that is executed when data processing of the current object starts.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.DataProcessingFinishedScript">
      <summary>
            Gets or sets a script that is executed when data processing of the current object has completed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.GrowShrinkMode">
      <summary>
            Gets or sets a value indicating how <see cref="P:C1.C1Preview.RenderField.CanGrow" /> and <see cref="P:C1.C1Preview.RenderField.CanShrink" /> 
            properties are handled.
            </summary>
      <remarks>
        <para>If this property is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report" />, fields with 
            <see cref="P:C1.C1Preview.RenderField.CanGrow" /> or <see cref="P:C1.C1Preview.RenderField.CanShrink" /> properties set to true will move fields directly 
            below them when they grow or shrink. Fields located below but off to the side are not moved.</para>
        <para>If this property is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access" />, fields that grow or shrink will 
            affect all fields below, even those which are not directly under the field that was modified as a result of 
            <b>CanGrow</b>/<b>CanShrink</b>. (This is the Microsoft Access behavior.)</para>
        <para>For example, if fields are arranged in a grid layout and <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" /> is set to 
            <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access" />, fields within each row will remain vertically aligned when fields 
            above them grow or shrink.</para>
        <para>If <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" /> is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report" />, fields within each 
            column will move independently of fields in other columns, and fields within each row will not remain vertically 
            aligned.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderSection">
      <summary>
            Represents a section of a <see cref="N:C1.C1Report" />.
            Objects of this type are created when a <b>C1Report</b> definition
            is imported into a <see cref="T:C1.C1Preview.C1PrintDocument" /> using the
            <see cref="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)" />.
            This class can be also used when a <b>C1Report section</b>-like behavior is desired.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderSection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSection.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderSection" /> object
            linked with same <see cref="T:C1.C1Preview.C1PrintDocument" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderSection" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.GetDefaultSplitHorzBehavior">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.OnChildAdd(C1.C1Preview.RenderObject)">
      <summary>
            For internal use.
            </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderSection.GetDefaultFlags">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.CreateDataBindingCopy(C1.C1Preview.OutlineNode)">
      <summary>
            For internal use.
            </summary>
      <param name="parentOutline">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.InternalClearTemporaryInfo">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSection.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderSection" />, also copies <see cref="T:C1.C1Preview.RenderSection" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderSection.CanGrow">
      <summary>
            Gets or sets a value indicating whether the height of the current section can increase
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderSection.CanShrink">
      <summary>
            Gets or sets a value indicating whether the height of the current section can decrease
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderSection.OnFormatScript">
      <summary>
            Gets or sets a string containig the script to be executed before the current
            section is formatted. This script is executed for each record, and can be used
            to change the content of the section depending on the record data.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderSection.OnPrintScript">
      <summary>
            Gets or sets a string containig the script to be executed before the current
            section is printed (after it has been formatted). This script can be used to
            adjust the visual properties of the section which do not affect the layout
            (e.g. text and background colors).
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderSectionFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderSection" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderAreaFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderArea" /> in the generated document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderAreaFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderAreaFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderAreaFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderAreaFragment" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderAreaFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderArea" /> which produced the current fragment.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSectionFragment.ResolveChildrenLayout(C1.C1Preview.LengthBase,C1.C1Preview.LengthBase)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderSectionFragment.ResolvingFinished">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSectionFragment.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="backgroundRect">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderSectionFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderSection" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IScalableControl">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IScalableControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            For internal use only.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="zoomFactor">
      </param>
    </member>
    <member name="P:C1.C1Preview.IScalableControl.FormsStyle">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ExpressionBase`1">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1">
      <summary>
            For internal use only.
            </summary>
      <typeparam name="TContext">
      </typeparam>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.CreateCodeProvider(`0)">
      <summary>
            For internal use only.
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Recursive">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Simple">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.#ctor">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Sum(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Sum(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Sum(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Avg(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Avg(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Avg(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Max(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Max(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Max(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Min(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Min(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Min(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Count(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Count(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Count(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountDistinct(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountDistinct(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountDistinct(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountRows(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountRows(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountRows(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDev(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDev(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDev(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDevP(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDevP(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDevP(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Var(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Var(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Var(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.VarP(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.VarP(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.VarP(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <param name="calculateMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.First(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.First(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Last(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Last(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Previous(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Previous(System.String,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="previousScope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.RunningValue(System.String,C1.C1Preview.DataBinding.AggregateFuncEnum,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="expression">
      </param>
      <param name="func">
      </param>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.RowNumber(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="scope">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.MultiDocument">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Document">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Tags">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Page">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.UsageInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Globals">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.User">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ExpressionBase`1.BuildScriptObject(System.CodeDom.CodeTypeDeclaration,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="ctd">
      </param>
      <param name="script">
      </param>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ExpressionBase`1.ScriptObjectBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ExpressionBase`1.ScriptObjectBase.GetExpressionValue">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DocumentExpression.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentExpression.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentScript">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptBase`1">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptBase`1.BuildScriptObject(System.CodeDom.CodeTypeDeclaration,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="ctd">
      </param>
      <param name="script">
      </param>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptBase`1.ScriptObjectBase">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptBase`1.ScriptObjectBase.InternalExecute">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DocumentScript.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentScript.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentScript">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.ScriptObject.RenderFragment">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.ScriptObject.RenderObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectScript">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderObjectScript.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectScript.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectScript.ScriptObject.RenderObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableCellExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1">
      <summary>
            For internal use only.
            </summary>
      <typeparam name="TContext">
      </typeparam>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.RenderObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.RenderFragment">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageNo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageCount">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageX">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageY">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageXCount">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageYCount">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableCellExpression.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RowNumber">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RenderFragment">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.Aggregates">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.DataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.Fields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RowDataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RowFields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.ColDataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.ColFields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorExpression.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.RowNumber">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.RenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.RenderFragment">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.Aggregates">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.DataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.Fields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.RowNumber">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.RenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.RenderFragment">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.Aggregates">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.DataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.Fields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.RowNumber">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.RenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.RenderFragment">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.Aggregates">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.DataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.Fields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateFuncEnum">
      <summary>
            Defines the set of supported aggregate functions (see <see cref="T:C1.C1Preview.DataBinding.Aggregate" />).
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Sum">
      <summary>
            Returns the sum of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Average">
      <summary>
            Returns the average of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Count">
      <summary>
            Returns the count of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Min">
      <summary>
            Returns the minimum of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Max">
      <summary>
            Returns the maximum of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.CountDistinct">
      <summary>
            Returns the count of distinct values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.First">
      <summary>
            Returns the first (in the sorted sequence)
            value of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Last">
      <summary>
            Returns the last (in the sorted sequence)
            value of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Var">
      <summary>
            Returns the variance of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.VarP">
      <summary>
            Returns the population variance of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDev">
      <summary>
            Returns the standard deviation of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDevP">
      <summary>
            Returns the population standard deviation of values of the expression within the scope.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.RunningEnum">
      <summary>
            Defines the scope of an <see cref="T:C1.C1Preview.DataBinding.Aggregate" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.RunningEnum.Document">
      <summary>
            The scope is the whole document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.RunningEnum.Group">
      <summary>
            The scope is the current group
            as defined by <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Aggregate">
      <summary>
            Represents an aggregate value calculated on a data-bound element
            of a <see cref="T:C1.C1Preview.C1PrintDocument" /> over a certain scope.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> class,
            assigning the name of the aggregate.
            </summary>
      <param name="name">A string assigned to the <see cref="P:C1.C1Preview.NamedCollectionItem.Name" /> of this aggregate.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.#ctor(System.String,System.String,C1.C1Preview.DataBinding.C1DataBinding,C1.C1Preview.DataBinding.RunningEnum,C1.C1Preview.DataBinding.AggregateFuncEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> class,
            assigning the name, expression, data binding, scope and function of the aggregate.
            </summary>
      <param name="name">A string assigned to the <see cref="P:C1.C1Preview.NamedCollectionItem.Name" /> property of this aggregate.</param>
      <param name="expressionText">A string assigned to the <see cref="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText" /> property of this aggregate.</param>
      <param name="dataBinding">
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> assigned to the <see cref="P:C1.C1Preview.DataBinding.Aggregate.DataBinding" /> property of this aggregate.</param>
      <param name="running">A value assigned to the <see cref="P:C1.C1Preview.DataBinding.Aggregate.Running" /> property of this aggregate.</param>
      <param name="func">A value assigned to the <see cref="P:C1.C1Preview.DataBinding.Aggregate.Func" /> property of this aggregate.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.SetName(System.String)">
      <summary>
            Sets the name of the current <see cref="T:C1.C1Preview.DataBinding.Aggregate" />.
            </summary>
      <param name="newName">The new name of the aggregate.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.AggregateCollection" /> containing the current aggregate.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Func">
      <summary>
            Gets or sets the function (min, max, average and so on) calculated by the current aggregate.
            </summary>
      <remarks>
            The default value of this property is <see cref="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Sum" />.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.IgnoreNullValues">
      <summary>
            Gets or sets a value indicating whether null values should be ignored
            when the current aggregate is calculated.
            </summary>
      <remarks>
            The default value of this property is <b>true</b>.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Expression">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.Expression" /> object used to calculate the value of the current aggregate.
            </summary>
      <remarks>
            Use the <see cref="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText" /> property to set the expression.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText">
      <summary>
            Gets or sets the text of the <see cref="T:C1.C1Preview.DataBinding.Expression" /> object used to calculate the value of the current aggregate.
            </summary>
      <remarks>
            The <see cref="P:C1.C1Preview.DataBinding.Aggregate.Expression" /> property can be used to get the <see cref="T:C1.C1Preview.DataBinding.Expression" /> object.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.DataBinding">
      <summary>
            Gets or sets the data binding providing data over which the current aggregate is calculated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Running">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.DataBinding.RunningEnum" /> value determining the scope of the current aggregate:
            whether it is calculated over all records, or separately for each group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Value">
      <summary>
            Gets the value of the current aggregate, calculating it if it has not been calculated yet
            (the calculated value is cached).
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.AggregateCollection.#ctor(C1.C1Preview.DataBinding.C1DataSchema)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.AggregateCollection" /> class.
            </summary>
      <param name="owner">The <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> object that is the owner of this collection.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.AggregateCollection.Add(C1.C1Preview.DataBinding.Aggregate)">
      <summary>
            Adds an <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> object to the current collection.
            </summary>
      <param name="aggregate">The <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> object to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> object that is the owner of the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.Int32)">
      <summary>
            Enumerates aggregates by index.
            </summary>
      <param name="index">Index of aggregate zero-based.</param>
      <returns>Returns the Aggregate object at specified position.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.String)">
      <summary>
            Gets the aggregate with the specified name.
            </summary>
      <param name="name">The name of the aggregate.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> object with the specified <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />,
            or an empty aggregate if an aggregate with the specified name was not found.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateCalculateModeEnum">
      <summary>
            Specifies aggregates calculation mode.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateCalculateModeEnum.Simple">
      <summary>
            Indicates that an aggregate should be calculated just over the specified datasource.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateCalculateModeEnum.Recursive">
      <summary>
            Indicates that an aggregate should be calculated recursively, i.e.
            over all data in the current instance of the given scope, and over
            all descendant instances of the current instance.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.C1DataBinding">
      <summary>
            Represents the data binding properties of an databound element in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            Properties of this type are <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> on <see cref="T:C1.C1Preview.RenderObject" />,
            and <see cref="P:C1.C1Preview.TableVectorGroup.DataBinding" /> on groups of table rows and columns (see <see cref="T:C1.C1Preview.TableVector" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.IFieldCollectionOwner">
      <summary>
            Defines a method that allows to retrieve the value of a <see cref="T:C1.C1Preview.DataBinding.Field" />.
            This interface is implemented by <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IFieldCollectionOwner.GetFieldValue(C1.C1Preview.DataBinding.Field)">
      <summary>
            Returns the value of the specified <see cref="T:C1.C1Preview.DataBinding.Field" /> object.
            </summary>
      <param name="field">The <see cref="T:C1.C1Preview.DataBinding.Field" /> whose value should be returned.</param>
      <returns>The value of <paramref name="field" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.ShouldSerializeFields">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Fields" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.ShouldSerializeSorting">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.ShouldSerializeGrouping">
      <summary>
            Tests whether the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping" /> property should be serialized.
            </summary>
      <returns>True if the property should be serialized, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.IsParentFor(C1.C1Preview.DataBinding.C1DataBinding)">
      <summary>
            Tests whether the current data binding object is a parent (or a grand- or
            a deeper-level parent) of another object.
            </summary>
      <param name="dataBinding">The <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> object that is tested for being a child of the current object.</param>
      <returns>
        <b>true</b> if the current object is a parent of the passed object, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.AssignFrom(C1.C1Preview.DataBinding.C1DataBinding)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Name">
      <summary>
            Gets or sets the name of the current <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />.
            That name can be used in aggregate functions to indicate which
            data binding the aggregate refers to.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText">
      <summary>
            Gets or sets a string defining the <see cref="T:C1.C1Preview.DataBinding.Expression" /> used to generate
            the outline caption for objects produced by the current data binding.
            <para>
            For instance, if a render object is data bound to a data source that contains a field
            "CustomerName", setting this property to <c>"Customer: [Fields!CustomerName.Value]"</c>
            will generate an outline node similar to <c>"Customer: John Doe"</c> for each generated
            instance of the render object.
            </para></summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataBinding.ParentOutline" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.ParentOutline">
      <summary>
            Gets or sets the parent outline node.
            <para>
            This allows to establish hierarchy of outline nodes for data-bound render object.
            For instance, the following code:
            <code>
            C1PrintDocument doc = new C1PrintDocument();
            RenderTable rtbl = new RenderTable();
            doc.Body.Children.Add(rtbl);
            doc.Outlines.Add(new OutlineNode("Document root", rtbl));
            // set up data binding for rtbl.RowGroups[0,1]...
            rtbl.RowGroups[0, 1].DataBinding.DataSource = myDataSource;
            rtbl.RowGroups[0, 1].DataBinding.OutlineText = "Customer: [Fields!CustomerName.Value]";
            rtbl.RowGroups[0, 1].DataBinding.ParentOutline = doc.Outlines[0];
            </code>
            will add outlines to the data-bound rows of 'rtbl', and will make
            those outlines children of the 'Document root' outline node.
            </para></summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Parent">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> object which is the parent of the current data binding.
            </summary>
      <remarks>
            The parent is retrieved based on the objects' containment hierarchy.
            For instance, for a <b>RenderText</b> within a <b>RenderArea</b>,
            <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Parent" /> of the <see cref="P:C1.C1Preview.RenderObject.DataBinding" />
            on the <b>RenderText</b> will return <b>DataBinding</b> of the <b>RenderArea</b>
            containing the text.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Mode">
      <summary>
            Gets the flags indicating the mode of the current data binding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Defined">
      <summary>
            Gets a value indicating that the current data binding is not empty
            and is linked to some data.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource">
      <summary>
            Gets or sets the data source associated with the current data binding.
            <para>Currently objects of the following types can be assigned to this property:</para><list type="bullet"><item><see cref="T:System.Collections.IEnumerable" /></item><item><see cref="T:C1.C1Preview.DataBinding.DataSet" /></item><item><see cref="T:C1.C1Preview.DataBinding.Expression" /></item></list>
            If the data source is an <see cref="T:C1.C1Preview.DataBinding.Expression" />,
            that expression must evaluate to an instance of a
            <see cref="T:System.Collections.IEnumerable" /> or a <see cref="T:C1.C1Preview.DataBinding.DataSet" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.Grouping" /> object that determines
            how data retrieved by the current data binding is grouped.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.Sorting" /> object that determines
            how data retrieved by the current data binding is sorted.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Fields">
      <summary>
            Gets the collection of data fields for the current data binding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Filters">
      <summary>
            Gets the collection of expressions that are used to filter
            the data retrieved by the current data binding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> object containing the current data binding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.RowNumber">
      <summary>
            Gets the current row or group instance number (see <b>remarks</b>).
            </summary>
      <remarks>
            This property should only be used while the document containing the current data binding
            is generating. It then returns the number of the current data row.
            <para>
            When the document containing the current data binding is not generating,
            or if processing of the object on which the current data binding is defined has not started yet,
            this property returns <b>0</b>.
            </para><para>
            When end of data has been reached during document generation,
            this property returnst the last row number.
            </para></remarks>
    </member>
    <member name="T:C1.C1Preview.DataBinding.C1DataSchema">
      <summary>
            Represents a data schema of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <remarks>
            This class contains:
            <list type="bullet"><item>The list of data sources associated with the document </item><item><term><see cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources" /></term><description>The collection of data sources associated with the current document.
            Each element in that collection determines how to connect to an external data source (connection string etc.).</description></item><item><term><see cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets" /></term><description>The collection of available data sets (tables, SQL queries).</description></item><item><term><see cref="P:C1.C1Preview.DataBinding.C1DataSchema.Aggregates" /></term><description>The collection of aggregates defined on the data.</description></item></list></remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataSchema.Clear">
      <summary>
            Clears the current data schema, deletes all
            associated data sets, data sources and aggregates.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> containing the current data schema.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.DataBinding.DataSource" /> objects
            associated with the current data schema.
            Those data sources are used to provide data for elements of the <see cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets" />
            collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets">
      <summary>
            Gets the collection of data sets provided by the current data schema.
            <para>
            A <see cref="T:C1.C1Preview.DataBinding.DataSet" /> from this collection
            can be assigned to the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource" /> property
            on <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> of a <see cref="T:C1.C1Preview.RenderObject" />,
            or on <see cref="P:C1.C1Preview.TableVectorGroup.DataBinding" /> of a table row or column group (<see cref="T:C1.C1Preview.TableVector" />).
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Aggregates">
      <summary>
            Gets the collection of named <see cref="T:C1.C1Preview.DataBinding.Aggregate" /> objects
            defined on the current data schema.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataProviderEnum">
      <summary>
            The type of the data source.
            This will determine the syntax of the ConnectionProperties.ConnectString and 
            Query.CommandText.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SQL">
      <summary>
            Microsoft SQL Server.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.OLEDB">
      <summary>
            Microsoft OLE DB Provider.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.ODBC">
      <summary>
            Microsoft Open Database Connectivity Driver.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.XmlFile">
      <summary>
            The XML file specified as the datasource, in this case
            the ConnectString contains name of file.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SqlServerCe3_5">
      <summary>
            Microsoft SQL Server Compact Edition driver version 3.5.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SqlServerCe4_0">
      <summary>
            Microsoft SQL Server Compact Edition driver version 4.0.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.ConnectionProperties">
      <summary>
            Contains information about how to connect to a data source.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ConnectionProperties.AssignFrom(C1.C1Preview.DataBinding.ConnectionProperties)">
      <summary>
            Copies properties from another ConnectionProperties object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.DataProvider">
      <summary>
            Gets or sets the type of the data source.
            This determines the syntax of the ConnectionProperties.ConnectString and
            Query.CommandText.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.ConnectString">
      <summary>
            Gets or sets the connection string for the data source.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.IntegratedSecurity">
      <summary>
            Gets or sets the value indicating whether connection to this data source
            should use integrated security.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.IDBDataHandler">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDBDataHandler.GetFieldValue(System.String)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDBDataHandler.DataSet">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSet">
      <summary>
            Represents a data set used by a data-bound element of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets" />
      <seealso cref="T:C1.C1Preview.DataBinding.DataSet" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSet" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSet.#ctor(C1.C1Preview.DataBinding.DataSource,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSet" /> class,
            assigning the data source and the SQL query.
            </summary>
      <param name="ds">The <see cref="T:C1.C1Preview.DataBinding.DataSource" /> object specifying the data source for this data set.</param>
      <param name="sql">The text of an SQL query that will be executed to retrieve the data.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSet.AssignFrom(C1.C1Preview.DataBinding.DataSet)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.DataSet" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Name">
      <summary>
            Gets or sets the name of the current <see cref="T:C1.C1Preview.DataBinding.DataSet" />.
            That name can be used in aggregate functions to indicate which
            data set the aggregate refers to.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.DataSetCollection" /> containing the current data set.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Query">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.Query" /> object for the current data set.
            </summary>
      <seealso cref="P:C1.C1Preview.DataBinding.DataSet.Fields" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Fields">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> objects describing fields
            of the current data set. If this collection is empty, all fields fetched
            by the query will be accessible on the data set.
            </summary>
      <seealso cref="P:C1.C1Preview.DataBinding.DataSet.Query" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Filters">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.DataBinding.Expression" /> objects applied
            to the fetched records to filter them for the current data set.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.RowFilter">
      <summary>
            Gets or sets the expression used to filter which data rows are included
            in the current data set.
            This property is be assigned to the <b>RowFilter</b> property
            of the underlying <b>DataTable</b> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.MaxRecords">
      <summary>
            Gets or sets the maximum number of records that will be fetched
            from the data set. The default is <b>-1</b>, which includes all records.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.DataBinding.DataSet" /> objects in a <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.#ctor(C1.C1Preview.DataBinding.C1DataSchema)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSetCollection" /> class.
            </summary>
      <param name="dataSchema">The <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> object containing this <see cref="T:C1.C1Preview.DataBinding.DataSetCollection" /> object.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.Add(C1.C1Preview.DataBinding.DataSet)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.DataBinding.DataSet" /> object to the current collection.
            </summary>
      <param name="item">The <see cref="T:C1.C1Preview.DataBinding.DataSet" /> object to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.IndexByName(System.String)">
      <summary>
            Finds the index of the object with the specified name in the collection.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>The index of the found object.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.FindByName(System.String)">
      <summary>
            Searches for an dataset with the specified name in the current collection.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>The dataset with the specified name, or null if the dataset was not found.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> containing the current data set collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.DataBinding.DataSet" /> at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.DataSet" /> at the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.DataSet" /> with the specified name.
            </summary>
      <param name="name">The name of <see cref="T:C1.C1Preview.DataBinding.DataSet" />.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.DataSet" /> with the specified name,
            or <c>null</c> if the dataset could not be found.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetField">
      <summary>
            Represents a field in a <see cref="T:C1.C1Preview.DataBinding.DataSet" />.
            The field may represent a native DB field (assigned via the <see cref="P:C1.C1Preview.DataBinding.DataSetField.DataField" /> property),
            or may be calculated by an expression (set by the <see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" /> property).
            </summary>
      <seealso cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> class,
            assigning the <see cref="P:C1.C1Preview.NamedCollectionItem.Name" /> of this field.
            </summary>
      <param name="name">A string assigned to the name used to identify this field.
            If the current field is added to a <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />,
            this name must be unique within that collection.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> class,
            assigning the <see cref="P:C1.C1Preview.NamedCollectionItem.Name" /> and the associated DB field.
            </summary>
      <param name="name">A string assigned to the name used to identify this field.
            If the current field is added to a <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />,
            this name must be unique within that collection.</param>
      <param name="dataField">The native DB name of this field.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.Expression">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.Expression" /> used
            to calculate the value of the current field.
            <para>
            If this expression is not empty, the field is
            a <b>calculated field</b> (as opposed to a <b>data field</b>).
            </para></summary>
      <remarks>
        <para>
            This property is never <b>null</b> (<b>Nothing</b> in VB), it always
            returns an <see cref="T:C1.C1Preview.DataBinding.Expression" /> object,
            which has empty <see cref="P:C1.C1Preview.DataBinding.Expression.Text" />
            by default. (A non-empty <b>Text</b> string indicates a calculated field.)
            </para>
        <para>
            To specify an expression, set its <see cref="P:C1.C1Preview.DataBinding.Expression.Text" />
            property, or the <see cref="P:C1.C1Preview.DataBinding.DataSetField.ExpressionText" /> property on the
            current field.
            </para>
        <para>
            Either this property or <see cref="P:C1.C1Preview.DataBinding.DataSetField.DataField" />, but not both,
            should be defined on a <see cref="T:C1.C1Preview.DataBinding.DataSetField" />. In case both
            properties are defined, <see cref="P:C1.C1Preview.DataBinding.DataSetField.DataField" /> is used, and
            <b>Expression</b> is ignored.
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.DataField">
      <summary>
            Gets or sets the name of the corresponding DB field in the query.
            <para>
            If this property is not empty, the field is a <b>data field</b> (as opposed to a <b>calculated field</b>).
            </para></summary>
      <remarks>
            This name does not need to be unique within the containing collection,
            and multiple <see cref="T:C1.C1Preview.DataBinding.DataSetField" />s may refer to the same DB field.
            <para>
            Either this property or <see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" />, but not both,
            should be defined on a <see cref="T:C1.C1Preview.DataBinding.DataSetField" />. In case both
            properties are defined, this property is used,
            and <see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" /> is ignored.
            </para></remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.ExpressionText">
      <summary>
            Gets or sets the text of the <see cref="T:C1.C1Preview.DataBinding.Expression" />
            used to calculate the value of the current field.
            <para>
            This is a shortcut to the <see cref="P:C1.C1Preview.DataBinding.Expression.Text" />
            property on the expression returned by <see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" />.
            </para></summary>
      <seealso cref="P:C1.C1Preview.DataBinding.DataSetField.DataField" />
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetFieldCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> objects.
            All fields in the collection must have unique non-empty names.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetFieldCollection.#ctor(C1.C1Preview.DataBinding.DataSet)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" /> class.
            </summary>
      <param name="owner">The <see cref="T:C1.C1Preview.DataBinding.DataSet" /> object containing this <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetFieldCollection.Add(C1.C1Preview.DataBinding.DataSetField)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> object to the current collection.
            </summary>
      <param name="field">The <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> object to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.DataSet" /> object containing the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.Int32)">
      <summary>
            Gets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.String)">
      <summary>
            Gets the field with the specified name.
            </summary>
      <param name="name">The name of the field.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.DataSetField" /> object with the specified <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />,
            or <b>null</b> if a field with the specified name was not found.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSource">
      <summary>
            Represents a data source in a <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />
            or in a <see cref="T:C1.C1Preview.DataBinding.Query" />.
            </summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources" />
      <seealso cref="P:C1.C1Preview.DataBinding.Query.DataSource" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSource" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSource.#ctor(C1.C1Preview.DataBinding.DataProviderEnum,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSource" /> class,
            assigning the data source type and connection string.
            </summary>
      <param name="dataProvider">A <see cref="T:C1.C1Preview.DataBinding.DataProviderEnum" /> specifying the type of this data source.</param>
      <param name="connectString">The data source connection string.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSource.AssignFrom(C1.C1Preview.DataBinding.DataSource)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.DataSource" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.DataSourceCollection" /> containing the current data source.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.DataSchema">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> containing the current data source.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.ConnectionProperties">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.ConnectionProperties" /> object
            containing data source connection information (connection string, data provider etc.).
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.Transaction">
      <summary>
            Gets or sets a value indicating whether all data for all data sets that use the current data source
            should be fetched within a single transaction.
            </summary>
      <remarks>
            The default value of this property is <b>false</b>.
            </remarks>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSourceCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.DataBinding.DataSource" /> objects in a <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />
            (see <see cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources" />).
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSourceCollection.#ctor(C1.C1Preview.DataBinding.C1DataSchema)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.DataSourceCollection" /> class.
            </summary>
      <param name="dataSchema">The <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> object containing this <see cref="T:C1.C1Preview.DataBinding.DataSourceCollection" />.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSourceCollection.Add(C1.C1Preview.DataBinding.DataSource)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.DataBinding.DataSource" /> to the current collection.
            </summary>
      <param name="dataSource">The <see cref="T:C1.C1Preview.DataBinding.DataSource" /> object to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSourceCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" /> containing the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSourceCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.DataBinding.DataSource" /> at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.DataSource" /> at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DatabindingUtils">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Expression">
      <summary>
            Represents an expression that can be used is calculated fields, grouping, sorting etc.
            </summary>
      <remarks>
            The following classes use expressions:
            <list type="bullet"><item><term><see cref="T:C1.C1Preview.DataBinding.DataSet" /></term><description><see cref="P:C1.C1Preview.DataBinding.DataSet.Filters" /></description></item><item><term><see cref="T:C1.C1Preview.DataBinding.DataSetField" /></term><description><see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" /></description></item><item><term><see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /></term><description><see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Filters" /></description></item><item><term><see cref="T:C1.C1Preview.DataBinding.Grouping" /></term><description><see cref="P:C1.C1Preview.DataBinding.Grouping.Expressions" /></description></item><item><term><see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /></term><description><see cref="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText" /></description></item><item><term><see cref="T:C1.C1Preview.DataBinding.SortExpression" /></term><description><see cref="P:C1.C1Preview.DataBinding.SortExpression.Expression" /></description></item><item><term><see cref="T:C1.C1Preview.DataBinding.Aggregate" /></term><description><see cref="P:C1.C1Preview.DataBinding.Aggregate.Expression" /></description></item></list></remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.Expression" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.Expression" /> class.
            </summary>
      <param name="expression">A string to assign to the <see cref="P:C1.C1Preview.DataBinding.Expression.Text" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.AssignFrom(C1.C1Preview.DataBinding.Expression)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.Expression" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.DataBinding.Expression" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.DataBinding.Expression" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Expression.Text">
      <summary>
            Gets or sets the text of the current <see cref="T:C1.C1Preview.DataBinding.Expression" />.
            <para>If not set, an empty string is returned.</para></summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.ExpressionCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.DataBinding.Expression" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ExpressionCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.ExpressionCollection" /> class.
            </summary>
      <param name="owner">The owner of the current collection.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ExpressionCollection.Add(System.String)">
      <summary>
            Creates an <see cref="T:C1.C1Preview.DataBinding.Expression" /> specified by its text,
            and adds it to the current collection.
            </summary>
      <param name="expression">The text of the expression to add.</param>
      <returns>The index of the added <see cref="T:C1.C1Preview.DataBinding.Expression" /> in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ExpressionCollection.Add(C1.C1Preview.DataBinding.Expression)">
      <summary>
            Adds an <see cref="T:C1.C1Preview.DataBinding.Expression" /> to the current collection.
            </summary>
      <param name="expression">The <see cref="T:C1.C1Preview.DataBinding.Expression" /> to add.</param>
      <returns>The index of the added <see cref="T:C1.C1Preview.DataBinding.Expression" /> in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ExpressionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Field">
      <summary>
            Represents a data field available to a data-bound object of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            The collection of available fields is returned by the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Fields" />
            property of the object's <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />.
            </summary>
      <remarks>
        <para>
            If the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource" /> of the <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />
            containing the current field is an <see cref="T:System.Collections.IEnumerable" />,
            the <see cref="T:C1.C1Preview.DataBinding.Field" /> represents a property available on the type of objects in the enumerated collection.
            </para>
        <para>
            If the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource" /> is a <see cref="T:C1.C1Preview.DataBinding.DataSet" />,
            the <see cref="T:C1.C1Preview.DataBinding.Field" /> represents a <see cref="T:C1.C1Preview.DataBinding.DataSetField" />
            in that data set.
            </para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Field.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.Field" /> class.
            </summary>
      <param name="name">Unique name of the field.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Field.SetName(System.String)">
      <summary>
            Sets the name of the current <see cref="T:C1.C1Preview.DataBinding.Field" />.
            </summary>
      <param name="newName">The new name of the field.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Field.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another <see cref="T:C1.C1Preview.DataBinding.Field" /> object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Field.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.FieldCollection" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Field.Value">
      <summary>
            Gets the value of field.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.FieldCollection">
      <summary>
            Collection of Field objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.#ctor(C1.C1Preview.DataBinding.IFieldCollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.FieldCollection" /> class.
            </summary>
      <param name="owner">The owner of the current <see cref="T:C1.C1Preview.DataBinding.FieldCollection" />.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnClearComplete">
      <summary>
            Called after the collection has been cleared.
            Sets <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" /> property to false.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been removed.
            Sets <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" /> property to false.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Called after an item has been set.
            Sets <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" /> property to false.
            </summary>
      <param name="index">The item index.</param>
      <param name="oldValue">The old item.</param>
      <param name="newValue">The new item.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Called after an item has been inserted.
            Sets <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" /> property to false.
            </summary>
      <param name="index">The item index.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.AssignFrom(C1.C1Preview.OwnedCollectionBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.FieldCollection" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.Add(C1.C1Preview.DataBinding.Field)">
      <summary>
            Adds a new <see cref="T:C1.C1Preview.DataBinding.Field" /> object to the current collection.
            </summary>
      <param name="field">The <see cref="T:C1.C1Preview.DataBinding.Field" /> object to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Owner">
      <summary>
            Gets the owner of the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated">
      <summary>
            Gets a value indicating whether the current collection was created automatically
            and was not changed by the user.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.Int32)">
      <summary>
            Gets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.String)">
      <summary>
            Gets the field with the specified name.
            </summary>
      <param name="name">The name of the field.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.Field" /> object with the specified <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />,
            or an empty field if a field with the specified name was not found.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Grouping">
      <summary>
            Represents a set of expressions that determine the grouping of data
            in a data-bound object in a <see cref="T:C1.C1Preview.C1PrintDocument" />
            (see <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping" />).
            <para>
            When the document generates, a new group is created
            if at least one expression in the <see cref="P:C1.C1Preview.DataBinding.Grouping.Expressions" /> collection 
            evaluates to a different value.
            </para></summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Grouping.AssignFrom(C1.C1Preview.DataBinding.Grouping)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.Grouping" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Defined">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.DataBinding.Grouping.Expressions" /> collection
            contains at least one grouping <see cref="T:C1.C1Preview.DataBinding.Expression" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> object which is the owner of the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Expressions">
      <summary>
            Gets the collection of expressions defining the data grouping.
            When the document generates, a new group starts if at least
            one expression in this collection evaluates to a different value.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.CommandTypeEnum">
      <summary>
            Specifies the query type of a <see cref="T:C1.C1Preview.DataBinding.Query" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.Text">
      <summary>
            The <see cref="P:C1.C1Preview.DataBinding.Query.CommandText" /> of a
            <see cref="T:C1.C1Preview.DataBinding.Query" /> contains the SQL query text.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.StoredProcedure">
      <summary>
            The <see cref="P:C1.C1Preview.DataBinding.Query.CommandText" /> of a
            <see cref="T:C1.C1Preview.DataBinding.Query" /> contains the name
            of a stored procedure that should be executed to retrieve the data.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.TableDirect">
      <summary>
            The <see cref="P:C1.C1Preview.DataBinding.Query.CommandText" /> of a
            <see cref="T:C1.C1Preview.DataBinding.Query" /> contains the name
            of a data table.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Query">
      <summary>
            Describes a query that is executed to fetch data for a <see cref="T:C1.C1Preview.DataBinding.DataSet" />
            (the query is specified by the <see cref="P:C1.C1Preview.DataBinding.DataSet.Query" /> property
            on the data set object).
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Query.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.Query" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Query.AssignFrom(C1.C1Preview.DataBinding.Query)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.Query" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.DataSource">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.DataBinding.DataSource" /> object
            against which to execute the current query.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.CommandType">
      <summary>
            Gets or sets the type of query assigned to the <see cref="P:C1.C1Preview.DataBinding.Query.CommandText" /> property
            on the current query.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.CommandText">
      <summary>
            Gets or sets the command text that is executed to obtain the data.
            The interpretation of this text depends on the query type
            specified by the <see cref="P:C1.C1Preview.DataBinding.Query.CommandType" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.Timeout">
      <summary>
            Gets or sets the number of seconds to allow the query to run
            before timing out. Must be nonnegative. If
            omitted or zero, the query should not time out.
            </summary>
      <remarks>The default value of this property is 0 (zero).</remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.Parameters">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> objects that are passed
            to the data source as part of the current query.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.QueryParameter">
      <summary>
            Represents a parameter that is passed to the data source
            as part of a query defined by a <see cref="T:C1.C1Preview.DataBinding.Query" /> object.
            </summary>
      <seealso cref="P:C1.C1Preview.DataBinding.Query.Parameters" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> class,
            assigning the parameter's name.
            </summary>
      <param name="name">The unique name of this parameter.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> class,
            assigning the parameter's name and value.
            </summary>
      <param name="name">The unique name of this parameter.</param>
      <param name="value">The value of this parameter.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.SetName(System.String)">
      <summary>
            Sets the name of the current <see cref="T:C1.C1Preview.DataBinding.QueryParameter" />.
            </summary>
      <param name="newName">The new name of the parameter.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameter.Owner">
      <summary>
            Gets the collection containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameter.Value">
      <summary>
            Gets or sets the value of the current parameter.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.QueryParameterCollection">
      <summary>
            Represens a collection of <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> objects.
            All parameters in the collection must have unique non-empty names.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameterCollection.#ctor(C1.C1Preview.DataBinding.Query)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.QueryParameterCollection" /> class.
            </summary>
      <param name="owner">The <see cref="T:C1.C1Preview.DataBinding.Query" /> object which is the owner of the current collection.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameterCollection.Add(C1.C1Preview.DataBinding.QueryParameter)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> object to the current collection.
            </summary>
      <param name="parameter">The <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> object to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.Query" /> object containing the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.Int32)">
      <summary>
            Gets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.String)">
      <summary>
            Gets the parameter with the specified name.
            </summary>
      <param name="name">The name of the parameter.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.QueryParameter" /> object with the specified <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />,
            or <b>null</b> if a parameter with the specified name was not found.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Sorting">
      <summary>
            Represents the collection of sort expressions (see <see cref="T:C1.C1Preview.DataBinding.SortExpression" />)
            associated with a data-bound object in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <remarks>
            This is the type of the <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting" /> proprty
            of the <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> class.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Sorting.AssignFrom(C1.C1Preview.DataBinding.Sorting)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DataBinding.Sorting" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Sorting.Defined">
      <summary>
            Gets a value indicating whether any sort expressions are defined on the current object.
            </summary>
      <remarks>
            This property returns <b>true</b> if the <see cref="P:C1.C1Preview.DataBinding.Sorting.Expressions" /> collection is not empty,
            <b>false</b> otherwise.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Sorting.Expressions">
      <summary>
            Gets the collection of <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> objects defined on the current object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortDirectionEnum">
      <summary>
            Defines the types of sorting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Ascending">
      <summary>
            Sorts in ascending order.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Descending">
      <summary>
            Sorts in descending order.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortExpression">
      <summary>
            Represents an expression used to sort data, and the direction of the sort.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.#ctor(System.String,C1.C1Preview.DataBinding.SortDirectionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> class,
            specifying the sort expression and direction.
            </summary>
      <param name="expression">The sort expression.</param>
      <param name="direction">The sort direction.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.AssignFrom(C1.C1Preview.DataBinding.SortExpression)">
      <summary>
            Copies <see cref="P:C1.C1Preview.DataBinding.SortExpression.Expression" /> and <see cref="P:C1.C1Preview.DataBinding.SortExpression.Direction" /> properties from another <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> object.
            (Note that the <see cref="P:C1.C1Preview.IOwnedCollectionItem.Owner" /> property is not copied.)
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> object
            (the <see cref="P:C1.C1Preview.IOwnedCollectionItem.Owner" /> property is not cloned).
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.Expression">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DataBinding.Expression" /> object defining the expression.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.Direction">
      <summary>
            Gets or sets the sort direction.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.ExpressionText">
      <summary>
            Gets or sets the text of the sorting expression (<see cref="P:C1.C1Preview.DataBinding.SortExpression.Expression" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortExpressionCollection">
      <summary>
            Collection of SortExpression objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DataBinding.SortExpressionCollection" /> class.
            </summary>
      <param name="owner">The owner of the current collection.</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.Add(System.String)">
      <summary>
            Adds an ascending <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> specified by the expression text
            to the current collection.
            </summary>
      <param name="expression">The sort expression text.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> object that was created and added to the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.Add(System.String,C1.C1Preview.DataBinding.SortDirectionEnum)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> specified by the expression text and sort direction
            to the current collection.
            </summary>
      <param name="expression">The sort expression text.</param>
      <param name="sortDirection">The sort direction.</param>
      <returns>The <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> object that was created and added to the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.Add(C1.C1Preview.DataBinding.SortExpression)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> object to the current collection.
            </summary>
      <param name="expression">The <see cref="T:C1.C1Preview.DataBinding.SortExpression" /> object to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpressionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.Export.C1dxExportProvider">
      <summary>
            Represents a <see cref="T:C1.C1Preview.C1PrintDocument" />'s native C1DX format <see cref="T:C1.C1Preview.Export.ExportProvider" />.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by a <see cref="T:C1.C1Preview.Export.C1dxExporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported
            by a <see cref="T:C1.C1Preview.Export.C1dxExporter" />.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExportProvider.NewExporter">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.Export.C1dxExporter" />.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 1.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.FormatName">
      <summary>
            Gets a short description of the C1DX export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "c1dx".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit the export options by default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dxExporter">
      <summary>
            Represents an object that can be used to export a document to C1DX format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.C1dOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExporter.C1DocumentFormat">
      <summary>
            Overridden.
            Gets a <see cref="T:C1.C1Preview.C1DocumentFormatEnum" /> value that determines the format used to save the document.
            This implementation returns <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1dx" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.C1dxExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlOptionsForm">
      <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.HtmlExporter" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.HasOutlines">
      <summary>
            Gets a value indicating whether the associated document contains outline entries.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.ImageFolder">
      <summary>
            Gets or sets the folder used to save image files.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.Scaling">
      <summary>
            Gets or sets the scaling factor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.PagePerFile">
      <summary>
            Gets or sets a value indicating whether a separate HTML page should be generated
            for each page of the source document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.GeneratePageSeparators">
      <summary>
            Gets or sets a value indicating whether to generate page separator lines
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.GenerateOutline">
      <summary>
            Gets or sets a value indicating whether to generate the outline.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.GeneratePageLinks">
      <summary>
            Gets or sets a value indicating whether to generate hyperlinks to individual pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.LinksLocation">
      <summary>
            Gets or sets the location of the generated hyperlinks.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ImagesOptionsForm">
      <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.ImageExporter" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ImagesOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.Forms.ProgressForm">
      <summary>
            Represents a form that can be used to show printing or export progress.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Forms.ProgressForm" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.DoExport(C1.C1Preview.Export.Exporter,System.String)">
      <summary>
            Performs export to a disk file, using a new instance of <see cref="T:C1.C1Preview.Forms.ProgressForm" /> to show operation progress.
            </summary>
      <param name="exporter">The exporter to use.</param>
      <param name="fileName">The output file name.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.DoExport(C1.C1Preview.Export.Exporter,System.IO.Stream)">
      <summary>
            Performs export to a stream, using a new instance of <see cref="T:C1.C1Preview.Forms.ProgressForm" /> to show operation progress.
            </summary>
      <param name="exporter">The exporter to use.</param>
      <param name="stream">The output stream.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.DoPrint(C1.C1Preview.C1PrintManager,System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
      <summary>
            Prints a document, using a new instance of <see cref="T:C1.C1Preview.Forms.ProgressForm" /> to show operation progress.
            </summary>
      <param name="printManager">The print manager to use.</param>
      <param name="printerSettings">The printer settings.</param>
      <param name="defaultPageSettings">The default page settings.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Export(C1.C1Preview.Export.Exporter,System.String)">
      <summary>
            Performs export to a disk file, using the current <see cref="T:C1.C1Preview.Forms.ProgressForm" /> to show operation progress.
            </summary>
      <param name="exporter">The exporter to use.</param>
      <param name="fileName">The output file name.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Export(C1.C1Preview.Export.Exporter,System.IO.Stream)">
      <summary>
            Performs export to a stream, using the current <see cref="T:C1.C1Preview.Forms.ProgressForm" /> to show operation progress.
            </summary>
      <param name="exporter">The exporter to use.</param>
      <param name="stream">The output stream.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Print(C1.C1Preview.C1PrintManager,System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
      <summary>
            Prints a document, using the current <see cref="T:C1.C1Preview.Forms.ProgressForm" /> to show operation progress.
            </summary>
      <param name="printManager">The print manager to use.</param>
      <param name="printerSettings">The printer settings.</param>
      <param name="defaultPageSettings">The default page settings.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Preview.EmfOutlineHeader">
      <summary>
            Contains data describing an outline entry extracted from a metafile
            comment record created by C1Report or compatible (using the "%PDFHdr|" prefix).
            </summary>
    </member>
    <member name="M:C1.C1Preview.EmfOutlineHeader.#ctor(System.Int32,System.Int32,System.String,System.Drawing.RectangleF)">
      <summary>
            Creates a new instance of EmfOutlineHeader class.
            </summary>
      <param name="pageIdx">0-based page index.</param>
      <param name="level">Outline level.</param>
      <param name="text">Entry text.</param>
      <param name="rect">Entry rectangle.</param>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.PageIdx">
      <summary>
            Gets or sets the 0-based page index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Level">
      <summary>
            Gets or sets the entry outline level.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Text">
      <summary>
            Gets or sets the entry text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Rectangle">
      <summary>
            Gets or sets the entry rectangle.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintController">
      <summary>
            The .NET PreviewPrintController creates metafiles with gdi+ commands.
            This is bad for us because the format of such emf records is not
            documented, and so we can not e.g. search for text. But, if we just
            use .NET PrintController, the page generation process slows down by
            a factor of 2 (at least). The only way to avoid this is to inherit
            from PreviewPrintController but provide our own graphics, based on
            emf-only metafiles. Another caveat is which base methods to call and
            which not. Invoking base.OnStartPrint/base.OnEndPrint is necessary
            because if we do not do that performance is the same as with the
            regular PrintController (i.e. bad). OTOH, invoking base.OnStartPage/
            base.OnEndPage looks like wasting time (as we can not use the provided
            graphics anyway) and what is more, for big documents at some point
            seems to drain resources and causes our creation of metailes to fail.
            So what is below seems to be the only combination that works. Still,
            the whole printing stuff in .NET is a mess. --dima.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExportProvider">
      <summary>
            The abstract base class describing an export format
            that performs export by iterating over the list of metafiles representing pages of a document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by the associated <see cref="T:C1.C1Preview.Export.Exporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1PrintDocument" />, <see cref="T:C1.C1Report.C1Report" />,
            <see cref="T:System.Drawing.Printing.PrintDocument" />, or a collection of <see cref="T:System.Drawing.Imaging.Metafile" /> objects,
            and <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported by the current export provider.
            Note that if the type is array, this method returns <b>false</b> even though an array of metafiles
            can be exported by the associated exporter. Use <see cref="M:C1.C1Preview.Export.ComplexExportProvider.CanExportObject(System.Object)" /> to get a definitive value.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExporter">
      <summary>
            The abstract base class for all exporter classes associated with export providers
            derived from <see cref="T:C1.C1Preview.Export.ComplexExportProvider" />.
            Non-abstract classes derived from this class must override
            the <see cref="M:C1.C1Preview.Export.Exporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)" /> method.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.ComplexExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.ComplexExporterOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.ComplexExporterOptionsForm" /> object to copy the options from.</param>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument">
      <summary>
            Gets or sets a value indicating whether the document should be saved in Office12 Open XML format.
            </summary>
      <value>
        <b>true</b> if document should be exported in Office12 format, <b>false</b> otherwise.</value>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.Paginated">
      <summary>
            Gets or sets a value indicating whether the exported document
            should preserve the pagination of the original document.
            </summary>
      <value>
        <b>true</b> if pagination should be preserved, <b>false</b> otherwise.</value>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.FixedPositioning">
      <summary>
            Gets or sets a value indicating whether the exported document
            should exactly match the appearance of the original document.
            Usually this can only be achieved at the cost of preserving
            the logical structure and/or ease of editing of the exported document.
            </summary>
      <value>
        <b>true</b> if exact appearance should be preserved, <b>false</b> otherwise.</value>
    </member>
    <member name="T:C1.C1Preview.Export.EmfOptionsForm">
      <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.EmfExporter" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Export.EmfOptionsForm.EmfPlusToEmfOnly">
      <summary>
            Gets or sets a value indicating whether <b>EmfPlus</b> metafiles should be converted to <b>EmfOnly</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfOptionsForm">
      <summary>
            Represents a form for editing the export options used by an <see cref="T:C1.C1Preview.Export.PdfExporter" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.UseCompression">
      <summary>
            Gets or sets a value indicating whether to use compression.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.PdfACompatible">
      <summary>
            Gets or sets a value indicating whether to generate PDF/A compatible document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.EmbedTrueTypeFonts">
      <summary>
            Gets or sets a value indicating whether to embed embeddable fonts used in the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityOwnerPassword">
      <summary>
            Gets or sets the owner password.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityUserPassword">
      <summary>
            Gets or sets the user password.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.Encryption">
      <summary>
            Gets or sets the type of encryption to use for a password-protected PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowPrint">
      <summary>
            Gets or sets a value indicating whether the resulting document can be printed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowCopyContent">
      <summary>
            Gets or sets a value indicating whether the content of the resulting document can be copied.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowEditContent">
      <summary>
            Gets or sets a value indicating whether the content of the resulting document can be edited.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowEditAnnotations">
      <summary>
            Gets or sets a value indicating whether the annotations in the resulting document can be edited.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.FormFields">
      <summary>
            Gets or sets a value indicating whether input fields in the original document
            should be exported as Acrobat form fields.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.ViewerPreferences">
      <summary>
            Gets or sets viewer preferences.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.Exporter">
      <summary>
            Gets the associated exporter.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExportProvider">
      <summary>
            Describes export to HTML.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.HtmlExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by a <see cref="T:C1.C1Preview.Export.HtmlExporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported by the current export provider.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.NewExporter">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.Export.HtmlExporter" />.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
            Tests whether <see cref="T:C1.C1Preview.Export.HtmlExporter" />
            can handle the specified type of document pages' range.
            This implementation returns <b>true</b>.
            </summary>
      <param name="range">The type of range to test.</param>
      <returns>
        <b>true</b>.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 40.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.FormatName">
      <summary>
            Gets a short description of the HTML export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "htm".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>false</b> (export to stream is not supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.CanShowOptions">
      <summary>
            Gets a value indicating whether the associated <see cref="T:C1.C1Preview.Export.HtmlExporter" />
            can show a dialog allowing the user to edit the export options.
            This implementation returns <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.HtmlOptionsForm" /> type.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Gets a value indicating
            whether, if a <see cref="T:C1.C1Preview.C1PrintDocument" /> is to be exported,
            it should be generated before exporting.
            This implementation returns <b>true</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter">
      <summary>
            Represents an object that can be used to export a <see cref="T:C1.C1Preview.C1PrintDocument" /> object to HTML.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.HtmlExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.HtmlExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.HtmlOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.HtmlOptionsForm" /> object to copy the options from.</param>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Not supported for this class.
            </summary>
      <param name="pageImage">
      </param>
      <param name="metafileInfo">
      </param>
      <param name="pageNo">
      </param>
      <param name="firstPage">
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.Reset">
      <summary>
            Resets the internal state of the exporter.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.Clear">
      <summary>
            Resets the internal state of the exporter and all its public properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.InternalExport">
      <summary>
            Performs export to a disk file.
            If <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" /> has not been set, this method returns immediately.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ImageFolder">
      <summary>
            Gets or sets the path name of the folder where images are to be saved.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GenerateOutline">
      <summary>
            Gets or sets a value indicating whether to create a frame containing the document's outline.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.PagePerFile">
      <summary>
            Gets or sets a value indicating whether to export each page
            of the document into a separate file.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageLinks">
      <summary>
            Gets or sets a value indicating whether to generate hyperlinks to individual pages.
            Note that this only works if <see cref="!:Paginated" /> is also <b>true</b>.
            </summary>
      <seealso cref="P:C1.C1Preview.Export.HtmlExporter.ExportNavBar" />
      <seealso cref="!:Paginated" />
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageSeparators">
      <summary>
            Gets or sets a value indicating whether to delimit individual pages
            of the original document with horizontal lines.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.LinksLocation">
      <summary>
            Gets or sets the location of hyperlinks on the generated page(s)
            (the hyperlinks can contain outline entries or page numbers).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.Scaling">
      <summary>
            Gets or sets the scaling factor applied to all elements
            of the resulting HTML document, in percent.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ExportNavBar">
      <summary>
            Gets or sets a template used to create a navigation bar with page numbers.
            (Note: both <see cref="!:Paginated" /> and <see cref="P:C1.C1Preview.Export.HtmlExporter.GeneratePageLinks" /> must be set to <b>true</b> for this to work).
            <para>
            The format of the string is as follows:
            up to four "%s" strings are replaced with links to the first, previous, next and last pages,
            correspondingly.
            Up to two "%d" strings are replaced with the current and total page numbers.
            </para>
            For instance:
            <para>
            "&lt;a %s&gt;first&lt;/a&gt; &lt;a %s&gt;prev&lt;/a&gt; Page %d of %d &lt;a %s&gt;next&lt;/a&gt; &lt;a %s&gt;last&lt;/a&gt;"
            </para></summary>
      <seealso cref="!:Paginated" />
      <seealso cref="P:C1.C1Preview.Export.HtmlExporter.GeneratePageLinks" />
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.PreserveExactHeight">
      <summary>
            Gets or sets a value indicating whether export should
            try to preserve the exact original height of all elements.
            Generally, setting this property to <b>false</b> makes the resulting
            HTML document more flexible.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.MaxHorzPageLinks">
      <summary>
            Gets or sets the maximum number of page hyperlinks in a row.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.HtmlExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum">
      <summary>
            Defines the location of hyperlinks in the generated HTML pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.None">
      <summary>
            Hyperlinks are not generated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopPage">
      <summary>
            Hyperlinks are located at the top of pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.LeftFrame">
      <summary>
            Hyperlinks are located in the left frame.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.RightFrame">
      <summary>
            Hyperlinks are located in the right frame.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopFrame">
      <summary>
            Hyperlinks are located in the top frame.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.BottomFrame">
      <summary>
            Hyperlinks are located in the bottom frame.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter.LinksModeEnum">
      <summary>
            Defines the hyperlink generation mode.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.None">
      <summary>
            No hyperlinks are generated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.DocumentOutline">
      <summary>
            The generated hyperlinks are based on the document outline.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.PageNumbers">
      <summary>
            The generated hyperlinks point to individual pages.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.DocumentInfoForm">
      <summary>
            Represents a <see cref="T:System.Windows.Forms.Form" /> that allows a user to edit <see cref="T:C1.C1Preview.DocumentInfo" />
            associated with a document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.SetDocumentInfo(C1.C1Preview.DocumentInfo)">
      <summary>
            Copies the data from a <see cref="T:C1.C1Preview.DocumentInfo" /> object to properties of the current <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />.
            </summary>
      <param name="documentInfo">The <see cref="T:C1.C1Preview.DocumentInfo" /> to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.BuildDocumentInfo">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.DocumentInfo" /> object, and copies data
            from the current <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" /> into that object.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.DocumentInfo" /> object containing data from the current form.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.CreateForm(System.Type,System.Type)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" /> form,
            or form of a type derived from <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />.
            </summary>
      <param name="customType">The custom form type (must be <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" /> or derived from it).</param>
      <param name="defaultType">The default form type (used if <paramref name="customType" /> is <b>null</b>,
            must be <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" /> or derived from it).</param>
      <returns>The newly created form.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Forms.DocumentInfoForm.SupportedFields">
      <summary>
            Gets or sets the combination of <see cref="T:C1.C1Preview.DocumentInfoFields" /> identifying <see cref="T:C1.C1Preview.DocumentInfo" /> fields supported by this form.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.OutputRangeForm">
      <summary>
            Represents a form that can be used to enter a range of pages.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Forms.OutputRangeForm" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.SetOutputRange(C1.C1Preview.OutputRange)">
      <summary>
            Assigns the output range.
            </summary>
      <param name="range">The range to assign.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.BuildOutputRange">
      <summary>
            Builds an output range based on the input data.
            </summary>
      <returns>The new range.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.CreateForm(System.Type,System.Type)">
      <summary>
            Creates an instance of the <see cref="T:C1.C1Preview.Forms.OutputRangeForm" /> or derived type.
            </summary>
      <param name="customType">Custom form type or <b>null</b>.</param>
      <param name="defaultType">Default form type.</param>
      <returns>The newly created <see cref="T:C1.C1Preview.Forms.OutputRangeForm" />.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowAll">
      <summary>
            Gets or sets a value indicating whether the "allow all pages" option is available.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowPageRange">
      <summary>
            Gets or sets a value indicating whether the "page range" option is available.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowPageList">
      <summary>
            Gets or sets a value indicating whether the "page list" option is available.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowInverted">
      <summary>
            Gets or sets a value indicating whether the "inverted list" option is available.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.MaxPageNumber">
      <summary>
            Gets or sets the maximum page number.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentLocation">
      <summary>
            Represents a position within a generated document
            as a combination of the page index and the area on that page.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DocumentLocation" /> class.
            </summary>
      <param name="pageIndex">The 0-based page index.</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(System.Int32,System.Int32,C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DocumentLocation" /> class.
            </summary>
      <param name="pageNo">The logical page number.</param>
      <param name="pageIndex">The 0-based page index.</param>
      <param name="bounds">The bounds on page (specified in <paramref name="units" />).</param>
      <param name="units">The units used to specify <paramref name="bounds" />.</param>
      <param name="dpi">The resolution if <paramref name="units" /> is pixels.</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(C1.C1Preview.C1Page,C1.C1Preview.RectangleD)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DocumentLocation" /> class.
            </summary>
      <param name="page">The target document page.</param>
      <param name="bounds">The target bounds on page.</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(C1.C1Preview.C1Page)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DocumentLocation" /> class.
            </summary>
      <param name="page">The target document page.</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(C1.C1Preview.IDocumentLocation)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.DocumentLocation" /> class.
            </summary>
      <param name="documentLocation">The target location.</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.Clone">
      <summary>
            Clones the current <see cref="T:C1.C1Preview.DocumentLocation" />.
            </summary>
      <returns>The copy of the current document location.</returns>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.PageIndex">
      <summary>
            Gets the target 0-based page index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.PageNo">
      <summary>
            Gets the target logical page number.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.Bounds">
      <summary>
            Gets the bounds on the target page, in <see cref="P:C1.C1Preview.DocumentLocation.Units" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.Units">
      <summary>
            Units used by <see cref="P:C1.C1Preview.DocumentLocation.Bounds" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.Dpi">
      <summary>
            Unit resolution if <see cref="P:C1.C1Preview.DocumentLocation.Units" /> is in pixels.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderEmptyFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderEmpty" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderEmptyFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderEmptyFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderEmptyFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="height">
      </param>
      <param name="width">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderEmptyFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderEmpty" /> which produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderC1Printable">
      <summary>
            Represents an external object that can be seamlessly rendered in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            See <b>remarks</b> for details.
            </summary>
      <remarks>
            The object that this class renders is specified by the value of the <see cref="P:C1.C1Preview.RenderC1Printable.Object" /> property.
            For an object to be assignable to that property, it must expose either of the following two instance methods:
            <list type="bullet"><item><term>Image C1PrintableGetImage()</term><description>If this method is implemented, it should return an <see cref="T:System.Drawing.Image" />
            representing the object to be rendered.</description></item><item><term>Stream C1PrintableGetTree()</term><description>If this method is implemented, it should return a <see cref="T:System.IO.Stream" />
            containing a serialized <see cref="T:C1.C1Preview.C1PrintDocument" /> representing the object to be rendered.
            For instance, such stream can be created using the <see cref="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream)" /> method.
            </description></item></list>
            To implement a <b>C1PrintableGetTree()</b> method on a class, follow these steps:
            <list type="bullet"><item>
            Add a method <code>public Stream C1PrintableGetTree()</code> to your class;
            </item><item>
            In that method's body, create a <see cref="T:C1.C1Preview.C1PrintDocument" />, and render a representation of your class
            into the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of that document, using the available render objects
            such as <see cref="T:C1.C1Preview.RenderText" />, <see cref="T:C1.C1Preview.RenderTable" /> and so on.
            </item><item>
            At the end of that method, create a new <see cref="T:System.IO.MemoryStream" /> object,
            call the <see cref="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream)" /> method to save your document to that memory stream,
            and return it.
            </item></list>
            You will then be able to assign an instance of your class to the <see cref="P:C1.C1Preview.RenderC1Printable.Object" />
            property of a <see cref="T:C1.C1Preview.RenderC1Printable" /> object, and insert that object anywhere
            in a <see cref="T:C1.C1Preview.C1PrintDocument" /> where a standard render object may occur.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderC1Printable" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RenderC1Printable" /> class,
            and assigns the <see cref="P:C1.C1Preview.RenderC1Printable.Object" /> property.
            </summary>
      <param name="obj">The object to assign to the <see cref="P:C1.C1Preview.RenderC1Printable.Object" /> property.</param>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.ShouldSerializeChildren">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Children" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.RenderObject.Children" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetDefaultFlags">
      <summary>
            Gets the default flags for this type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetDefaultClip">
      <summary>
            Gets the default value for the <see cref="P:C1.C1Preview.RenderObject.Clip" /> property.
            </summary>
      <returns>False.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetTreeBinary">
      <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo" /> representing the "C1PrintableGetTreeBinary" method.
            </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetTree">
      <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo" /> representing the "C1PrintableGetTree" method.
            </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetImage">
      <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo" /> representing the "C1PrintableGetImage" method.
            </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderObject" /> to the current object.
            Calls the base <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> method.
            If <paramref name="source" /> is a <see cref="T:C1.C1Preview.RenderC1Printable" />, also copies <see cref="T:C1.C1Preview.RenderC1Printable" />-specific properties.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignDataBinding">Indicates whether the <see cref="N:C1.C1Preview.DataBinding" /> property should be copied.</param>
      <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Children" /> collection should be copied.</param>
      <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1Preview.RenderObject.Anchors" /> collection should be copied.</param>
      <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Hyperlink" /> property should be copied.</param>
      <param name="assignName">Indicates whether the <see cref="P:C1.C1Preview.RenderObject.Name" /> property should be copied.</param>
      <param name="assignStyle">Indicates whether the <see cref="T:C1.C1Preview.Style" /> property should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GenerateInnerRenderObjects">
      <summary>
            Forces the generation of inner render object or objects representing the 
            object being printed (specified by the <see cref="P:C1.C1Preview.RenderC1Printable.Object" /> property).
            The generated render objects can be accessed via <see cref="P:C1.C1Preview.RenderObject.Children" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.ResetInnerRenderObjects">
      <summary>
            Removes the inner render object or objects representing the object being printed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1Printable.Object">
      <summary>
            Gets or sets the object to render.
            The object must implement either a
            <b>Image C1PrintableGetImage()</b> or a <b>Stream C1PrintableGetTree()</b>
            method accessible via reflection.
            For details, see the <b>remarks</b> section in <see cref="T:C1.C1Preview.RenderC1Printable" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1Printable.IgnoreObjectPageLayout">
      <summary>
            Gets or sets a value indicating whether the page layout
            specified on the document returned by the <b>Stream C1PrintableGetTree()</b> method
            should be ignored.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderC1Printable.Object" />
    </member>
    <member name="T:C1.C1Preview.RenderC1PrintableFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderC1Printable" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1PrintableFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderC1Printable" /> which produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTocItemFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderTocItem" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItemFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTocItem" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItemFragment.RenderToc">
      <summary>
            Gets the <see cref="P:C1.C1Preview.RenderTocItemFragment.RenderToc" /> containing the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataBindingExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataBindingExpression.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject.DataBinding">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject.Fields">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject.Parent">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.GetScriptObjectType">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.FindScriptObject(C1.C1Preview.DataBinding.IDBDataHandler,System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="context">
      </param>
      <param name="script">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.CreateScriptObject(C1.C1Preview.DataBinding.IDBDataHandler,System.String,System.String@)">
      <summary>
            For internal use only.
            </summary>
      <param name="context">
      </param>
      <param name="expressionText">
      </param>
      <param name="errorMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.ScriptObject">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.ScriptObject.#ctor">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.ScriptObject.Fields">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.GetScriptObjectType">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.ScriptObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.ScriptObject.RenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.ScriptObject.RenderFragment">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectExpression">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.GetScriptObjectType">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RowNumber">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RenderObject">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RenderFragment">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.Aggregates">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.DataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.Fields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.ColDataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.ColFields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RowDataBinding">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RowFields">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.ScriptLanguageEnum">
      <summary>
            Enumerates the languages which can be used in <see cref="T:C1.C1Preview.C1PrintDocument" /> scripts
            (see <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" />).
            </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.VB">
      <summary>
        <b>VB.NET</b> is used as the scripting language.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.C1Report">
      <summary>
            Native <b>C1Report</b> scripting language is used.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.CSharp">
      <summary>
        <b>C#</b> is used as the scripting language.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.ScriptingOptions">
      <summary>
            Represents the various options controlling scripts and expressions
            used in a <see cref="T:C1.C1Preview.C1PrintDocument" />, and specified
            by the <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" /> property.
            </summary>
      <remarks>
            Scripts and expressions can be used in various contexts in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            While the scripting language and the set of available assemblies and namespaces
            for all those scripts and expressions are defined by the properties of the
            document's <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" />,
            the sets of built-in variable identifiers available to a script or expression
            depend on the context in which it is defined.
            <para>
            The following tables list the possible contexts, and the identifiers
            that can be used in scripts and expressions to access context-dependent
            document data:
            </para><list type="bullet"><item><term>Text expressions</term><description>
            In expressions specified in square brackets in texts of
            <see cref="T:C1.C1Preview.RenderText" />, <see cref="T:C1.C1Preview.RenderParagraph" /> or <see cref="T:C1.C1Preview.RenderField" /> objects,
            the following context-dependent identifiers can be used:
            
            <list type="table"><listheader><term>Id (type)</term><description>Meaning</description></listheader><item><term><b>Document</b> (<see cref="T:C1.C1Preview.C1PrintDocument" />)</term><description>The current document.</description></item><item><term><b>RenderObject</b> (<see cref="T:C1.C1Preview.RenderObject" />)</term><description>The current render object.</description></item><item><term><b>RenderFragment</b> (<see cref="T:C1.C1Preview.RenderFragment" />)</term><description>The current render fragment.</description></item><item><term><b>Page</b> (<see cref="T:C1.C1Preview.C1Page" />)</term><description>The current page.</description></item><item><term><b>PageNo</b> (<see cref="T:System.Int32" />)</term><description>The current 1-based page number.</description></item><item><term><b>PageCount</b> (<see cref="T:System.Int32" />)</term><description>The total page count.</description></item><item><term><b>PageX</b> (<see cref="T:System.Int32" />)</term><description>The current 1-based horizontal page number.</description></item><item><term><b>PageXCount</b> (<see cref="T:System.Int32" />)</term><description>The maximum horizontal page count.</description></item><item><term><b>PageY</b> (<see cref="T:System.Int32" />)</term><description>The current 1-based vertical (regular) page number.</description></item><item><term><b>PageYCount</b> (<see cref="T:System.Int32" />)</term><description>The total vertical page count.</description></item><item><term><b>Aggregates</b> (<see cref="T:C1.C1Preview.DataBinding.AggregateCollection" />)</term><description>The list of aggregates defined on the current document.</description></item><item><term><b>DataBinding</b> (<see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />)</term><description>The active databinding (may differ from the
            value of the <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property on the current
            render object, e.g. if it is not defined and parent's databinding is being used).</description></item><item><term><b>Fields</b> (<see cref="T:C1.C1Preview.DataBinding.FieldCollection" />)</term><description>A shortcut to <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Fields" /> on the active databinding.</description></item><item><term><b>RowNumber</b> (<see cref="T:System.Int32" />)</term><description>A shortcut to <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.RowNumber" /> on the active databinding.</description></item></list>
            
            (Note: while square brackets are the default for marking expressions in <b>C1PrintDocument</b> texts,
            they can be redefined via the <see cref="P:C1.C1Preview.C1PrintDocument.TagOpenParen" /> and
            <see cref="P:C1.C1Preview.C1PrintDocument.TagCloseParen" /> properties.).</description></item><item><term><see cref="T:C1.C1Preview.DataBinding.C1DataBinding" /> expressions</term><description>
            In expressions used in any of 
            <see cref="P:C1.C1Preview.DataBinding.Grouping.Expressions" />,
            <see cref="P:C1.C1Preview.DataBinding.Sorting.Expressions" />,
            <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Filters" />,
            <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText" />,
            the following context-dependent identifiers are available:
            
            <list type="table"><listheader><term>Id (type)</term><description>Meaning</description></listheader><item><term><b>Document</b> (<see cref="T:C1.C1Preview.C1PrintDocument" />)</term><description>The current document.</description></item><item><term><b>DataBinding</b> (<see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />)</term><description>The current databinding.</description></item><item><term><b>Fields</b> (<see cref="T:C1.C1Preview.DataBinding.FieldCollection" />)</term><description>The <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Fields" /> collection of the current databinding.</description></item><item><term><b>Parent</b> (<see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />)</term><description>The parent databinding. Normally this is the most nested databinding defined
            on a parent of the object containing the current databinding.
            For a <see cref="T:C1.C1Preview.TableVectorGroup" />, this may be the databinding defined on another
            row/column group if that group encloses the current group (i.e. contains all its rows/columns).</description></item></list></description></item><item><term><see cref="T:C1.C1Preview.DataBinding.DataSetField" /> expression</term><description>
            In expressions used to specify calculated data set fields
            (<see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" />),
            the following context-dependent identifiers are available:
            
            <list type="table"><listheader><term>Id (type)</term><description>Meaning</description></listheader><item><term><b>Document</b> (<see cref="T:C1.C1Preview.C1PrintDocument" />)</term><description>The current document.</description></item><item><term><b>Fields</b> (<see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />)</term><description>The <see cref="P:C1.C1Preview.DataBinding.DataSet.Fields" /> collection of the current data set.</description></item></list></description></item><item><term>Document scope scripts</term><description>
            In scripts assigned to
            <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" />,
            <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" />,
            <see cref="P:C1.C1Preview.C1PrintDocument.PageConfigureScript" /> or
            <see cref="P:C1.C1Preview.C1PrintDocument.ErrorScript" />,
            the following context-dependent identifiers are available:
            
            <list type="table"><listheader><term>Id (type)</term><description>Meaning</description></listheader><item><term><b>Document</b> (<see cref="T:C1.C1Preview.C1PrintDocument" />)</term><description>The current document.</description></item><item><term><b>Tags</b> (<see cref="T:C1.C1Preview.TagCollection" />)</term><description>The <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection of the current document
            (this is a shortcut to <b>Document.Tags</b>).</description></item></list></description></item><item><term>Render object scope scripts</term><description>
            In scripts assigned to
            <see cref="P:C1.C1Preview.RenderObject.ObjectResolvedScript" />,
            the following context-dependent identifiers are available:
            
            <list type="table"><listheader><term>Id (type)</term><description>Meaning</description></listheader><item><term><b>Document</b> (<see cref="T:C1.C1Preview.C1PrintDocument" />)</term><description>The current document.</description></item><item><term><b>RenderObject</b> (<see cref="T:C1.C1Preview.RenderObject" />)</term><description>The current render object.</description></item><item><term><b>Tags</b> (<see cref="T:C1.C1Preview.TagCollection" />)</term><description>The <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection of the current document
            (this is a shortcut to <b>Document.Tags</b>).</description></item></list></description></item><item><term>Render fragment scope scripts</term><description>
            In scripts assigned to
            <see cref="P:C1.C1Preview.RenderObject.FragmentResolvedScript" />,
            the following context-dependent identifiers are available:
            
            <list type="table"><listheader><term>Id (type)</term><description>Meaning</description></listheader><item><term><b>Document</b> (<see cref="T:C1.C1Preview.C1PrintDocument" />)</term><description>The current document.</description></item><item><term><b>RenderObject</b> (<see cref="T:C1.C1Preview.RenderObject" />)</term><description>The current render object.</description></item><item><term><b>RenderFragment</b> (<see cref="T:C1.C1Preview.RenderFragment" />)</term><description>The fragment that has resolved.</description></item><item><term><b>Tags</b> (<see cref="T:C1.C1Preview.TagCollection" />)</term><description>The <see cref="P:C1.C1Preview.C1PrintDocument.Tags" /> collection of the current document
            (this is a shortcut to <b>Document.Tags</b>).</description></item></list></description></item></list></remarks>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ShouldSerialize">
      <summary>
            Indicates whether the current object should be serialized.
            </summary>
      <returns>
        <b>true</b> if the current object should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ShouldSerializeExternalAssemblies">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ShouldSerializeNamespaces">
      <summary>
            Indicates whether the <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" /> property should be serialized.
            </summary>
      <returns>
        <b>true</b> if <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" /> should be serialized, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ResetExternalAssemblies">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" /> property to its default value.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ResetNamespaces">
      <summary>
            Resets the <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" /> property to its default value.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.Reset">
      <summary>
            Resets all properties of the current <see cref="T:C1.C1Preview.Scripting.ScriptingOptions" /> object to their default values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.AssignFrom(C1.C1Preview.Scripting.ScriptingOptions)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.Scripting.ScriptingOptions" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.Initialize(System.String[],System.String[])">
      <summary>
            Initializes the current <see cref="T:C1.C1Preview.Scripting.ScriptingOptions" /> object witih the specified
            external assemblies and namespaces.
            </summary>
      <param name="externalAssemblies">An array of assembly names that are added to <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" /> on the current object.</param>
      <param name="namespaces">An array of namespace names that are added to <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" /> on the current object.</param>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies">
      <summary>
            Gets the list of external assemblies that can be used in scripts in the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces">
      <summary>
            Gets the list of namespaces that can be used in scripts in the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Language">
      <summary>
            Gets or sets a value indicating which language is used in scripts attached to the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.TempPath">
      <summary>
            Gets or sets the directory which will be used to hold temporary files generated during scripts compiling.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SystemTagCollection">
      <summary>
            Represents a read-only collection of system tags
            (objects derived from <see cref="T:C1.C1Preview.TagSys" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.SystemTagCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.C1Preview.TagSys" /> in the current collection by its index.
            </summary>
      <param name="index">The index of the <see cref="T:C1.C1Preview.TagSys" /> in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.TagSys" /> with the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.SystemTagCollection.Item(System.String)">
      <summary>
            Gets a <see cref="T:C1.C1Preview.TagSys" /> in the current collection by its <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />.
            </summary>
      <param name="tagName">The name of the <see cref="T:C1.C1Preview.TagSys" />.</param>
      <returns>The <see cref="T:C1.C1Preview.TagSys" /> with the specified name.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.#ctor(System.Drawing.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.EmbeddedFont" /> class.
            </summary>
      <param name="font">The <see cref="T:System.Drawing.Font" /> to embed.</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(System.String,System.Boolean)">
      <summary>
            Adds unique glyphs or glyph ranges from the specified string to the current <see cref="T:C1.C1Preview.EmbeddedFont" />.
            The ranges recognized by this method are represented by the <see cref="T:C1.C1Preview.UnicodeRangeEnum" /> enumeration.
            </summary>
      <param name="text">The string to add the glyphs from.</param>
      <param name="includeUnicodeRanges">
            If <b>true</b>, for each unique glyph in <paramref name="text" />, the whole Unicode range containing the glyph 
            (such as "Basic Latin" or "Cyrillic") is added. If <b>false</b>, only the glyph itself is added.
            </param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(System.String)">
      <summary>
            Adds unique glyphs from the specified string to the current <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
      <param name="text">The string to add the glyphs from.</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(System.Int32,System.Int32)">
      <summary>
            Adds a range of glyphs to the current <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
      <param name="first">The first glyph in the range to add.</param>
      <param name="last">The last glyph in the range to add.</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(C1.C1Preview.UnicodeRangeEnum)">
      <summary>
            Adds all glyphs from the specified range to the current <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
      <param name="unicodeRange">The range to add.</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(C1.Util.CodeRanges)">
      <summary>
            Adds all <see cref="T:C1.Util.CodeRange" /> objects in codeRanges to the current <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
      <param name="codeRanges">
        <see cref="T:C1.Util.CodeRange" /> to add.</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.GetFontFamily">
      <summary>
            Get the <see cref="T:System.Drawing.FontFamily" /> object describing the current <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
      <returns>Returns the created FontFamily object.</returns>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.FontName">
      <summary>
            Gets the name of the current embedded font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CharSet">
      <summary>
            Gets the charset of the current embedded font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Bold">
      <summary>
            Gets a value indicating whether the current embedded font is <b>bold</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Italic">
      <summary>
            Gets a value indicating whether the current embedded font is <i>italic</i>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Style">
      <summary>
            Gets a style of current embedded font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CanEmbed">
      <summary>
            Gets a value indicating whether the license for the current font allows embedding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.MustObfuscate">
      <summary>
            Gets a value indicating whether the license for the current font requires obfuscating when embedded.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CanSubset">
      <summary>
            Gets a value indicating whether the license for the current font allows subsetting when embedded.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.MustRestrict">
      <summary>
            Gets a value indicating whether the license for the current font restricts embedding to print and preview uses.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.ShouldObfuscate">
      <summary>
            Gets a value indicating whether the current embedded should be obfuscated when embedded.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.FontData">
      <summary>
            Gets an array of bytes containing the embedded font's data.
            This property can be null if the font was created during document generation,
            i.e. if the current object represents a font that was not loaded and currently exists in the system.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Initialized">
      <summary>
            Gets a value indicating whether the current object has produced the <see cref="T:System.Drawing.FontFamily" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CodeRanges">
      <summary>
            Gets a <see cref="P:C1.C1Preview.EmbeddedFont.CodeRanges" /> collection defining set of char codes
            supported by this <see cref="T:C1.C1Preview.EmbeddedFont" /> object.
            If this collection is empty then glyphs for characters will be embedded.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Add(C1.C1Preview.EmbeddedFont)">
      <summary>
            Adds the specified <see cref="T:C1.C1Preview.EmbeddedFont" /> to the current collection.
            Throws an exception if the font is already present in the collection.
            </summary>
      <param name="embeddedFont">The <see cref="T:C1.C1Preview.EmbeddedFont" /> to add.</param>
      <returns>The index of the newly added font in the collection.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Add(System.Drawing.Font)">
      <summary>
            Builds an <see cref="T:C1.C1Preview.EmbeddedFont" /> based on the specified font, and adds it to the current collection.
            Throws an exception if the font is already present in the collection.
            </summary>
      <param name="font">The <see cref="T:System.Drawing.Font" /> to add.</param>
      <returns>The index of the newly added font in the collection.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Remove(C1.C1Preview.EmbeddedFont)">
      <summary>
            Removes the specified font from the current collection.
            </summary>
      <param name="embeddedFont">The <see cref="T:C1.C1Preview.EmbeddedFont" /> to remove.</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.IndexOf(C1.C1Preview.EmbeddedFont)">
      <summary>
            Returns the index of the specified font in the collection.
            </summary>
      <param name="embeddedFont">The <see cref="T:C1.C1Preview.EmbeddedFont" /> to search for.</param>
      <returns>The index of <paramref name="embeddedFont" /> in the current collection, or -1 if it was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindFont(System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Searches for a font with the specified name and charset,
            which exactly matches the specified bold/italic styles.
            </summary>
      <param name="name">The name of the font to search for.</param>
      <param name="charSet">The charset to search for.</param>
      <param name="bold">The bold style to search for.</param>
      <param name="italic">The italic style to search for.</param>
      <returns>The matching <see cref="T:C1.C1Preview.EmbeddedFont" />, or <b>null</b> if an exact match was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindFont(System.String,System.Int32,System.Drawing.FontStyle)">
      <summary>
            Searches for a font with the specified name and charset,
            which exactly matches the specified bold/italic styles.
            </summary>
      <param name="name">The name of the font to search for.</param>
      <param name="charSet">The charset to search for.</param>
      <param name="fontStyle">The style of the font to match.</param>
      <returns>The matching <see cref="T:C1.C1Preview.EmbeddedFont" />, or <b>null</b> if an exact match was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindBestMatch(System.String,System.Int32,System.Drawing.FontStyle)">
      <summary>
            Searches for a font with the specified name and charset,
            which is the best match for the specified bold/italic styles
            (exact bold/italic matching is not guaranteed by this method).
            </summary>
      <param name="name">The name of the font to search for.</param>
      <param name="charSet">The charset to search for.</param>
      <param name="fontStyle">The style of the font to match.</param>
      <returns>The matching <see cref="T:C1.C1Preview.EmbeddedFont" />, or <b>null</b> if a match could not be found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.BuildFont(System.String,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>
            Builds the Font object from string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFontCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.EmbeddedFont" /> at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.EmbeddedFont" /> at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.Export.PdfExportProvider">
      <summary>
            Describes export to Adobe PDF format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.PdfExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.PagesExportProvider">
      <summary>
            The abstract base class for export providers that perform export by iterating
            over the list of metafiles representing the pages of a document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported by the current export provider.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>True if the object represents a document that can be exported, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported by the current export provider.
            Note that if the type is array, this method returns <b>false</b> even though an array of metafiles
            can be exported by the associated exporter. Use <see cref="M:C1.C1Preview.Export.PagesExportProvider.CanExportObject(System.Object)" /> to get a definitive value.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" />, <see cref="T:C1.C1Report.C1Report" /> or <b>PrintDocument</b>, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
      <param name="documentRange">The <see cref="T:C1.C1Preview.OutputRangeTypeEnum" /> to test.</param>
      <returns>True if the specified range can be exported, false otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.PagesExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Gets the value indicating that the document must have been generated before being exported by the current export provider.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.PdfExporter" /> class.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.PdfExporter" />.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Overridden.
            Gets the value indicating that the document must have been generated before being exported by the current export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 10.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.FormatName">
      <summary>
            Gets a short description of the PDF export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "pdf".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.CanShowOptions">
      <summary>
            Gets a value indicating whether the associated <see cref="T:C1.C1Preview.Export.PdfExporter" />
            can show a dialog allowing the user to edit the export options.
            This implementation returns <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.PdfOptionsForm" /> type.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            This implementation returns the combination of
            <b>Author</b>,
            <b>Creator</b>,
            <b>Producer</b>,
            <b>Title</b>,
            <b>Subject</b> and
            <b>Keywords</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfSecurity">
      <summary>
            Represents security properties of a PDF document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfSecurity.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.PdfSecurity" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfSecurity.AssignFrom(C1.C1Preview.Export.PdfSecurity)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.Export.PdfSecurity" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.Encryption">
      <summary>
            Gets or sets the type of encryption used when generating a password-protected PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.UserPassword">
      <summary>
            Gets or sets the password required to open the PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.OwnerPassword">
      <summary>
            Gets or sets the password required to change permissions for the PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowPrint">
      <summary>
            Gets or sets a value indicating whether the user can print the PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowCopyContent">
      <summary>
            Gets or sets a value indicating whether the user can copy contents of the PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditContent">
      <summary>
            Gets or sets a value indicating whether the user can edit the contents of the PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditAnnotations">
      <summary>
            Gets or sets whether the user can edit annotations in the PDF document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfSecurity.EncryptionType">
      <summary>
            Specifies the type of encryption to use for a password-protected PDF document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PdfSecurity.EncryptionType.RC4_40">
      <summary>
            40-bit RC4 encryption.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PdfSecurity.EncryptionType.RC4_128">
      <summary>
            128-bit RC4 encryption.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PdfSecurity.EncryptionType.AES_128">
      <summary>
            128-bit AES encryption.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PageLayoutEnum">
      <summary>
            Specifies the page layout to be used when a PDF document is opened.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.ViewerDefault">
      <summary>
            Do not specify a layout and use the current viewer default.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.SinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.OneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.TwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.TwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PageModeEnum">
      <summary>
            Specifies how a PDF document should be displayed when opened.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.Automatic">
      <summary>
            Document outline visible if available.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.FullScreen">
      <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfViewerPreferences">
      <summary>
            Represents viewer preferences to be used when displaying a PDF document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferences.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferences.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferences.AssignFrom(C1.C1Preview.Export.PdfViewerPreferences)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.PageMode">
      <summary>
            Gets or sets a value indicating how the PDF document should be displayed when opened.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.PageLayout">
      <summary>
            Gets or sets the page layout to be used when the PDF document is opened.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.HideToolBar">
      <summary>
            Gets or sets a value indicating whether to hide the viewer toolbars when the PDF document is active.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.HideMenuBar">
      <summary>
            Gets or sets a value indicating whether to hide the viewer menu bar when the PDF document is active.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.FitWindow">
      <summary>
            Gets or sets a value indicating whether to resize the PDF document's window to fit the size of the first displayed page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.CenterWindow">
      <summary>
            Gets or sets a value indicating whether to position the PDF document's window in the center of the screen.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfExporter">
      <summary>
            Represents an object that can be used to export a document to PDF.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.PdfExportProvider" />
    </member>
    <member name="T:C1.C1Preview.Export.PagesExporter">
      <summary>
            Base class for all exporters working over list of pages.
            Derived classes must override ProcessPage method.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.PagesExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Exports a page of a document represented by a <see cref="T:System.Drawing.Imaging.Metafile" />.
            </summary>
      <param name="pageImage">The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the page to export.</param>
      <param name="metafileInfo">The <see cref="T:C1.C1Preview.C1MetafileInfo" /> containing information about the <paramref name="pageImage" />.</param>
      <param name="pageNo">The 1-based page number.</param>
      <param name="firstPage">
        <b>true</b> if <paramref name="pageImage" /> represents the first page of the document, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.InternalExport">
      <summary>
            Performs export to a disk file or to a stream.
            The destination (file or stream) is determined by which of the properties
            (<see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" /> or <see cref="P:C1.C1Preview.Export.Exporter.OutputStream" />) is non-<b>null</b>
            when this method executes.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.PdfOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.PdfOptionsForm" /> object to copy the options from.</param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.PdfExportProvider" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.UseCompression">
      <summary>
            Gets or sets a value indicating whether to use compression in the produced PDF document.
            The default is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.PdfACompatible">
      <summary>
            Gets or sets a value indicating whether to generate PDF/A compatible document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.EmbedTrueTypeFonts">
      <summary>
            Gets or sets a value indicating whether to embed TrueType fonts used in the source document, in the produced PDF document.
            The default is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.FormFields">
      <summary>
            Gets or sets a value indicating whether to export input fields as Acrobat Form fields.
            The default is <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.Security">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Export.PdfSecurity" /> object describing security properties of the produced PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.ViewerPreferences">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" /> object describing viewer preferences to be used
            when the produced PDF document is opened.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.PdfViewerPreferencesFormClass">
      <summary>
            Gets or sets the type of form that is used to edit the <see cref="P:C1.C1Preview.Export.PdfExporter.ViewerPreferences" />
            associated with the PDF documents that is exported.
            The form type must be <see cref="T:C1.C1Preview.Export.PdfViewerPreferencesForm" /> or derived from it.
            That form is invoked from the export options form.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.ParseEmfPlus">
      <summary>
            Gets or sets a value indicating whether EMF+ metafiles should be parsed directly without
            converting them to EMF-only first.
            The default is <b>false</b>. Set to <b>true</b> if you have issues resulting from EMF+ to EMF conversion.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.Xls.XlsBookContentEnum">
      <summary>
            Specifies the type of content in a document exported to Excel.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.Xls.XlsBookContentEnum.Auto">
      <summary>
            The type of content is determined automatically.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.Xls.XlsBookContentEnum.Text">
      <summary>
            The document mostly contains text.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.Xls.XlsBookContentEnum.Table">
      <summary>
            The document mostly contains tables.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsExportProvider">
      <summary>
            Describes export to XLS format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.XlsExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.XlsExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.XlsExporter" /> class.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.XlsExporter" />.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
            Indicates whether the associated exporter
            can handle the specified type of document pages' range.
            This implementation returns <b>true</b> (all types of ranges are supported).
            </summary>
      <param name="range">The type of range to test.</param>
      <returns>
        <b>true</b> if the associated <see cref="T:C1.C1Preview.Export.Exporter" /> can handle the specified output range, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 21.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.FormatName">
      <summary>
            Gets a short description of the XLS export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xls".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            This implementation returns <b>Author</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.CanShowOptions">
      <summary>
            Gets a value indicating whether the associated exporter
            can show a dialog allowing the user to edit the export options.
            This implementation returns <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.XlsOptionsForm" /> type.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsxExportProvider">
      <summary>
            Describes export to XLSX (Open XML) format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.XlsExporter" />
      <seealso cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />
    </member>
    <member name="M:C1.C1Preview.Export.XlsxExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.XlsExporter" /> class,
            and sets the <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" /> property on that instance to <b>true</b>.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.XlsExporter" />.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 20.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.FormatName">
      <summary>
            Gets a short description of the XLSX export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xlsx".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.XlsxOptionsForm" /> type.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsExporter">
      <summary>
            Represents an object that can be used to export a document to Excel (XLS and XLSX) formats.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.XlsExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.XlsxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.XlsExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.XlsOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.XlsOptionsForm" /> object to copy the options from.</param>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Exports a page of a document represented by a <see cref="T:System.Drawing.Imaging.Metafile" />.
            </summary>
      <param name="pageImage">The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the page to export.</param>
      <param name="metafileInfo">The <see cref="T:C1.C1Preview.C1MetafileInfo" /> containing information about the <paramref name="pageImage" />.</param>
      <param name="pageNo">The 1-based page number.</param>
      <param name="firstPage">
        <b>true</b> if <paramref name="pageImage" /> represents the first page of the document, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.Reset">
      <summary>
            Resets the internal state of the exporter.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.Clear">
      <summary>
            Resets the internal state of the exporter and all its public properties.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.FontScaling">
      <summary>
            Gets or sets the amount (in points) by which to change font sizes
            (may be used to better fit texts into available space).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.PagePerSheet">
      <summary>
            Gets or sets a value indicating whether to export each page
            of the document into a separate sheet.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.DetectFormats">
      <summary>
            Gets or sets a value indicating whether to detect of Excel
            format for each text value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.BookContent">
      <summary>
            Gets or sets a value indicating the Excel book content.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.DetectDataType">
      <summary>
            Gets or sets a value indicating whether the export module should
            try to auto detect the type of data (numeric, date) in the cells.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.Tolerance">
      <summary>
            Gets or sets the tolerance (in points) when auto-detecting the
            boundaries of rows and columns in the document. The smaller this
            amount, the greater the number of narrow rows and columns created
            for precise positioning of data.
            </summary>
      <value>The tolerance value.</value>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.DataOnly">
      <summary>
            Gets or sets a value indicating whether only data should be exported,
            ignoring visual attributes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.ParseEmfPlus">
      <summary>
            Gets or sets a value indicating whether EMF+ metafiles should be parsed directly without
            converting them to EMF-only first.
            The default is <b>false</b>. Set to <b>true</b> if you have issues resulting from EMF+ to EMF conversion.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.ExportProvider">
      <summary>
            Depending on the value of the <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" /> property on the current exporter,
            gets <see cref="P:C1.C1Preview.Export.ExportProviders.XlsExportProvider" /> or <see cref="P:C1.C1Preview.Export.ExportProviders.XlsxExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.WarningForm">
      <summary>
            Represents a form used to show a warning.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TagStringInputParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.ShowWarning(System.String,System.String)">
      <summary>
            Shows a warning.
            </summary>
      <param name="warningText">The warning text.</param>
      <param name="warningDisableRegistryKey">The registry key that can be used to disable future warnings of this kind.</param>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.IsWarningDisabled(System.String)">
      <summary>
            Tests whether warnings of a certain kind are disabled.
            </summary>
      <param name="warningDisableRegistryKey">The registry key identifying warnings of the kind to test.</param>
      <returns>
        <b>true</b> if specified warnings are disabled, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo">
      <summary>
            Helper class containing additional information about a <see cref="T:C1.C1Preview.C1Hyperlink" />
            (the list of pages and areas on those pages where that hyperlink occurs).
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.#ctor(C1.C1Preview.C1Hyperlink,C1.C1Preview.C1LinkTarget)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> class.
            </summary>
      <param name="hyperlink">The hyperlink with which the current object is associated.</param>
      <param name="linkTarget">The <see cref="T:C1.C1Preview.C1LinkTarget" /> object where hyperlink points.</param>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Hyperlink">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1Hyperlink" /> associated with the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.LinkTarget">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1LinkTarget" /> where hyperlink points, it can differ
            from Hyperlink.LinkTarget if Linktarget contains calculated fields.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.StatusText">
      <summary>
            Gets value of <see cref="P:C1.C1Preview.C1Hyperlink.StatusText" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.State">
      <summary>
            Gets or sets value of <see cref="P:C1.C1Preview.C1Hyperlink.State" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Areas">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1HyperlinkInfo.AreaCollection" /> containing the areas
            occupied by the hyperlink on different <see cref="T:C1.C1Preview.RenderFragment" /> objects.
            Typically this collection would contain just one element, but can
            contain more if the hyperlink is split between pages.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo.Area">
      <summary>
            Describes the position of a hyperlink on a page.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.#ctor(System.Int32,System.Drawing.Region)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkInfo.Area" /> class.
            </summary>
      <param name="pageIndex">The 0-based index of the page.</param>
      <param name="region">The region on the page.</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.#ctor(System.Int32,C1.C1Preview.RectangleD)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkInfo.Area" /> class.
            </summary>
      <param name="pageIndex">The 0-based index of the page.</param>
      <param name="rect">The rectangle on the page.</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.#ctor(System.Int32,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1HyperlinkInfo.Area" /> class.
            </summary>
      <param name="pageIndex">The 0-based index of the page.</param>
      <param name="rect">The rectangle on the page.</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.Finalize">
      <summary>
            Destructs this instance.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.Dispose">
      <summary>
            Disposes the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.Region">
      <summary>
            Gets the region of the current area.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.PageIndex">
      <summary>
            Gets the page index of the current area.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo.AreaCollection">
      <summary>
            Collection of Area objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.AreaCollection.Add(C1.C1Preview.C1HyperlinkInfo.Area)">
      <summary>
            Adds an area to the current collection.
            </summary>
      <param name="area">The area to add.</param>
      <returns>The index of the added area in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.AreaCollection.Item(System.Int32)">
      <summary>
            Gets the element at the specified index. 
            </summary>
      <param name="index">The index in the collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.C1AnchorInfo">
      <summary>
            Helper class containing additional information about a <see cref="T:C1.C1Preview.C1Anchor" /> within a document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfo.#ctor(C1.C1Preview.C1Anchor,C1.C1Preview.DocumentLocation)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorInfo" /> class.
            </summary>
      <param name="anchor">The anchor associated with the current instance.</param>
      <param name="documentLocation">
        <see cref="P:C1.C1Preview.C1AnchorInfo.DocumentLocation" /> object defining abchor's position.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfo.#ctor(C1.C1Preview.C1Anchor,System.Int32,C1.C1Preview.PointD)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorInfo" /> class.
            </summary>
      <param name="anchor">The anchor associated with the current instance.</param>
      <param name="pageIndex">The 0-based page index.</param>
      <param name="point">The point on the page.</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfo.#ctor(C1.C1Preview.C1Anchor,C1.C1Preview.C1Page,C1.C1Preview.RectangleD)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1AnchorInfo" /> class.
            </summary>
      <param name="anchor">The anchor associated with the current instance.</param>
      <param name="page">
        <see cref="T:C1.C1Preview.C1Page" /> object where anchor is.</param>
      <param name="boundsOnPage">The bounds on the page.</param>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.Anchor">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1Anchor" /> associated with the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.PageIndex">
      <summary>
            Gets the 0-based index of the page containing the anchor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.Point">
      <summary>
            Gets the position of the anchor on page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.DocumentLocation">
      <summary>
            Gets <see cref="P:C1.C1Preview.C1AnchorInfo.DocumentLocation" /> object defining position of anchor in document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfoCollection">
      <summary>
            Describes a collection of <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfoCollection.FindHyperlink(System.Int32,C1.C1Preview.PointD)">
      <summary>
            Finds a <see cref="T:C1.C1Preview.C1Hyperlink" /> at the specified position on the specified page.
            </summary>
      <param name="pageIndex">The 0-based index of the page.</param>
      <param name="pt">The position on the page.</param>
      <returns>
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> associated with the found hyperlink, or null.</returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfoCollection.Add(C1.C1Preview.C1HyperlinkInfo)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> to the current collection.
            </summary>
      <param name="hyperlinkInfo">The <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfoCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.C1AnchorInfoCollection">
      <summary>
            Describes a collection of <see cref="T:C1.C1Preview.C1AnchorInfo" /> objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfoCollection.Add(C1.C1Preview.C1AnchorInfo)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.C1AnchorInfo" /> to the current collection.
            </summary>
      <param name="anchorInfo">The <see cref="T:C1.C1Preview.C1AnchorInfo" /> to add.</param>
      <returns>The index of the newly added object in the current collection.</returns>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfoCollection.FindByName(System.String)">
      <summary>
            Searches <see cref="T:C1.C1Preview.C1AnchorInfo" /> by anchor's name.
            </summary>
      <param name="name">Name of anchor.</param>
      <returns>
        <see cref="T:C1.C1Preview.C1AnchorInfo" /> object or null.</returns>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfoCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.MetafileHyperlinksHelper">
      <summary>
        <para>For internal use only.</para>
            Provides methods to extract hyperlinks, anchors and outline entries from metafiles.
            </summary>
    </member>
    <member name="M:C1.C1Preview.MetafileHyperlinksHelper.GetHyperlinksAndAnchors(System.Drawing.Imaging.Metafile,System.Int32,C1.C1Preview.C1HyperlinkInfoCollection,C1.C1Preview.C1AnchorInfoCollection,System.Single,System.Single)">
      <summary>
            Extracts information about hyperlinks and anchors from a metafile.
            </summary>
      <param name="metafile">The metafile to extract the info from.</param>
      <param name="pageIndex">The 0-based page index.</param>
      <param name="hyperlinks">The collection of hyperlinks to fill.</param>
      <param name="anchors">The collection of anchors to fill.</param>
      <param name="dpiX">The horizontal resolution.</param>
      <param name="dpiY">The vertical resolution.</param>
    </member>
    <member name="M:C1.C1Preview.MetafileHyperlinksHelper.GetOutlines(System.Drawing.Imaging.Metafile,System.Int32,System.Single,System.Single)">
      <summary>
            Extracts the list of outline headers from a metafile.
            </summary>
      <param name="metafile">The metafile to extract the info from.</param>
      <param name="pageIndex">The 0-based page index.</param>
      <param name="dpiX">The horizontal resolution.</param>
      <param name="dpiY">The vertical resolution.</param>
      <returns>The <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:C1.C1Preview.EmfOutlineHeader" /> records.</returns>
    </member>
    <member name="T:C1.C1Preview.C1PrintManager">
      <summary>
            Provides printing services.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1PrintManager" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.IsSupportedDocument(System.Object)">
      <summary>
            Tests whether an object can by printed by this print manager.
            If this method returns false for an object, an attempt to assign that object
            to <see cref="P:C1.C1Preview.C1PrintManager.Document" /> will cause an exception.
            Currently supported types include:
            <list type="bullet"><item><see cref="T:C1.C1Preview.C1PrintDocument" /></item><item><see cref="T:C1.C1Report.C1Report" /></item><item><see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" /></item><item><see cref="T:C1.C1Preview.C1MultiDocument" /></item><item><b>PrintDocument</b></item><item><b>IEnumerable</b> (assumes a list of page images).</item></list></summary>
      <param name="document">The document to test.</param>
      <returns>True if the document can be printed, false otherwise.</returns>
      <seealso cref="P:C1.C1Preview.C1PrintManager.Document" />
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the <see cref="P:C1.C1Preview.C1PrintManager.Document" /> with the specified printer settings.
            </summary>
      <param name="printerSettings">The <see cref="T:System.Drawing.Printing.PrinterSettings" /> to use, or <b>null</b> to use the defalt printer settings.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
      <summary>
            Prints the <see cref="P:C1.C1Preview.C1PrintManager.Document" /> with the specified printer settings.
            </summary>
      <param name="printerSettings">The <see cref="T:System.Drawing.Printing.PrinterSettings" /> to use, or <b>null</b> to use the defalt printer settings.</param>
      <param name="defaultPageSettings">The default page settings to use (can be <b>null</b>).</param>
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.Document">
      <summary>
            Gets or sets the document that to print.
            If the assigned value is an unsupported object, an exception will be thrown.
            Use <see cref="M:C1.C1Preview.C1PrintManager.IsSupportedDocument(System.Object)" /> to verify that the object can be printed.
            </summary>
      <seealso cref="M:C1.C1Preview.C1PrintManager.IsSupportedDocument(System.Object)" />
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.PrintOptions">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.C1PrintOptions" /> object specifying the printing options.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.Range">
      <summary>
            Gets or sets the <see cref="T:C1.C1Preview.OutputRange" /> object specifying the pages to print.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.PrinterName">
      <summary>
            Gets the printer name.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.LongOperation">
      <summary>
            Occurs periodically when a long operation is in progress.
            Can be used to provide progress indication and/or the ability for the user to cancel printing.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.Error">
      <summary>
            Occurs when an external exception is thrown (e.g. while printing).
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.QueryPageSettings">
      <summary>
            Fired from within the <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" /> event handler
            of the current print manager. Allows to change page settings (e.g. changing PaperSize.)
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.AdjustPrintPage">
      <summary>
            Fired from within the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event handler
            of the current print manager, prior to actually printing the page.
            Allows to adjust the hard margins of the printer (e.g. to compensate
            for a buggy printer driver, see <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintableArea" />),
            or to print the current page in user code (see <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.Handled" />).
            See also <see cref="P:C1.C1Preview.C1PrintOptions.PrintAsBitmap" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.AdjustPrintPageEventArgs">
      <summary>
            Describes arguments for the <see cref="E:C1.C1Preview.C1PrintManager.AdjustPrintPage" /> event,
            fired from within <see cref="T:C1.C1Preview.C1PrintManager" />'s <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
            event handler. Allows the user to adjust hard printer margins (e.g. to compensate
            for a buggy printer driver), or to print the page in user code
            (in that case, <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.Handled" /> should be set to <b>true</b>
            by the event handler).
            </summary>
    </member>
    <member name="M:C1.C1Preview.AdjustPrintPageEventArgs.#ctor">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.AdjustPrintPageEventArgs" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.AdjustPrintPageEventArgs.#ctor(C1.C1Preview.C1PrintManager,System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.Printing.PrintPageEventArgs)">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.AdjustPrintPageEventArgs" />.
            </summary>
      <param name="printManager">The print manager that is printing the document.</param>
      <param name="pageImage">The current page image (usually a <see cref="T:System.Drawing.Imaging.Metafile" />).</param>
      <param name="printableArea">The printable area (in hundredths of an inch).</param>
      <param name="printPageEventArgs">The current <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintPageEventArgs" />.</param>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintManager">
      <summary>
            Gets the print manager object that is printing the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PageImage">
      <summary>
            Gets the current page image (usually this is a <see cref="T:System.Drawing.Imaging.Metafile" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintPageEventArgs">
      <summary>
            Gets the <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintPageEventArgs" /> object passed into the <b>PrintPage</b>
            event handler of the print manager.
            </summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintableArea">
      <summary>
            Gets or sets the physical printable area of the printer, in hundredths of an inch.
            When the event is fired, this property contains the printable area of the printer
            as returned by the printer driver, rotated if landscape printing.
            You may want to adjust this property e.g. to compensate for a buggy printer driver
            reporting incorrect hard margins.
            </summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.Handled">
      <summary>
            Gets or sets a value indicating whether the event hanlder has printed the
            page, or whether the caller (print manager) should print the page as usual.
            <para>The default is <b>false</b>.</para></summary>
    </member>
    <member name="T:C1.C1Preview.AdjustPrintPageEventHandler">
      <summary>
            Represents a method that can handle a <see cref="E:C1.C1Preview.C1PrintManager.AdjustPrintPage" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.AdjustPrintPageEventArgs" /> that contains event data.</param>
    </member>
    <member name="T:C1.C1Preview.PrintQueryPageSettingsEventHandler">
      <summary>
            Represents a method that can handle a <see cref="E:C1.C1Preview.C1PrintManager.QueryPageSettings" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" /> that contains event data.</param>
    </member>
    <member name="T:C1.C1Preview.C1PrintOptions">
      <summary>
            Describes options controlling how a document's content
            is to be printed (or previewed).
            </summary>
      <seealso cref="T:C1.C1Preview.C1PrintManager" />
    </member>
    <member name="E:C1.C1Preview.C1PrintOptions.PropertyChanged">
      <summary>
            Occurs when a property on the current <see cref="T:C1.C1Preview.C1PrintOptions" /> object changes.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoPaperSource">
      <summary>
            Gets or sets a value indicating whether the paper source is selected automatically.
            <para>
            The default value is <b>false</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.PageScaling">
      <summary>
            Gets or sets the value indicating the manner in which pages are scaled during printing.
            <para>
            The default value is <see cref="F:C1.C1Preview.PageScalingEnum.ReduceToPaper" />.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.CenterPage">
      <summary>
            Gets or sets a value indicating whether the page should be centered on paper during printing.
            <para>
            The default value is <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoRotate">
      <summary>
            Gets or sets a value indicating whether pages should be auto-rotated to better fit the paper during printing.
            <para>
            The default value is <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.PrintAsBitmap">
      <summary>
            Gets or sets a value indicating whether page metafiles should be converted to
            bitmaps and clipped to printer's hard margins prior to printing.
            <para>
            The default value is <b>false</b>.
            </para><para>
            Normally document pages are sent to printer as metafiles.
            If a page exceeds the printable area of a printer, problems may occur
            with some printer drivers when the page is printed.
            In those cases set this property to <b>true</b>.
            </para></summary>
      <seealso cref="E:C1.C1Preview.C1PrintManager.AdjustPrintPage" />
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.DrawPrintableAreaBounds">
      <summary>
            Gets or sets a value indicating whether a line is drawn around the printable area of the page.
            This may be useful for diagnostic purposes. <see cref="P:C1.C1Preview.C1PrintOptions.PrintableAreaBoundsPen" /> is used to draw the line.
            The default is <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.PrintableAreaBoundsPen">
      <summary>
            Gets or sets the pen used to draw printable area bounds if <see cref="P:C1.C1Preview.C1PrintOptions.DrawPrintableAreaBounds" /> is <b>true</b>.
            If this value is <b>null</b> (which is the default), a single-pixel black pen is used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoPaperSize">
      <summary>
            Gets or sets a value indicating whether the paper size is selected automatically.
            <para>
            The default value is <b>false</b>.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.MsPrintDocumentPrintEmfType">
      <summary>
            Gets or sets the type of metafiles used when printing standard .NET PrintDocument documents.
            <para>The default is <b>EmfType.EmfPlusDual</b>.</para><para>
            If your printer needs to scan the output for data (e.g. a fax number;
            a case in point is Tobit Faxware) and fails, try setting this to <b>EmfType.EmfOnly</b>.
            </para><para>
            Note that this property ONLY affects printing of standard .NET PrintDocument documents,
            and has no bearing on other supported document types.
            </para></summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfExportProvider">
      <summary>
            Describes export to <see cref="T:System.Drawing.Imaging.Metafile" /> objects representing the pages of a document.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.EmfExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.EmfExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.EmfExporter" /> class.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.EmfExporter" />.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 100.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.FormatName">
      <summary>
            Gets a short description of the EMF export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "emf".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.CanShowOptions">
      <summary>
            Gets a value indicating whether the associated <see cref="T:C1.C1Preview.Export.EmfExporter" />
            can show a dialog allowing the user to edit the export options.
            This implementation returns <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.EmfOptionsForm" /> type.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfExporter">
      <summary>
            Provides export of a document to a sequence of metafiles in disk files or in a stream.
            </summary>
      <remarks>
        <para>
          <b>EmfExporter</b> supports export to stream in the following format:</para>
        <list type="bullet">
          <item>
            <term>int</term>
            <description>The total page count.</description>
          </item>
          <item>
            <term>int</term>
            <description>The length of the first page data (bytes).</description>
          </item>
          <item>
            <term>byte[]</term>
            <description>The first page data.</description>
          </item>
          <item>
            <term>int</term>
            <description>The length of the second page data (bytes).</description>
          </item>
          <item>
            <term>byte[]</term>
            <description>The second page data.</description>
          </item>
          <item>
            <term>...</term>
            <description>...and so on for all pages...</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.EmfExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Exports a page of a document represented by a <see cref="T:System.Drawing.Imaging.Metafile" />.
            </summary>
      <param name="pageImage">The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the page to export.</param>
      <param name="metafileInfo">The <see cref="T:C1.C1Preview.C1MetafileInfo" /> containing information about the <paramref name="pageImage" />.</param>
      <param name="pageNo">The 1-based page number.</param>
      <param name="firstPage">
        <b>true</b> if <paramref name="pageImage" /> represents the first page of the document, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.ConvertEmfPlusToEmfOnly">
      <summary>
            Indicates whether page metafiles of types <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" /> and <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />
            should be converted to <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" /> type before exporting.
            The base implementation returns the value of <see cref="P:C1.C1Preview.Export.EmfExporter.EmfPlusToEmfOnly" /> property.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.EmfOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.EmfOptionsForm" /> object to copy the options from.</param>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExporter.ExportProvider">
      <summary>
            Gets <see cref="P:C1.C1Preview.Export.ExportProviders.EmfExportProvider" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExporter.EmfPlusToEmfOnly">
      <summary>
            Gets or sets a value indicating whether
            metafiles of types <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" /> and <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />
            should be converted to <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" /> type before exporting.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportProviders">
      <summary>
            Represents the collection of registered export providers (classed derived from <see cref="T:C1.C1Preview.Export.ExportProvider" />).
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProviders.IndexOf(C1.C1Preview.Export.ExportProvider)">
      <summary>
            Gets the index of the specified <see cref="T:C1.C1Preview.Export.ExportProvider" /> in the current collection.
            </summary>
      <param name="exportProvider">The export provider to search for.</param>
      <returns>Index of the specified export provider in the current collection, or -1 if it was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProviders.Register(C1.C1Preview.Export.ExportProvider)">
      <summary>
            Registers an <see cref="T:C1.C1Preview.Export.ExportProvider" /> in the current <see cref="T:C1.C1Preview.Export.ExportProviders" />.
            </summary>
      <param name="exportProvider">The export provider to register.</param>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProviders.FindExportProviderByFormatKey(System.String)">
      <summary>
            Searches for an <see cref="T:C1.C1Preview.Export.ExportProvider" /> by its format key.
            The format key is an arbitrary string that uniquely identifies
            the export format. For each format, it is returned by the
            <see cref="P:C1.C1Preview.Export.ExportProvider.FormatKey" /> property.
            </summary>
      <param name="formatKey">The format key string.</param>
      <returns>The <see cref="T:C1.C1Preview.Export.ExportProvider" />, or null if none has been found.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Export.ExportProvider" /> at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1Preview.Export.ExportProvider" /> with the specified default file extension (see <see cref="P:C1.C1Preview.Export.ExportProvider.DefaultExtension" />).
            </summary>
      <param name="extension">The default file extension associated with the export format.</param>
      <returns>The <see cref="T:C1.C1Preview.Export.ExportProvider" /> that has the specified default extension, or <b>null</b> if no such provider exists in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Count">
      <summary>
            Gets the count of registered export providers in the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.RegisteredProviders">
      <summary>
            Gets the static collection of all registered <see cref="T:C1.C1Preview.Export.ExportProvider" /> objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.XlsExportProvider">
      <summary>
            Gets the static registered instance of the XLS export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.XlsxExportProvider">
      <summary>
            Gets the static registered instance of the XLSX export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.DocxExportProvider">
      <summary>
            Gets the static registered instance of the DOCX export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.RtfExportProvider">
      <summary>
            Gets the static registered instance of the RTF export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.PdfExportProvider">
      <summary>
            Gets the static registered instance of the PDF export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.EmfExportProvider">
      <summary>
            Gets the static registered instance of the EMF export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.TiffExportProvider">
      <summary>
            Gets the static registered instance of the TIFF export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.PngExportProvider">
      <summary>
            Gets the static registered instance of the PNG export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.JpegExportProvider">
      <summary>
            Gets the static registered instance of the JPEG export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.GifExportProvider">
      <summary>
            Gets the static registered instance of the GIF export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.BmpExportProvider">
      <summary>
            Gets the static registered instance of the BMP export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.HtmlExportProvider">
      <summary>
            Gets the static registered instance of the HTML export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1dExportProvider">
      <summary>
            Gets the static registered instance of the C1D export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1dxExportProvider">
      <summary>
            Gets the static registered instance of the C1DX export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1dbExportProvider">
      <summary>
            Gets the static registered instance of the C1DB export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1mdxExportProvider">
      <summary>
            Gets the static registered instance of the C1MDX export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.XpsExportProvider">
      <summary>
            Gets the static registered instance of the XPS export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportHTMLDrillDownExportProvider">
      <summary>
            Gets the static registered instance of drill-down HTML export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportHTMLPagedExportProvider">
      <summary>
            Gets the static registered instance of paged HTML export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportHTMLExportProvider">
      <summary>
            Gets the static registered instance of HTML export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportRTFExportProvider">
      <summary>
            Gets the static registered instance of RTF export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportRTFLabelsExportProvider">
      <summary>
            Gets the static registered instance of field-based RTF export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportTextExportProvider">
      <summary>
            Gets the static registered instance of plain text export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportTextSinglePageExportProvider">
      <summary>
            Gets the static registered instance of single page plain text export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportMetafileExportProvider">
      <summary>
            Gets the static registered instance of compressed metafile export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportExcelExportProvider">
      <summary>
            Gets the static registered instance of Microsoft Excel export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportOpenXmlExportProvider">
      <summary>
            Gets the static registered instance of the OpenXml Excel export provider for <see cref="N:C1.C1Report" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportUtil">
      <summary>
            Provides static utility methods for export and printing.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageExists(System.Int32,System.Collections.IList,System.Object)">
      <summary>
            Tests whether the page with the specified number exists in the document.
            </summary>
      <param name="pageNo">The physical page number (1-based index).</param>
      <param name="pages">The list of page images or null.</param>
      <param name="document">The document or null.</param>
      <returns>True if the page exists, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(System.Int32,System.Collections.IList,System.Object,C1.C1Preview.PageDrawParams)">
      <summary>
            Gets the page metafile for export or printing.
            </summary>
      <param name="pageNo">The physical page number (1-based index).</param>
      <param name="pages">The pages collection (may be <c>null</c>).</param>
      <param name="document">The document (may be <c>null</c>).</param>
      <param name="pdp">Specifies drawing params.</param>
      <returns>The page metafile.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(C1.C1Preview.IC1Document,System.Int32,C1.C1Preview.PageDrawParams)">
      <summary>
            Gets the page metafile for export or printing.
            </summary>
      <param name="document">The object supporting IC1Document.</param>
      <param name="pageIdx">The 0-based page index.</param>
      <param name="pdp">Specifies drawing params.</param>
      <returns>The page metafile.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(C1.C1Preview.C1PrintDocument,System.Int32)">
      <summary>
            Gets the page metafile for export or printing.
            </summary>
      <param name="document">The C1PrintDocument object.</param>
      <param name="pageIdx">The 0-based page index.</param>
      <returns>The page metafile.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPages(System.Object,System.Int32@)">
      <summary>
            Gets the list of page images representing the document, or null
            if the document is a C1Preview.
            </summary>
      <param name="document">The export document.</param>
      <param name="pageCount">Out: the page count.</param>
      <returns>The list of page metafiles or null.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMinPageNumber(System.Object)">
      <summary>
            Returns the minimum page number for the specified document.
            </summary>
      <param name="document">The target document.</param>
      <returns>The minimum page number valid for this document.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object,System.Int32)">
      <summary>
            Gets the maximum valid physical page number (1-based index) for the specified document.
            </summary>
      <param name="document">The target document.</param>
      <param name="pageCount">The page count.</param>
      <returns>The maximum page number valid for this document.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object)">
      <summary>
            Gets the maximum valid physical page number (1-based index) for the specified document.
            </summary>
      <param name="document">The target document.</param>
      <returns>The maximum page number valid for this document.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageIndicesToPageNumbers(System.Int32[],System.Object)">
      <summary>
            Converts an array of 0-based physical page indices to an array
            of 1-based logical page numbers.
            </summary>
      <param name="pageIndices">The array of page indices.</param>
      <param name="document">The document.</param>
      <returns>The array of logical page numbers.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageIndexToPageNumber(System.Int32,System.Object)">
      <summary>
            Converts a 0-based page index to the logical 1-based page number.
            </summary>
      <param name="pageIndex">The 0-based page index.</param>
      <param name="document">The document object.</param>
      <returns>The logical 1-based page number.</returns>
    </member>
    <member name="T:C1.C1Preview.Export.ImageExportProvider">
      <summary>
            The abstract base class for all image export providers.
            Derived classes must override the <see cref="M:C1.C1Preview.Export.ImageExportProvider.GetImageFormat" /> method.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExportProvider.GetImageFormat">
      <summary>
            Gets the image format associated with the current export provider.
            Must be overridden in a derived class to return a specific image format.
            </summary>
      <returns>The image format associated with the current export provider.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExportProvider.NewExporter">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.Export.ImageExporter" />,
            sets the <see cref="P:C1.C1Preview.Export.ImageExporter.ImageFormat" /> property on that instance
            to the image format returned by <see cref="M:C1.C1Preview.Export.ImageExportProvider.GetImageFormat" />.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.CanShowOptions">
      <summary>
            Gets a value indicating whether the associated <see cref="T:C1.C1Preview.Export.ImageExporter" />
            can show a dialog allowing the user to edit the export options.
            This implementation returns <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.ImagesOptionsForm" /> type.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.ImageFormat">
      <summary>
            Gets the <see cref="P:C1.C1Preview.Export.ImageExportProvider.ImageFormat" /> associated with the current export provider.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current image export format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.BmpExportProvider">
      <summary>
            Describes export to bitmaps representing the pages of a document.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.BmpExportProvider.GetImageFormat">
      <summary>
            Gets the image format associated with the current export provider.
            This implementation returns <see cref="P:System.Drawing.Imaging.ImageFormat.Bmp" />.
            </summary>
      <returns>The image format associated with the current export provider.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.BmpExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 105.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.BmpExportProvider.FormatName">
      <summary>
            Gets a short description of the bitmap export format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.GifExportProvider">
      <summary>
            Describes export to GIF files representing the pages of a document.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.GifExportProvider.GetImageFormat">
      <summary>
            Gets the image format associated with the current export provider.
            This implementation returns <see cref="P:System.Drawing.Imaging.ImageFormat.Gif" />.
            </summary>
      <returns>The image format associated with the current export provider.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.GifExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 104.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.GifExportProvider.FormatName">
      <summary>
            Gets a short description of the GIF export format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.JpegExportProvider">
      <summary>
            Describes export to JPEG files representing the pages of a document.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.JpegExportProvider.GetImageFormat">
      <summary>
            Gets the image format associated with the current export provider.
            This implementation returns <see cref="P:System.Drawing.Imaging.ImageFormat.Jpeg" />.
            </summary>
      <returns>The image format associated with the current export provider.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.JpegExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 103.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.JpegExportProvider.FormatName">
      <summary>
            Gets a short description of the JPEG export format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PngExportProvider">
      <summary>
            Describes export to PNG files representing the pages of a document.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.PngExportProvider.GetImageFormat">
      <summary>
            Gets the image format associated with the current export provider.
            This implementation returns <see cref="P:System.Drawing.Imaging.ImageFormat.Png" />.
            </summary>
      <returns>The image format associated with the current export provider.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.PngExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 102.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PngExportProvider.FormatName">
      <summary>
            Gets a short description of the PNG export format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.TiffExportProvider">
      <summary>
            Describes export to TIFF files representing the pages of a document.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.TiffExportProvider.GetImageFormat">
      <summary>
            Gets the image format associated with the current export provider.
            This implementation returns <see cref="P:System.Drawing.Imaging.ImageFormat.Tiff" />.
            </summary>
      <returns>The image format associated with the current export provider.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.TiffExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 101.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.TiffExportProvider.FormatName">
      <summary>
            Gets a short description of the TIFF export format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ImageExporter">
      <summary>
            Represents an object that can be used to export a document to a sequence of images.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.TiffExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.PngExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.JpegExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.GifExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.BmpExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.ImageExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.ImageExporter" /> class.
            Sets the <see cref="P:C1.C1Preview.Export.ImageExporter.ImageFormat" /> to the default <see cref="P:System.Drawing.Imaging.ImageFormat.Tiff" /> value
            (may be changed later).
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Exports a page of a document represented by a <see cref="T:System.Drawing.Imaging.Metafile" />.
            </summary>
      <param name="pageImage">The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the page to export.</param>
      <param name="metafileInfo">The <see cref="T:C1.C1Preview.C1MetafileInfo" /> containing information about the <paramref name="pageImage" />.</param>
      <param name="pageNo">The 1-based page number.</param>
      <param name="firstPage">
        <b>true</b> if <paramref name="pageImage" /> represents the first page of the document, <b>false</b> otherwise.</param>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.ExportProvider">
      <summary>
            Gets the export provider associated with the current <see cref="T:C1.C1Preview.Export.ImageExporter" />.
            </summary>
      <remarks>
            Depending on the current <see cref="P:C1.C1Preview.Export.ImageExporter.ImageFormat" />, returns one of the following:
            <list type="bullet"><item><see cref="P:C1.C1Preview.Export.ExportProviders.TiffExportProvider" /></item><item><see cref="P:C1.C1Preview.Export.ExportProviders.PngExportProvider" /></item><item><see cref="P:C1.C1Preview.Export.ExportProviders.JpegExportProvider" /></item><item><see cref="P:C1.C1Preview.Export.ExportProviders.GifExportProvider" /></item><item><see cref="P:C1.C1Preview.Export.ExportProviders.BmpExportProvider" /></item></list></remarks>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.ImageFormat">
      <summary>
            Gets or sets the image format associated with the current exporter.
            Supported formats are:
            <see cref="P:System.Drawing.Imaging.ImageFormat.Bmp" />,
            <see cref="P:System.Drawing.Imaging.ImageFormat.Gif" />,
            <see cref="P:System.Drawing.Imaging.ImageFormat.Jpeg" />,
            <see cref="P:System.Drawing.Imaging.ImageFormat.Png" /> and
            <see cref="P:System.Drawing.Imaging.ImageFormat.Tiff" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.Resolution">
      <summary>
            Gets or sets the resolution of the exported image.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfExportProvider">
      <summary>
            Describes export to RTF format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.RtfExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.RtfExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.RtfExporter" /> class.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.RtfExporter" />.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
            Indicates whether the associated exporter
            can handle the specified type of document pages' range.
            This implementation returns <b>true</b> (all types of ranges are supported).
            </summary>
      <param name="range">The type of range to test.</param>
      <returns>
        <b>true</b> if the associated <see cref="T:C1.C1Preview.Export.Exporter" /> can handle the specified output range, <b>false</b> otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 30.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.FormatName">
      <summary>
            Gets a short description of the RTF export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "rtf".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the combination of flags indicating which fields of the <see cref="T:C1.C1Preview.DocumentInfo" /> class
            are supported by the current export format.
            This implementation returns the combination of
            <b>Author</b>,
            <b>Creator</b>,
            <b>Title</b>,
            <b>Operator</b>,
            <b>Subject</b>,
            <b>Keywords</b>,
            <b>CreationTime</b>,
            <b>RevisionTime</b>,
            <b>Manager</b>,
            <b>Company</b> and
            <b>Comment</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.CanExportToStream">
      <summary>
            Gets a value indicating whether export to stream is supported by the current format.
            This implementation returns <b>true</b> (export to stream is supported).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.CanShowOptions">
      <summary>
            Gets a value indicating whether the associated exporter
            can show a dialog allowing the user to edit the export options.
            This implementation returns <b>true</b>.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.RtfOptionsForm" /> type.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
            Returns <b>false</b>.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.DocxExportProvider">
      <summary>
            Describes export to DOCX (Open XML) format.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.RtfExporter" />
      <seealso cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified object represents a document that can be exported
            by a <see cref="T:C1.C1Preview.Export.RtfExporter" />.
            </summary>
      <param name="obj">The object (document) to test.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is an instance of
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.CanExportType(System.Type)">
      <summary>
            Tests whether documents of the specified type can be exported by the current export provider.
            </summary>
      <param name="documentType">The type to test.</param>
      <returns>
        <b>true</b> if <paramref name="documentType" /> is 
            <see cref="T:C1.C1Preview.C1PrintDocument" /> or <see cref="T:C1.C1Report.C1Report" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.NewExporter">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Preview.Export.RtfExporter" /> class,
            and sets the <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" /> property on that instance to <b>true</b>.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.Export.RtfExporter" />.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.PreferredOrdinal">
      <summary>
            Specifies the preferred ordinal of the export format in "save as..." and similar dialogs.
            This implementation returns 31.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.FormatName">
      <summary>
            Gets a short description of the DOCX export format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.DefaultExtension">
      <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "docx".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            This implementation returns <see cref="T:C1.C1Preview.Export.DocxOptionsForm" /> type.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfExporter">
      <summary>
            Represents an object that can be used to export a document to RTF and DOCX formats.
            </summary>
      <seealso cref="T:C1.C1Preview.Export.RtfExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.DocxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Export.RtfExporter" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the properties of the current exporter to corresponding 
            user-editable options of the specified export options form.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.RtfOptionsForm" /> object to copy the properties to.</param>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>
            Copies the options from the specified export options form
            to corresponding properties on the current exporter.
            </summary>
      <param name="f">The <see cref="T:C1.C1Preview.Export.RtfOptionsForm" /> object to copy the options from.</param>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
            Exports a page of a document represented by a <see cref="T:System.Drawing.Imaging.Metafile" />.
            </summary>
      <param name="pageImage">The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the page to export.</param>
      <param name="metafileInfo">The <see cref="T:C1.C1Preview.C1MetafileInfo" /> containing information about the <paramref name="pageImage" />.</param>
      <param name="pageNo">The 1-based page number.</param>
      <param name="firstPage">
        <b>true</b> if <paramref name="pageImage" /> represents the first page of the document, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.Reset">
      <summary>
            Resets the internal state of the exporter.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.Clear">
      <summary>
            Resets the internal state of the exporter and all its public properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.InternalExport">
      <summary>
            Performs export to a disk file or to a stream.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.UseDrawingCanvas">
      <summary>
            Gets or sets a value indicating whether to create drawing canvases in the resulting document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.ParseEmfPlus">
      <summary>
            Gets or sets a value indicating whether EMF+ metafiles should be parsed directly without
            converting them to EMF-only first.
            The default is <b>false</b>. Set to <b>true</b> if you have issues resulting from EMF+ to EMF conversion.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.ShapesWord2007Compatible">
      <summary>
            Gets or sets a value indicating whether when saving to DOCX, Word 2007 compatible shapes format
            should be used.
            If set to false, newer Word 2010 shapes format is used, which supports more features but may yield documents
            that are incompatible with Word 2007 and are very slow when opened in MS Word.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.ExportProvider">
      <summary>
            Depending on the value of the <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" /> property on the current exporter,
            gets <see cref="P:C1.C1Preview.Export.ExportProviders.RtfExportProvider" /> or <see cref="P:C1.C1Preview.Export.ExportProviders.DocxExportProvider" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageEventArgs">
      <summary>
            Provides data for page-related events such as
            <see cref="E:C1.C1Preview.C1PrintDocument.PageAdded" />, <see cref="E:C1.C1Preview.C1PrintDocument.PageUpdated" />,
            <see cref="E:C1.C1Preview.C1PrintDocument.PageChanged" /> and <see cref="E:C1.C1Preview.C1PrintDocument.PageDeleted" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageEventArgs.Page">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1Page" /> associated with this event.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageEventHandler">
      <summary>
            Represents a method that can handle page-related events such as
            <see cref="E:C1.C1Preview.C1PrintDocument.PageAdded" />, <see cref="E:C1.C1Preview.C1PrintDocument.PageUpdated" />,
            <see cref="E:C1.C1Preview.C1PrintDocument.PageChanged" /> and <see cref="E:C1.C1Preview.C1PrintDocument.PageDeleted" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.PageEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.C1Preview.PageConfigureEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageConfigureEventArgs.PageLayout">
      <summary>
            Gets or sets the <see cref="P:C1.C1Preview.PageConfigureEventArgs.PageLayout" /> associated with this event.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageConfigureEventHandler">
      <summary>
            Represents a method that can handle the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.PageConfigureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.C1Preview.InputValueChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.C1Preview.C1PrintDocument.InputValueChanged" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Preview.InputValueChangedEventArgs.#ctor(C1.C1Preview.RenderInputBase)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.InputValueChangedEventArgs" /> class.
            </summary>
      <param name="renderObject">
      </param>
    </member>
    <member name="P:C1.C1Preview.InputValueChangedEventArgs.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderInputBase" /> object on which the value has changed.
            </summary>
    </member>
    <member name="T:C1.C1Preview.InputValueChangedEventHandler">
      <summary>
            Represents a method that can handle the <see cref="E:C1.C1Preview.C1PrintDocument.InputValueChanged" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.C1Preview.InputValueChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.C1Preview.EnumeratePagesCallback">
      <summary>
            For internal use.
            </summary>
      <param name="pageNo">
      </param>
      <param name="callBackData">
      </param>
    </member>
    <member name="T:C1.C1Preview.OutputRangeTypeEnum">
      <summary>
            Specifies the type of an <see cref="T:C1.C1Preview.OutputRange" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.All">
      <summary>
            All pages of the document are in the range.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageList">
      <summary>
            Pages that are in the range are specified as a list.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageRange">
      <summary>
            One or more ranges of pages are specified.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OutputRange">
      <summary>
            Describes a part of the document (pages or objects) that is to be
            exported or printed.
            Note: all page numbers are 1-based.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRange.Dash">
      <summary>
            If included in the page indices list, specifies that all pages
            from preceeding to the next one are to be included in the output.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRange.NoPage">
      <summary>
            This value indicates an invalid page number.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor">
      <summary>
            Creates a new instance of the output range that includes all pages in the document.
            Note that enumerating the resulting range must be broken by the client.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the output range that includes all pages in the document.
            </summary>
      <param name="maxPageNumber">The maximum page number (used to prevent infinite enumeration).</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates an instance of OutputRange that includes a single interval of
            pages. FromPage may be greater than ToPage, in that case the range is
            inverted.
            </summary>
      <param name="fromPage">The number of the first page to include (1-based).</param>
      <param name="toPage">The number of the last page to include (1-based).</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32[])">
      <summary>
            Creates an instance of OutputRange that includes all pages with
            numbers specified in the list. The list may include Dash values to
            specify intervals.
            </summary>
      <param name="pageNumbers">The array of page numbers to include.</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.String)">
      <summary>
            Creates an instance of OutputRange that includes pages specified by the
            string parameter.
            The string may contain:
            - page numbers (1-based) separated by spaces or commas;
            - dashes ('-') to specify intervals (a dash at the end implies infinity).
            </summary>
      <param name="pages">The pages to be included.</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.AssignFrom(C1.C1Preview.OutputRange)">
      <summary>
            Copies values from another instance of OutputRange.
            </summary>
      <param name="source">The OutputRange to copy values from.</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Clone">
      <summary>
            Clones the current OutputRange.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.ToString">
      <summary>
            Returns a string that represents the current OutputRange.
            </summary>
      <returns>A string that represents the range.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetFirstPage">
      <summary>
            Returns the first page in the range.
            </summary>
      <returns>The number of the first page.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32)">
      <summary>
            Returns the page number in the range following the specified one, or
            -1 if the specified number was the last one.
            </summary>
      <param name="pageNumber">The current page number.</param>
      <returns>The next page number or -1 if there's none.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32,System.Int32@)">
      <summary>
            Returns the page number in the range following the specified one, or
            -1 if the specified number was the last one.
            </summary>
      <param name="pageNumber">The current page number.</param>
      <param name="cookie">A cookie used to avoid infinite loops in cases where the same page number appears in several ranges.
            Set this value to 0 before the first call to this method.</param>
      <returns>The next page number or -1 if there's none.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Contains(System.Int32)">
      <summary>
            Tests whether the specified page is within the range.
            </summary>
      <param name="pageNumber">The page number to test.</param>
      <returns>True if the page is in the range, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetEnumerator">
      <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
      <returns>The new enumerator.</returns>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Inverted">
      <summary>
            Gets or sets the value indicating whether the range should be inverted.
            If the range is inverted, the range's iterator goes from the end of the
            range backwards.
            </summary>
      <value>True if the range is inverted, false otherwise.</value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.MaxPageNumber">
      <summary>
            Gets or sets the absolute upper limit for page numbers in the range.
            </summary>
      <value>The upper limit value.</value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Type">
      <summary>
            Type of range: all pages, range of pages etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.PageNumbers">
      <summary>
            Gets the list of page numbers.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.PageCount">
      <summary>
            Gets the total number of pages in the range.
            Note that if the MaxPageNumber has not been set, this
            property will get int.MaxValue.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.FromPage">
      <summary>
            Gets the first page in the range.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.ToPage">
      <summary>
            Gets the last page in the range.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.All">
      <summary>
            Represents an all-inclusive range.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OutputRange.Enumerator">
      <summary>
            Allows to enumerate all pages in the range.
            Note: It is the client reesponsibility to take steps
            to avoid infinite loops if the OutputRange
            was created without specifying a valid MaxPageNumber.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.#ctor(C1.C1Preview.OutputRange)">
      <summary>
            Creates a new instance of the OutputRange enumerator.
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.Reset">
      <summary>
            Resets the enumerator.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.MoveNext">
      <summary>
            Moves to the next page number in the range.
            </summary>
      <returns>True if there are more pages in the range.</returns>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Enumerator.Current">
      <summary>
            Gets the current page number.
            </summary>
      <value>The current page number.</value>
    </member>
    <member name="T:C1.C1Preview.PageScalingEnum">
      <summary>
            Specifies the way pages are scaled during printing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.None">
      <summary>
            Pages are not scaled.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.FitToPaper">
      <summary>
            Pages are enlarged or made smaller if needed to fit paper.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.ReduceToPaper">
      <summary>
            Pages are made smaller if needed to fit paper.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PrintingUtil">
      <summary>
        <para>For internal use only.</para>
            A static class providing printing-related utilities.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPrintPage(System.Drawing.SizeF,System.Drawing.RectangleF,System.Int32,System.Drawing.SizeF,System.Drawing.RectangleF,C1.C1Preview.C1PrintOptions,System.Drawing.PointF@,System.Double@,System.Boolean@)">
      <summary>
            Calculates the page zoom factor and the location of the page (top/left)
            inside the printer paper size, according to the specified page scaling
            mode. All sizes should be in the same units.
            </summary>
      <param name="paperSize">Printer paper size.</param>
      <param name="printableArea">Printable area (depends on the printer).</param>
      <param name="landscapeAngle">Landscape angle supported by the printer (90 or 270).</param>
      <param name="pageSize">Document page size.</param>
      <param name="pageContent">Page content rectangle (pageSize sans the margins).</param>
      <param name="printOptions">Print options to use.</param>
      <param name="pageLocation">OUT: Page location relative to the paper top left.</param>
      <param name="pageZoom">OUT: Page zoom factor.</param>
      <param name="rotate">OUT: whether the page should be rotated
            (the angle is opposite to landscapeAngle).</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(C1.C1Preview.ResolvedPage,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>
            Layouts a resolved page of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
      <param name="rpage">The page to layout.</param>
      <param name="units">Target units.</param>
      <param name="dpiX">Target X resolution.</param>
      <param name="dpiY">Target Y resolution.</param>
      <param name="pageSize">OUT: Page size.</param>
      <param name="content">OUT: Content rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(System.Drawing.Image,System.Drawing.Printing.PageSettings,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>
            Layouts a page represented by an <see cref="T:System.Drawing.Image" />.
            </summary>
      <param name="page">The image of the page to layout.</param>
      <param name="pageSettings">The page settings to use.</param>
      <param name="units">Target units.</param>
      <param name="dpiX">Target X resolution.</param>
      <param name="dpiY">Target Y resolution.</param>
      <param name="pageSize">OUT: Page size.</param>
      <param name="content">OUT: Content rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.ShouldRotate(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
            Tests whether a page should be rotated to better fit paper.
            </summary>
      <param name="paperSize">The paper size.</param>
      <param name="pageSize">The page size.</param>
      <returns>
        <b>true</b> if the page should be rotated, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.RotatePaper(System.Int32,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>
            Rotates a paper size and the printable area within it by the specified angle.
            </summary>
      <param name="angle">The rotation angle, counterclockwise (valid values are <b>90</b> and <b>270</b>).</param>
      <param name="paperSize">The paper size.</param>
      <param name="printableArea">The printable area.</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.PaperRotationAngle(System.Int32)">
      <summary>
            Returns the paper rotation angle.
            </summary>
      <param name="pageRotationAngle">The page rotation angle, in degrees.</param>
      <returns>The paper rotation angle, in degrees.</returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.AdjustPaperSize(System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
            If paper kind of the passed page settings is <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, scans the paper sizes
            available on the specified printer, and if a match is found sets the paper
            size from the printer to the one in page settings.
            </summary>
      <param name="pageSettings">The page settings to adjust.</param>
      <param name="printerSettings">The target printer settings.</param>
      <returns>
        <b>true</b> if adjustment was made, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.IntPtr,System.Double@,System.Double@)">
      <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
      <param name="hdc">Handle to device context.</param>
      <param name="left">Left physical offset.</param>
      <param name="top">Top physical offset.</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.Drawing.Graphics,System.Double@,System.Double@)">
      <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
      <param name="g">The <see cref="T:System.Drawing.Graphics" /> on which the page is drawn.</param>
      <param name="left">OUT: Left physical offset.</param>
      <param name="top">OUT: Top physical offset.</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LandscapeAngle(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Gets the printer landscape angle.
            </summary>
      <param name="printerSettings">The printer settings to get the landscape angle for.
            If this parameter is <b>null</b> or invalid, <b>270</b> is returned.</param>
      <returns>The printer landscape angle.</returns>
    </member>
    <member name="T:C1.C1Preview.AreaResolvedInfo">
      <summary>
            Represents information about a resolved <see cref="T:C1.C1Preview.RenderArea" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.AreaResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>
            For internal use only.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.IsChildrenProcessing">
      <summary>
            Gets or sets a value indicating whether the children processing is currently under way.
            </summary>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.AutoSizeRequested">
      <summary>
            Gets or sets a value indicating whether auto size has been requested.
            </summary>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.AutoHeightResolved">
      <summary>
            Gets or sets a value indicating whether auto height has been resolved.
            </summary>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.AutoWidthResolved">
      <summary>
            Gets or sets a value indicating whether auto width has been resolved.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderGraphicsFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderGraphics" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderGraphicsFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderGraphicsFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderGraphicsFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="height">
      </param>
      <param name="width">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderGraphicsFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderGraphics" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderInputBase" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderInputFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderInputFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderInputFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="height">
      </param>
      <param name="width">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderInputFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderInputBase" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderShapeFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderShapeBase" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderShapeFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderShapeBase" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderShapeFragment.Shape">
      <summary>
            Gets the <see cref="T:C1.C1Preview.ShapeProps" /> object describing the geometric shape
            represented by the current fragment's <see cref="T:C1.C1Preview.RenderShapeBase" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderLineFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderLineBase" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderLineFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderLineFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderLineFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderLineFragment" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderLineFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderLineBase" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderLineFragment.Line">
      <summary>
            Gets the <see cref="T:C1.C1Preview.LinePropsBase" /> object describing the line
            represented by the current fragment's <see cref="T:C1.C1Preview.RenderLineBase" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRectangleFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderRectangle" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRectangleFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderRectangleFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderRectangleFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderRectangleFragment" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderRectangleFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderRectangle" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRectangleFragment.Rectangle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RectangleProps" /> object describing the line
            represented by the current fragment's <see cref="T:C1.C1Preview.RenderRectangle" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRoundRectangleFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderRoundRectangle" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRoundRectangleFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderRoundRectangle" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRoundRectangleFragment.RoundRectangle">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RoundRectangleProps" /> object describing the line
            represented by the current fragment's <see cref="T:C1.C1Preview.RenderRoundRectangle" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ShapeResolvedInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ShapeResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>
            For internal use only.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="T:C1.C1Preview.RenderTableFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderTable" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTableFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderTableFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderTableFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderTableFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTableFragment.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderFragment" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderTable" /> that produced the current fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.ColCount">
      <summary>
            Gets the number of columns in the current table fragment
            (i.e. on the current page or page column).
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RowCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.RowCount">
      <summary>
            Gets the number of rows in the current table fragment
            (i.e. on the current page or page column).
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.ColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount">
      <summary>
            Gets the number of rows in the table header at the top of the current fragment
            (i.e. on the current page or page column).
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RightFooterColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount">
      <summary>
            Gets the number of rows in the table footer at the bottom of the current fragment
            (i.e. on the current page or page column).
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RightFooterColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount">
      <summary>
            Gets the number of columns in the vertical table header on the left of the current fragment
            (i.e. on the current page or page column).
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RightFooterColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.RightFooterColCount">
      <summary>
            Gets the number of columns in the vertical table footer on the right of the current fragment
            (i.e. on the current page or page column).
            </summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount" />
    </member>
    <member name="T:C1.C1Preview.TitleResolvedInfo">
      <summary>
            For internal use only.
            Represents the resolved information about header/footer in table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Group">
      <summary>
            The TableVectorGroup object representing the title.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Objects">
      <summary>
            RenderFragments in header/footer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Ordinals">
      <summary>
            Ordinals of vectors in header/footer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Sizes">
      <summary>
            Sizes of vectors in header/footer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.IsAtEdge">
      <summary>
            Indicates whether the header/footer is at the edge of object (top / left / right / bottom).
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Size">
      <summary>
            The size of title, if title is at edge of object then this side
            does not include the additional space for gridline.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesCols">
      <summary>
            If RenderTable.RepeateGridLinesHorz == true then
            this list contains columns for which the grid lines ARE NOT REPEATED.
            If RenderTable.RepeateGridLinesHorz == false then
            this list contains columns for which the grid lines ARE REPEATED.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesRows">
      <summary>
            If RenderTable.RepeateGridLinesVert == true then
            this list contains rows for which the grid lines ARE NOT REPEATED.
            If RenderTable.RepeateGridLinesVert == false then
            this list contains rows for which the grid lines ARE REPEATED.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.VertPageHeader">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.VertPageFooter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzPageHeader">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzPageFooter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzColumnHeader">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzColumnFooter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedCols">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedRows">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>
            For internal use only.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.RowContainsCellsWithRepeatedGridLines(System.Boolean,System.Int32)">
      <summary>
            For internal use only.
            </summary>
      <param name="tableRepeatGridLinesHorz">
      </param>
      <param name="row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.ColContainsCellsWithRepeatedGridLines(System.Boolean,System.Int32)">
      <summary>
            For internal use only.
            </summary>
      <param name="tableRepeatGridLinesVert">
      </param>
      <param name="col">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.VertHeadersResolved">
      <summary>
            For internal use only.
            Gets or sets value indicating that the headers of table is resolved and
            VertPageHeade, VertPageFooter properties contains valid values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.HorzHeadersResolved">
      <summary>
            For internal use only.
            Gets or sets value indicating that the headers of table is resolved and
            HorzPageHeader, HorzPageFooter properties contains valid values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.ColsResolved">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.RowsResolved">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.GridLinesResolved">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.VectorsResolving">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVector">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.Ordinal">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.NormalSize">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.StretchedSize">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.Resizable">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVector.#ctor(System.Int32,System.Double,System.Boolean)">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection.Find(System.Int32)">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableSplitParams">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.ColHasRepeatedGridLines">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.RowHasRepeatedGridLines">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitVectorIndex">
      <summary>
            Index of vector in the _colsOrdinals or _rowsOrdinals array.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosWithinVector">
      <summary>
            Split position within vector it is zero if split position
            is between vectors.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.Header">
      <summary>
            Resolved info of repeated header.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.Footer">
      <summary>
            Resolved info of repeated footer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosArea">
      <summary>
            Defines area where split occurs.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableSplitParams.#ctor">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableSplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>
            For internal use only.
            </summary>
      <param name="source">
      </param>
    </member>
    <member name="P:C1.C1Preview.TableSplitParams.HeaderSize">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableSplitParams.FooterSize">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableSplitParams.SplitPosAreaEnum">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosAreaEnum.BeforeHeader">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosAreaEnum.BetweenHeaderFooter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosAreaEnum.AfterFooter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RefreshModeEnum">
      <summary>
            Describes the data and expressions refresh mode during document generation.  
            </summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.NoRefresh">
      <summary>
            Neither expressions nor data are refreshed.
            Note that if the document has not yet been generated, this mode is ignored
            (i.e. data is refreshed and expressions are calculated).
            </summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.RefreshDataBinding">
      <summary>
            Data is refreshed, all expressions are recalculated. 
            </summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.RefreshCalculatedValues">
      <summary>
            Expressions that do not reference data sources are recalculated,
            but data is not refreshed.
            Note that if the document has not yet been generated, this mode is ignored
            (i.e. data is refreshed).
            </summary>
    </member>
    <member name="T:C1.C1Preview.GenerateErrorEnum">
      <summary>
            Represents types of errors that can occur during document generation.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.None">
      <summary>
            No error.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.CyclicReference">
      <summary>
            The document contains a cyclic reference.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ResolvingDimension">
      <summary>
            A dimension of an object cannot be resolved.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoWidthNotSupproted">
      <summary>
            Auto width is not supported for an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoHeightNotSupproted">
      <summary>
            Auto height is not supported for an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoSizeNotSupported">
      <summary>
            Auto size is not supported for an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoLeftNotSupproted">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoTopNotSupproted">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.BottomRightNotSupported">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.InternalError">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.PageSettingsChanged">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.LayoutChange">
      <summary>
            Layout cannot be changed at that time.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.GeneratingMode">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.InadmissibleAction">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.Abort">
      <summary>
            Do not use.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.DataBinding">
      <summary>
            Error in data binding.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.Scripting">
      <summary>
            Scripting error.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ImportC1Report">
      <summary>
            C1Report import error.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ImportRdl">
      <summary>
            Rdl import error.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.Tags">
      <summary>
            Error in processing document's tags.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OffsetsD">
      <summary>
            Stores a set of four double numbers that represent the
            offsets from the edges of a rectangular area.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OffsetsD" /> structure.
            </summary>
      <param name="left">The left offset.</param>
      <param name="top">The top offset.</param>
      <param name="right">The right offset.</param>
      <param name="bottom">The bottom offset.</param>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OffsetsD" /> structure.
            </summary>
      <param name="offset">The same value for all offsets.</param>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:C1.C1Preview.OffsetsD" />.
            </summary>
      <returns>A string that represents the current <see cref="T:C1.C1Preview.OffsetsD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.Parse(System.String,C1.C1Preview.OffsetsD@,System.Boolean)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.OffsetsD" /> structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">OUT: The <see cref="T:C1.C1Preview.OffsetsD" /> structure.</param>
      <param name="throwException">Indicates whether an exception should be thrown if the string cannot be converted.</param>
      <returns>
        <b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.op_Implicit(C1.C1Preview.OffsetsI)~C1.C1Preview.OffsetsD">
      <summary>
            Converts an <see cref="T:C1.C1Preview.OffsetsI" /> to an <see cref="T:C1.C1Preview.OffsetsD" />.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Left">
      <summary>
            Gets or sets the left offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Top">
      <summary>
            Gets or sets the top offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Right">
      <summary>
            Gets or sets the right offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Bottom">
      <summary>
            Gets or sets the bottom offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.IsEmpty">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Preview.OffsetsD" /> is empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Empty">
      <summary>
            Represents an empty instance of the <see cref="T:C1.C1Preview.OffsetsD" /> structure.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OffsetsD.TypeConverter">
      <summary>
            Represents a type converter for <see cref="T:C1.C1Preview.OffsetsD" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.OffsetsD" />.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts an object to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The <see cref="T:C1.C1Preview.OffsetsD" /> to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="T:C1.C1Preview.OffsetsI">
      <summary>
            Stores a set of four integer numbers that represent the
            offsets from edges of rectangular area.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.OffsetsI" /> structure.
            </summary>
      <param name="left">The left offset.</param>
      <param name="top">The top offset.</param>
      <param name="right">The right offset.</param>
      <param name="bottom">The bottom offset.</param>
    </member>
    <member name="M:C1.C1Preview.OffsetsI.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:C1.C1Preview.OffsetsI" />.
            </summary>
      <returns>A string that represents the current <see cref="T:C1.C1Preview.OffsetsI" />.</returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsI.Ceiling(C1.C1Preview.OffsetsD)">
      <summary>
            Converts the specified <see cref="T:C1.C1Preview.OffsetsD" /> structure to an <see cref="T:C1.C1Preview.OffsetsI" /> by 
            rounding the <b>OffsetsD</b>'s double values to the next higher integer values. 
            </summary>
      <param name="value">The <see cref="T:C1.C1Preview.OffsetsD" /> structure to be converted.</param>
      <returns>The converted <see cref="T:C1.C1Preview.OffsetsI" /> structure.</returns>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Left">
      <summary>
            Gets or sets the left offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Top">
      <summary>
            Gets or sets the top offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Right">
      <summary>
            Gets or sets the right offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Bottom">
      <summary>
            Gets or sets the bottom offset.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.IsEmpty">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Preview.OffsetsI" /> is empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Empty">
      <summary>
            Represents an empty instance of the <see cref="T:C1.C1Preview.OffsetsI" /> structure.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PointD">
      <summary>
            Represents an ordered pair of <b>double</b> X and Y coordinates that defines a point 
            in a two-dimensional plane.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PointD.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PointD" /> structure.
            </summary>
      <param name="x">The horizontal position of the point.</param>
      <param name="y">The vertical position of the point.</param>
    </member>
    <member name="M:C1.C1Preview.PointD.ToString">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.PointD" /> to a human readable string. 
            </summary>
      <returns>A string that represents the current <see cref="T:C1.C1Preview.PointD" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Ceiling">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.PointD" /> structure to a <see cref="T:System.Drawing.Point" /> by rounding the 
            <b>double</b> coordinates to the next higher integer values. 
            </summary>
      <returns>The <see cref="T:System.Drawing.Point" /> structure this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Truncate">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.PointD" /> structure to a <see cref="T:System.Drawing.Point" /> by truncating
            the values of the Point object. 
            </summary>
      <returns>The <see cref="T:System.Drawing.Point" /> structure this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Offset(System.Double,System.Double)">
      <summary>
            Offsets the current <see cref="T:C1.C1Preview.PointD" /> structure by the specified values.
            </summary>
      <param name="dx">The horizontal offset.</param>
      <param name="dy">The vertical offset.</param>
    </member>
    <member name="M:C1.C1Preview.PointD.ToPointF">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.PointD" /> structure to a <see cref="T:System.Drawing.PointF" />.
            </summary>
      <returns>The <see cref="T:System.Drawing.PointF" /> structure this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Parse(System.String,C1.C1Preview.PointD@,System.Boolean)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.PointD" /> structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">OUT: the created <see cref="T:C1.C1Preview.PointD" /> structure.</param>
      <param name="throwException">Indicates whether an exception should be thrown if the string cannot be converted.</param>
      <returns>
        <b>true</b> if no error occurred, <b>false</b> otherwise (if <paramref name="throwException" /> is <b>false</b>).</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Add(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.SizeD" /> to a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="pt">The <see cref="T:C1.C1Preview.PointD" /> that is added.</param>
      <param name="sz">The <see cref="T:C1.C1Preview.SizeD" /> that is added.</param>
      <returns>A <see cref="T:C1.C1Preview.PointD" /> representing the result of the addition.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Substract(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
            Subtracts a <see cref="T:C1.C1Preview.SizeD" /> from a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="pt">The <see cref="T:C1.C1Preview.PointD" /> that is subtracted from.</param>
      <param name="sz">The <see cref="T:C1.C1Preview.SizeD" /> that is subtracted.</param>
      <returns>A <see cref="T:C1.C1Preview.PointD" /> representing the result of the subtraction.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Implicit(System.Drawing.Point)~C1.C1Preview.PointD">
      <summary>
            Converts a <see cref="T:System.Drawing.Point" /> to a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="value">The <see cref="T:System.Drawing.Point" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.PointD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Implicit(System.Drawing.PointF)~C1.C1Preview.PointD">
      <summary>
            Converts a <see cref="T:System.Drawing.PointF" /> to a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="value">The <see cref="T:System.Drawing.PointF" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.PointD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Explicit(C1.C1Preview.PointD)~C1.C1Preview.SizeD">
      <summary>
            Converts a <see cref="T:C1.C1Preview.PointD" /> to a <see cref="T:C1.C1Preview.SizeD" />.
            </summary>
      <param name="value">The <see cref="T:C1.C1Preview.PointD" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.SizeD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Addition(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.SizeD" /> to a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="pt">The <see cref="T:C1.C1Preview.PointD" /> that is added.</param>
      <param name="sz">The <see cref="T:C1.C1Preview.SizeD" /> that is added.</param>
      <returns>A <see cref="T:C1.C1Preview.PointD" /> representing the result of the addition.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Subtraction(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
            Subtracts a <see cref="T:C1.C1Preview.SizeD" /> from a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="pt">The <see cref="T:C1.C1Preview.PointD" /> that is subtracted from.</param>
      <param name="sz">The <see cref="T:C1.C1Preview.SizeD" /> that is subtracted.</param>
      <returns>A <see cref="T:C1.C1Preview.PointD" /> representing the result of the subtraction.</returns>
    </member>
    <member name="P:C1.C1Preview.PointD.X">
      <summary>
            Gets or sets the X coordinate of the current <see cref="T:C1.C1Preview.PointD" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PointD.Y">
      <summary>
            Gets or sets the Y coordinate of the current <see cref="T:C1.C1Preview.PointD" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PointD.IsEmpty">
      <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1Preview.PointD" /> is empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PointD.Empty">
      <summary>
            Represents an empty instance of the <see cref="T:C1.C1Preview.PointD" /> structure.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PointD.TypeConverter">
      <summary>
            Represents a type converter for <see cref="T:C1.C1Preview.PointD" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PointD.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.PointD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.PointD" /> to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The <see cref="T:C1.C1Preview.PointD" /> to convert.</param>
      <returns>The string representing the <see cref="T:C1.C1Preview.PointD" />.</returns>
    </member>
    <member name="T:C1.C1Preview.SizeD">
      <summary>
            Stores an ordered pair of <b>double</b> values, typically the width and height of a rectangle.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SizeD.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.SizeD" /> structure.
            </summary>
      <param name="width">The horizontal component of the <see cref="T:C1.C1Preview.SizeD" />.</param>
      <param name="height">The vertical component of the <see cref="T:C1.C1Preview.SizeD" />.</param>
    </member>
    <member name="M:C1.C1Preview.SizeD.ToString">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.SizeD" /> structure to a human-readable string representing it.
            </summary>
      <returns>The string representing the current <see cref="T:C1.C1Preview.SizeD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Ceiling">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.SizeD" /> structure to a <see cref="T:System.Drawing.Point" /> by rounding the 
            width and height to the next higher integer values. 
            </summary>
      <returns>The <see cref="T:System.Drawing.Size" /> structure this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Truncate">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.SizeD" /> structure to a <see cref="T:System.Drawing.Point" /> by truncating the 
            width and height to integer values. 
            </summary>
      <returns>The <see cref="T:System.Drawing.Size" /> structure this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Implicit(System.Drawing.Size)~C1.C1Preview.SizeD">
      <summary>
            Converts a <see cref="T:System.Drawing.Size" /> to a <see cref="T:C1.C1Preview.SizeD" />.
            </summary>
      <param name="value">The <see cref="T:System.Drawing.Size" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.SizeD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Implicit(System.Drawing.SizeF)~C1.C1Preview.SizeD">
      <summary>
            Converts a <see cref="T:System.Drawing.SizeF" /> to a <see cref="T:C1.C1Preview.SizeD" />.
            </summary>
      <param name="value">The <see cref="T:System.Drawing.SizeF" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.SizeD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Explicit(C1.C1Preview.SizeD)~C1.C1Preview.PointD">
      <summary>
            Converts a <see cref="T:C1.C1Preview.SizeD" /> to a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="value">The <see cref="T:C1.C1Preview.SizeD" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.PointD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Add(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
            Adds two <see cref="T:C1.C1Preview.SizeD" /> structures.
            </summary>
      <param name="sz1">The first <see cref="T:C1.C1Preview.SizeD" /> that is added.</param>
      <param name="sz2">The second <see cref="T:C1.C1Preview.SizeD" /> that is added.</param>
      <returns>A <see cref="T:C1.C1Preview.SizeD" /> representing the result of the addition.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Substract(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
            Subtracts one <see cref="T:C1.C1Preview.SizeD" /> structure from another.
            </summary>
      <param name="sz1">The <see cref="T:C1.C1Preview.SizeD" /> that is subtracted from.</param>
      <param name="sz2">The <see cref="T:C1.C1Preview.SizeD" /> that is subtracted.</param>
      <returns>A <see cref="T:C1.C1Preview.SizeD" /> representing the result of the subtraction.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Subtraction(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
            Subtracts one <see cref="T:C1.C1Preview.SizeD" /> structure from another.
            </summary>
      <param name="sz1">The <see cref="T:C1.C1Preview.SizeD" /> that is subtracted from.</param>
      <param name="sz2">The <see cref="T:C1.C1Preview.SizeD" /> that is subtracted.</param>
      <returns>A <see cref="T:C1.C1Preview.SizeD" /> representing the result of the subtraction.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Addition(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
            Adds two <see cref="T:C1.C1Preview.SizeD" /> structures.
            </summary>
      <param name="sz1">The first <see cref="T:C1.C1Preview.SizeD" /> that is added.</param>
      <param name="sz2">The second <see cref="T:C1.C1Preview.SizeD" /> that is added.</param>
      <returns>A <see cref="T:C1.C1Preview.SizeD" /> representing the result of the addition.</returns>
    </member>
    <member name="P:C1.C1Preview.SizeD.Width">
      <summary>
            Gets or sets the horizontal component of the current <see cref="T:C1.C1Preview.SizeD" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.Height">
      <summary>
            Gets or sets the vertical component of the current <see cref="T:C1.C1Preview.SizeD" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.IsEmpty">
      <summary>
            Gets a value indicating whether of the current <see cref="T:C1.C1Preview.SizeD" /> has zero <see cref="P:C1.C1Preview.SizeD.Width" /> and <see cref="P:C1.C1Preview.SizeD.Height" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.Empty">
      <summary>
            Represents an empty instance of the <see cref="T:C1.C1Preview.SizeD" /> structure.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RectangleD">
      <summary>
            Stores a set of four <b>double</b> values that represent the location and size of a rectangle.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RectangleD.#ctor(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
      <param name="location">The location (coordinates of the top left corner) of the rectangle.</param>
      <param name="size">The size of the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
      <param name="x">The X coordinate of the left side of the rectangle.</param>
      <param name="y">The Y coordinate of the top side of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.ToString">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.RectangleD" /> structure to a human-readable string representing it.
            </summary>
      <returns>The string representing the current <see cref="T:C1.C1Preview.RectangleD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.PointD)">
      <summary>
            Tests whether the specified point is contained within the current <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
      <param name="pt">The <see cref="T:C1.C1Preview.PointD" /> to test.</param>
      <returns>
        <b>true</b> if <paramref name="pt" /> is contained within the current <see cref="T:C1.C1Preview.RectangleD" /> structure,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.RectangleD)">
      <summary>
            Tests whether the specified rectangle is entirely contained within the current <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
      <param name="rc">The <see cref="T:C1.C1Preview.RectangleD" /> to test.</param>
      <returns>
        <b>true</b> if <paramref name="rc" /> is completely contained within the current <see cref="T:C1.C1Preview.RectangleD" /> structure,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(System.Double,System.Double)">
      <summary>
            Tests whether a point specified by its coordinates is contained within the current <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
      <param name="x">The X coordinate of the point to test.</param>
      <param name="y">The Y coordinate of the point to test.</param>
      <returns>
        <b>true</b> if the specified point is contained within the current <see cref="T:C1.C1Preview.RectangleD" /> structure,
            <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Inflates the current <see cref="T:C1.C1Preview.RectangleD" /> by the specified amounts on four sides.
            </summary>
      <param name="left">The amount to add on the left.</param>
      <param name="top">The amount to add at the top.</param>
      <param name="right">The amount to add on the right.</param>
      <param name="bottom">The amount to add on the bottom.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.SizeD)">
      <summary>
            Inflates the current <see cref="T:C1.C1Preview.RectangleD" /> by a specified <see cref="T:C1.C1Preview.SizeD" />.
            </summary>
      <param name="size">The <see cref="T:C1.C1Preview.SizeD" /> to inflate the current rectangle by.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double)">
      <summary>
            Inflates the current <see cref="T:C1.C1Preview.RectangleD" /> by specified horizontal and vertical amounts.
            </summary>
      <param name="x">The amount to add on the left and right of the current <see cref="T:C1.C1Preview.RectangleD" />.</param>
      <param name="y">The amount to add at the top and bottom of the current <see cref="T:C1.C1Preview.RectangleD" />.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD)">
      <summary>
            Replaces the current <see cref="T:C1.C1Preview.RectangleD" /> structure with the intersection
            of itself and another <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
      <param name="rect">The <see cref="T:C1.C1Preview.RectangleD" /> to intersect the current one with.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.IntersectsWith(C1.C1Preview.RectangleD)">
      <summary>
            Tests whether the current <see cref="T:C1.C1Preview.RectangleD" /> intersects with another.
            </summary>
      <param name="rc">The <see cref="T:C1.C1Preview.RectangleD" /> to test.</param>
      <returns>
        <b>true</b> if the current <see cref="T:C1.C1Preview.RectangleD" /> intersects with <paramref name="rc" />, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Offset(System.Double,System.Double)">
      <summary>
            Offsets the location of the current <see cref="T:C1.C1Preview.RectangleD" /> by specified horizontal and vertical amounts.
            </summary>
      <param name="x">The horizontal offset to apply.</param>
      <param name="y">The vertical offset to apply.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Offset(C1.C1Preview.PointD)">
      <summary>
            Offsets the location of the current <see cref="T:C1.C1Preview.RectangleD" /> by horizontal and vertical amounts specified by a <see cref="T:C1.C1Preview.PointD" />.
            </summary>
      <param name="pt">The <see cref="T:C1.C1Preview.PointD" /> specifying the horizontal and vertical offsets to apply.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.ToRectangleF">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.RectangleD" /> to a <see cref="T:System.Drawing.RectangleF" />.
            </summary>
      <returns>The converted <see cref="T:System.Drawing.RectangleF" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.ToRectangle">
      <summary>
            Converts the current <see cref="T:C1.C1Preview.RectangleD" /> to a <see cref="T:System.Drawing.Rectangle" />.
            </summary>
      <returns>The converted <see cref="T:System.Drawing.Rectangle" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.op_Implicit(System.Drawing.Rectangle)~C1.C1Preview.RectangleD">
      <summary>
            Converts a <see cref="T:System.Drawing.Rectangle" /> to a <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
      <param name="value">The <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.RectangleD" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.op_Implicit(System.Drawing.RectangleF)~C1.C1Preview.RectangleD">
      <summary>
            Converts a <see cref="T:System.Drawing.RectangleF" /> to a <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
      <param name="value">The <see cref="T:System.Drawing.RectangleF" /> to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.RectangleD" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Parse(System.String,C1.C1Preview.RectangleD@,System.Boolean)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">OUT: the created <see cref="T:C1.C1Preview.RectangleD" /> structure.</param>
      <param name="throwException">Indicates whether an exception should be thrown if the string cannot be converted.</param>
      <returns>
        <b>true</b> if no error occurred, <b>false</b> otherwise (if <paramref name="throwException" /> is <b>false</b>).</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:C1.C1Preview.RectangleD" /> structure based on the coordinates
            of its top-left and bottom-right corners.
            </summary>
      <param name="left">The X coordinate of the upper-left corner of the rectangular region.</param>
      <param name="top">The Y coordinate of the upper-left corner of the rectangular region.</param>
      <param name="right">The X coordinate of the lower-right corner of the rectangular region.</param>
      <param name="bottom">The Y coordinate of the lower-right corner of the rectangular region.</param>
      <returns>The newly created <see cref="T:C1.C1Preview.RectangleD" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.RectangleD,System.Double,System.Double)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RectangleD" /> structure from another <b>RectangleD</b>,
            inflated by the specified amounts vertically and horizontally.
            </summary>
      <param name="rc">The <see cref="T:C1.C1Preview.RectangleD" /> a copy of which is created and inflated.</param>
      <param name="x">The amount by which to inflate the resulting rectangle horizontally.</param>
      <param name="y">The amount by which to inflate the resulting rectangle vertically.</param>
      <returns>The newly created <see cref="T:C1.C1Preview.RectangleD" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RectangleD" /> structure representing the intersection
            of two <b>RectangleD</b> structures.
            (The intersection may be empty, in which case <see cref="P:C1.C1Preview.RectangleD.Empty" /> is returned.)
            </summary>
      <param name="a">The first <see cref="T:C1.C1Preview.RectangleD" /> to intersect.</param>
      <param name="b">The second <see cref="T:C1.C1Preview.RectangleD" /> to intersect.</param>
      <returns>The newly created <see cref="T:C1.C1Preview.RectangleD" /> structure.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Union(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>
            Creates a new <see cref="T:C1.C1Preview.RectangleD" /> structure representing the smallest possible
            rectangle containing the two specified rectangles.
            </summary>
      <param name="a">The first <see cref="T:C1.C1Preview.RectangleD" /> to combine.</param>
      <param name="b">The second <see cref="T:C1.C1Preview.RectangleD" /> to combine.</param>
      <returns>The newly created <see cref="T:C1.C1Preview.RectangleD" /> structure.</returns>
    </member>
    <member name="P:C1.C1Preview.RectangleD.X">
      <summary>
            Gets or sets the X coordinate of the top left corner of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Y">
      <summary>
            Gets or sets the Y coordinate of the top left corner of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Width">
      <summary>
            Gets or sets the width of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Height">
      <summary>
            Gets or sets the height of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Left">
      <summary>
            Gets the X coordinate of the left edge of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Top">
      <summary>
            Gets the Y coordinate of the top edge of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Right">
      <summary>
            Gets the X coordinate of the right edge of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Bottom">
      <summary>
            Gets the Y coordinate of the bottom edge of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Location">
      <summary>
            Gets or sets the coordinates of the top left corner of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Size">
      <summary>
            Gets or sets the size of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.IsEmpty">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.RectangleD.Width" /> and <see cref="P:C1.C1Preview.RectangleD.Height" />
            properties of the current <see cref="T:C1.C1Preview.RectangleD" /> structure have zero values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.TopLeft">
      <summary>
            Gets the coordinates of the top left corner of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.TopRight">
      <summary>
            Gets the coordinates of the top right corner of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.BottomRight">
      <summary>
            Gets the coordinates of the bottom right corner of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.BottomLeft">
      <summary>
            Gets the coordinates of the bottom left corner of the current <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Empty">
      <summary>
            Represents an empty instance of the <see cref="T:C1.C1Preview.RectangleD" /> structure.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RectangleD.TypeConverter">
      <summary>
            Represents a type converter for <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RectangleD.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
            Converts a string to a <see cref="T:C1.C1Preview.RectangleD" />.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="str">The string to convert.</param>
      <returns>The converted <see cref="T:C1.C1Preview.RectangleD" />.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Converts a <see cref="T:C1.C1Preview.RectangleD" /> to a string.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="o">The <see cref="T:C1.C1Preview.RectangleD" /> to convert.</param>
      <returns>The string representing the <see cref="T:C1.C1Preview.RectangleD" />.</returns>
    </member>
    <member name="T:C1.C1Preview.PageDrawParams">
      <summary>
            Defines parameters used to generate a metafile representing a <see cref="T:C1.C1Preview.C1Page" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.Whiten">
      <summary>
            Indicates whether to fill the page with white color before drawing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.RenderInputControls">
      <summary>
            Indicates whether to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />).
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.UseGdiToDrawLinesWhenPossible">
      <summary>
            Indicates whether to use GDI functions to draw lines, in this case
            PDF export works better.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.WriteMetafileComments">
      <summary>
            Indicates whether metafile comments can be used during page drawing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.EmfType">
      <summary>
            Specifies the metafile type.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.SmoothingMode">
      <summary>
            Smoothing mode used for drawing.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1Page">
      <summary>
            Represents a generated page of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1Page.Draw(System.Drawing.Graphics,C1.C1Preview.PageDrawParams)">
      <summary>
            Draws the current page on a <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="pdp">The draw parameters.</param>
    </member>
    <member name="M:C1.C1Preview.C1Page.Draw(System.Drawing.Graphics,System.Boolean,System.Boolean)">
      <summary>
            Draws the current page on a <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="renderInputControls">Indicates whether to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />).</param>
      <param name="writeMetafileComments">Indicates whether to draw metafile comments, like outlines, hyperlinks etc.</param>
    </member>
    <member name="M:C1.C1Preview.C1Page.Draw(System.Drawing.Graphics,System.Boolean)">
      <summary>
            Draws the current page on a <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="renderInputControls">Indicates whether to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />).</param>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.
            This method draws input controls.
            </summary>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.</returns>
      <seealso cref="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Boolean)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.
            </summary>
      <param name="renderInputControls">Indicates whether to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />).</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.</returns>
      <seealso cref="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Imaging.EmfType,System.Boolean)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.
            </summary>
      <param name="emfType">Specifies the metafile type.</param>
      <param name="whiten">Indicates whether to fill the page with white color before drawing.</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.
            </summary>
      <param name="referenceGraphics">Specifies the reference graphics for the metafile.</param>
      <param name="emfType">Specifies the metafile type.</param>
      <param name="whiten">Indicates whether to fill the page with white color before drawing.</param>
      <param name="renderInputControls">Indicates whether to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />).</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean,System.Drawing.Drawing2D.SmoothingMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.
            </summary>
      <param name="referenceGraphics">Specifies the reference graphics for the metafile.</param>
      <param name="emfType">Specifies the metafile type.</param>
      <param name="whiten">Indicates whether to fill the page with white color before drawing.</param>
      <param name="renderInputControls">Indicates whether to draw input controls (see <see cref="T:C1.C1Preview.RenderInputBase" />).</param>
      <param name="smoothingMode">Smoothing mode used for drawing.</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,C1.C1Preview.PageDrawParams)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.
            </summary>
      <param name="referenceGraphics">The reference graphics for the metafile.</param>
      <param name="pdp">The parameters used to draw the metafile.</param>
      <returns>The <see cref="T:System.Drawing.Imaging.Metafile" /> representing the current page.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
            Searches for a hyperlink at the specified position on the current page.
            </summary>
      <param name="ptPage">The position on the current page (in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units).</param>
      <returns>A <see cref="T:C1.C1Preview.C1HyperlinkInfo" /> object containing information about the link, or <b>null</b> if none was found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.FindFragment(C1.C1Preview.PointD)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.RenderFragment" /> at the specified position on the current page.
            </summary>
      <param name="ptPage">The position on the current page (in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units).</param>
      <returns>The <see cref="T:C1.C1Preview.RenderFragment" />, or <b>null</b> if none was found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.GetHyperlinks">
      <summary>
            Gets the collection of all hyperlinks on the current page.
            </summary>
      <returns>The <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" /> containing the information about the hyperlinks.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.GetInputFragments(System.Boolean)">
      <summary>
            Gets the array of all <see cref="T:C1.C1Preview.RenderInputFragment" /> objects on the current page.
            </summary>
      <returns>The array of <see cref="T:C1.C1Preview.RenderInputFragment" /> objects .</returns>
    </member>
    <member name="P:C1.C1Preview.C1Page.ID">
      <summary>
            Gets a unique ID associated with the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PageCollection" /> containing the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.AcceptButton">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderInputButton" /> representing the accept button for the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.X">
      <summary>
            Gets the logical horizontal coordinate of the current page in the document.
            This property is 0 in documents that have no horizontal pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Y">
      <summary>
            Gets the logical vertical coordinate of the current page in the document.
            In documents without horizontal pages, this property corresponds
            to the page number minus one.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.ResolvedInfo">
      <summary>
            Gets the <see cref="T:C1.C1Preview.PageResolvedInfo" /> object corresponding to the current page.
            After the current page has been resolved, this property allows to retrieve
            absolute values describing the geometry of the page, margins, and columns.
            <para>
            Note that if the current page has not been resolved yet,
            the value of this property is <b>null</b>, so you should always
            test it before accessing the nested properties.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.PageSettings">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PageSettings" /> for the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.PageNo">
      <summary>
            Gets or sets the logical 1-based page number of the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.PageCount">
      <summary>
            Gets or sets the logical page count.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> containing the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.HasFragments">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.C1Page.Fragments" /> collection for the current page
            has been initialized and contains one or more elements.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Fragments">
      <summary>
            Gets the collection of fragments for the current page.
            Note that accessing this property always initializes the <b>Fragments</b> collection
            if it has not been initialized yet. Use <see cref="P:C1.C1Preview.C1Page.HasFragments" /> to test whether
            the <b>Fragments</b> collection exists.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Index">
      <summary>
            Gets the 0-based index of the current page in the containing collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.IsEmpty">
      <summary>
            Gets a value indicating whether the current page contains any <see cref="T:C1.C1Preview.RenderFragment" /> objects
            that belong to the <see cref="P:C1.C1Preview.C1PrintDocument.Body" /> of the document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PageCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.C1Page" /> objects in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.Find(System.Int32,System.Int32)">
      <summary>
            Searches the current collection for a <see cref="T:C1.C1Preview.C1Page" />
            with the specified logical coordinates
            (identified by the <see cref="P:C1.C1Preview.C1Page.X" /> and <see cref="P:C1.C1Preview.C1Page.Y" /> properties
            on a page).
            </summary>
      <param name="pageX">Specifies the logical horizontal coordinate of the page.</param>
      <param name="pageY">Specifies the logical vertical coordinate of the page.</param>
      <returns>The <see cref="T:C1.C1Preview.C1Page" /> object that was found, or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.Find(System.Int32)">
      <summary>
            Searches the current collection for a <see cref="T:C1.C1Preview.C1Page" />
            with the specified logical page number.
            </summary>
      <param name="pageNo">Specifies the logical page number.</param>
      <returns>The <see cref="T:C1.C1Preview.C1Page" /> object that was found, or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the page with specified index from collection.
            </summary>
      <param name="index">The index of the page to remove.</param>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.Document">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1PrintDocument" /> containing the current page collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.Item(System.Int32)">
      <summary>
            Gets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MinPageNo">
      <summary>
            Gets the minimum logical page number in the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MaxPageNo">
      <summary>
            Gets the maximum logical page number in the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MaxPageX">
      <summary>
            Gets the maximum logical horizontal page coordinate in the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MaxPageY">
      <summary>
            Gets the maximum logical vertical page coordinate in the current collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.Count">
      <summary>
            Gets the count of elements in the collection.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBindingModeEnum">
      <summary>
            Flags defining data binding mode.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.None">
      <summary>
            The object is not data bound.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.List">
      <summary>
            The object is bound to a valid data source via its <see cref="P:C1.C1Preview.RenderObject.DataBinding" /> property.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.Internal">
      <summary>
            Some internal parts of the object are data bound,
            for example if a group of rows within a <b>RenderTable</b> is data bound, this flag is on.
            </summary>
    </member>
    <member name="T:C1.C1Preview.CalculatedValuesHashtable">
      <summary>
        <para>For internal use only.</para>
            Represents a <see cref="T:C1.C1Preview.PropsHashtable`1" /> of calculated
            (and optionally data dependent) values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.ClearDataIndependentValues">
      <summary>
            Clears values in the current <see cref="T:C1.C1Preview.CalculatedValuesHashtable" /> that are not data dependent).
            </summary>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.DeletePropValue(System.Int32)">
      <summary>
            Deletes a property value.
            </summary>
      <param name="propKey">The property key.</param>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.SetPropValue(System.Int32,System.Object,System.Boolean)">
      <summary>
            Sets a property value.
            </summary>
      <param name="propKey">The property key.</param>
      <param name="value">The property value.</param>
      <param name="dataDependent">
        <b>true</b> if the value is data dependent, <b>false</b> otherwise.</param>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.IsDataDependent(System.Int32)">
      <summary>
            Tests whether a property is data dependent.
            </summary>
      <param name="propKey">The property key.</param>
      <returns>
        <b>true</b> if the property is data dependent, <b>false</b> otherwise.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderFragmentCollection">
      <summary>
            Represents a collection of fragments (<see cref="T:C1.C1Preview.RenderFragment" />)
            of a <see cref="T:C1.C1Preview.RenderObject" />.
            All elements of this collection are sorted by <see cref="P:C1.C1Preview.RenderObject.ZOrder" />
            of the render object to perform drawing and searching.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
            Called when an element of the current collection is about to be set.
            </summary>
      <param name="index">The index of the element.</param>
      <param name="oldValue">The old value of the element.</param>
      <param name="newValue">The new value of the element.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObject(C1.C1Preview.RenderObject,System.Boolean)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.RenderFragment" /> in the current collection
            that was produced by a specific <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
      <param name="ro">The render object to search for.</param>
      <param name="findInChildren">If true then fragment also will be searched in the <see cref="P:C1.C1Preview.RenderFragment.Children" /> collections of the objects contained in this collection.</param>
      <returns>The fragment that was produced by <paramref name="ro" />, or <b>null</b> if it was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.IndexOf(C1.C1Preview.RenderFragment)">
      <summary>
            Gets the index of a <see cref="T:C1.C1Preview.RenderFragment" /> in the current collection.
            </summary>
      <param name="rf">The fragment to get the index of.</param>
      <returns>The index of the specified fragment.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObject(C1.C1Preview.RenderObject)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.RenderFragment" /> in the current collection
            that was produced by a specific <see cref="T:C1.C1Preview.RenderObject" />.
            </summary>
      <param name="ro">The render object to search for.</param>
      <returns>The fragment that was produced by <paramref name="ro" />, or <b>null</b> if it was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObjectName(System.String)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.RenderFragment" /> in the current collection
            that was produced by a <see cref="T:C1.C1Preview.RenderObject" /> with the specified <see cref="P:C1.C1Preview.RenderObject.Name" />.
            </summary>
      <param name="renderObjectName">The name to search for.</param>
      <returns>The fragment that was produced by the object with the specified name, or <b>null</b> if it was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObjectId(System.Int32)">
      <summary>
            Searches for a <see cref="T:C1.C1Preview.RenderFragment" /> in the current collection
            that was produced by a <see cref="T:C1.C1Preview.RenderObject" /> with the specified <see cref="P:C1.C1Preview.RenderObject.Id" />.
            </summary>
      <param name="renderObjectId">The <see cref="P:C1.C1Preview.RenderObject.Id" /> to search for.</param>
      <returns>The fragment that was produced by the object with the specified id, or <b>null</b> if it was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.Insert(System.Int32,C1.C1Preview.RenderFragment)">
      <summary>
            Inserts a <see cref="T:C1.C1Preview.RenderFragment" /> into the current collection
            at a specified index.
            </summary>
      <param name="index">The index at which to insert the fragment.</param>
      <param name="rf">The fragment to insert.</param>
    </member>
    <member name="P:C1.C1Preview.RenderFragmentCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderObjectList">
      <summary>
            Represents a simple <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:C1.C1Preview.RenderObject" /> objects.
            This list is used to store copies of an object produced by data binding.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DrawingFlagsEnum">
      <summary>
        <para>For internal use only.</para>
            Flags that allow a render object to manage its drawing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.None">
      <summary>
            No flags.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.UseGdiDrawing">
      <summary>
            GDI will be used for drawing. In this case the object must override the method:
            <code>
            protected virtual void InternalDraw(GraphicsUtils.GdiDc dc, RectangleD boundsRect, RectangleD drawingBoundsRect);
            </code>
            If this flag is not specified, GDI+ will be used instead and the object must override the method:
            <code>
            protected virtual void InternalDraw(Graphics graphics, RectangleD boundsRect, RectangleD drawingBoundsRect);
            </code></summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.SetClipping">
      <summary>
            Clipping will be defined before painting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.ContentIsEmpty">
      <summary>
            If specified then the object is not painted.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.OwnsChildDrawing">
      <summary>
            The standard painting of child objects is suppressed. The object must paint its children itself.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.BeginHyperlink">
      <summary>
            Special comment fields are added before and after fragment to the metafile,
            specifying that the content is a hyperlink.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitPos">
      <summary>
        <para>For internal use only.</para>
            Describes a split position.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.Pos">
      <summary>
            Position in object relative to the top or left edge of object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.SpaceForHardBreak">
      <summary>
            Space <b>after</b><see cref="F:C1.C1Preview.SplitPos.Pos" /> available for object if <see cref="F:C1.C1Preview.SplitPos.HardBreak" /> is <b>true</b>.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.HardBreak">
      <summary>
            Indicates that the break is "hard", i.e. the object must split exactly on <see cref="F:C1.C1Preview.SplitPos.Pos" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitPos.#ctor(System.Double,System.Boolean,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.SplitPos" /> structure.
            </summary>
      <param name="pos">A value to assign to <see cref="F:C1.C1Preview.SplitPos.Pos" />.</param>
      <param name="hardBreak">A value to assign to <see cref="F:C1.C1Preview.SplitPos.HardBreak" />.</param>
      <param name="spaceForHardBreak">A value to assign to <see cref="F:C1.C1Preview.SplitPos.SpaceForHardBreak" />.</param>
    </member>
    <member name="T:C1.C1Preview.DrawParams">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.DrawingFlags">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BoundsPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.ParentContentBoundsPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.InnerPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.PaddingPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BordersPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.SpacingPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.DrawInnerPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BackgroundPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BordersOffsetsPx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BorderClip">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.ContentClip">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.ChildrenClip">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BackgroundClip">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BorderClipRegion">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BorderPath">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.PageDrawParams">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DrawParams.CalcContentClip(System.Boolean,System.Drawing.Rectangle@)">
      <summary>
            For internal use only.
            </summary>
      <param name="applyInnerAreaClip">True means that content should be clipped by InnerPx (RenderObject.Clip is true or fragement splitted as picture</param>
      <param name="contentClip">Clipping rectangle.</param>
      <returns>Returns true if content is visible and should be drawn.</returns>
    </member>
    <member name="P:C1.C1Preview.DrawParams.SplitAsPicture">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.BordersVisible">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.BackgroundVisible">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.ContentVisible">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.ChildrenVisible">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.RenderInputControls">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.RenderChildren">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.WriteMetafileComments">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitContext">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.ColumnStarted">
      <summary>
            Indicates that the column is started on split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.IsPageAreaEmpty">
      <summary>
            New page area was started on split and maximum space for object currently available.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.CurPageArea">
      <summary>
            Current page area where object will be placed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.CurLeft">
      <summary>
            X coordinate of point on CurPageArea where object will be placed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.CurTop">
      <summary>
            Y coordinate of point on CurPageArea where object will be placed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.SaveResolvedInfo">
      <summary>
            Contains saved resolved information for objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.CountOfSplitNewPage">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ContainsSplitIfLarge">
      <summary>
            Returns true if exists newly added objects with SplitIfLarge option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ContainsSplitNewPage">
      <summary>
            Returns true if exists newly added objects with SplitNewPage option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplitIfLarge">
      <summary>
            Marks all objects with SplitIfLarge option as processed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplitNewPage">
      <summary>
            Marks all objects with SplitNewPage option as processed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitVert(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
      <summary>
            Go over all newly added fragments with SplitIfLarge option
            and check are they fit by vertical or not.
            Top defines the top bound for objects, it should be used instead of pageArea.Bounds.Bottom
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitHorz(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
      <summary>
            Go over all newly added fragments with SplitIfLarge option
            and check are they fit by horizontal or not.
            Left defines the left bound for objects, it should be used instead of pageArea.Bounds.Left
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsSplitIfLarge(C1.C1Preview.ISplitBehaviorObject)">
      <summary>
            Returns true if object was newly added and has SplitIfLarge option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsSplitNewPage(C1.C1Preview.ISplitBehaviorObject)">
      <summary>
            Returns true if object was newly added and has SplitNewPage option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsProcessed(C1.C1Preview.ISplitBehaviorObject)">
      <summary>
            Returns true if object has SplitIfLarge option and was marked as processed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.AddAsSplitIfLarge(C1.C1Preview.ISplitBehaviorObject)">
      <summary>
            For internal use only.
            </summary>
      <param name="sbo">
      </param>
    </member>
    <member name="M:C1.C1Preview.SplitContext.AddAsSplitNewPage(C1.C1Preview.ISplitBehaviorObject)">
      <summary>
            For internal use only.
            </summary>
      <param name="sbo">
      </param>
    </member>
    <member name="M:C1.C1Preview.SplitContext.AddAsProcessed(C1.C1Preview.ISplitBehaviorObject)">
      <summary>
            For internal use only.
            </summary>
      <param name="sbo">
      </param>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplit">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.GetSplitPos(C1.C1Preview.SplitPos@,System.Double,C1.C1Preview.Utils.FC)">
      <summary>
            For internal use only.
            </summary>
      <param name="pos">
      </param>
      <param name="maxPossibleSplitPos">
      </param>
      <param name="FC">
      </param>
    </member>
    <member name="T:C1.C1Preview.TextSplitParams">
      <summary>
            For internal use only.
            Defines the split parameters for textual objects - RenderText, RenderParagraph and RenderRichText.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextSplitParams.AllCharsFitted">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextSplitParams.IsNewParagraph">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextSplitParams.FittedCharCount">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TextSplitParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.TextSplitParams" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TextSplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.SplitParams" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="T:C1.C1Preview.RenderImageFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderImage" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderImageFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderImageFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderImageFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="height">
      </param>
      <param name="width">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="graphics">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderImageFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderImage" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRichTextFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderRichText" /> in a resolved <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.CreateSame">
      <summary>
            Creates new empty <see cref="T:C1.C1Preview.RenderRichTextFragment" /> object
            linked with same <see cref="P:C1.C1Preview.RenderRichTextFragment.RenderObject" /> as current object.
            </summary>
      <returns>New <see cref="T:C1.C1Preview.RenderRichTextFragment" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
            For internal use.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.GetDrawingFlags(System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="renderInputControls">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.InternalDraw(C1.C1Preview.GraphicsUtils.GdiDc,C1.C1Preview.DrawParams)">
      <summary>
            For internal use.
            </summary>
      <param name="dc">
      </param>
      <param name="drawParams">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.CreateSplitParams">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.FindVertSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.GetVertSplits(System.Collections.Generic.List{System.Double})">
      <summary>
            For internal use.
            </summary>
      <param name="splits">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.SplitHorzContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="newFragment">
      </param>
      <param name="p">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.SplitVertContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>
            For internal use.
            </summary>
      <param name="newFragment">
      </param>
      <param name="p">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.RenderFragment" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.RenderRichTextFragment.RenderObject">
      <summary>
            Gets the <see cref="T:C1.C1Preview.RenderRichText" /> that produced the current fragment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TextResolvedInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TextResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>
            For internal use only.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="T:C1.C1Preview.PageResolvedInfo">
      <summary>
            Provides properties that allow to retrieve information about
            a resolved <see cref="T:C1.C1Preview.C1Page" />, such as the actual absolute page size,
            absolute margin values and so on.
            All size and length values provided by this class are absolute,
            expressed in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.Page">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1Page" /> object associated with the current <see cref="T:C1.C1Preview.PageResolvedInfo" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageSize">
      <summary>
            Gets the total size of the current page, including margins (i.e. "paper size"),
            in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageBounds">
      <summary>
            Gets the area of the current page within the margins, relative to the
            left top corner of the page,
            in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageMargins">
      <summary>
            Gets the current page margins,
            in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.ColumnCount">
      <summary>
            Gets the number of columns on the current page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.ColumnBounds">
      <summary>
            Gets the array of <see cref="T:C1.C1Preview.RectangleD" /> values specifying
            the column bounds on the current page,
            in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            Column bounds do not include page margins,
            page header and footer areas, and gaps between the columns.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageHeaderBounds">
      <summary>
            Gets the bounds of the header area on the current page,
            in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageFooterBounds">
      <summary>
            Gets the bounds of the footer area on the current page,
            in <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" /> units.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageAreaBase">
      <summary>
            For internal use only.
            The base abstract class for all classes representing a resolved info about part of page:
            header, footer, body, column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Page">
      <summary>
            For internal use only.
            Gets a <see cref="T:C1.C1Preview.C1Page" /> object during resolving of that was produced this
            this <see cref="T:C1.C1Preview.PageAreaBase" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Document">
      <summary>
            Gets the C1PrintDocument object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Bounds">
      <summary>
            Gets the bounds of page area within page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageArea">
      <summary>
            For internal use only.
            The base abstract class representing a page area
            containg the nested <see cref="T:C1.C1Preview.PageColumn" /> objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageArea.ColumnCount">
      <summary>
            Gets the count of columns in this part of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageArea.Item(System.Int32)">
      <summary>
            Enumerates columns by index.
            </summary>
      <param name="index">Index of column.</param>
      <returns>Returns the PageColumn object representing column with specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.ChildPageArea">
      <summary>
            For internal use only.
            Represents the nested page area containg references to the parent.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ChildPageArea.#ctor(C1.C1Preview.PageArea)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageArea" /> class.
            </summary>
      <param name="parent">Parent <see cref="T:C1.C1Preview.PageArea" /> object.</param>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.ResolvedPage">
      <summary>
            Gets the ResolvedPage object containg this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.Page">
      <summary>
            For internal use only.
            Gets a <see cref="T:C1.C1Preview.C1Page" /> object during resolving of that was produced this
            this <see cref="T:C1.C1Preview.PageAreaBase" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.Parent">
      <summary>
            Gets the parent PageArea object containing this object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ResolvedPage">
      <summary>
            For internal use only.
            Describes the resolved layout of page.
            Page can be represented as a set of rectangle, each rectangle is a part of page
            (Header, Body or Footer), in turn a body of page consists of set of columns.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ResolvedPage.#ctor(C1.C1Preview.C1Page)">
      <summary>
            For internal use only.
            Initializes a new instance of the <see cref="T:C1.C1Preview.ResolvedPage" /> class.
            </summary>
      <param name="page">
        <see cref="T:C1.C1Preview.C1Page" /> object during resolving of that was produced this object.</param>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Page">
      <summary>
            Gets the Page object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Header">
      <summary>
            Gets the PageAreaHeader object representing the resolved info about header of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Footer">
      <summary>
            Gets the PageAreaFooter object representing the resolved info about footer of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Body">
      <summary>
            Gets the PageAreaBody object representing the resolved info about body of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.FullWidth">
      <summary>
            Gets the full width of the page, margins are not taken into account.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.FullHeight">
      <summary>
            Gets the full height of the page, margins are not taken into account.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageAreaBody">
      <summary>
            For internal use only.
            Represents the body of page - area excluding header and footer.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageAreaBody.#ctor(C1.C1Preview.PageArea)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.PageAreaBody" /> class.
            </summary>
      <param name="parent">The parent <see cref="T:C1.C1Preview.PageArea" /> object.</param>
    </member>
    <member name="M:C1.C1Preview.PageAreaBody.IndexOfColumn(C1.C1Preview.PageColumn)">
      <summary>
            For internal use only.
            Returns an index of ths specified <see cref="T:C1.C1Preview.PageColumn" /> object.
            </summary>
      <param name="column">
        <see cref="T:C1.C1Preview.PageColumn" /> object.</param>
      <returns>Returns an index of <see cref="T:C1.C1Preview.PageColumn" /> object.</returns>
    </member>
    <member name="P:C1.C1Preview.PageAreaBody.ColumnCount">
      <summary>
            Gets the count of columns in this part of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBody.Item(System.Int32)">
      <summary>
            Enumerates columns by index.
            </summary>
      <param name="index">Index of column.</param>
      <returns>Returns the PageColumn object representing column with specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.PageColumn">
      <summary>
            For internal use only.
            Represents the column resolved info.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumn.#ctor(C1.C1Preview.PageArea)">
      <summary>
            Initialized a new instance of the <see cref="T:C1.C1Preview.PageColumn" /> object.
            </summary>
      <param name="parent">Parent <see cref="T:C1.C1Preview.PageArea" /> object.</param>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Index">
      <summary>
            Index of column in the page part.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Parent">
      <summary>
            For internal use only.
            Gets the <see cref="T:C1.C1Preview.PageAreaBody" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.IsLast">
      <summary>
            Indicates whether the current column is a last column in its PageArea.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.IsFirst">
      <summary>
            Indicates whether the current column is a first column in its PageArea.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Next">
      <summary>
            Gets the next column, which goes after this column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Prev">
      <summary>
            Gets the previous column, which goes prior this column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RefDim">
      <summary>
            Internal, describes the dimensions of object.
            <para>
            Left, Top, Right, Bottom - Absolute coordinates on page.
            </para><para>
            RelLeft, RelTop, RelRight, RelBottom - Relative coordinates in parent.
            </para><para>
            ChildLeft, ChildTop, ChildRight, ChildBottom - Relative coordinates for child objects,
            ChildLeft and ChildTop are always 0,
            ChildRight = Width - SpacingLeft - SpacingRight - PaddingLeft - PaddingRight - BordersLeft - BordersRight
            </para><para>
            Width, Height - sizes of object.
            </para><para>
            ChildWidth, ChildHeight - sizes for child objects, for example, ChildWidth is
            Width - (SpacingLeft + BorderLeft + PaddingLeft) - (SpacingRight + BorderRight + PaddingRight).
            </para></summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.None">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Left">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Top">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Right">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Bottom">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelLeft">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelTop">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelRight">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelBottom">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildLeft">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildTop">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildRight">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildBottom">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Width">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Height">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildWidth">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildHeight">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingLeft">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingTop">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingRight">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingBottom">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderLeft">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderTop">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderRight">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderBottom">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingLeft">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingTop">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingRight">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingBottom">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.AutoWidth">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.AutoHeight">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RadiusX">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RadiusY">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Borders">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Spacing">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Padding">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Offsets">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.AbsCoord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelCoord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildCoord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.LeftCoord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.TopCoord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RightCoord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BottomCoord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Coord">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Size">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.WidthDim">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.HeightDim">
      <summary>For internal use only.</summary>
    </member>
    <member name="T:C1.C1Preview.UsageInfo">
      <summary>
            Represents information related to usage of a <see cref="T:C1.C1Preview.C1PrintDocument" />,
            such as the date and time when the document was last generated or printed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.UsageInfo" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.AssignFrom(C1.C1Preview.UsageInfo)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.UsageInfo" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.Clone">
      <summary>
            Creates a copy of the current <see cref="T:C1.C1Preview.UsageInfo" /> object.
            </summary>
      <returns>The newly created <see cref="T:C1.C1Preview.UsageInfo" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.Clear">
      <summary>
            Clears all data stored in the current <see cref="T:C1.C1Preview.UsageInfo" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.GeneratedDateTime">
      <summary>
            Gets or sets the date and time when a document was generated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.PrintedDateTime">
      <summary>
            Gets or sets the date and time when a document was printed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.LastPrinterName">
      <summary>
            Gets or sets the name of the printer on which a document was last printed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.LastFileName">
      <summary>
            Gets or sets the file name that was last used to save or load a document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1MetafileInfo">
      <summary>
        <para>For internal use only.</para>
            Contains addititional information about a metafile created by a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            In the metafile, the information is stored as a GDI comment record.
            The format of the record is described by the <see cref="T:C1.Util.Win.Win32.EMR_C1_METAFILE_INFO" /> structure.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1MetafileInfo" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1MetafileInfo" /> class.
            </summary>
      <param name="widthMm">The width of the metafile in mm.</param>
      <param name="heightMm">The height of the metafile in mm.</param>
      <param name="dpiX">The horizontal resolution (DPI).</param>
      <param name="dpiY">The vertical resolution (DPI).</param>
      <param name="isPrinter">Indicates whether the metafile was created on a printer DC.</param>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1MetafileInfo" /> class.
            </summary>
      <param name="widthMm">The width of the metafile in mm.</param>
      <param name="heightMm">The height of the metafile in mm.</param>
      <param name="dpiX">The horizontal resolution (DPI).</param>
      <param name="dpiY">The vertical resolution (DPI).</param>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.FromMetafileTag(System.String)">
      <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.C1MetafileInfo" /> from a serialized as a string object.
            </summary>
      <param name="tag">A previously serialized <see cref="T:C1.C1Preview.C1MetafileInfo" /> object.</param>
      <returns>The newly created <see cref="T:C1.C1Preview.C1MetafileInfo" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.ToMetafileTag">
      <summary>
            Serializes the current <see cref="T:C1.C1Preview.C1MetafileInfo" /> object into a string.
            </summary>
      <returns>The string representing the current <see cref="T:C1.C1Preview.C1MetafileInfo" /> object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.WriteToMetafile(System.Drawing.Graphics)">
      <summary>
            Writes the current <see cref="T:C1.C1Preview.C1MetafileInfo" /> object into a metafile's <see cref="T:System.Drawing.Graphics" />.
            </summary>
      <param name="graphics">The graphics created from a <see cref="T:System.Drawing.Imaging.Metafile" />.</param>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.WriteToMetafile(System.IntPtr)">
      <summary>
            Writes the current <see cref="T:C1.C1Preview.C1MetafileInfo" /> object into a metafile's device context.
            </summary>
      <param name="hdc">The DC created from a <see cref="T:System.Drawing.Imaging.Metafile" />.</param>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.WidthMm">
      <summary>
            Gets or sets the width of the metafile in mm.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.HeightMm">
      <summary>
            Gets or sets the height of the metafile in mm.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.DpiX">
      <summary>
            Gets or sets the horizontal resolution of the metafile (DPI).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.DpiY">
      <summary>
            Gets or sets the vertical resolution of the metafile (DPI).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.IsPrinter">
      <summary>
            Gets or sets a value indicating whether the metafile was created on a printer DC.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.WidthPx">
      <summary>
            Gets or sets the width of the metafile in device pixels.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.HeightPx">
      <summary>
            Gets or sets the height of the metafile in device pixels.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.WidthPoints">
      <summary>
            Gets or sets the width of the metafile in points.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.HeightPoints">
      <summary>
            Gets or sets the height of the metafile in points.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1MetafileInfoReader">
      <summary>
        <para>For internal use only.</para>
            Represents a reader that can read a <see cref="T:C1.C1Preview.C1MetafileInfo" /> from a metafile.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfoReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.C1MetafileInfoReader" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfoReader.ReadMetafileInfo(System.Drawing.Imaging.Metafile)">
      <summary>
            Enumerates a metafile searching for a GDI comment record containing
            a previously serialized <see cref="T:C1.C1Preview.C1MetafileInfo" /> object.
            If such a record is found, creates a new <see cref="T:C1.C1Preview.C1MetafileInfo" /> object,
            deserializes the record into that object, and returns it.
            </summary>
      <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile" /> to enumerate.</param>
      <returns>The deserialized <see cref="T:C1.C1Preview.C1MetafileInfo" /> object, or null if none was found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfoReader.Dispose">
      <summary>
            Disposes the current object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentFont">
      <summary>
            Describes a font used in a <see cref="T:C1.C1Preview.C1PrintDocument" />
            (see also <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />).
            </summary>
    </member>
    <member name="M:C1.C1Preview.DocumentFont.AssignFrom(C1.C1Preview.DocumentFont)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1Preview.DocumentFont" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Preview.DocumentFontCollection" /> containing the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.HasGlyphs">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.DocumentFont.Glyphs" /> collection is not empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Glyphs">
      <summary>
            Gets the array of glyphs that were rendered using the current font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.HasCodeRanges">
      <summary>
            Gets a value indicating whether the <see cref="P:C1.C1Preview.DocumentFont.CodeRanges" /> collection is not empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.CodeRanges">
      <summary>
            Gets the <see cref="P:C1.C1Preview.DocumentFont.CodeRanges" /> collection that defines glyphs that were rendered using the current font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontName">
      <summary>
            Gets the name of the font as specified by the user.
            <para>
            For fonts created automatically due to font substitution,
            this is still the name of the original specified font,
            not of the substitute font.
            </para></summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontFileName">
      <summary>
            Gets the name of the font file installed on the system or embedded in the document,
            that is actually used to render the glyphs.
            </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontFamilyName">
      <summary>
            Gets the actual font family name. This name may be used in API calls
            to create the corresponding font.
            <para>
            If <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" /> has been set to
            <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" /> or
            <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />,
            this name may differ from <see cref="P:C1.C1Preview.DocumentFont.FontName" />.
            </para></summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Bold">
      <summary>
            Gets a value indicating whether the current font is bold.
            </summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Italic" />
      <seealso cref="P:C1.C1Preview.DocumentFont.FontStyle" />
      <seealso cref="P:C1.C1Preview.DocumentFont.CoreFontBold" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Italic">
      <summary>
            Gets a value indicating whether the current font is italic.
            </summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Bold" />
      <seealso cref="P:C1.C1Preview.DocumentFont.FontStyle" />
      <seealso cref="P:C1.C1Preview.DocumentFont.CoreFontItalic" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.CoreFontBold">
      <summary>
            Gets a value indicating whether the underlying physical font is bold.
            </summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Bold" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.CoreFontItalic">
      <summary>
            Gets a value indicating whether the underlying physical font is italic.
            </summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Italic" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontStyle">
      <summary>
            Gets the <see cref="T:System.Drawing.FontStyle" /> of the current font.
            </summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Bold" />
      <seealso cref="P:C1.C1Preview.DocumentFont.Italic" />
    </member>
    <member name="T:C1.C1Preview.DocumentFontCollection">
      <summary>
            Represents the collection of <see cref="T:C1.C1Preview.DocumentFont" /> objects
            describing fonts used in a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            <para>
            See <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" /> for details on
            when and how this collection is populated.
            </para></summary>
    </member>
    <member name="M:C1.C1Preview.DocumentFontCollection.FindByName(System.String,System.Boolean,System.Boolean)">
      <summary>
            Finds a font in the current collection with the specified values
            of <see cref="P:C1.C1Preview.DocumentFont.FontName" />, <see cref="P:C1.C1Preview.DocumentFont.Bold" />
            and <see cref="P:C1.C1Preview.DocumentFont.Italic" /> properties.
            </summary>
      <param name="fontName">The <see cref="P:C1.C1Preview.DocumentFont.FontName" /> to search for.</param>
      <param name="bold">The <see cref="P:C1.C1Preview.DocumentFont.Bold" /> value to search for.</param>
      <param name="italic">The <see cref="P:C1.C1Preview.DocumentFont.Italic" /> value to search for.</param>
      <returns>The font with the specified properties, or <b>null</b>.</returns>
    </member>
    <member name="M:C1.C1Preview.DocumentFontCollection.FindByFamilyName(System.String,System.Boolean,System.Boolean)">
      <summary>
            Finds a font in the current collection with the specified values
            of <see cref="P:C1.C1Preview.DocumentFont.FontFamilyName" />, <see cref="P:C1.C1Preview.DocumentFont.Bold" />
            and <see cref="P:C1.C1Preview.DocumentFont.Italic" /> properties.
            </summary>
      <param name="fontFamilyName">The <see cref="P:C1.C1Preview.DocumentFont.FontFamilyName" /> to search for.</param>
      <param name="bold">The <see cref="P:C1.C1Preview.DocumentFont.Bold" /> value to search for.</param>
      <param name="italic">The <see cref="P:C1.C1Preview.DocumentFont.Italic" /> value to search for.</param>
      <returns>The font with the specified properties, or <b>null</b>.</returns>
    </member>
    <member name="P:C1.C1Preview.DocumentFontCollection.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:C1.C1Preview.DocumentFont" /> in the current collection by its index.
            </summary>
      <param name="index">The index of the <see cref="T:C1.C1Preview.DocumentFont" /> in the current collection.</param>
      <returns>The <see cref="T:C1.C1Preview.DocumentFont" /> with the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.DrawingUtil">
      <summary>
        <para>For internal use only.</para>
            Provides static drawing-related utility methods.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.CenterRect(System.Drawing.Size,System.Drawing.Rectangle)">
      <summary>
            Creates a <see cref="T:System.Drawing.Rectangle" /> with a specified size, centered within another rectangle.
            </summary>
      <param name="inner">The <see cref="T:System.Drawing.Size" /> of the rectangle that must be centered within <paramref name="outer" />.</param>
      <param name="outer">The outer <see cref="T:System.Drawing.Rectangle" /> within which to center the new rectangle.</param>
      <returns>The newly created and centered <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.CenterRect(System.Drawing.SizeF,System.Drawing.RectangleF)">
      <summary>
            Creates a <see cref="T:System.Drawing.RectangleF" /> with a specified size, centered within another rectangle.
            </summary>
      <param name="inner">The <see cref="T:System.Drawing.SizeF" /> of the rectangle that must be centered within <paramref name="outer" />.</param>
      <param name="outer">The outer <see cref="T:System.Drawing.RectangleF" /> within which to center the new rectangle.</param>
      <returns>The newly created and centered <see cref="T:System.Drawing.RectangleF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectCorner(System.Drawing.Rectangle,System.Int32)">
      <summary>
            Returns a <see cref="T:System.Drawing.Point" /> representing the specified corner of a <see cref="T:System.Drawing.Rectangle" />.
            </summary>
      <param name="r">The target rectangle.</param>
      <param name="corner">Integer identifying the corner to return:
            <b>0</b>: top left,
            <b>1</b>: top right,
            <b>2</b>: bottom right,
            <b>3</b>: bottom left.
            </param>
      <returns>The <see cref="T:System.Drawing.Point" /> representing the specified corner.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectangleToRectangleF(System.Drawing.Rectangle)">
      <summary>
            Converts a <see cref="T:System.Drawing.Rectangle" /> to a <see cref="T:System.Drawing.RectangleF" />.
            </summary>
      <param name="r">The <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
      <returns>The converted <see cref="T:System.Drawing.RectangleF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomRect(System.Drawing.Rectangle,System.Double)">
      <summary>
            Zooms (scales) a <see cref="T:System.Drawing.Rectangle" /> by a specified zoom factor.
            </summary>
      <param name="r">The <see cref="T:System.Drawing.Rectangle" /> to zoom.</param>
      <param name="zoomFactor">The zoom factor.</param>
      <returns>The scaled <see cref="T:System.Drawing.RectangleF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomRect(System.Drawing.RectangleF,System.Double)">
      <summary>
            Zooms (scales) a <see cref="T:System.Drawing.RectangleF" /> by a specified zoom factor.
            </summary>
      <param name="r">The <see cref="T:System.Drawing.RectangleF" /> to zoom.</param>
      <param name="zoomFactor">The zoom factor.</param>
      <returns>The scaled <see cref="T:System.Drawing.RectangleF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomRect(System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
            Zooms (scales) a <see cref="T:System.Drawing.RectangleF" /> by specified horizontal and vertical zoom factors.
            </summary>
      <param name="r">The <see cref="T:System.Drawing.RectangleF" /> to zoom.</param>
      <param name="zoomX">The horizontal zoom factor.</param>
      <param name="zoomY">The vertical zoom factor.</param>
      <returns>The scaled <see cref="T:System.Drawing.RectangleF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomSize(System.Drawing.SizeF,System.Double)">
      <summary>
            Zooms (scales) a <see cref="T:System.Drawing.SizeF" /> by a specified zoom factor.
            </summary>
      <param name="s">The <see cref="T:System.Drawing.SizeF" /> to zoom.</param>
      <param name="zoomFactor">The zoom factor.</param>
      <returns>The scaled <see cref="T:System.Drawing.SizeF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomSize(System.Drawing.SizeF,System.Double,System.Double)">
      <summary>
            Zooms (scales) a <see cref="T:System.Drawing.SizeF" /> by specified horizontal and vertical zoom factors.
            </summary>
      <param name="s">The <see cref="T:System.Drawing.SizeF" /> to zoom.</param>
      <param name="zoomX">The horizontal zoom factor.</param>
      <param name="zoomY">The vertical zoom factor.</param>
      <returns>The scaled <see cref="T:System.Drawing.SizeF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.PointFToPoint(System.Drawing.PointF)">
      <summary>
            Converts a <see cref="T:System.Drawing.PointF" /> to a <see cref="T:System.Drawing.Point" />.
            </summary>
      <param name="p">The <see cref="T:System.Drawing.PointF" /> to convert.</param>
      <returns>The converted <see cref="T:System.Drawing.Point" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectFromCorners(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Creates a new <see cref="T:System.Drawing.Rectangle" /> from two opposing corners.
            </summary>
      <param name="p1">The <see cref="T:System.Drawing.Point" /> identifying one of two opposing corners.</param>
      <param name="p2">The <see cref="T:System.Drawing.Point" /> identifying another of two opposing corners.</param>
      <returns>The newly created <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectFromCorners(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Creates a new <see cref="T:System.Drawing.RectangleF" /> from two opposing corners.
            </summary>
      <param name="p1">The <see cref="T:System.Drawing.PointF" /> identifying one of two opposing corners.</param>
      <param name="p2">The <see cref="T:System.Drawing.PointF" /> identifying another of two opposing corners.</param>
      <returns>The newly created <see cref="T:System.Drawing.RectangleF" />.</returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RotateSize(System.Drawing.SizeF)">
      <summary>
            Swaps the width and height of a <see cref="T:System.Drawing.Size" /> structure (rotates 90 degrees).
            </summary>
      <param name="s">The <see cref="T:System.Drawing.Size" /> to rotate.</param>
      <returns>The newly created <see cref="T:System.Drawing.Size" /> with width and height swapped.</returns>
    </member>
    <member name="T:C1.C1Preview.Util.FontInfo">
      <summary>
            Contains information about a particular True Type font.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.FontInfo.#ctor(C1.C1Preview.EmbeddedFont)">
      <summary>
            Creates a new instance of FontInfo for the specified <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
      <param name="ef">The font to get info for.</param>
    </member>
    <member name="M:C1.C1Preview.Util.FontInfo.#ctor(System.Drawing.Font)">
      <summary>
            Creates a new instance of FontInfo for the specified <see cref="T:System.Drawing.Font" />.
            </summary>
      <param name="font">The font to get info for.</param>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.EmSize">
      <summary>
            Gets the em size of the font, in font design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SubscriptSize">
      <summary>
            Gets the subscript size of the font, in font design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SuperscriptSize">
      <summary>
            Gets the superscript size of the font, in font design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SubscriptQuotient">
      <summary>
            Gets the subscript size quotient.
            Multiply the size of the font by this value to get the subscript size.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SuperscriptQuotient">
      <summary>
            Gets the superscript size quotient.
            Multiply the size of the font by this value to get the superscript size.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.StrikeoutPosition">
      <summary>
            Gets the strikeout position, relative to the baseline, in design units.
            Positive values are above the base line and negative values are below.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.UnderscorePosition">
      <summary>
            Gets the underscore position, relative to the baseline, in design units.
            Positive values are above the base line and negative values are below.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.UnderscoreThickness">
      <summary>
            Gets the underscore line thickness, in design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.CanEmbed">
      <summary>
            Gets the value indicating whether the font licensing allows embedding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.MustObfuscate">
      <summary>
            Gets the value indicating whether the font licensing requires obfuscating when embedded in XPS.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.ShouldObfuscate">
      <summary>
            Gets the value indicating whether the font should be obfuscated when embedded in XPS.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.CanSubset">
      <summary>
            Gets the value indicating whether the font licensing allows subsetting.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.MustRestrict">
      <summary>
            Gets the value indicating whether the font licensing restricts the font to read-only use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IMetafilePainter">
      <summary>
        <para>For internal use only.</para>
            This interface should be implemented by a class if it needs to customize
            the painting of metafiles in the
            <see cref="!:GraphicsUtils.DrawImage(Graphics,Image,RectangleF,RectangleF,IImageAlign,IMetafilePainter)" />
            method.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IMetafilePainter.DrawMetafile(System.Drawing.Graphics,System.Drawing.Imaging.Metafile,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            The implementation should draw the metafile.
            </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
      <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile" /> to draw.</param>
      <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
      <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
      <param name="width">The width of the drawn image.</param>
      <param name="height">The height of the drawn image.</param>
    </member>
    <member name="T:C1.C1Preview.C1MetafileCreator">
      <summary>
        <para>For internal use only.</para>
            Identifes the creator of a metafile.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1MetafileCreator.Unknown">
      <summary>
            The creator of a metafile is unknown.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1MetafileCreator.C1PrintDocument">
      <summary>
            The creator of a metafile is a <see cref="F:C1.C1Preview.C1MetafileCreator.C1PrintDocument" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.MetafileInfo">
      <summary>
        <para>For internal use only.</para>
            Contains information about a metafile.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.IsPrinter">
      <summary>
            Indicates whether the metafile is created from a printer DC.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.Creator">
      <summary>
            Gets the <see cref="T:C1.C1Preview.C1MetafileCreator" /> of the metafile.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.MetafileDpi">
      <summary>
            Gets the resolution of the metafile.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsDpi">
      <summary>
            Gets the DPI of the reference graphics which was used during metafile creation.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.MetafileSizePoints">
      <summary>
            Gets the size of the metafile, calculated using <see cref="F:C1.C1Preview.MetafileInfo.MetafileDpi" />.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsSizePoints">
      <summary>
            Gets the size of the metafile, calculated using <see cref="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsDpi" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Util.TextRunInfo">
      <summary>
            Represents information about a text run.
            All characters in the run must have the same formatting,
            and must not include line breaks.
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.TextRunInfo.#ctor(System.String,C1.C1Preview.RectangleD)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Util.TextRunInfo" /> class.
            </summary>
      <param name="text">Text run string.</param>
      <param name="rc">Text run rectangle</param>
    </member>
    <member name="P:C1.C1Preview.Util.TextRunInfo.Text">
      <summary>
            Gets the text run string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.TextRunInfo.Rectangle">
      <summary>
            Gets the text run rectangle.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Util.TextWordsRunInfo">
      <summary>
            Represents information about a text run.
            All characters in the run must have the same formatting,
            and must not include line breaks.
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.TextWordsRunInfo.#ctor(System.String,C1.C1Preview.RectangleD)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Util.TextRunInfo" /> class.
            </summary>
      <param name="text">Text run string.</param>
      <param name="rc">Text run rectangle</param>
    </member>
    <member name="P:C1.C1Preview.Util.TextWordsRunInfo.Words">
      <summary>
            Gets the collection of words within this text run.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Util.TextWordsRunInfo.WordInfo">
      <summary>
            Describes a word in the owner text run.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Util.TextWordsRunInfo.WordInfo.Offset">
      <summary>
            Offset of this word relative to the owner's left bound.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Util.TextWordsRunInfo.WordInfo.Position">
      <summary>
            Position of this word's first char in the owner's <see cref="P:C1.C1Preview.Util.TextRunInfo.Text" />.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Util.FoundTextEntry">
      <summary>
            Represents an instance of a found text.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.FoundTextEntry.#ctor">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.FoundTextEntry.AddRun(C1.C1Preview.RectangleD,System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="rc">
      </param>
      <param name="text">
      </param>
    </member>
    <member name="M:C1.C1Preview.Util.FoundTextEntry.GetRuns">
      <summary>
            For internal use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.IDesignerSettingPersistService">
      <summary>
            Specifies a service interface allowing external code to persist designer settings.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IDesignerSettingPersistService.Save(System.String,System.String)">
      <summary>
            Saves a string value with an arbitrary name.
            </summary>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:C1.C1Preview.IDesignerSettingPersistService.Load(System.String)">
      <summary>
            Loads a string value with an arbitrary name.
            </summary>
      <param name="name">The name.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:C1.C1Preview.ServiceBag">
      <summary>
            Specifies a simple service container/provider.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ServiceBag.AddService(System.Type,System.Object)">
      <summary>
            Adds (registers) a service.
            </summary>
      <param name="serviceType">The service type.</param>
      <param name="service">The service instance.</param>
    </member>
    <member name="M:C1.C1Preview.ServiceBag.RemoveService(System.Type)">
      <summary>
            Removes (deregisters) a service.
            </summary>
      <param name="serviceType">The service type.</param>
    </member>
    <member name="M:C1.C1Preview.ServiceBag.GetService(System.Type)">
      <summary>
            Retrieves a registered service.
            </summary>
      <param name="serviceType">The service type.</param>
      <returns>The service instance.</returns>
    </member>
    <member name="T:C1.C1Preview.Warning">
      <summary>
            Represents information about a potentially erroneous or conflicting situation
            that occurred during generation of a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Warning.#ctor(C1.C1Preview.GenerateErrorEnum,System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Warning" /> class.
            </summary>
      <param name="code">The code identifying the problem.</param>
      <param name="description">The human-readable problem description.</param>
      <param name="source">The object that triggered the problem.</param>
    </member>
    <member name="P:C1.C1Preview.Warning.Code">
      <summary>
            Gets the code identifying the problem.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Warning.Description">
      <summary>
            Gets the detailed description of the problem.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Warning.Source">
      <summary>
            Gets the object which triggered the error.
            </summary>
    </member>
    <member name="T:C1.C1Preview.WarningCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1Preview.Warning" /> objects.
            This is the type of the <see cref="P:C1.C1Preview.C1PrintDocument.Warnings" /> property
            on a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.WarningCollection.Add(C1.C1Preview.Warning)">
      <summary>
            Adds a <see cref="T:C1.C1Preview.Warning" /> object to the current collection.
            </summary>
      <param name="item">The warning to add.</param>
      <returns>The index of the added object in the current collection.</returns>
    </member>
    <member name="P:C1.C1Preview.WarningCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">The index in the current collection.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.ZoomSliderScale">
      <summary>
            A helper class that allows to use a slider control for a zoom factor value,
            placing zoom factor 1 (no zoom) in the middle of the slider control.
            </summary>
      <remarks>
            Consider a 2cm long slider used to set zoom values in the range from 0.1 to 10
            (i.e. from 10% to 1000%).
            Using <see cref="T:C1.C1Preview.ZoomSliderScale" />, the first centimeter of the slider
            will correspond to zoom values from 10% to 100%, and the second centimeter
            will correspond to zoom values from 100% to 1000%.
            On the other hand if a simple linear slider were used,
            all zoom values between 10% and 100% would have been squeezed into the
            first two millimeters of the slider, making it very hard to set those values.
            </remarks>
    </member>
    <member name="M:C1.C1Preview.ZoomSliderScale.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.ZoomSliderScale" /> class.
            </summary>
      <param name="minZoom">Minimum allowed zoom factor (must be less than 1; 1 means no zoom).</param>
      <param name="maxZoom">Maximum allowed zoom factor (must be greater than 1; 1 means no zoom).</param>
      <param name="minSlider">Minimum possible slider value.</param>
      <param name="maxSlider">Maximum possible slider value.</param>
    </member>
    <member name="M:C1.C1Preview.ZoomSliderScale.SliderValue(System.Double)">
      <summary>
            Converts a zoom factor to the corresponding slider value.
            </summary>
      <param name="zoomFactor">The zoom factor to convert (1 means no zoom).</param>
      <returns>The slider value.</returns>
    </member>
    <member name="M:C1.C1Preview.ZoomSliderScale.ZoomFactor(System.Int32)">
      <summary>
            Converts a slider value to the corresponding zoom factor.
            </summary>
      <param name="sliderValue">The slider value to convert.</param>
      <returns>The zoom factor (1 means no zoom).</returns>
    </member>
  </members>
</doc>